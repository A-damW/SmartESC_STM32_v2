
g30p.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010754  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd0  08010868  08010868  00020868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011438  08011438  00030504  2**0
                  CONTENTS
  4 .ARM          00000000  08011438  08011438  00030504  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011438  08011438  00030504  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011438  08011438  00021438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801143c  0801143c  0002143c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000504  20000000  08011440  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004018  20000508  08011944  00030508  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004520  08011944  00034520  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030504  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007b4b3  00000000  00000000  0003052d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000cb0f  00000000  00000000  000ab9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00030188  00000000  00000000  000b84ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000022f8  00000000  00000000  000e8678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000068d0  00000000  00000000  000ea970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026bfa  00000000  00000000  000f1240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0005044d  00000000  00000000  00117e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b7ef3  00000000  00000000  00168287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0022017a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007dc4  00000000  00000000  002201d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000508 	.word	0x20000508
 800012c:	00000000 	.word	0x00000000
 8000130:	0801084c 	.word	0x0801084c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000050c 	.word	0x2000050c
 800014c:	0801084c 	.word	0x0801084c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__gedf2>:
 8000900:	f04f 3cff 	mov.w	ip, #4294967295
 8000904:	e006      	b.n	8000914 <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__ledf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	e002      	b.n	8000914 <__cmpdf2+0x4>
 800090e:	bf00      	nop

08000910 <__cmpdf2>:
 8000910:	f04f 0c01 	mov.w	ip, #1
 8000914:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000918:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800091c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800092a:	d01b      	beq.n	8000964 <__cmpdf2+0x54>
 800092c:	b001      	add	sp, #4
 800092e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000932:	bf0c      	ite	eq
 8000934:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000938:	ea91 0f03 	teqne	r1, r3
 800093c:	bf02      	ittt	eq
 800093e:	ea90 0f02 	teqeq	r0, r2
 8000942:	2000      	moveq	r0, #0
 8000944:	4770      	bxeq	lr
 8000946:	f110 0f00 	cmn.w	r0, #0
 800094a:	ea91 0f03 	teq	r1, r3
 800094e:	bf58      	it	pl
 8000950:	4299      	cmppl	r1, r3
 8000952:	bf08      	it	eq
 8000954:	4290      	cmpeq	r0, r2
 8000956:	bf2c      	ite	cs
 8000958:	17d8      	asrcs	r0, r3, #31
 800095a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095e:	f040 0001 	orr.w	r0, r0, #1
 8000962:	4770      	bx	lr
 8000964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800096c:	d102      	bne.n	8000974 <__cmpdf2+0x64>
 800096e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000972:	d107      	bne.n	8000984 <__cmpdf2+0x74>
 8000974:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d1d6      	bne.n	800092c <__cmpdf2+0x1c>
 800097e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000982:	d0d3      	beq.n	800092c <__cmpdf2+0x1c>
 8000984:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_cdrcmple>:
 800098c:	4684      	mov	ip, r0
 800098e:	4610      	mov	r0, r2
 8000990:	4662      	mov	r2, ip
 8000992:	468c      	mov	ip, r1
 8000994:	4619      	mov	r1, r3
 8000996:	4663      	mov	r3, ip
 8000998:	e000      	b.n	800099c <__aeabi_cdcmpeq>
 800099a:	bf00      	nop

0800099c <__aeabi_cdcmpeq>:
 800099c:	b501      	push	{r0, lr}
 800099e:	f7ff ffb7 	bl	8000910 <__cmpdf2>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	bf48      	it	mi
 80009a6:	f110 0f00 	cmnmi.w	r0, #0
 80009aa:	bd01      	pop	{r0, pc}

080009ac <__aeabi_dcmpeq>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff fff4 	bl	800099c <__aeabi_cdcmpeq>
 80009b4:	bf0c      	ite	eq
 80009b6:	2001      	moveq	r0, #1
 80009b8:	2000      	movne	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmplt>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffea 	bl	800099c <__aeabi_cdcmpeq>
 80009c8:	bf34      	ite	cc
 80009ca:	2001      	movcc	r0, #1
 80009cc:	2000      	movcs	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmple>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffe0 	bl	800099c <__aeabi_cdcmpeq>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpge>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffce 	bl	800098c <__aeabi_cdrcmple>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpgt>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffc4 	bl	800098c <__aeabi_cdrcmple>
 8000a04:	bf34      	ite	cc
 8000a06:	2001      	movcc	r0, #1
 8000a08:	2000      	movcs	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_d2iz>:
 8000a10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a18:	d215      	bcs.n	8000a46 <__aeabi_d2iz+0x36>
 8000a1a:	d511      	bpl.n	8000a40 <__aeabi_d2iz+0x30>
 8000a1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a24:	d912      	bls.n	8000a4c <__aeabi_d2iz+0x3c>
 8000a26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a36:	fa23 f002 	lsr.w	r0, r3, r2
 8000a3a:	bf18      	it	ne
 8000a3c:	4240      	negne	r0, r0
 8000a3e:	4770      	bx	lr
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4a:	d105      	bne.n	8000a58 <__aeabi_d2iz+0x48>
 8000a4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a50:	bf08      	it	eq
 8000a52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_d2uiz>:
 8000a60:	004a      	lsls	r2, r1, #1
 8000a62:	d211      	bcs.n	8000a88 <__aeabi_d2uiz+0x28>
 8000a64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a68:	d211      	bcs.n	8000a8e <__aeabi_d2uiz+0x2e>
 8000a6a:	d50d      	bpl.n	8000a88 <__aeabi_d2uiz+0x28>
 8000a6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a74:	d40e      	bmi.n	8000a94 <__aeabi_d2uiz+0x34>
 8000a76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a82:	fa23 f002 	lsr.w	r0, r3, r2
 8000a86:	4770      	bx	lr
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	4770      	bx	lr
 8000a8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_d2uiz+0x3a>
 8000a94:	f04f 30ff 	mov.w	r0, #4294967295
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0000 	mov.w	r0, #0
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2f>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000aa8:	bf24      	itt	cs
 8000aaa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000aae:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ab2:	d90d      	bls.n	8000ad0 <__aeabi_d2f+0x30>
 8000ab4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ab8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000abc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ac0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ac4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac8:	bf08      	it	eq
 8000aca:	f020 0001 	biceq.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ad4:	d121      	bne.n	8000b1a <__aeabi_d2f+0x7a>
 8000ad6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ada:	bfbc      	itt	lt
 8000adc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	4770      	bxlt	lr
 8000ae2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ae6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aea:	f1c2 0218 	rsb	r2, r2, #24
 8000aee:	f1c2 0c20 	rsb	ip, r2, #32
 8000af2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af6:	fa20 f002 	lsr.w	r0, r0, r2
 8000afa:	bf18      	it	ne
 8000afc:	f040 0001 	orrne.w	r0, r0, #1
 8000b00:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b04:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b08:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b0c:	ea40 000c 	orr.w	r0, r0, ip
 8000b10:	fa23 f302 	lsr.w	r3, r3, r2
 8000b14:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b18:	e7cc      	b.n	8000ab4 <__aeabi_d2f+0x14>
 8000b1a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1e:	d107      	bne.n	8000b30 <__aeabi_d2f+0x90>
 8000b20:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b24:	bf1e      	ittt	ne
 8000b26:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b2a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b2e:	4770      	bxne	lr
 8000b30:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b34:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b38:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_frsub>:
 8000b40:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b44:	e002      	b.n	8000b4c <__addsf3>
 8000b46:	bf00      	nop

08000b48 <__aeabi_fsub>:
 8000b48:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b4c <__addsf3>:
 8000b4c:	0042      	lsls	r2, r0, #1
 8000b4e:	bf1f      	itttt	ne
 8000b50:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b54:	ea92 0f03 	teqne	r2, r3
 8000b58:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b5c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b60:	d06a      	beq.n	8000c38 <__addsf3+0xec>
 8000b62:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b66:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b6a:	bfc1      	itttt	gt
 8000b6c:	18d2      	addgt	r2, r2, r3
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	4048      	eorgt	r0, r1
 8000b72:	4041      	eorgt	r1, r0
 8000b74:	bfb8      	it	lt
 8000b76:	425b      	neglt	r3, r3
 8000b78:	2b19      	cmp	r3, #25
 8000b7a:	bf88      	it	hi
 8000b7c:	4770      	bxhi	lr
 8000b7e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b82:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b86:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b96:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4249      	negne	r1, r1
 8000b9e:	ea92 0f03 	teq	r2, r3
 8000ba2:	d03f      	beq.n	8000c24 <__addsf3+0xd8>
 8000ba4:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bac:	eb10 000c 	adds.w	r0, r0, ip
 8000bb0:	f1c3 0320 	rsb	r3, r3, #32
 8000bb4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bbc:	d502      	bpl.n	8000bc4 <__addsf3+0x78>
 8000bbe:	4249      	negs	r1, r1
 8000bc0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bc8:	d313      	bcc.n	8000bf2 <__addsf3+0xa6>
 8000bca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bce:	d306      	bcc.n	8000bde <__addsf3+0x92>
 8000bd0:	0840      	lsrs	r0, r0, #1
 8000bd2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd6:	f102 0201 	add.w	r2, r2, #1
 8000bda:	2afe      	cmp	r2, #254	; 0xfe
 8000bdc:	d251      	bcs.n	8000c82 <__addsf3+0x136>
 8000bde:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000be2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be6:	bf08      	it	eq
 8000be8:	f020 0001 	biceq.w	r0, r0, #1
 8000bec:	ea40 0003 	orr.w	r0, r0, r3
 8000bf0:	4770      	bx	lr
 8000bf2:	0049      	lsls	r1, r1, #1
 8000bf4:	eb40 0000 	adc.w	r0, r0, r0
 8000bf8:	3a01      	subs	r2, #1
 8000bfa:	bf28      	it	cs
 8000bfc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c00:	d2ed      	bcs.n	8000bde <__addsf3+0x92>
 8000c02:	fab0 fc80 	clz	ip, r0
 8000c06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c12:	bfaa      	itet	ge
 8000c14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c18:	4252      	neglt	r2, r2
 8000c1a:	4318      	orrge	r0, r3
 8000c1c:	bfbc      	itt	lt
 8000c1e:	40d0      	lsrlt	r0, r2
 8000c20:	4318      	orrlt	r0, r3
 8000c22:	4770      	bx	lr
 8000c24:	f092 0f00 	teq	r2, #0
 8000c28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c2c:	bf06      	itte	eq
 8000c2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c32:	3201      	addeq	r2, #1
 8000c34:	3b01      	subne	r3, #1
 8000c36:	e7b5      	b.n	8000ba4 <__addsf3+0x58>
 8000c38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c40:	bf18      	it	ne
 8000c42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c46:	d021      	beq.n	8000c8c <__addsf3+0x140>
 8000c48:	ea92 0f03 	teq	r2, r3
 8000c4c:	d004      	beq.n	8000c58 <__addsf3+0x10c>
 8000c4e:	f092 0f00 	teq	r2, #0
 8000c52:	bf08      	it	eq
 8000c54:	4608      	moveq	r0, r1
 8000c56:	4770      	bx	lr
 8000c58:	ea90 0f01 	teq	r0, r1
 8000c5c:	bf1c      	itt	ne
 8000c5e:	2000      	movne	r0, #0
 8000c60:	4770      	bxne	lr
 8000c62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c66:	d104      	bne.n	8000c72 <__addsf3+0x126>
 8000c68:	0040      	lsls	r0, r0, #1
 8000c6a:	bf28      	it	cs
 8000c6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c70:	4770      	bx	lr
 8000c72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c76:	bf3c      	itt	cc
 8000c78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bxcc	lr
 8000c7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8a:	4770      	bx	lr
 8000c8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c90:	bf16      	itet	ne
 8000c92:	4608      	movne	r0, r1
 8000c94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c98:	4601      	movne	r1, r0
 8000c9a:	0242      	lsls	r2, r0, #9
 8000c9c:	bf06      	itte	eq
 8000c9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ca2:	ea90 0f01 	teqeq	r0, r1
 8000ca6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000caa:	4770      	bx	lr

08000cac <__aeabi_ui2f>:
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e004      	b.n	8000cbc <__aeabi_i2f+0x8>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_i2f>:
 8000cb4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cb8:	bf48      	it	mi
 8000cba:	4240      	negmi	r0, r0
 8000cbc:	ea5f 0c00 	movs.w	ip, r0
 8000cc0:	bf08      	it	eq
 8000cc2:	4770      	bxeq	lr
 8000cc4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cc8:	4601      	mov	r1, r0
 8000cca:	f04f 0000 	mov.w	r0, #0
 8000cce:	e01c      	b.n	8000d0a <__aeabi_l2f+0x2a>

08000cd0 <__aeabi_ul2f>:
 8000cd0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd4:	bf08      	it	eq
 8000cd6:	4770      	bxeq	lr
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e00a      	b.n	8000cf4 <__aeabi_l2f+0x14>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_l2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cec:	d502      	bpl.n	8000cf4 <__aeabi_l2f+0x14>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	ea5f 0c01 	movs.w	ip, r1
 8000cf8:	bf02      	ittt	eq
 8000cfa:	4684      	moveq	ip, r0
 8000cfc:	4601      	moveq	r1, r0
 8000cfe:	2000      	moveq	r0, #0
 8000d00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d04:	bf08      	it	eq
 8000d06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d0e:	fabc f28c 	clz	r2, ip
 8000d12:	3a08      	subs	r2, #8
 8000d14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d18:	db10      	blt.n	8000d3c <__aeabi_l2f+0x5c>
 8000d1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1e:	4463      	add	r3, ip
 8000d20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d24:	f1c2 0220 	rsb	r2, r2, #32
 8000d28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d30:	eb43 0002 	adc.w	r0, r3, r2
 8000d34:	bf08      	it	eq
 8000d36:	f020 0001 	biceq.w	r0, r0, #1
 8000d3a:	4770      	bx	lr
 8000d3c:	f102 0220 	add.w	r2, r2, #32
 8000d40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_fmul>:
 8000d5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d64:	bf1e      	ittt	ne
 8000d66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d6a:	ea92 0f0c 	teqne	r2, ip
 8000d6e:	ea93 0f0c 	teqne	r3, ip
 8000d72:	d06f      	beq.n	8000e54 <__aeabi_fmul+0xf8>
 8000d74:	441a      	add	r2, r3
 8000d76:	ea80 0c01 	eor.w	ip, r0, r1
 8000d7a:	0240      	lsls	r0, r0, #9
 8000d7c:	bf18      	it	ne
 8000d7e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d82:	d01e      	beq.n	8000dc2 <__aeabi_fmul+0x66>
 8000d84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d88:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d8c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d90:	fba0 3101 	umull	r3, r1, r0, r1
 8000d94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d98:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d9c:	bf3e      	ittt	cc
 8000d9e:	0049      	lslcc	r1, r1, #1
 8000da0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da4:	005b      	lslcc	r3, r3, #1
 8000da6:	ea40 0001 	orr.w	r0, r0, r1
 8000daa:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dae:	2afd      	cmp	r2, #253	; 0xfd
 8000db0:	d81d      	bhi.n	8000dee <__aeabi_fmul+0x92>
 8000db2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000db6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dba:	bf08      	it	eq
 8000dbc:	f020 0001 	biceq.w	r0, r0, #1
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dca:	bf08      	it	eq
 8000dcc:	0249      	lsleq	r1, r1, #9
 8000dce:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dd2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd6:	3a7f      	subs	r2, #127	; 0x7f
 8000dd8:	bfc2      	ittt	gt
 8000dda:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dde:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000de2:	4770      	bxgt	lr
 8000de4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de8:	f04f 0300 	mov.w	r3, #0
 8000dec:	3a01      	subs	r2, #1
 8000dee:	dc5d      	bgt.n	8000eac <__aeabi_fmul+0x150>
 8000df0:	f112 0f19 	cmn.w	r2, #25
 8000df4:	bfdc      	itt	le
 8000df6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dfa:	4770      	bxle	lr
 8000dfc:	f1c2 0200 	rsb	r2, r2, #0
 8000e00:	0041      	lsls	r1, r0, #1
 8000e02:	fa21 f102 	lsr.w	r1, r1, r2
 8000e06:	f1c2 0220 	rsb	r2, r2, #32
 8000e0a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e12:	f140 0000 	adc.w	r0, r0, #0
 8000e16:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e1a:	bf08      	it	eq
 8000e1c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e20:	4770      	bx	lr
 8000e22:	f092 0f00 	teq	r2, #0
 8000e26:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0040      	lsleq	r0, r0, #1
 8000e2e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e32:	3a01      	subeq	r2, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xce>
 8000e36:	ea40 000c 	orr.w	r0, r0, ip
 8000e3a:	f093 0f00 	teq	r3, #0
 8000e3e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	bf02      	ittt	eq
 8000e44:	0049      	lsleq	r1, r1, #1
 8000e46:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e4a:	3b01      	subeq	r3, #1
 8000e4c:	d0f9      	beq.n	8000e42 <__aeabi_fmul+0xe6>
 8000e4e:	ea41 010c 	orr.w	r1, r1, ip
 8000e52:	e78f      	b.n	8000d74 <__aeabi_fmul+0x18>
 8000e54:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e58:	ea92 0f0c 	teq	r2, ip
 8000e5c:	bf18      	it	ne
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d00a      	beq.n	8000e7a <__aeabi_fmul+0x11e>
 8000e64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e68:	bf18      	it	ne
 8000e6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e6e:	d1d8      	bne.n	8000e22 <__aeabi_fmul+0xc6>
 8000e70:	ea80 0001 	eor.w	r0, r0, r1
 8000e74:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e78:	4770      	bx	lr
 8000e7a:	f090 0f00 	teq	r0, #0
 8000e7e:	bf17      	itett	ne
 8000e80:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e84:	4608      	moveq	r0, r1
 8000e86:	f091 0f00 	teqne	r1, #0
 8000e8a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e8e:	d014      	beq.n	8000eba <__aeabi_fmul+0x15e>
 8000e90:	ea92 0f0c 	teq	r2, ip
 8000e94:	d101      	bne.n	8000e9a <__aeabi_fmul+0x13e>
 8000e96:	0242      	lsls	r2, r0, #9
 8000e98:	d10f      	bne.n	8000eba <__aeabi_fmul+0x15e>
 8000e9a:	ea93 0f0c 	teq	r3, ip
 8000e9e:	d103      	bne.n	8000ea8 <__aeabi_fmul+0x14c>
 8000ea0:	024b      	lsls	r3, r1, #9
 8000ea2:	bf18      	it	ne
 8000ea4:	4608      	movne	r0, r1
 8000ea6:	d108      	bne.n	8000eba <__aeabi_fmul+0x15e>
 8000ea8:	ea80 0001 	eor.w	r0, r0, r1
 8000eac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000eb0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000eb4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000eb8:	4770      	bx	lr
 8000eba:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ebe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ec2:	4770      	bx	lr

08000ec4 <__aeabi_fdiv>:
 8000ec4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ec8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ecc:	bf1e      	ittt	ne
 8000ece:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ed2:	ea92 0f0c 	teqne	r2, ip
 8000ed6:	ea93 0f0c 	teqne	r3, ip
 8000eda:	d069      	beq.n	8000fb0 <__aeabi_fdiv+0xec>
 8000edc:	eba2 0203 	sub.w	r2, r2, r3
 8000ee0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee4:	0249      	lsls	r1, r1, #9
 8000ee6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eea:	d037      	beq.n	8000f5c <__aeabi_fdiv+0x98>
 8000eec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ef0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000efc:	428b      	cmp	r3, r1
 8000efe:	bf38      	it	cc
 8000f00:	005b      	lslcc	r3, r3, #1
 8000f02:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f06:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	bf24      	itt	cs
 8000f0e:	1a5b      	subcs	r3, r3, r1
 8000f10:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f14:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f18:	bf24      	itt	cs
 8000f1a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f22:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f26:	bf24      	itt	cs
 8000f28:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f30:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f34:	bf24      	itt	cs
 8000f36:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f3a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	bf18      	it	ne
 8000f42:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f46:	d1e0      	bne.n	8000f0a <__aeabi_fdiv+0x46>
 8000f48:	2afd      	cmp	r2, #253	; 0xfd
 8000f4a:	f63f af50 	bhi.w	8000dee <__aeabi_fmul+0x92>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f54:	bf08      	it	eq
 8000f56:	f020 0001 	biceq.w	r0, r0, #1
 8000f5a:	4770      	bx	lr
 8000f5c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f60:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f64:	327f      	adds	r2, #127	; 0x7f
 8000f66:	bfc2      	ittt	gt
 8000f68:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f6c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f70:	4770      	bxgt	lr
 8000f72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f76:	f04f 0300 	mov.w	r3, #0
 8000f7a:	3a01      	subs	r2, #1
 8000f7c:	e737      	b.n	8000dee <__aeabi_fmul+0x92>
 8000f7e:	f092 0f00 	teq	r2, #0
 8000f82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0040      	lsleq	r0, r0, #1
 8000f8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f8e:	3a01      	subeq	r2, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xc2>
 8000f92:	ea40 000c 	orr.w	r0, r0, ip
 8000f96:	f093 0f00 	teq	r3, #0
 8000f9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f9e:	bf02      	ittt	eq
 8000fa0:	0049      	lsleq	r1, r1, #1
 8000fa2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fa6:	3b01      	subeq	r3, #1
 8000fa8:	d0f9      	beq.n	8000f9e <__aeabi_fdiv+0xda>
 8000faa:	ea41 010c 	orr.w	r1, r1, ip
 8000fae:	e795      	b.n	8000edc <__aeabi_fdiv+0x18>
 8000fb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb4:	ea92 0f0c 	teq	r2, ip
 8000fb8:	d108      	bne.n	8000fcc <__aeabi_fdiv+0x108>
 8000fba:	0242      	lsls	r2, r0, #9
 8000fbc:	f47f af7d 	bne.w	8000eba <__aeabi_fmul+0x15e>
 8000fc0:	ea93 0f0c 	teq	r3, ip
 8000fc4:	f47f af70 	bne.w	8000ea8 <__aeabi_fmul+0x14c>
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e776      	b.n	8000eba <__aeabi_fmul+0x15e>
 8000fcc:	ea93 0f0c 	teq	r3, ip
 8000fd0:	d104      	bne.n	8000fdc <__aeabi_fdiv+0x118>
 8000fd2:	024b      	lsls	r3, r1, #9
 8000fd4:	f43f af4c 	beq.w	8000e70 <__aeabi_fmul+0x114>
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e76e      	b.n	8000eba <__aeabi_fmul+0x15e>
 8000fdc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fe0:	bf18      	it	ne
 8000fe2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fe6:	d1ca      	bne.n	8000f7e <__aeabi_fdiv+0xba>
 8000fe8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fec:	f47f af5c 	bne.w	8000ea8 <__aeabi_fmul+0x14c>
 8000ff0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ff4:	f47f af3c 	bne.w	8000e70 <__aeabi_fmul+0x114>
 8000ff8:	e75f      	b.n	8000eba <__aeabi_fmul+0x15e>
 8000ffa:	bf00      	nop

08000ffc <__gesf2>:
 8000ffc:	f04f 3cff 	mov.w	ip, #4294967295
 8001000:	e006      	b.n	8001010 <__cmpsf2+0x4>
 8001002:	bf00      	nop

08001004 <__lesf2>:
 8001004:	f04f 0c01 	mov.w	ip, #1
 8001008:	e002      	b.n	8001010 <__cmpsf2+0x4>
 800100a:	bf00      	nop

0800100c <__cmpsf2>:
 800100c:	f04f 0c01 	mov.w	ip, #1
 8001010:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001014:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001018:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800101c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001020:	bf18      	it	ne
 8001022:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001026:	d011      	beq.n	800104c <__cmpsf2+0x40>
 8001028:	b001      	add	sp, #4
 800102a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800102e:	bf18      	it	ne
 8001030:	ea90 0f01 	teqne	r0, r1
 8001034:	bf58      	it	pl
 8001036:	ebb2 0003 	subspl.w	r0, r2, r3
 800103a:	bf88      	it	hi
 800103c:	17c8      	asrhi	r0, r1, #31
 800103e:	bf38      	it	cc
 8001040:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001044:	bf18      	it	ne
 8001046:	f040 0001 	orrne.w	r0, r0, #1
 800104a:	4770      	bx	lr
 800104c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001050:	d102      	bne.n	8001058 <__cmpsf2+0x4c>
 8001052:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001056:	d105      	bne.n	8001064 <__cmpsf2+0x58>
 8001058:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800105c:	d1e4      	bne.n	8001028 <__cmpsf2+0x1c>
 800105e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001062:	d0e1      	beq.n	8001028 <__cmpsf2+0x1c>
 8001064:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop

0800106c <__aeabi_cfrcmple>:
 800106c:	4684      	mov	ip, r0
 800106e:	4608      	mov	r0, r1
 8001070:	4661      	mov	r1, ip
 8001072:	e7ff      	b.n	8001074 <__aeabi_cfcmpeq>

08001074 <__aeabi_cfcmpeq>:
 8001074:	b50f      	push	{r0, r1, r2, r3, lr}
 8001076:	f7ff ffc9 	bl	800100c <__cmpsf2>
 800107a:	2800      	cmp	r0, #0
 800107c:	bf48      	it	mi
 800107e:	f110 0f00 	cmnmi.w	r0, #0
 8001082:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001084 <__aeabi_fcmpeq>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff fff4 	bl	8001074 <__aeabi_cfcmpeq>
 800108c:	bf0c      	ite	eq
 800108e:	2001      	moveq	r0, #1
 8001090:	2000      	movne	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmplt>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffea 	bl	8001074 <__aeabi_cfcmpeq>
 80010a0:	bf34      	ite	cc
 80010a2:	2001      	movcc	r0, #1
 80010a4:	2000      	movcs	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmple>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffe0 	bl	8001074 <__aeabi_cfcmpeq>
 80010b4:	bf94      	ite	ls
 80010b6:	2001      	movls	r0, #1
 80010b8:	2000      	movhi	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpge>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffd2 	bl	800106c <__aeabi_cfrcmple>
 80010c8:	bf94      	ite	ls
 80010ca:	2001      	movls	r0, #1
 80010cc:	2000      	movhi	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmpgt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffc8 	bl	800106c <__aeabi_cfrcmple>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpun>:
 80010e8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010f4:	d102      	bne.n	80010fc <__aeabi_fcmpun+0x14>
 80010f6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010fa:	d108      	bne.n	800110e <__aeabi_fcmpun+0x26>
 80010fc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001100:	d102      	bne.n	8001108 <__aeabi_fcmpun+0x20>
 8001102:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001106:	d102      	bne.n	800110e <__aeabi_fcmpun+0x26>
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	f04f 0001 	mov.w	r0, #1
 8001112:	4770      	bx	lr

08001114 <__aeabi_f2iz>:
 8001114:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001118:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800111c:	d30f      	bcc.n	800113e <__aeabi_f2iz+0x2a>
 800111e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001122:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001126:	d90d      	bls.n	8001144 <__aeabi_f2iz+0x30>
 8001128:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800112c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001130:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001134:	fa23 f002 	lsr.w	r0, r3, r2
 8001138:	bf18      	it	ne
 800113a:	4240      	negne	r0, r0
 800113c:	4770      	bx	lr
 800113e:	f04f 0000 	mov.w	r0, #0
 8001142:	4770      	bx	lr
 8001144:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001148:	d101      	bne.n	800114e <__aeabi_f2iz+0x3a>
 800114a:	0242      	lsls	r2, r0, #9
 800114c:	d105      	bne.n	800115a <__aeabi_f2iz+0x46>
 800114e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001152:	bf08      	it	eq
 8001154:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001158:	4770      	bx	lr
 800115a:	f04f 0000 	mov.w	r0, #0
 800115e:	4770      	bx	lr

08001160 <__aeabi_f2uiz>:
 8001160:	0042      	lsls	r2, r0, #1
 8001162:	d20e      	bcs.n	8001182 <__aeabi_f2uiz+0x22>
 8001164:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001168:	d30b      	bcc.n	8001182 <__aeabi_f2uiz+0x22>
 800116a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800116e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001172:	d409      	bmi.n	8001188 <__aeabi_f2uiz+0x28>
 8001174:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001178:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800117c:	fa23 f002 	lsr.w	r0, r3, r2
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr
 8001188:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800118c:	d101      	bne.n	8001192 <__aeabi_f2uiz+0x32>
 800118e:	0242      	lsls	r2, r0, #9
 8001190:	d102      	bne.n	8001198 <__aeabi_f2uiz+0x38>
 8001192:	f04f 30ff 	mov.w	r0, #4294967295
 8001196:	4770      	bx	lr
 8001198:	f04f 0000 	mov.w	r0, #0
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <VBS_GetAvBusVoltage_d>:
  * @retval uint16_t Latest averaged Vbus measurement in digit
  */
__weak uint16_t VBS_GetAvBusVoltage_d( BusVoltageSensor_Handle_t * pHandle )
{
  return ( pHandle->AvBusVoltage_d );
}
 80011a0:	88c0      	ldrh	r0, [r0, #6]
 80011a2:	4770      	bx	lr

080011a4 <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 80011a4:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 80011a6:	8840      	ldrh	r0, [r0, #2]
 80011a8:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 80011ac:	0c00      	lsrs	r0, r0, #16
 80011ae:	4770      	bx	lr

080011b0 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 80011b0:	140b      	asrs	r3, r1, #16
 80011b2:	b410      	push	{r4}
  uint32_t uw_temp;
  int32_t  sw_temp;
  qd_t local_vqd = Vqd;

  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
            ( int32_t )( Vqd.d ) * Vqd.d;
 80011b4:	fb03 f403 	mul.w	r4, r3, r3

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80011b8:	8802      	ldrh	r2, [r0, #0]
 80011ba:	b209      	sxth	r1, r1
 80011bc:	fb02 f202 	mul.w	r2, r2, r2
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80011c0:	fb01 4401 	mla	r4, r1, r1, r4
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80011c4:	42a2      	cmp	r2, r4
{
 80011c6:	b085      	sub	sp, #20
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80011c8:	d219      	bcs.n	80011fe <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80011ca:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 80011ce:	ebc2 6414 	rsb	r4, r2, r4, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 80011d2:	b2e4      	uxtb	r4, r4
 80011d4:	eb00 0044 	add.w	r0, r0, r4, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 80011d8:	8882      	ldrh	r2, [r0, #4]
 80011da:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80011de:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80011e2:	2900      	cmp	r1, #0
 80011e4:	bfbc      	itt	lt
 80011e6:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 80011ea:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	bfbc      	itt	lt
 80011f0:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 80011f4:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80011f6:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80011fa:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 80011fe:	2000      	movs	r0, #0
 8001200:	b289      	uxth	r1, r1
 8001202:	b29b      	uxth	r3, r3
 8001204:	f361 000f 	bfi	r0, r1, #0, #16
 8001208:	f363 401f 	bfi	r0, r3, #16, #16
}
 800120c:	b005      	add	sp, #20
 800120e:	bc10      	pop	{r4}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop

08001214 <HALL_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the hall_speed_pos_fdbk component
  * @retval none
  */
__weak void HALL_Init( HALL_Handle_t * pHandle )
{
 8001214:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;

  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8001216:	8ac1      	ldrh	r1, [r0, #22]
                                     pHandle->_Super.bElToMecRatio;
 8001218:	7843      	ldrb	r3, [r0, #1]
  reliable speed */
  hMinReliableElSpeedUnit /= 4u;

  /* Adjustment factor: maximum measurable speed is x time greater than the
  maximum reliable speed */
  hMaxReliableElSpeedUnit *= 2u;
 800121a:	8a84      	ldrh	r4, [r0, #20]
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 800121c:	fb01 f103 	mul.w	r1, r1, r3
  hMaxReliableElSpeedUnit *= 2u;
 8001220:	fb04 f403 	mul.w	r4, r4, r3

  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8001224:	6b02      	ldr	r2, [r0, #48]	; 0x30
  uint16_t hMinReliableElSpeedUnit = pHandle->_Super.hMinReliableMecSpeedUnit *
 8001226:	b289      	uxth	r1, r1
  hMaxReliableElSpeedUnit *= 2u;
 8001228:	0064      	lsls	r4, r4, #1
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 800122a:	0c17      	lsrs	r7, r2, #16

  /* SW Init */
  if ( hMinReliableElSpeedUnit == 0u )
 800122c:	2903      	cmp	r1, #3
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800122e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  hMaxReliableElSpeedUnit *= 2u;
 8001230:	b2a4      	uxth	r4, r4
  pHandle->OvfFreq = ( uint16_t )( pHandle->TIMClockFreq / 65536u );
 8001232:	f8a0 70ca 	strh.w	r7, [r0, #202]	; 0xca
  if ( hMinReliableElSpeedUnit == 0u )
 8001236:	d972      	bls.n	800131e <HALL_Init+0x10a>
  else
  {
    /* Set accordingly the min reliable speed */
    /* 1000 comes from mS 
    * 6 comes from the fact that sensors are toggling each 60 deg = 360/6 deg */
    pHandle->HallTimeout = 1000*SPEED_UNIT / ( 6u * hMinReliableElSpeedUnit );
 8001238:	f242 7510 	movw	r5, #10000	; 0x2710
 800123c:	0889      	lsrs	r1, r1, #2
 800123e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8001242:	0049      	lsls	r1, r1, #1
 8001244:	fbb5 f1f1 	udiv	r1, r5, r1
 8001248:	b28e      	uxth	r6, r1
  /* Align MaxPeriod to a multiple of Overflow.*/
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;

  pHandle->SatSpeed = hMaxReliableElSpeedUnit;

  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 800124a:	4d36      	ldr	r5, [pc, #216]	; (8001324 <HALL_Init+0x110>)
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 800124c:	fb01 f107 	mul.w	r1, r1, r7
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8001250:	fba5 5202 	umull	r5, r2, r5, r2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8001254:	8b45      	ldrh	r5, [r0, #26]
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8001256:	0892      	lsrs	r2, r2, #2
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 8001258:	fbb2 f7f5 	udiv	r7, r2, r5

  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 800125c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001260:	0052      	lsls	r2, r2, #1
                       / hMaxReliableElSpeedUnit);
 8001262:	fbb2 f2f4 	udiv	r2, r2, r4

  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 8001266:	f890 c0ce 	ldrb.w	ip, [r0, #206]	; 0xce
                                   pHandle->SpeedSamplingFreqHz ) - 1u;

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;
 800126a:	f04f 0e01 	mov.w	lr, #1
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 800126e:	fb05 f50c 	mul.w	r5, r5, ip
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8001272:	f8b0 c02c 	ldrh.w	ip, [r0, #44]	; 0x2c
  pHandle->MinPeriod = ( ( SPEED_UNIT * ( pHandle->TIMClockFreq /6uL) ) 
 8001276:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 800127a:	fbb5 f5fc 	udiv	r5, r5, ip
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
  LL_TIM_GenerateEvent_UPDATE ( TIMx );


  /* Clear the TIMx's pending flags */
  WRITE_REG (TIMx->SR, 0);
 800127e:	f04f 0c00 	mov.w	ip, #0
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8001282:	4a29      	ldr	r2, [pc, #164]	; (8001328 <HALL_Init+0x114>)
                                   pHandle->SpeedSamplingFreqHz ) - 1u;
 8001284:	3d01      	subs	r5, #1
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 8001286:	fba2 1201 	umull	r1, r2, r2, r1
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 800128a:	69c1      	ldr	r1, [r0, #28]
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 800128c:	0992      	lsrs	r2, r2, #6
                              / ( pHandle->_Super.hMeasurementFrequency ) ) * ( pHandle->_Super.DPPConvFactor);
 800128e:	fb01 f707 	mul.w	r7, r1, r7
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8001292:	0411      	lsls	r1, r2, #16
  pHandle->PseudoFreqConv = ( ( pHandle->TIMClockFreq / 6u )
 8001294:	f8c0 70bc 	str.w	r7, [r0, #188]	; 0xbc
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 8001298:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  */
__STATIC_INLINE void LL_TIM_IC_SetFilter(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ICFilter)
{
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800129c:	6999      	ldr	r1, [r3, #24]
 800129e:	f8a0 60c8 	strh.w	r6, [r0, #200]	; 0xc8
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter) << 20);
 80012a2:	f890 6050 	ldrb.w	r6, [r0, #80]	; 0x50
 80012a6:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  pHandle->SatSpeed = hMaxReliableElSpeedUnit;
 80012aa:	f8a0 40b8 	strh.w	r4, [r0, #184]	; 0xb8
 80012ae:	ea41 1106 	orr.w	r1, r1, r6, lsl #4
  pHandle->MaxPeriod = ( pHandle->HALLMaxRatio ) * 65536uL;
 80012b2:	b294      	uxth	r4, r2
  pHandle->HALLMaxRatio = ( pHandle->HallTimeout * pHandle->OvfFreq ) / 1000 ;
 80012b4:	f8a0 20b6 	strh.w	r2, [r0, #182]	; 0xb6
  pHandle->PWMNbrPSamplingFreq = ( (pHandle->_Super.hMeasurementFrequency * pHandle->PWMFreqScaling) /
 80012b8:	f8a0 50cc 	strh.w	r5, [r0, #204]	; 0xcc
  pHandle->SensorIsReliable = true;
 80012bc:	f880 e051 	strb.w	lr, [r0, #81]	; 0x51
 80012c0:	6199      	str	r1, [r3, #24]
  WRITE_REG(TIMx->PSC, Prescaler);
 80012c2:	629c      	str	r4, [r3, #40]	; 0x28
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80012c4:	695a      	ldr	r2, [r3, #20]
 80012c6:	ea42 020e 	orr.w	r2, r2, lr
 80012ca:	615a      	str	r2, [r3, #20]
  WRITE_REG (TIMx->SR, 0);
 80012cc:	f8c3 c010 	str.w	ip, [r3, #16]
  MODIFY_REG(TIMx->CR1, TIM_CR1_URS, UpdateSource);
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	f042 0204 	orr.w	r2, r2, #4
 80012d6:	601a      	str	r2, [r3, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 80012d8:	68da      	ldr	r2, [r3, #12]
 80012da:	f042 0202 	orr.w	r2, r2, #2
 80012de:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	ea42 020e 	orr.w	r2, r2, lr
 80012e6:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->CNT, Counter);
 80012e8:	f8c3 c024 	str.w	ip, [r3, #36]	; 0x24
  SET_BIT(TIMx->CCER, Channels);
 80012ec:	6a1a      	ldr	r2, [r3, #32]
 80012ee:	ea42 020e 	orr.w	r2, r2, lr
 80012f2:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	ea42 020e 	orr.w	r2, r2, lr
 80012fa:	601a      	str	r2, [r3, #0]
  LL_TIM_CC_EnableChannel  ( TIMx, LL_TIM_CHANNEL_CH1 );
  LL_TIM_EnableCounter ( TIMx );


  /* Erase speed buffer */
  bSpeedBufferSize = pHandle->SpeedBufferSize;
 80012fc:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e

  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8001300:	b163      	cbz	r3, 800131c <HALL_Init+0x108>
 8001302:	3b01      	subs	r3, #1
 8001304:	b2d9      	uxtb	r1, r3
 8001306:	f100 0358 	add.w	r3, r0, #88	; 0x58
  {
    pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 800130a:	f8d0 20c0 	ldr.w	r2, [r0, #192]	; 0xc0
 800130e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001312:	3054      	adds	r0, #84	; 0x54
 8001314:	f840 2f04 	str.w	r2, [r0, #4]!
  for ( bIndex = 0u; bIndex < bSpeedBufferSize; bIndex++ )
 8001318:	4298      	cmp	r0, r3
 800131a:	d1fb      	bne.n	8001314 <HALL_Init+0x100>
  }
}
 800131c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800131e:	2196      	movs	r1, #150	; 0x96
    pHandle->HallTimeout = 150u;
 8001320:	460e      	mov	r6, r1
 8001322:	e792      	b.n	800124a <HALL_Init+0x36>
 8001324:	aaaaaaab 	.word	0xaaaaaaab
 8001328:	10624dd3 	.word	0x10624dd3

0800132c <HALL_Clear>:
  TIM_TypeDef * TIMx = pHandle->TIMx;

  /* Mask interrupts to insure a clean intialization */
  LL_TIM_DisableIT_CC1 ( TIMx );

  pHandle->RatioDec = false;
 800132c:	2300      	movs	r3, #0
{
 800132e:	b470      	push	{r4, r5, r6}
  pHandle->RatioInc = false;

  /* Reset speed reliability */
  pHandle->SensorIsReliable = true;
 8001330:	2401      	movs	r4, #1
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8001332:	6b42      	ldr	r2, [r0, #52]	; 0x34

  /* Clear speed error counter */
  pHandle->_Super.bSpeedErrorNumber = 0;
  
  /* Re-initialize partly the timer */
  LL_TIM_SetPrescaler ( TIMx, pHandle->HALLMaxRatio );
 8001334:	f8b0 50b6 	ldrh.w	r5, [r0, #182]	; 0xb6
  CLEAR_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8001338:	68d1      	ldr	r1, [r2, #12]
 800133a:	f021 0102 	bic.w	r1, r1, #2
 800133e:	60d1      	str	r1, [r2, #12]
  pHandle->RatioDec = false;
 8001340:	f880 3052 	strb.w	r3, [r0, #82]	; 0x52
  pHandle->SpeedFIFOIdx = 0u;
 8001344:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  pHandle->RatioInc = false;
 8001348:	f880 3053 	strb.w	r3, [r0, #83]	; 0x53
  pHandle->_Super.bSpeedErrorNumber = 0;
 800134c:	7003      	strb	r3, [r0, #0]
  pHandle->FirstCapt = 0u;
 800134e:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  pHandle->Direction = POSITIVE;
 8001352:	f880 40aa 	strb.w	r4, [r0, #170]	; 0xaa
  pHandle->BufferFilled = 0u;
 8001356:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
  pHandle->_Super.hMecAccelUnitP = 0;
 800135a:	8243      	strh	r3, [r0, #18]
  pHandle->OVFCounter = 0u;
 800135c:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
  pHandle->CompSpeed = 0;
 8001360:	f8a0 30b4 	strh.w	r3, [r0, #180]	; 0xb4
  pHandle->SensorIsReliable = true;
 8001364:	f880 4051 	strb.w	r4, [r0, #81]	; 0x51
  WRITE_REG(TIMx->PSC, Prescaler);
 8001368:	6295      	str	r5, [r2, #40]	; 0x28
  WRITE_REG(TIMx->CNT, Counter);
 800136a:	6253      	str	r3, [r2, #36]	; 0x24
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800136c:	6813      	ldr	r3, [r2, #0]
 800136e:	4323      	orrs	r3, r4
 8001370:	6013      	str	r3, [r2, #0]
  SET_BIT(TIMx->DIER, TIM_DIER_CC1IE);
 8001372:	68d3      	ldr	r3, [r2, #12]
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	60d3      	str	r3, [r2, #12]
* @retval none
*/
static void HALL_Init_Electrical_Angle( HALL_Handle_t * pHandle )
{

    if ( pHandle->SensorPlacement == DEGREES_120 )
 800137a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 800137e:	2b00      	cmp	r3, #0
 8001380:	d12f      	bne.n	80013e2 <HALL_Clear+0xb6>
    {
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8001382:	6c83      	ldr	r3, [r0, #72]	; 0x48
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8001384:	6c02      	ldr	r2, [r0, #64]	; 0x40
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  return (READ_BIT(GPIOx->IDR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU) == ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	6892      	ldr	r2, [r2, #8]
 800138a:	43db      	mvns	r3, r3
 800138c:	43d2      	mvns	r2, r2
 800138e:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8001390:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8001392:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001394:	ea02 2215 	and.w	r2, r2, r5, lsr #8
 8001398:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 800139c:	68a4      	ldr	r4, [r4, #8]
 800139e:	b292      	uxth	r2, r2
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	fab2 f282 	clz	r2, r2
 80013a6:	fab3 f183 	clz	r1, r3
 80013aa:	43e4      	mvns	r4, r4
 80013ac:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80013ae:	0952      	lsrs	r2, r2, #5
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 80013b0:	0053      	lsls	r3, r2, #1
 80013b2:	0949      	lsrs	r1, r1, #5
 80013b4:	ea04 2215 	and.w	r2, r4, r5, lsr #8
 80013b8:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
 80013bc:	b292      	uxth	r2, r2
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 80013be:	2a00      	cmp	r2, #0
 80013c0:	bf08      	it	eq
 80013c2:	f043 0301 	orreq.w	r3, r3, #1
}
 80013c6:	bc70      	pop	{r4, r5, r6}
 80013c8:	f880 30ae 	strb.w	r3, [r0, #174]	; 0xae
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
    }

    pHandle->_Super.hElAngle = pHandle->PhaseShift + (((uint16_t)pHandle->lut[pHandle->HallState])<<8);
 80013cc:	4403      	add	r3, r0
 80013ce:	f893 20d2 	ldrb.w	r2, [r3, #210]	; 0xd2
 80013d2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80013d4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80013d8:	b21b      	sxth	r3, r3
 80013da:	8083      	strh	r3, [r0, #4]


  /* Initialize the measured angle */
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 80013dc:	f8a0 30b2 	strh.w	r3, [r0, #178]	; 0xb2
}
 80013e0:	4770      	bx	lr
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 80013e2:	6c01      	ldr	r1, [r0, #64]	; 0x40
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 80013e4:	6c83      	ldr	r3, [r0, #72]	; 0x48
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 80013e6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80013e8:	6889      	ldr	r1, [r1, #8]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	6892      	ldr	r2, [r2, #8]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	43d2      	mvns	r2, r2
 80013f2:	43c9      	mvns	r1, r1
 80013f4:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 80013f6:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80013f8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80013fa:	ea03 2316 	and.w	r3, r3, r6, lsr #8
 80013fe:	ea02 2215 	and.w	r2, r2, r5, lsr #8
 8001402:	b29b      	uxth	r3, r3
 8001404:	b292      	uxth	r2, r2
 8001406:	fab3 f383 	clz	r3, r3
 800140a:	fab2 f282 	clz	r2, r2
 800140e:	ea01 2114 	and.w	r1, r1, r4, lsr #8
 8001412:	b289      	uxth	r1, r1
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 8001414:	2900      	cmp	r1, #0
 8001416:	bf14      	ite	ne
 8001418:	2104      	movne	r1, #4
 800141a:	2100      	moveq	r1, #0
 800141c:	095b      	lsrs	r3, r3, #5
 800141e:	0952      	lsrs	r2, r2, #5
 8001420:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 8001424:	430b      	orrs	r3, r1
 8001426:	e7ce      	b.n	80013c6 <HALL_Clear+0x9a>

08001428 <HALL_CalcElAngle>:
  if ( pHandle->HallMtpa == true){
 8001428:	f890 20cf 	ldrb.w	r2, [r0, #207]	; 0xcf
{
 800142c:	4603      	mov	r3, r0
  if ( pHandle->HallMtpa == true){
 800142e:	b9f2      	cbnz	r2, 800146e <HALL_CalcElAngle+0x46>
  else if ( pHandle->_Super.hElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 8001430:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001434:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
 8001438:	428a      	cmp	r2, r1
 800143a:	d011      	beq.n	8001460 <HALL_CalcElAngle+0x38>
{
 800143c:	b430      	push	{r4, r5}
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800143e:	8880      	ldrh	r0, [r0, #4]
 8001440:	f8b3 50b4 	ldrh.w	r5, [r3, #180]	; 0xb4
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8001444:	b291      	uxth	r1, r2
 8001446:	f8b3 40b2 	ldrh.w	r4, [r3, #178]	; 0xb2
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 800144a:	4408      	add	r0, r1
 800144c:	4428      	add	r0, r5
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 800144e:	4421      	add	r1, r4
    pHandle->_Super.hElAngle += pHandle->_Super.hElSpeedDpp + pHandle->CompSpeed;
 8001450:	b200      	sxth	r0, r0
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 8001452:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
    pHandle->MeasuredElAngle += pHandle->_Super.hElSpeedDpp;
 8001456:	f8a3 10b2 	strh.w	r1, [r3, #178]	; 0xb2
    pHandle->PrevRotorFreq = pHandle->_Super.hElSpeedDpp;
 800145a:	8098      	strh	r0, [r3, #4]
}
 800145c:	bc30      	pop	{r4, r5}
 800145e:	4770      	bx	lr
    pHandle->_Super.hElAngle += pHandle->PrevRotorFreq;
 8001460:	8880      	ldrh	r0, [r0, #4]
 8001462:	f8b3 20a8 	ldrh.w	r2, [r3, #168]	; 0xa8
 8001466:	4410      	add	r0, r2
 8001468:	b200      	sxth	r0, r0
 800146a:	8098      	strh	r0, [r3, #4]
}
 800146c:	4770      	bx	lr
	  return pHandle->_Super.hElAngle;
 800146e:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8001472:	4770      	bx	lr

08001474 <HALL_CalcAvrgMecSpeedUnit>:
{
 8001474:	b538      	push	{r3, r4, r5, lr}
 8001476:	4604      	mov	r4, r0
  if ( pHandle->SensorIsReliable )
 8001478:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
{
 800147c:	460d      	mov	r5, r1
  if ( pHandle->SensorIsReliable )
 800147e:	b180      	cbz	r0, 80014a2 <HALL_CalcAvrgMecSpeedUnit+0x2e>
  TIM_TypeDef * TIMx = pHandle->TIMx;
 8001480:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if ( LL_TIM_GetPrescaler ( TIMx ) >= pHandle->HALLMaxRatio )
 8001482:	f8b4 20b6 	ldrh.w	r2, [r4, #182]	; 0xb6
  return (uint32_t)(READ_REG(TIMx->PSC));
 8001486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001488:	429a      	cmp	r2, r3
 800148a:	d811      	bhi.n	80014b0 <HALL_CalcAvrgMecSpeedUnit+0x3c>
      pHandle->_Super.hElSpeedDpp = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	81e3      	strh	r3, [r4, #14]
      *hMecSpeedUnit = 0;
 8001490:	800b      	strh	r3, [r1, #0]
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, hMecSpeedUnit );
 8001492:	4629      	mov	r1, r5
 8001494:	4620      	mov	r0, r4
 8001496:	f001 f88f 	bl	80025b8 <SPD_IsMecSpeedReliable>
 800149a:	f9b5 3000 	ldrsh.w	r3, [r5]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800149e:	81a3      	strh	r3, [r4, #12]
}
 80014a0:	bd38      	pop	{r3, r4, r5, pc}
    *hMecSpeedUnit = 0;
 80014a2:	4603      	mov	r3, r0
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80014a4:	78e2      	ldrb	r2, [r4, #3]
    pHandle->_Super.hElSpeedDpp = 0;
 80014a6:	81e0      	strh	r0, [r4, #14]
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80014a8:	7022      	strb	r2, [r4, #0]
    *hMecSpeedUnit = 0;
 80014aa:	8008      	strh	r0, [r1, #0]
  pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80014ac:	81a3      	strh	r3, [r4, #12]
}
 80014ae:	bd38      	pop	{r3, r4, r5, pc}
      pHandle->_Super.hElSpeedDpp =  pHandle->AvrElSpeedDpp;
 80014b0:	f9b4 30ac 	ldrsh.w	r3, [r4, #172]	; 0xac
 80014b4:	81e3      	strh	r3, [r4, #14]
      if (  pHandle->AvrElSpeedDpp == 0 )
 80014b6:	b31b      	cbz	r3, 8001500 <HALL_CalcAvrgMecSpeedUnit+0x8c>
        if (  pHandle->AvrElSpeedDpp != HALL_MAX_PSEUDO_SPEED )
 80014b8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80014bc:	4293      	cmp	r3, r2
 80014be:	d01d      	beq.n	80014fc <HALL_CalcAvrgMecSpeedUnit+0x88>
          if (pHandle->HallMtpa == true)
 80014c0:	f894 20cf 	ldrb.w	r2, [r4, #207]	; 0xcf
 80014c4:	b9f2      	cbnz	r2, 8001504 <HALL_CalcAvrgMecSpeedUnit+0x90>
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80014c6:	f8b4 20b2 	ldrh.w	r2, [r4, #178]	; 0xb2
 80014ca:	88a0      	ldrh	r0, [r4, #4]
              ( int32_t )( pHandle->PWMNbrPSamplingFreq ) );
 80014cc:	f8b4 10cc 	ldrh.w	r1, [r4, #204]	; 0xcc
            pHandle->DeltaAngle = pHandle->MeasuredElAngle - pHandle->_Super.hElAngle;
 80014d0:	1a12      	subs	r2, r2, r0
 80014d2:	b212      	sxth	r2, r2
 80014d4:	f8a4 20b0 	strh.w	r2, [r4, #176]	; 0xb0
            pHandle->CompSpeed = ( int16_t )
 80014d8:	fb92 f2f1 	sdiv	r2, r2, r1
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80014dc:	8b61      	ldrh	r1, [r4, #26]
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80014de:	7860      	ldrb	r0, [r4, #1]
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80014e0:	fb03 f301 	mul.w	r3, r3, r1
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80014e4:	69e1      	ldr	r1, [r4, #28]
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80014e6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                        (( int32_t ) pHandle->_Super.DPPConvFactor * ( int32_t )pHandle->_Super.bElToMecRatio ) );
 80014ea:	fb01 f100 	mul.w	r1, r1, r0
                                        ( int32_t )pHandle->_Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) /
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fb93 f3f1 	sdiv	r3, r3, r1
 80014f4:	f8a4 20b4 	strh.w	r2, [r4, #180]	; 0xb4
          *hMecSpeedUnit = ( int16_t )( (  pHandle->AvrElSpeedDpp * 
 80014f8:	802b      	strh	r3, [r5, #0]
 80014fa:	e7ca      	b.n	8001492 <HALL_CalcAvrgMecSpeedUnit+0x1e>
          *hMecSpeedUnit = ( int16_t )pHandle->SatSpeed;
 80014fc:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
 8001500:	802b      	strh	r3, [r5, #0]
 8001502:	e7c6      	b.n	8001492 <HALL_CalcAvrgMecSpeedUnit+0x1e>
            pHandle->CompSpeed = 0;
 8001504:	2200      	movs	r2, #0
 8001506:	e7e9      	b.n	80014dc <HALL_CalcAvrgMecSpeedUnit+0x68>

08001508 <HALL_TIMx_CC_IRQHandler>:
   if ( pHandle->SensorIsReliable )
 8001508:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800150c:	2b00      	cmp	r3, #0
 800150e:	d070      	beq.n	80015f2 <HALL_TIMx_CC_IRQHandler+0xea>
{
 8001510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bPrevHallState = pHandle->lut[pHandle->HallState];
 8001514:	f890 30ae 	ldrb.w	r3, [r0, #174]	; 0xae
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8001518:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    bPrevHallState = pHandle->lut[pHandle->HallState];
 800151c:	4403      	add	r3, r0
 800151e:	f893 10d2 	ldrb.w	r1, [r3, #210]	; 0xd2
    PrevDirection = pHandle->Direction;
 8001522:	f990 40aa 	ldrsb.w	r4, [r0, #170]	; 0xaa
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8001526:	2a00      	cmp	r2, #0
 8001528:	d065      	beq.n	80015f6 <HALL_TIMx_CC_IRQHandler+0xee>
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 800152a:	6c05      	ldr	r5, [r0, #64]	; 0x40
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 800152c:	6c83      	ldr	r3, [r0, #72]	; 0x48
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 800152e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8001530:	68ad      	ldr	r5, [r5, #8]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	6892      	ldr	r2, [r2, #8]
 8001536:	43db      	mvns	r3, r3
 8001538:	43d2      	mvns	r2, r2
 800153a:	ea6f 0c05 	mvn.w	ip, r5
 800153e:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 8001540:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8001542:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8001544:	ea03 2317 	and.w	r3, r3, r7, lsr #8
 8001548:	ea02 2216 	and.w	r2, r2, r6, lsr #8
 800154c:	b29b      	uxth	r3, r3
 800154e:	b292      	uxth	r2, r2
 8001550:	fab3 f383 	clz	r3, r3
 8001554:	fab2 f282 	clz	r2, r2
 8001558:	ea0c 2515 	and.w	r5, ip, r5, lsr #8
 800155c:	b2ad      	uxth	r5, r5
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 800155e:	2d00      	cmp	r5, #0
 8001560:	bf14      	ite	ne
 8001562:	2504      	movne	r5, #4
 8001564:	2500      	moveq	r5, #0
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	0952      	lsrs	r2, r2, #5
 800156a:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 800156e:	432b      	orrs	r3, r5
 8001570:	f880 30ae 	strb.w	r3, [r0, #174]	; 0xae
    int diff = pHandle->lut[pHandle->HallState] - bPrevHallState;
 8001574:	4403      	add	r3, r0
 8001576:	f893 e0d2 	ldrb.w	lr, [r3, #210]	; 0xd2
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800157a:	6b46      	ldr	r6, [r0, #52]	; 0x34
    int diff = pHandle->lut[pHandle->HallState] - bPrevHallState;
 800157c:	ebae 0101 	sub.w	r1, lr, r1
    if (diff > 100) {
 8001580:	2964      	cmp	r1, #100	; 0x64
 8001582:	dd62      	ble.n	800164a <HALL_TIMx_CC_IRQHandler+0x142>
    	pHandle->tachometer--;
 8001584:	f04f 37ff 	mov.w	r7, #4294967295
 8001588:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800158c:	46bc      	mov	ip, r7
    	pHandle->Direction = NEGATIVE;
 800158e:	4639      	mov	r1, r7
    	pHandle->tachometer--;
 8001590:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 8001594:	443a      	add	r2, r7
    pHandle->MeasuredElAngle = pHandle->PhaseShift + (((uint16_t)pHandle->lut[pHandle->HallState])<<8);
 8001596:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001598:	f8c0 20dc 	str.w	r2, [r0, #220]	; 0xdc
    pHandle->tachometer_abs++;
 800159c:	f8d0 20e0 	ldr.w	r2, [r0, #224]	; 0xe0
    pHandle->MeasuredElAngle = pHandle->PhaseShift + (((uint16_t)pHandle->lut[pHandle->HallState])<<8);
 80015a0:	eb03 230e 	add.w	r3, r3, lr, lsl #8
 80015a4:	b21b      	sxth	r3, r3
    pHandle->tachometer_abs++;
 80015a6:	3201      	adds	r2, #1
    if (pHandle->Direction != PrevDirection)
 80015a8:	428c      	cmp	r4, r1
 80015aa:	f880 10aa 	strb.w	r1, [r0, #170]	; 0xaa
    pHandle->MeasuredElAngle = pHandle->PhaseShift + (((uint16_t)pHandle->lut[pHandle->HallState])<<8);
 80015ae:	f8a0 30b2 	strh.w	r3, [r0, #178]	; 0xb2
    pHandle->tachometer_abs++;
 80015b2:	f8c0 20e0 	str.w	r2, [r0, #224]	; 0xe0
    if (pHandle->Direction != PrevDirection)
 80015b6:	d041      	beq.n	800163c <HALL_TIMx_CC_IRQHandler+0x134>
    if(cnt<20){
 80015b8:	2200      	movs	r2, #0
 80015ba:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 80017b0 <HALL_TIMx_CC_IRQHandler+0x2a8>
    	pHandle->BufferFilled = 0;
 80015be:	2100      	movs	r1, #0
 80015c0:	f880 1055 	strb.w	r1, [r0, #85]	; 0x55
    	pHandle->SpeedFIFOIdx = 0;
 80015c4:	f880 10a0 	strb.w	r1, [r0, #160]	; 0xa0
    if (pHandle->HallMtpa == true)
 80015c8:	f890 10cf 	ldrb.w	r1, [r0, #207]	; 0xcf
    cnt++;
 80015cc:	3201      	adds	r2, #1
 80015ce:	f8ce 2000 	str.w	r2, [lr]
    if (pHandle->HallMtpa == true)
 80015d2:	b101      	cbz	r1, 80015d6 <HALL_TIMx_CC_IRQHandler+0xce>
      pHandle->_Super.hElAngle = pHandle->MeasuredElAngle;
 80015d4:	8083      	strh	r3, [r0, #4]
    if ( pHandle->FirstCapt == 0u )
 80015d6:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d143      	bne.n	8001666 <HALL_TIMx_CC_IRQHandler+0x15e>
      pHandle->FirstCapt++;
 80015de:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 80015e2:	3301      	adds	r3, #1
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  return (uint32_t)(READ_REG(TIMx->CCR1));
 80015ea:	6b73      	ldr	r3, [r6, #52]	; 0x34
}
 80015ec:	2000      	movs	r0, #0
 80015ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015f2:	2000      	movs	r0, #0
 80015f4:	4770      	bx	lr
      pHandle->HallState  = (uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 80015f6:	6c83      	ldr	r3, [r0, #72]	; 0x48
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 80015f8:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	6892      	ldr	r2, [r2, #8]
 80015fe:	43db      	mvns	r3, r3
 8001600:	43d2      	mvns	r2, r2
 8001602:	6c46      	ldr	r6, [r0, #68]	; 0x44
 8001604:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8001606:	ea02 2216 	and.w	r2, r2, r6, lsr #8
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 800160a:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800160c:	ea03 2315 	and.w	r3, r3, r5, lsr #8
 8001610:	68b6      	ldr	r6, [r6, #8]
 8001612:	b292      	uxth	r2, r2
 8001614:	b29b      	uxth	r3, r3
 8001616:	fab2 f282 	clz	r2, r2
 800161a:	fab3 f583 	clz	r5, r3
 800161e:	43f6      	mvns	r6, r6
 8001620:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 8001622:	0952      	lsrs	r2, r2, #5
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8001624:	0053      	lsls	r3, r2, #1
 8001626:	096d      	lsrs	r5, r5, #5
 8001628:	ea06 2217 	and.w	r2, r6, r7, lsr #8
 800162c:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
 8001630:	b292      	uxth	r2, r2
      pHandle->HallState  = (uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8001632:	2a00      	cmp	r2, #0
 8001634:	bf08      	it	eq
 8001636:	f043 0301 	orreq.w	r3, r3, #1
 800163a:	e799      	b.n	8001570 <HALL_TIMx_CC_IRQHandler+0x68>
    if(cnt<20){
 800163c:	f8df e170 	ldr.w	lr, [pc, #368]	; 80017b0 <HALL_TIMx_CC_IRQHandler+0x2a8>
 8001640:	f8de 2000 	ldr.w	r2, [lr]
 8001644:	2a13      	cmp	r2, #19
 8001646:	d8bf      	bhi.n	80015c8 <HALL_TIMx_CC_IRQHandler+0xc0>
 8001648:	e7b9      	b.n	80015be <HALL_TIMx_CC_IRQHandler+0xb6>
	} else if (diff < -100) {
 800164a:	f111 0f64 	cmn.w	r1, #100	; 0x64
		diff += 255;
 800164e:	bfb8      	it	lt
 8001650:	31ff      	addlt	r1, #255	; 0xff
    if(diff > 0){
 8001652:	2900      	cmp	r1, #0
 8001654:	dd96      	ble.n	8001584 <HALL_TIMx_CC_IRQHandler+0x7c>
    	pHandle->tachometer++;
 8001656:	2501      	movs	r5, #1
 8001658:	f8d0 20dc 	ldr.w	r2, [r0, #220]	; 0xdc
 800165c:	462f      	mov	r7, r5
 800165e:	46ac      	mov	ip, r5
    	pHandle->Direction = POSITIVE;
 8001660:	4629      	mov	r1, r5
    	pHandle->tachometer++;
 8001662:	442a      	add	r2, r5
 8001664:	e797      	b.n	8001596 <HALL_TIMx_CC_IRQHandler+0x8e>
      if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 8001666:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 800166a:	f890 802e 	ldrb.w	r8, [r0, #46]	; 0x2e
 800166e:	4543      	cmp	r3, r8
 8001670:	d205      	bcs.n	800167e <HALL_TIMx_CC_IRQHandler+0x176>
        pHandle->BufferFilled++;
 8001672:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
 8001676:	3301      	adds	r3, #1
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
 800167e:	6b74      	ldr	r4, [r6, #52]	; 0x34
  return (uint32_t)(READ_REG(TIMx->PSC));
 8001680:	6ab1      	ldr	r1, [r6, #40]	; 0x28
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 8001682:	f890 9056 	ldrb.w	r9, [r0, #86]	; 0x56
      if ( pHandle->OVFCounter != 0u )
 8001686:	f890 a056 	ldrb.w	sl, [r0, #86]	; 0x56
      wCaptBuf += ( uint32_t )pHandle->OVFCounter * 0x10000uL;
 800168a:	b2a3      	uxth	r3, r4
 800168c:	eb03 4309 	add.w	r3, r3, r9, lsl #16
      hPrscBuf =  LL_TIM_GetPrescaler ( TIMx );
 8001690:	b289      	uxth	r1, r1
      if ( pHandle->OVFCounter != 0u )
 8001692:	f00a 09ff 	and.w	r9, sl, #255	; 0xff
 8001696:	f1ba 0f00 	cmp.w	sl, #0
 800169a:	d14f      	bne.n	800173c <HALL_TIMx_CC_IRQHandler+0x234>
        if ( pHandle->RatioDec ) /* and don't decrease it again */
 800169c:	f890 a052 	ldrb.w	sl, [r0, #82]	; 0x52
 80016a0:	f1ba 0f00 	cmp.w	sl, #0
 80016a4:	d055      	beq.n	8001752 <HALL_TIMx_CC_IRQHandler+0x24a>
          hAux = hPrscBuf + 2u;
 80016a6:	3102      	adds	r1, #2
          wCaptBuf *= hAux;
 80016a8:	b289      	uxth	r1, r1
 80016aa:	fb03 f301 	mul.w	r3, r3, r1
          pHandle->RatioDec = false;
 80016ae:	f880 9052 	strb.w	r9, [r0, #82]	; 0x52
        if ( wCaptBuf < pHandle->MinPeriod )
 80016b2:	f8d0 10c4 	ldr.w	r1, [r0, #196]	; 0xc4
 80016b6:	4299      	cmp	r1, r3
 80016b8:	d83a      	bhi.n	8001730 <HALL_TIMx_CC_IRQHandler+0x228>
          if ( wCaptBuf >= pHandle->MaxPeriod )
 80016ba:	f8d0 a0c0 	ldr.w	sl, [r0, #192]	; 0xc0
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80016be:	f890 90a0 	ldrb.w	r9, [r0, #160]	; 0xa0
          if ( wCaptBuf >= pHandle->MaxPeriod )
 80016c2:	459a      	cmp	sl, r3
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] *= pHandle->Direction;
 80016c4:	bf88      	it	hi
 80016c6:	435f      	mulhi	r7, r3
 80016c8:	eb00 0689 	add.w	r6, r0, r9, lsl #2
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80016cc:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80016ce:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
            pHandle->SensorPeriod[pHandle->SpeedFIFOIdx] = pHandle->MaxPeriod*pHandle->Direction; 
 80016d2:	bf98      	it	ls
 80016d4:	fb0c f70a 	mulls.w	r7, ip, sl
          pHandle->ElPeriodSum -= pHandle->SensorPeriod[pHandle->SpeedFIFOIdx]; /* value we gonna removed from the accumulator */
 80016d8:	eba1 0104 	sub.w	r1, r1, r4
 80016dc:	f8c0 10a4 	str.w	r1, [r0, #164]	; 0xa4
            pHandle->ElPeriodSum += pHandle->SensorPeriod[pHandle->SpeedFIFOIdx];
 80016e0:	bf84      	itt	hi
 80016e2:	19c9      	addhi	r1, r1, r7
 80016e4:	f8c0 10a4 	strhi.w	r1, [r0, #164]	; 0xa4
          pHandle->SpeedFIFOIdx++;
 80016e8:	f109 0101 	add.w	r1, r9, #1
 80016ec:	b2c9      	uxtb	r1, r1
          if ( pHandle->SpeedFIFOIdx == pHandle->SpeedBufferSize )
 80016ee:	4588      	cmp	r8, r1
            pHandle->SpeedFIFOIdx = 0u;
 80016f0:	bf08      	it	eq
 80016f2:	2100      	moveq	r1, #0
 80016f4:	65b7      	str	r7, [r6, #88]	; 0x58
 80016f6:	f880 10a0 	strb.w	r1, [r0, #160]	; 0xa0
            if ( pHandle->BufferFilled < pHandle->SpeedBufferSize )
 80016fa:	f890 1055 	ldrb.w	r1, [r0, #85]	; 0x55
 80016fe:	4588      	cmp	r8, r1
 8001700:	d945      	bls.n	800178e <HALL_TIMx_CC_IRQHandler+0x286>
              pHandle->AvrElSpeedDpp = ( int16_t ) (( pHandle->PseudoFreqConv / wCaptBuf )*pHandle->Direction);
 8001702:	f8d0 10bc 	ldr.w	r1, [r0, #188]	; 0xbc
 8001706:	fbb1 f3f3 	udiv	r3, r1, r3
 800170a:	fb03 f505 	mul.w	r5, r3, r5
 800170e:	b22d      	sxth	r5, r5
            if((abs(pHandle->AvrElSpeedDpp) < pHandle->SwitchSpeed) ){
 8001710:	ea85 73e5 	eor.w	r3, r5, r5, asr #31
 8001714:	f8b0 10d0 	ldrh.w	r1, [r0, #208]	; 0xd0
 8001718:	eba3 73e5 	sub.w	r3, r3, r5, asr #31
 800171c:	b29b      	uxth	r3, r3
 800171e:	4299      	cmp	r1, r3
 8001720:	f8a0 50ac 	strh.w	r5, [r0, #172]	; 0xac
 8001724:	d801      	bhi.n	800172a <HALL_TIMx_CC_IRQHandler+0x222>
            	if(cnt>20){
 8001726:	2a14      	cmp	r2, #20
 8001728:	d83b      	bhi.n	80017a2 <HALL_TIMx_CC_IRQHandler+0x29a>
            	pHandle->HallMtpa = true;
 800172a:	2301      	movs	r3, #1
 800172c:	f880 30cf 	strb.w	r3, [r0, #207]	; 0xcf
      pHandle->OVFCounter = 0u;
 8001730:	2300      	movs	r3, #0
 8001732:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
}
 8001736:	2000      	movs	r0, #0
 8001738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hAux = hPrscBuf + 1u;
 800173c:	3101      	adds	r1, #1
        if ( pHandle->RatioInc )
 800173e:	f890 4053 	ldrb.w	r4, [r0, #83]	; 0x53
        wCaptBuf *= hAux;
 8001742:	b289      	uxth	r1, r1
 8001744:	fb03 f301 	mul.w	r3, r3, r1
        if ( pHandle->RatioInc )
 8001748:	b1ac      	cbz	r4, 8001776 <HALL_TIMx_CC_IRQHandler+0x26e>
          pHandle->RatioInc = false;  /* Previous capture caused overflow */
 800174a:	2100      	movs	r1, #0
 800174c:	f880 1053 	strb.w	r1, [r0, #83]	; 0x53
 8001750:	e7af      	b.n	80016b2 <HALL_TIMx_CC_IRQHandler+0x1aa>
          uint16_t hAux = hPrscBuf + 1u;
 8001752:	3101      	adds	r1, #1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8001754:	b2a4      	uxth	r4, r4
          wCaptBuf *= hAux;
 8001756:	b289      	uxth	r1, r1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8001758:	f5b4 4faa 	cmp.w	r4, #21760	; 0x5500
          wCaptBuf *= hAux;
 800175c:	fb03 f301 	mul.w	r3, r3, r1
          if ( hHighSpeedCapture < LOW_RES_THRESHOLD ) /* If capture range correct */
 8001760:	d2a7      	bcs.n	80016b2 <HALL_TIMx_CC_IRQHandler+0x1aa>
 8001762:	6ab1      	ldr	r1, [r6, #40]	; 0x28
            if ( LL_TIM_GetPrescaler ( TIMx ) > 0u ) /* or prescaler cannot be further reduced */
 8001764:	2900      	cmp	r1, #0
 8001766:	d0a4      	beq.n	80016b2 <HALL_TIMx_CC_IRQHandler+0x1aa>
              pHandle->RatioDec = true;
 8001768:	2401      	movs	r4, #1
 800176a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
              LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) - 1 ); /* Increase accuracy by decreasing prsc */
 800176c:	3901      	subs	r1, #1
  WRITE_REG(TIMx->PSC, Prescaler);
 800176e:	62b1      	str	r1, [r6, #40]	; 0x28
              pHandle->RatioDec = true;
 8001770:	f880 4052 	strb.w	r4, [r0, #82]	; 0x52
 8001774:	e79d      	b.n	80016b2 <HALL_TIMx_CC_IRQHandler+0x1aa>
  return (uint32_t)(READ_REG(TIMx->PSC));
 8001776:	6ab1      	ldr	r1, [r6, #40]	; 0x28
          if ( LL_TIM_GetPrescaler ( TIMx ) < pHandle->HALLMaxRatio ) /* Avoid OVF w/ very low freq */
 8001778:	f8b0 40b6 	ldrh.w	r4, [r0, #182]	; 0xb6
 800177c:	428c      	cmp	r4, r1
 800177e:	d998      	bls.n	80016b2 <HALL_TIMx_CC_IRQHandler+0x1aa>
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8001780:	2401      	movs	r4, #1
 8001782:	6ab1      	ldr	r1, [r6, #40]	; 0x28
            LL_TIM_SetPrescaler ( TIMx, LL_TIM_GetPrescaler ( TIMx ) + 1 ); /* To avoid OVF during speed decrease */
 8001784:	4421      	add	r1, r4
  WRITE_REG(TIMx->PSC, Prescaler);
 8001786:	62b1      	str	r1, [r6, #40]	; 0x28
            pHandle->RatioInc = true;   /* new prsc value updated at next capture only */
 8001788:	f880 4053 	strb.w	r4, [r0, #83]	; 0x53
 800178c:	e791      	b.n	80016b2 <HALL_TIMx_CC_IRQHandler+0x1aa>
              pHandle->AvrElSpeedDpp = ( int16_t )((int32_t) pHandle->PseudoFreqConv / ( pHandle->ElPeriodSum / pHandle->SpeedBufferSize )); /* Average value */
 800178e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 8001792:	f8d0 50bc 	ldr.w	r5, [r0, #188]	; 0xbc
 8001796:	fb93 f3f8 	sdiv	r3, r3, r8
 800179a:	fb95 f5f3 	sdiv	r5, r5, r3
 800179e:	b22d      	sxth	r5, r5
 80017a0:	e7b6      	b.n	8001710 <HALL_TIMx_CC_IRQHandler+0x208>
            		cnt = 21;
 80017a2:	2215      	movs	r2, #21
            		pHandle->HallMtpa = false;
 80017a4:	2300      	movs	r3, #0
            		cnt = 21;
 80017a6:	f8ce 2000 	str.w	r2, [lr]
            		pHandle->HallMtpa = false;
 80017aa:	f880 30cf 	strb.w	r3, [r0, #207]	; 0xcf
 80017ae:	e7bf      	b.n	8001730 <HALL_TIMx_CC_IRQHandler+0x228>
 80017b0:	20000524 	.word	0x20000524

080017b4 <HALL_TIMx_UP_IRQHandler>:
  if ( pHandle->SensorIsReliable )
 80017b4:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80017b8:	b1e3      	cbz	r3, 80017f4 <HALL_TIMx_UP_IRQHandler+0x40>
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 80017ba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
{
 80017be:	b470      	push	{r4, r5, r6}
    pHandle->OVFCounter++;
 80017c0:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
  TIM_TypeDef * TIMx = pHandle->TIMx;
 80017c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
    pHandle->OVFCounter++;
 80017c6:	3201      	adds	r2, #1
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	f880 2056 	strb.w	r2, [r0, #86]	; 0x56
  return (uint32_t)(READ_REG(TIMx->PSC));
 80017ce:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 80017d0:	f8b0 20c8 	ldrh.w	r2, [r0, #200]	; 0xc8
 80017d4:	f8b0 30ca 	ldrh.w	r3, [r0, #202]	; 0xca
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 80017d8:	fb04 1101 	mla	r1, r4, r1, r1
    hMaxTimerOverflow = ( uint16_t )( ( ( uint32_t )pHandle->HallTimeout * pHandle->OvfFreq )
 80017dc:	fb03 f302 	mul.w	r3, r3, r2
                                      / ( ( LL_TIM_GetPrescaler ( TIMx ) + 1 ) * 1000u ) );
 80017e0:	fbb3 f3f1 	udiv	r3, r3, r1
    if ( pHandle->OVFCounter >= hMaxTimerOverflow )
 80017e4:	f890 2056 	ldrb.w	r2, [r0, #86]	; 0x56
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d204      	bcs.n	80017f8 <HALL_TIMx_UP_IRQHandler+0x44>
}
 80017ee:	bc70      	pop	{r4, r5, r6}
 80017f0:	2000      	movs	r0, #0
 80017f2:	4770      	bx	lr
 80017f4:	2000      	movs	r0, #0
 80017f6:	4770      	bx	lr
      pHandle->_Super.hElSpeedDpp = 0;
 80017f8:	2200      	movs	r2, #0
    if ( pHandle->SensorPlacement == DEGREES_120 )
 80017fa:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
      pHandle->_Super.hElSpeedDpp = 0;
 80017fe:	81c2      	strh	r2, [r0, #14]
    if ( pHandle->SensorPlacement == DEGREES_120 )
 8001800:	2b00      	cmp	r3, #0
 8001802:	d151      	bne.n	80018a8 <HALL_TIMx_UP_IRQHandler+0xf4>
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8001804:	6c82      	ldr	r2, [r0, #72]	; 0x48
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8001806:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001808:	6892      	ldr	r2, [r2, #8]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	43d2      	mvns	r2, r2
 800180e:	43db      	mvns	r3, r3
 8001810:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8001812:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 8001814:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001816:	ea03 2315 	and.w	r3, r3, r5, lsr #8
 800181a:	ea02 2214 	and.w	r2, r2, r4, lsr #8
 800181e:	6889      	ldr	r1, [r1, #8]
 8001820:	b29b      	uxth	r3, r3
 8001822:	fab3 f383 	clz	r3, r3
 8001826:	b292      	uxth	r2, r2
 8001828:	fab2 f282 	clz	r2, r2
 800182c:	43c9      	mvns	r1, r1
 800182e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001830:	095b      	lsrs	r3, r3, #5
 8001832:	0952      	lsrs	r2, r2, #5
                            | (LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) << 1)
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	ea01 2114 	and.w	r1, r1, r4, lsr #8
 800183a:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 800183e:	b28a      	uxth	r2, r1
      pHandle->HallState  =(uint8_t) ((LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 2)
 8001840:	2a00      	cmp	r2, #0
 8001842:	bf08      	it	eq
 8001844:	f043 0301 	orreq.w	r3, r3, #1
      pHandle->OVFCounter = 0u;
 8001848:	2200      	movs	r2, #0
 800184a:	f880 30ae 	strb.w	r3, [r0, #174]	; 0xae
    pHandle->_Super.hElAngle = pHandle->PhaseShift + (((uint16_t)pHandle->lut[pHandle->HallState])<<8);
 800184e:	4403      	add	r3, r0
 8001850:	f893 10d2 	ldrb.w	r1, [r3, #210]	; 0xd2
 8001854:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8001856:	f890 402e 	ldrb.w	r4, [r0, #46]	; 0x2e
    pHandle->_Super.hElAngle = pHandle->PhaseShift + (((uint16_t)pHandle->lut[pHandle->HallState])<<8);
 800185a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800185e:	b21b      	sxth	r3, r3
      pHandle->OVFCounter = 0u;
 8001860:	f880 2056 	strb.w	r2, [r0, #86]	; 0x56
    pHandle->_Super.hElAngle = pHandle->PhaseShift + (((uint16_t)pHandle->lut[pHandle->HallState])<<8);
 8001864:	8083      	strh	r3, [r0, #4]
  pHandle->MeasuredElAngle = pHandle->_Super.hElAngle;
 8001866:	f8a0 30b2 	strh.w	r3, [r0, #178]	; 0xb2
      pHandle->FirstCapt = 0u;
 800186a:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 800186e:	b17c      	cbz	r4, 8001890 <HALL_TIMx_UP_IRQHandler+0xdc>
 8001870:	1e62      	subs	r2, r4, #1
 8001872:	b2d3      	uxtb	r3, r2
        pHandle->SensorPeriod[bIndex]  = pHandle->MaxPeriod;
 8001874:	f8d0 10c0 	ldr.w	r1, [r0, #192]	; 0xc0
 8001878:	f100 0258 	add.w	r2, r0, #88	; 0x58
 800187c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8001880:	f100 0354 	add.w	r3, r0, #84	; 0x54
 8001884:	f843 1f04 	str.w	r1, [r3, #4]!
      for ( bIndex = 0u; bIndex < pHandle->SpeedBufferSize; bIndex++ )
 8001888:	429a      	cmp	r2, r3
 800188a:	d1fb      	bne.n	8001884 <HALL_TIMx_UP_IRQHandler+0xd0>
 800188c:	fb01 f404 	mul.w	r4, r1, r4
      pHandle->BufferFilled = 0 ;
 8001890:	2300      	movs	r3, #0
 8001892:	f880 3055 	strb.w	r3, [r0, #85]	; 0x55
      pHandle->SpeedFIFOIdx = 0;
 8001896:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
      pHandle->ElPeriodSum =pHandle->MaxPeriod * pHandle->SpeedBufferSize;
 800189a:	f8c0 40a4 	str.w	r4, [r0, #164]	; 0xa4
      pHandle->AvrElSpeedDpp = 0;
 800189e:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
}
 80018a2:	bc70      	pop	{r4, r5, r6}
 80018a4:	2000      	movs	r0, #0
 80018a6:	4770      	bx	lr
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 80018a8:	6c01      	ldr	r1, [r0, #64]	; 0x40
                            | (LL_GPIO_IsInputPinSet( pHandle->H3Port, pHandle->H3Pin ) << 1)
 80018aa:	6c83      	ldr	r3, [r0, #72]	; 0x48
                            | LL_GPIO_IsInputPinSet( pHandle->H1Port, pHandle->H1Pin ) );
 80018ac:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80018ae:	688c      	ldr	r4, [r1, #8]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	6892      	ldr	r2, [r2, #8]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	43d2      	mvns	r2, r2
 80018b8:	43e4      	mvns	r4, r4
 80018ba:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
 80018bc:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 80018be:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80018c0:	ea03 2316 	and.w	r3, r3, r6, lsr #8
 80018c4:	ea02 2215 	and.w	r2, r2, r5, lsr #8
 80018c8:	b29b      	uxth	r3, r3
 80018ca:	b292      	uxth	r2, r2
 80018cc:	fab3 f383 	clz	r3, r3
 80018d0:	fab2 f282 	clz	r2, r2
 80018d4:	ea04 2111 	and.w	r1, r4, r1, lsr #8
 80018d8:	b289      	uxth	r1, r1
      pHandle->HallState  = (uint8_t) ((( LL_GPIO_IsInputPinSet( pHandle->H2Port, pHandle->H2Pin ) ^ 1 ) << 2)
 80018da:	2900      	cmp	r1, #0
 80018dc:	bf14      	ite	ne
 80018de:	2104      	movne	r1, #4
 80018e0:	2100      	moveq	r1, #0
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	0952      	lsrs	r2, r2, #5
 80018e6:	ea42 0343 	orr.w	r3, r2, r3, lsl #1
 80018ea:	430b      	orrs	r3, r1
 80018ec:	e7ac      	b.n	8001848 <HALL_TIMx_UP_IRQHandler+0x94>
 80018ee:	bf00      	nop

080018f0 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 80018f0:	b510      	push	{r4, lr}
 80018f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f6:	2100      	movs	r1, #0
 80018f8:	4604      	mov	r4, r0
 80018fa:	f00c fe75 	bl	800e5e8 <memset>
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
  }
  pHandle->hNextMeasBufferIndex = 0u;
 80018fe:	2300      	movs	r3, #0
 8001900:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 8001904:	bd10      	pop	{r4, pc}
 8001906:	bf00      	nop

08001908 <MPM_CalcElMotorPower>:
  *         motor power.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak int16_t MPM_CalcElMotorPower( MotorPowMeas_Handle_t * pHandle, int16_t CurrentMotorPower )
{
 8001908:	b470      	push	{r4, r5, r6}
 800190a:	4606      	mov	r6, r0
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800190c:	f8b6 2100 	ldrh.w	r2, [r6, #256]	; 0x100
{
 8001910:	4608      	mov	r0, r1
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 8001912:	1c53      	adds	r3, r2, #1
 8001914:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 8001916:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 8001918:	bf88      	it	hi
 800191a:	2300      	movhi	r3, #0
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800191c:	f826 1012 	strh.w	r1, [r6, r2, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8001920:	f8a6 2102 	strh.w	r2, [r6, #258]	; 0x102
  int32_t wAux = 0;
 8001924:	2200      	movs	r2, #0
    pHandle->hNextMeasBufferIndex = 0u;
 8001926:	f8a6 3100 	strh.w	r3, [r6, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800192a:	f106 05fe 	add.w	r5, r6, #254	; 0xfe
 800192e:	1eb3      	subs	r3, r6, #2
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8001930:	f933 4f02 	ldrsh.w	r4, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8001934:	42ab      	cmp	r3, r5
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8001936:	4422      	add	r2, r4
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8001938:	d1fa      	bne.n	8001930 <MPM_CalcElMotorPower+0x28>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 800193a:	2a00      	cmp	r2, #0
 800193c:	bfb8      	it	lt
 800193e:	327f      	addlt	r2, #127	; 0x7f
 8001940:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8001942:	f8a6 2104 	strh.w	r2, [r6, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8001946:	bc70      	pop	{r4, r5, r6}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop

0800194c <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 800194c:	8a03      	ldrh	r3, [r0, #16]
 800194e:	8b42      	ldrh	r2, [r0, #26]
 8001950:	429a      	cmp	r2, r3
 8001952:	d306      	bcc.n	8001962 <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8001954:	8b82      	ldrh	r2, [r0, #28]
 8001956:	429a      	cmp	r2, r3
 8001958:	d901      	bls.n	800195e <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 800195a:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 800195c:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 800195e:	8ac0      	ldrh	r0, [r0, #22]
 8001960:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8001962:	2008      	movs	r0, #8
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop

08001968 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8001968:	2300      	movs	r3, #0
 800196a:	8203      	strh	r3, [r0, #16]
}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop

08001970 <NTC_Init>:
{
 8001970:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8001972:	7803      	ldrb	r3, [r0, #0]
{
 8001974:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8001976:	b123      	cbz	r3, 8001982 <NTC_Init+0x12>
    pHandle->hFaultState = MC_NO_ERROR;
 8001978:	2200      	movs	r2, #0
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800197a:	8a43      	ldrh	r3, [r0, #18]
    pHandle->hFaultState = MC_NO_ERROR;
 800197c:	82c2      	strh	r2, [r0, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800197e:	8203      	strh	r3, [r0, #16]
}
 8001980:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8001982:	3004      	adds	r0, #4
 8001984:	f001 fe06 	bl	8003594 <RCM_RegisterRegConv>
 8001988:	4603      	mov	r3, r0
    NTC_Clear( pHandle );
 800198a:	4620      	mov	r0, r4
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800198c:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8001990:	f7ff ffea 	bl	8001968 <NTC_Clear>
}
 8001994:	bd10      	pop	{r4, pc}
 8001996:	bf00      	nop

08001998 <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8001998:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800199a:	7803      	ldrb	r3, [r0, #0]
{
 800199c:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 800199e:	b11b      	cbz	r3, 80019a8 <NTC_CalcAvTemp+0x10>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 80019a0:	2300      	movs	r3, #0
 80019a2:	4618      	mov	r0, r3
 80019a4:	82e3      	strh	r3, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 80019a6:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80019a8:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80019ac:	f001 fec4 	bl	8003738 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 80019b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019b4:	4298      	cmp	r0, r3
 80019b6:	d007      	beq.n	80019c8 <NTC_CalcAvTemp+0x30>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80019b8:	8b22      	ldrh	r2, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 80019ba:	8a23      	ldrh	r3, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 80019bc:	1e51      	subs	r1, r2, #1
      wtemp += hAux;
 80019be:	fb01 0003 	mla	r0, r1, r3, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 80019c2:	fbb0 f0f2 	udiv	r0, r0, r2
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 80019c6:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 80019c8:	4620      	mov	r0, r4
 80019ca:	f7ff ffbf 	bl	800194c <NTC_SetFaultState>
 80019ce:	82e0      	strh	r0, [r4, #22]
}
 80019d0:	bd10      	pop	{r4, pc}
 80019d2:	bf00      	nop

080019d4 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 80019d4:	7803      	ldrb	r3, [r0, #0]
 80019d6:	b98b      	cbnz	r3, 80019fc <NTC_GetAvTemp_C+0x28>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 80019d8:	8a03      	ldrh	r3, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 80019da:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 80019dc:	f9b0 201e 	ldrsh.w	r2, [r0, #30]
    wTemp -= ( int32_t )( pHandle->wV0 );
 80019e0:	1a5b      	subs	r3, r3, r1
    wTemp *= pHandle->hSensitivity;
 80019e2:	fb03 f302 	mul.w	r3, r3, r2
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	bfb8      	it	lt
 80019ea:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 80019ee:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 80019f0:	bfb8      	it	lt
 80019f2:	33ff      	addlt	r3, #255	; 0xff
 80019f4:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 80019f8:	b200      	sxth	r0, r0
 80019fa:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 80019fc:	8a80      	ldrh	r0, [r0, #20]
}
 80019fe:	b200      	sxth	r0, r0
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop

08001a04 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8001a04:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8001a06:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8001a08:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8001a0a:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8001a0c:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8001a0e:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8001a10:	6283      	str	r3, [r0, #40]	; 0x28
}
 8001a12:	4770      	bx	lr

08001a14 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8001a14:	6081      	str	r1, [r0, #8]

  return;
}
 8001a16:	4770      	bx	lr

08001a18 <PI_Controller>:
 * @param  wProcessVarError: current process variable error, intended as the reference
 *         value minus the present process variable value
 * @retval computed PI output
 */
__weak int16_t PI_Controller( PID_Handle_t * pHandle, int32_t wProcessVarError )
{
 8001a18:	b470      	push	{r4, r5, r6}
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	460d      	mov	r5, r1
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8001a1e:	f9b0 4004 	ldrsh.w	r4, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8001a22:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8001a26:	fb05 f404 	mul.w	r4, r5, r4
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8001a2a:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8001a2e:	f9b3 6016 	ldrsh.w	r6, [r3, #22]
  if ( pHandle->hKiGain == 0 )
 8001a32:	b161      	cbz	r1, 8001a4e <PI_Controller+0x36>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8001a34:	fb05 f101 	mul.w	r1, r5, r1
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8001a38:	689a      	ldr	r2, [r3, #8]

    if ( wIntegral_sum_temp < 0 )
 8001a3a:	1855      	adds	r5, r2, r1
 8001a3c:	d41e      	bmi.n	8001a7c <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8001a3e:	2a00      	cmp	r2, #0
 8001a40:	db28      	blt.n	8001a94 <PI_Controller+0x7c>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8001a42:	68d9      	ldr	r1, [r3, #12]
 8001a44:	42a9      	cmp	r1, r5
 8001a46:	db02      	blt.n	8001a4e <PI_Controller+0x36>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8001a48:	6919      	ldr	r1, [r3, #16]
 8001a4a:	42a9      	cmp	r1, r5
 8001a4c:	dd20      	ble.n	8001a90 <PI_Controller+0x78>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8001a4e:	8b9d      	ldrh	r5, [r3, #28]
 8001a50:	8bda      	ldrh	r2, [r3, #30]
 8001a52:	412c      	asrs	r4, r5
 8001a54:	fa41 f202 	asr.w	r2, r1, r2
 8001a58:	4422      	add	r2, r4
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8001a5a:	4290      	cmp	r0, r2
 8001a5c:	da04      	bge.n	8001a68 <PI_Controller+0x50>
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;

  return ( ( int16_t )( wOutput_32 ) );
}
 8001a5e:	bc70      	pop	{r4, r5, r6}
    wDischarge = hUpperOutputLimit - wOutput_32;
 8001a60:	1a82      	subs	r2, r0, r2
 8001a62:	4411      	add	r1, r2
  pHandle->wIntegralTerm += wDischarge;
 8001a64:	6099      	str	r1, [r3, #8]
}
 8001a66:	4770      	bx	lr
  else if ( wOutput_32 < hLowerOutputLimit )
 8001a68:	4296      	cmp	r6, r2
    wDischarge = hLowerOutputLimit - wOutput_32;
 8001a6a:	bfc2      	ittt	gt
 8001a6c:	1ab2      	subgt	r2, r6, r2
 8001a6e:	1889      	addgt	r1, r1, r2
 8001a70:	4630      	movgt	r0, r6
}
 8001a72:	bc70      	pop	{r4, r5, r6}
 8001a74:	bfd8      	it	le
 8001a76:	b210      	sxthle	r0, r2
  pHandle->wIntegralTerm += wDischarge;
 8001a78:	6099      	str	r1, [r3, #8]
}
 8001a7a:	4770      	bx	lr
      if ( pHandle->wIntegralTerm > 0 )
 8001a7c:	2a00      	cmp	r2, #0
 8001a7e:	dde0      	ble.n	8001a42 <PI_Controller+0x2a>
        if ( wIntegral_Term > 0 )
 8001a80:	2900      	cmp	r1, #0
 8001a82:	ddde      	ble.n	8001a42 <PI_Controller+0x2a>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8001a84:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001a88:	68d9      	ldr	r1, [r3, #12]
 8001a8a:	4291      	cmp	r1, r2
 8001a8c:	d1df      	bne.n	8001a4e <PI_Controller+0x36>
          wIntegral_sum_temp = INT32_MAX;
 8001a8e:	460d      	mov	r5, r1
 8001a90:	4629      	mov	r1, r5
 8001a92:	e7dc      	b.n	8001a4e <PI_Controller+0x36>
          wIntegral_sum_temp = -INT32_MAX;
 8001a94:	4a02      	ldr	r2, [pc, #8]	; (8001aa0 <PI_Controller+0x88>)
 8001a96:	ea35 0521 	bics.w	r5, r5, r1, asr #32
 8001a9a:	bf28      	it	cs
 8001a9c:	4615      	movcs	r5, r2
 8001a9e:	e7d0      	b.n	8001a42 <PI_Controller+0x2a>
 8001aa0:	80000001 	.word	0x80000001

08001aa4 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 8001aa4:	b570      	push	{r4, r5, r6, lr}
 8001aa6:	4605      	mov	r5, r0
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8001aa8:	e9d0 1043 	ldrd	r1, r0, [r0, #268]	; 0x10c
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8001aac:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
 8001ab0:	f9b1 4018 	ldrsh.w	r4, [r1, #24]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8001ab4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8001ab8:	fb04 f403 	mul.w	r4, r4, r3
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8001abc:	f9b1 3016 	ldrsh.w	r3, [r1, #22]
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8001ac0:	f8d5 6108 	ldr.w	r6, [r5, #264]	; 0x108
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8001ac4:	fb03 4402 	mla	r4, r3, r2, r4
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8001ac8:	f7ff fb6c 	bl	80011a4 <VBS_GetAvBusVoltage_V>
 8001acc:	fb06 f000 	mul.w	r0, r6, r0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8001ad0:	490d      	ldr	r1, [pc, #52]	; (8001b08 <PQD_CalcElMotorPower+0x64>)
 8001ad2:	17c3      	asrs	r3, r0, #31
 8001ad4:	fb81 1000 	smull	r1, r0, r1, r0
  wAux /= 65536;
 8001ad8:	1e22      	subs	r2, r4, #0
 8001ada:	bfbc      	itt	lt
 8001adc:	f502 427f 	addlt.w	r2, r2, #65280	; 0xff00
 8001ae0:	32ff      	addlt	r2, #255	; 0xff
 8001ae2:	1412      	asrs	r2, r2, #16
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8001ae4:	ebc3 13a0 	rsb	r3, r3, r0, asr #6

  wAux3 = wAux * wAux2;
 8001ae8:	fb03 f302 	mul.w	r3, r3, r2
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8001aec:	4907      	ldr	r1, [pc, #28]	; (8001b0c <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8001aee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001af2:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8001af4:	fb81 2103 	smull	r2, r1, r1, r3
 8001af8:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8001afa:	4628      	mov	r0, r5

}
 8001afc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8001b00:	ebc3 41a1 	rsb	r1, r3, r1, asr #18
 8001b04:	f7ff bf00 	b.w	8001908 <MPM_CalcElMotorPower>
 8001b08:	1b4e81b5 	.word	0x1b4e81b5
 8001b0c:	66666667 	.word	0x66666667

08001b10 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <startTimers+0x60>)
 8001b12:	69da      	ldr	r2, [r3, #28]
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
  if ( isTIM2ClockOn == 0 )
 8001b14:	07d2      	lsls	r2, r2, #31
 8001b16:	d415      	bmi.n	8001b44 <startTimers+0x34>
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001b18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  SET_BIT(RCC->APB1ENR, Periphs);
 8001b1c:	69da      	ldr	r2, [r3, #28]
{
 8001b1e:	b082      	sub	sp, #8
 8001b20:	f042 0201 	orr.w	r2, r2, #1
 8001b24:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001b26:	69da      	ldr	r2, [r3, #28]
 8001b28:	f002 0201 	and.w	r2, r2, #1
 8001b2c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001b2e:	9a01      	ldr	r2, [sp, #4]
 8001b30:	694a      	ldr	r2, [r1, #20]
 8001b32:	f042 0201 	orr.w	r2, r2, #1
 8001b36:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8001b38:	69da      	ldr	r2, [r3, #28]
 8001b3a:	f022 0201 	bic.w	r2, r2, #1
 8001b3e:	61da      	str	r2, [r3, #28]
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8001b40:	b002      	add	sp, #8
 8001b42:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8001b44:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b48:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8001b50:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8001b54:	f041 0120 	orr.w	r1, r1, #32
 8001b58:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001b5a:	6959      	ldr	r1, [r3, #20]
 8001b5c:	f041 0101 	orr.w	r1, r1, #1
 8001b60:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001b62:	6859      	ldr	r1, [r3, #4]
 8001b64:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000

08001b74 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8001b74:	b4f0      	push	{r4, r5, r6, r7}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8001b76:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8001b78:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8001b7c:	d119      	bne.n	8001bb2 <waitForPolarizationEnd+0x3e>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8001b7e:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8001b80:	3201      	adds	r2, #1
 8001b82:	0856      	lsrs	r6, r2, #1
 8001b84:	0176      	lsls	r6, r6, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001b86:	f06f 0702 	mvn.w	r7, #2
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	6107      	str	r7, [r0, #16]
  while (*cnt < NB_CONVERSIONS)
 8001b8e:	781c      	ldrb	r4, [r3, #0]
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8001b90:	1c55      	adds	r5, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8001b92:	2c0f      	cmp	r4, #15
 8001b94:	d80b      	bhi.n	8001bae <waitForPolarizationEnd+0x3a>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8001b96:	6904      	ldr	r4, [r0, #16]
 8001b98:	07a4      	lsls	r4, r4, #30
 8001b9a:	d5f8      	bpl.n	8001b8e <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 8001b9c:	b2aa      	uxth	r2, r5
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8001b9e:	4296      	cmp	r6, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8001ba0:	6107      	str	r7, [r0, #16]
 8001ba2:	d8f4      	bhi.n	8001b8e <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 8001ba4:	781c      	ldrb	r4, [r3, #0]
 8001ba6:	2c0f      	cmp	r4, #15
 8001ba8:	d8f1      	bhi.n	8001b8e <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 8001baa:	2301      	movs	r3, #1
 8001bac:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8001bae:	bcf0      	pop	{r4, r5, r6, r7}
 8001bb0:	4770      	bx	lr
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8001bb2:	2c60      	cmp	r4, #96	; 0x60
 8001bb4:	d1e4      	bne.n	8001b80 <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8001bb6:	3201      	adds	r2, #1
 8001bb8:	0156      	lsls	r6, r2, #5
 8001bba:	e7e4      	b.n	8001b86 <waitForPolarizationEnd+0x12>

08001bbc <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8001bbc:	6843      	ldr	r3, [r0, #4]
 8001bbe:	4718      	bx	r3

08001bc0 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8001bc0:	b4f0      	push	{r4, r5, r6, r7}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8001bc2:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8001bc6:	8e03      	ldrh	r3, [r0, #48]	; 0x30
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8001bc8:	140c      	asrs	r4, r1, #16
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8001bca:	b20a      	sxth	r2, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8001bcc:	fb06 f404 	mul.w	r4, r6, r4
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8001bd0:	fb03 f302 	mul.w	r3, r3, r2
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8001bd4:	ebc4 74c4 	rsb	r4, r4, r4, lsl #31

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8001bd8:	eb03 0244 	add.w	r2, r3, r4, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8001bdc:	ebc3 0344 	rsb	r3, r3, r4, lsl #1
 8001be0:	eb03 77d3 	add.w	r7, r3, r3, lsr #31
{
 8001be4:	b082      	sub	sp, #8
  wY = ( wUBeta + wUAlpha ) / 2;
 8001be6:	eb02 75d2 	add.w	r5, r2, r2, lsr #31
{
 8001bea:	9101      	str	r1, [sp, #4]
  wZ = ( wUBeta - wUAlpha ) / 2;
 8001bec:	1079      	asrs	r1, r7, #1

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8001bee:	1c57      	adds	r7, r2, #1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8001bf0:	ea4f 0444 	mov.w	r4, r4, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8001bf4:	ea4f 0565 	mov.w	r5, r5, asr #1
  if ( wY < 0 )
 8001bf8:	db74      	blt.n	8001ce4 <PWMC_SetPhaseVoltage+0x124>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8001bfa:	1c5f      	adds	r7, r3, #1
 8001bfc:	db4e      	blt.n	8001c9c <PWMC_SetPhaseVoltage+0xdc>
    {
      pHandle->Sector = SECTOR_2;
 8001bfe:	2401      	movs	r4, #1
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8001c00:	1a6d      	subs	r5, r5, r1
 8001c02:	bf44      	itt	mi
 8001c04:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8001c08:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bfbc      	itt	lt
 8001c10:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8001c14:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8001c18:	2a00      	cmp	r2, #0
 8001c1a:	bfb8      	it	lt
 8001c1c:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8001c20:	ea4f 0196 	mov.w	r1, r6, lsr #2
 8001c24:	eb01 41a5 	add.w	r1, r1, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8001c28:	bfb8      	it	lt
 8001c2a:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8001c2e:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8001c32:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->Sector = SECTOR_2;
 8001c36:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
      pHandle->midDuty = wTimePhA;
      pHandle->highDuty = wTimePhC;
 8001c3a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
      pHandle->lowDuty = wTimePhB;
 8001c3e:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8001c40:	87c1      	strh	r1, [r0, #62]	; 0x3e

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8001c42:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8001c46:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8001c4a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001c4e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8001c52:	b289      	uxth	r1, r1
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	b292      	uxth	r2, r2
 8001c58:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8001c5a:	8641      	strh	r1, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8001c5c:	8683      	strh	r3, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8001c5e:	86c2      	strh	r2, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8001c60:	d118      	bne.n	8001c94 <PWMC_SetPhaseVoltage+0xd4>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8001c62:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ib > 0 )
 8001c66:	f9b0 504a 	ldrsh.w	r5, [r0, #74]	; 0x4a
    if ( pHandle->Ia > 0 )
 8001c6a:	2c00      	cmp	r4, #0
      pHandle->CntPhA += pHandle->DTCompCnt;
 8001c6c:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8001c70:	bfcc      	ite	gt
 8001c72:	1909      	addgt	r1, r1, r4
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8001c74:	1b09      	suble	r1, r1, r4
 8001c76:	b289      	uxth	r1, r1
 8001c78:	8641      	strh	r1, [r0, #50]	; 0x32
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8001c7a:	f9b0 104c 	ldrsh.w	r1, [r0, #76]	; 0x4c
    if ( pHandle->Ib > 0 )
 8001c7e:	2d00      	cmp	r5, #0
      pHandle->CntPhB += pHandle->DTCompCnt;
 8001c80:	bfcc      	ite	gt
 8001c82:	191b      	addgt	r3, r3, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8001c84:	1b1b      	suble	r3, r3, r4
    if ( pHandle->Ic > 0 )
 8001c86:	2900      	cmp	r1, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8001c88:	b29b      	uxth	r3, r3
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8001c8a:	bfcc      	ite	gt
 8001c8c:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8001c8e:	1b12      	suble	r2, r2, r4
 8001c90:	8683      	strh	r3, [r0, #52]	; 0x34
 8001c92:	86c2      	strh	r2, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8001c94:	6983      	ldr	r3, [r0, #24]
}
 8001c96:	b002      	add	sp, #8
 8001c98:	bcf0      	pop	{r4, r5, r6, r7}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8001c9a:	4718      	bx	r3
      if ( wX <= 0 )
 8001c9c:	2c00      	cmp	r4, #0
 8001c9e:	dd42      	ble.n	8001d26 <PWMC_SetPhaseVoltage+0x166>
        pHandle->Sector = SECTOR_1;
 8001ca0:	2200      	movs	r2, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001ca2:	1a65      	subs	r5, r4, r1
 8001ca4:	bf44      	itt	mi
 8001ca6:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8001caa:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	bfbc      	itt	lt
 8001cb2:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8001cb6:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8001cba:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001cbe:	08b1      	lsrs	r1, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8001cc0:	1e22      	subs	r2, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001cc2:	eb01 41a5 	add.w	r1, r1, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8001cc6:	bfb8      	it	lt
 8001cc8:	f502 32ff 	addlt.w	r2, r2, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8001ccc:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8001cd0:	bfb8      	it	lt
 8001cd2:	f202 12ff 	addwlt	r2, r2, #511	; 0x1ff
 8001cd6:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->highDuty = wTimePhC;
 8001cda:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8001cde:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8001ce0:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8001ce2:	e7ae      	b.n	8001c42 <PWMC_SetPhaseVoltage+0x82>
    if ( wZ < 0 )
 8001ce4:	1c5f      	adds	r7, r3, #1
 8001ce6:	db62      	blt.n	8001dae <PWMC_SetPhaseVoltage+0x1ee>
      if ( wX <= 0 )
 8001ce8:	2c00      	cmp	r4, #0
 8001cea:	dd3e      	ble.n	8001d6a <PWMC_SetPhaseVoltage+0x1aa>
        pHandle->Sector = SECTOR_3;
 8001cec:	2302      	movs	r3, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8001cee:	1b2d      	subs	r5, r5, r4
 8001cf0:	bf44      	itt	mi
 8001cf2:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8001cf6:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8001cfa:	2a00      	cmp	r2, #0
 8001cfc:	bfb8      	it	lt
 8001cfe:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8001d02:	ea4f 0196 	mov.w	r1, r6, lsr #2
 8001d06:	eb01 41a5 	add.w	r1, r1, r5, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8001d0a:	bfb8      	it	lt
 8001d0c:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
 8001d10:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        pHandle->Sector = SECTOR_3;
 8001d14:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8001d18:	eb02 4364 	add.w	r3, r2, r4, asr #17
        pHandle->lowDuty = wTimePhB;
 8001d1c:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8001d1e:	87c2      	strh	r2, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8001d20:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8001d24:	e78d      	b.n	8001c42 <PWMC_SetPhaseVoltage+0x82>
        pHandle->Sector = SECTOR_6;
 8001d26:	2305      	movs	r3, #5
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8001d28:	1b2d      	subs	r5, r5, r4
 8001d2a:	bf44      	itt	mi
 8001d2c:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8001d30:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8001d34:	2a00      	cmp	r2, #0
 8001d36:	bfbc      	itt	lt
 8001d38:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
 8001d3c:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8001d40:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8001d44:	08b1      	lsrs	r1, r6, #2
        wTimePhB = wTimePhC + wX / 131072;
 8001d46:	1e23      	subs	r3, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8001d48:	eb01 41a5 	add.w	r1, r1, r5, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8001d4c:	bfb8      	it	lt
 8001d4e:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8001d52:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8001d56:	bfb8      	it	lt
 8001d58:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8001d5c:	eb02 4363 	add.w	r3, r2, r3, asr #17
        pHandle->highDuty = wTimePhB;
 8001d60:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
        pHandle->lowDuty = wTimePhA;
 8001d64:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8001d66:	87c2      	strh	r2, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8001d68:	e76b      	b.n	8001c42 <PWMC_SetPhaseVoltage+0x82>
        pHandle->Sector = SECTOR_4;
 8001d6a:	2203      	movs	r2, #3
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001d6c:	1a65      	subs	r5, r4, r1
 8001d6e:	bf44      	itt	mi
 8001d70:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8001d74:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bfbc      	itt	lt
 8001d7c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8001d80:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8001d84:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001d88:	08b1      	lsrs	r1, r6, #2
        wTimePhC = wTimePhB - wX / 131072;
 8001d8a:	1e22      	subs	r2, r4, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8001d8c:	eb01 41a5 	add.w	r1, r1, r5, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8001d90:	bfb8      	it	lt
 8001d92:	f502 32ff 	addlt.w	r2, r2, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8001d96:	eb01 43a3 	add.w	r3, r1, r3, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8001d9a:	bfb8      	it	lt
 8001d9c:	f202 12ff 	addwlt	r2, r2, #511	; 0x1ff
 8001da0:	eba3 4262 	sub.w	r2, r3, r2, asr #17
        pHandle->lowDuty = wTimePhC;
 8001da4:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8001da6:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8001da8:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8001dac:	e749      	b.n	8001c42 <PWMC_SetPhaseVoltage+0x82>
      pHandle->Sector = SECTOR_5;
 8001dae:	2404      	movs	r4, #4
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8001db0:	1a6d      	subs	r5, r5, r1
 8001db2:	bf44      	itt	mi
 8001db4:	f505 357f 	addmi.w	r5, r5, #261120	; 0x3fc00
 8001db8:	f205 35ff 	addwmi	r5, r5, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bfbc      	itt	lt
 8001dc0:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
 8001dc4:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8001dc8:	2a00      	cmp	r2, #0
 8001dca:	bfb8      	it	lt
 8001dcc:	f502 327f 	addlt.w	r2, r2, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8001dd0:	ea4f 0196 	mov.w	r1, r6, lsr #2
 8001dd4:	eb01 41a5 	add.w	r1, r1, r5, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8001dd8:	bfb8      	it	lt
 8001dda:	f202 32ff 	addwlt	r2, r2, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8001dde:	eb01 43a3 	add.w	r3, r1, r3, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8001de2:	eba1 42a2 	sub.w	r2, r1, r2, asr #18
      pHandle->Sector = SECTOR_5;
 8001de6:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8001dea:	8782      	strh	r2, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8001dec:	87c1      	strh	r1, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8001dee:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8001df2:	e726      	b.n	8001c42 <PWMC_SetPhaseVoltage+0x82>

08001df4 <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8001df4:	6883      	ldr	r3, [r0, #8]
 8001df6:	4718      	bx	r3

08001df8 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8001df8:	b520      	push	{r5, lr}
 8001dfa:	4605      	mov	r5, r0
 8001dfc:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8001dfe:	b199      	cbz	r1, 8001e28 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8001e00:	2901      	cmp	r1, #1
 8001e02:	d002      	beq.n	8001e0a <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8001e04:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8001e06:	b002      	add	sp, #8
 8001e08:	bd20      	pop	{r5, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8001e0a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8001e0e:	b1cb      	cbz	r3, 8001e44 <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8001e10:	3b01      	subs	r3, #1
 8001e12:	b29b      	uxth	r3, r3
 8001e14:	9101      	str	r1, [sp, #4]
 8001e16:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1f2      	bne.n	8001e04 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8001e1e:	6903      	ldr	r3, [r0, #16]
 8001e20:	4798      	blx	r3
        retVal = true;
 8001e22:	9901      	ldr	r1, [sp, #4]
 8001e24:	4608      	mov	r0, r1
 8001e26:	e7ee      	b.n	8001e06 <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8001e28:	f7ff ffe4 	bl	8001df4 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8001e2c:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
 8001e30:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d1e5      	bne.n	8001e04 <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8001e38:	4628      	mov	r0, r5
 8001e3a:	692b      	ldr	r3, [r5, #16]
 8001e3c:	4798      	blx	r3
      retVal = true;
 8001e3e:	2001      	movs	r0, #1
}
 8001e40:	b002      	add	sp, #8
 8001e42:	bd20      	pop	{r5, pc}
      retVal = true;
 8001e44:	4608      	mov	r0, r1
}
 8001e46:	b002      	add	sp, #8
 8001e48:	bd20      	pop	{r5, pc}
 8001e4a:	bf00      	nop

08001e4c <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8001e4c:	69c3      	ldr	r3, [r0, #28]
 8001e4e:	4718      	bx	r3

08001e50 <R3_2_GetPhaseCurrents>:
 */
__weak void R3_2_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t* pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001e50:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001e52:	b4f0      	push	{r4, r5, r6, r7}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001e54:	689c      	ldr	r4, [r3, #8]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001e56:	6a22      	ldr	r2, [r4, #32]
 8001e58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e5c:	6222      	str	r2, [r4, #32]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = pHandle->_Super.Sector;
 8001e5e:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 8001e62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8001e66:	699a      	ldr	r2, [r3, #24]
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 8001e6a:	6812      	ldr	r2, [r2, #0]
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 8001e6c:	681b      	ldr	r3, [r3, #0]
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 8001e6e:	0052      	lsls	r2, r2, #1
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 8001e70:	005b      	lsls	r3, r3, #1
  hReg1 = *pHandle->pParams_str->ADCDataReg1[bSector] * 2;
 8001e72:	b292      	uxth	r2, r2
  hReg2 = *pHandle->pParams_str->ADCDataReg2[bSector] * 2;
 8001e74:	b29e      	uxth	r6, r3

  switch ( bSector )
 8001e76:	2c05      	cmp	r4, #5
 8001e78:	f200 809e 	bhi.w	8001fb8 <R3_2_GetPhaseCurrents+0x168>
 8001e7c:	e8df f004 	tbb	[pc, r4]
 8001e80:	031d1d36 	.word	0x031d1d36
 8001e84:	3603      	.short	0x3603
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8001e86:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8001e88:	4c4f      	ldr	r4, [pc, #316]	; (8001fc8 <R3_2_GetPhaseCurrents+0x178>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8001e8a:	1a9a      	subs	r2, r3, r2
      if ( wAux < -INT16_MAX )
 8001e8c:	42a2      	cmp	r2, r4
 8001e8e:	db5c      	blt.n	8001f4a <R3_2_GetPhaseCurrents+0xfa>
      {
        pStator_Currents->a = -INT16_MAX;
      }
      else  if ( wAux > INT16_MAX )
 8001e90:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
      {
        pStator_Currents->a = INT16_MAX;
 8001e94:	bfa8      	it	ge
 8001e96:	f647 73ff 	movwge	r3, #32767	; 0x7fff
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8001e9a:	6e04      	ldr	r4, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 8001e9c:	4f4a      	ldr	r7, [pc, #296]	; (8001fc8 <R3_2_GetPhaseCurrents+0x178>)
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8001e9e:	eba4 0406 	sub.w	r4, r4, r6
        pStator_Currents->a = INT16_MAX;
 8001ea2:	bfac      	ite	ge
 8001ea4:	800b      	strhge	r3, [r1, #0]
        pStator_Currents->a = ( int16_t )wAux;
 8001ea6:	800a      	strhlt	r2, [r1, #0]
      if ( wAux < -INT16_MAX )
 8001ea8:	42bc      	cmp	r4, r7
 8001eaa:	da54      	bge.n	8001f56 <R3_2_GetPhaseCurrents+0x106>
      {
        pStator_Currents->b = -INT16_MAX;
 8001eac:	f9b1 5000 	ldrsh.w	r5, [r1]
 8001eb0:	f248 0401 	movw	r4, #32769	; 0x8001
 8001eb4:	804f      	strh	r7, [r1, #2]
 8001eb6:	b2ab      	uxth	r3, r5
 8001eb8:	e031      	b.n	8001f1e <R3_2_GetPhaseCurrents+0xce>

    case SECTOR_2:
    case SECTOR_3:
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8001eba:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8001ebc:	4b42      	ldr	r3, [pc, #264]	; (8001fc8 <R3_2_GetPhaseCurrents+0x178>)
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8001ebe:	1aaa      	subs	r2, r5, r2
      if ( wAux < -INT16_MAX )
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	db3c      	blt.n	8001f3e <R3_2_GetPhaseCurrents+0xee>
      {
        pStator_Currents->a = -INT16_MAX;
      }
      else  if ( wAux > INT16_MAX )
 8001ec4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ec8:	db6a      	blt.n	8001fa0 <R3_2_GetPhaseCurrents+0x150>
      {
        pStator_Currents->a = INT16_MAX;
 8001eca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001ece:	4613      	mov	r3, r2
 8001ed0:	4615      	mov	r5, r2
 8001ed2:	800a      	strh	r2, [r1, #0]
      }

      /* Ic = PhaseCOffset - ADC converted value) */
      /* Ib = -Ic -Ia */
      wAux = ( int32_t )( pHandle->PhaseCOffset ) - ( int32_t )( hReg2 );
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 8001ed4:	6e44      	ldr	r4, [r0, #100]	; 0x64
 8001ed6:	1b34      	subs	r4, r6, r4
 8001ed8:	1aa2      	subs	r2, r4, r2

      /* Saturation of Ib */
      if ( wAux > INT16_MAX )
 8001eda:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001ede:	db4d      	blt.n	8001f7c <R3_2_GetPhaseCurrents+0x12c>
      {
        pStator_Currents->b = INT16_MAX;
 8001ee0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001ee4:	4614      	mov	r4, r2
 8001ee6:	4617      	mov	r7, r2
 8001ee8:	804a      	strh	r2, [r1, #2]
 8001eea:	e018      	b.n	8001f1e <R3_2_GetPhaseCurrents+0xce>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8001eec:	6e05      	ldr	r5, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 8001eee:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <R3_2_GetPhaseCurrents+0x178>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8001ef0:	1aaa      	subs	r2, r5, r2
      if ( wAux < -INT16_MAX )
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	db1d      	blt.n	8001f32 <R3_2_GetPhaseCurrents+0xe2>
      else  if ( wAux > INT16_MAX )
 8001ef6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001efa:	db46      	blt.n	8001f8a <R3_2_GetPhaseCurrents+0x13a>
        pStator_Currents->b = INT16_MAX;
 8001efc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001f00:	461c      	mov	r4, r3
 8001f02:	461a      	mov	r2, r3
 8001f04:	461f      	mov	r7, r3
 8001f06:	804b      	strh	r3, [r1, #2]
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8001f08:	6e45      	ldr	r5, [r0, #100]	; 0x64
 8001f0a:	1b73      	subs	r3, r6, r5
 8001f0c:	1a9a      	subs	r2, r3, r2
      if ( wAux > INT16_MAX )
 8001f0e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001f12:	db2c      	blt.n	8001f6e <R3_2_GetPhaseCurrents+0x11e>
        pStator_Currents->a = INT16_MAX;
 8001f14:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001f18:	4613      	mov	r3, r2
 8001f1a:	4615      	mov	r5, r2
 8001f1c:	800a      	strh	r2, [r1, #0]
      break;
  }

  pHandle->_Super.Ia = pStator_Currents->a;
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8001f1e:	4423      	add	r3, r4
 8001f20:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 8001f22:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
  pHandle->_Super.Ib = pStator_Currents->b;
 8001f26:	f8a0 704a 	strh.w	r7, [r0, #74]	; 0x4a
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8001f2a:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 8001f2e:	bcf0      	pop	{r4, r5, r6, r7}
 8001f30:	4770      	bx	lr
        pStator_Currents->b = -INT16_MAX;
 8001f32:	461a      	mov	r2, r3
 8001f34:	461f      	mov	r7, r3
 8001f36:	f248 0401 	movw	r4, #32769	; 0x8001
 8001f3a:	804b      	strh	r3, [r1, #2]
 8001f3c:	e7e4      	b.n	8001f08 <R3_2_GetPhaseCurrents+0xb8>
        pStator_Currents->a = -INT16_MAX;
 8001f3e:	461a      	mov	r2, r3
 8001f40:	461d      	mov	r5, r3
 8001f42:	800b      	strh	r3, [r1, #0]
 8001f44:	f248 0301 	movw	r3, #32769	; 0x8001
 8001f48:	e7c4      	b.n	8001ed4 <R3_2_GetPhaseCurrents+0x84>
        pStator_Currents->a = -INT16_MAX;
 8001f4a:	800c      	strh	r4, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8001f4c:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( wAux < -INT16_MAX )
 8001f4e:	4f1e      	ldr	r7, [pc, #120]	; (8001fc8 <R3_2_GetPhaseCurrents+0x178>)
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8001f50:	1ba4      	subs	r4, r4, r6
      if ( wAux < -INT16_MAX )
 8001f52:	42bc      	cmp	r4, r7
 8001f54:	dbaa      	blt.n	8001eac <R3_2_GetPhaseCurrents+0x5c>
      else  if ( wAux > INT16_MAX )
 8001f56:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001f5a:	db1a      	blt.n	8001f92 <R3_2_GetPhaseCurrents+0x142>
        pStator_Currents->b = INT16_MAX;
 8001f5c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8001f60:	f9b1 5000 	ldrsh.w	r5, [r1]
 8001f64:	461c      	mov	r4, r3
 8001f66:	461f      	mov	r7, r3
 8001f68:	804b      	strh	r3, [r1, #2]
 8001f6a:	b2ab      	uxth	r3, r5
 8001f6c:	e7d7      	b.n	8001f1e <R3_2_GetPhaseCurrents+0xce>
      else  if ( wAux < -INT16_MAX )
 8001f6e:	4d16      	ldr	r5, [pc, #88]	; (8001fc8 <R3_2_GetPhaseCurrents+0x178>)
 8001f70:	42aa      	cmp	r2, r5
 8001f72:	da19      	bge.n	8001fa8 <R3_2_GetPhaseCurrents+0x158>
        pStator_Currents->a = -INT16_MAX;
 8001f74:	f248 0301 	movw	r3, #32769	; 0x8001
 8001f78:	800d      	strh	r5, [r1, #0]
 8001f7a:	e7d0      	b.n	8001f1e <R3_2_GetPhaseCurrents+0xce>
      else  if ( wAux < -INT16_MAX )
 8001f7c:	4f12      	ldr	r7, [pc, #72]	; (8001fc8 <R3_2_GetPhaseCurrents+0x178>)
 8001f7e:	42ba      	cmp	r2, r7
 8001f80:	da16      	bge.n	8001fb0 <R3_2_GetPhaseCurrents+0x160>
        pStator_Currents->b = -INT16_MAX;
 8001f82:	f248 0401 	movw	r4, #32769	; 0x8001
 8001f86:	804f      	strh	r7, [r1, #2]
 8001f88:	e7c9      	b.n	8001f1e <R3_2_GetPhaseCurrents+0xce>
        pStator_Currents->b = ( int16_t )wAux;
 8001f8a:	b217      	sxth	r7, r2
 8001f8c:	804f      	strh	r7, [r1, #2]
 8001f8e:	b294      	uxth	r4, r2
 8001f90:	e7ba      	b.n	8001f08 <R3_2_GetPhaseCurrents+0xb8>
        pStator_Currents->b = ( int16_t )wAux;
 8001f92:	f9b1 5000 	ldrsh.w	r5, [r1]
 8001f96:	b227      	sxth	r7, r4
 8001f98:	b2ab      	uxth	r3, r5
 8001f9a:	804f      	strh	r7, [r1, #2]
 8001f9c:	b2a4      	uxth	r4, r4
 8001f9e:	e7be      	b.n	8001f1e <R3_2_GetPhaseCurrents+0xce>
        pStator_Currents->a = ( int16_t )wAux;
 8001fa0:	b215      	sxth	r5, r2
 8001fa2:	800d      	strh	r5, [r1, #0]
 8001fa4:	b293      	uxth	r3, r2
 8001fa6:	e795      	b.n	8001ed4 <R3_2_GetPhaseCurrents+0x84>
        pStator_Currents->a = ( int16_t )wAux;
 8001fa8:	b215      	sxth	r5, r2
 8001faa:	800d      	strh	r5, [r1, #0]
 8001fac:	b293      	uxth	r3, r2
 8001fae:	e7b6      	b.n	8001f1e <R3_2_GetPhaseCurrents+0xce>
        pStator_Currents->b = ( int16_t )wAux;
 8001fb0:	b217      	sxth	r7, r2
 8001fb2:	804f      	strh	r7, [r1, #2]
 8001fb4:	b294      	uxth	r4, r2
 8001fb6:	e7b2      	b.n	8001f1e <R3_2_GetPhaseCurrents+0xce>
 8001fb8:	f9b1 5000 	ldrsh.w	r5, [r1]
 8001fbc:	f9b1 7002 	ldrsh.w	r7, [r1, #2]
 8001fc0:	880b      	ldrh	r3, [r1, #0]
 8001fc2:	884c      	ldrh	r4, [r1, #2]
 8001fc4:	e7ab      	b.n	8001f1e <R3_2_GetPhaseCurrents+0xce>
 8001fc6:	bf00      	nop
 8001fc8:	ffff8001 	.word	0xffff8001

08001fcc <R3_2_HFCurrentsPolarizationAB>:
  * @retval It always returns {0,0} in ab_t format
  */
void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001fcc:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8001fce:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8001fd0:	689c      	ldr	r4, [r3, #8]
 8001fd2:	6a22      	ldr	r2, [r4, #32]
 8001fd4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fd8:	6222      	str	r2, [r4, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8001fda:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 8001fde:	2a0f      	cmp	r2, #15
 8001fe0:	d813      	bhi.n	800200a <R3_2_HFCurrentsPolarizationAB+0x3e>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8001fe2:	f890 2071 	ldrb.w	r2, [r0, #113]	; 0x71
 8001fe6:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
 8001fe8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8001fec:	699a      	ldr	r2, [r3, #24]
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8001ff0:	6815      	ldr	r5, [r2, #0]
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8001ff2:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 8001ff4:	442c      	add	r4, r5
 8001ff6:	65c4      	str	r4, [r0, #92]	; 0x5c
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8001ff8:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 8001ffa:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8001ffe:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8002000:	3301      	adds	r3, #1
 8002002:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8002004:	6602      	str	r2, [r0, #96]	; 0x60
    pHandle->PolarizationCounter++;
 8002006:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  }

  /* during offset Polarization no current is flowing in the phases */
  pStator_Currents->a = 0;
 800200a:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 800200c:	bc30      	pop	{r4, r5}
  pStator_Currents->a = 0;
 800200e:	600b      	str	r3, [r1, #0]
}
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop

08002014 <R3_2_HFCurrentsPolarizationC>:
  *         the offset computation.
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval It always returns {0,0} in ab_t format
  */
void R3_2_HFCurrentsPolarizationC( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 8002014:	b410      	push	{r4}
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;  
 8002016:	6f44      	ldr	r4, [r0, #116]	; 0x74
 8002018:	68a2      	ldr	r2, [r4, #8]
 800201a:	6a13      	ldr	r3, [r2, #32]
 800201c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002020:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8002022:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002026:	2b0f      	cmp	r3, #15
 8002028:	d80e      	bhi.n	8002048 <R3_2_HFCurrentsPolarizationC+0x34>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800202a:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 800202e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8002030:	330c      	adds	r3, #12
 8002032:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8002036:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 8002038:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800203c:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 800203e:	3301      	adds	r3, #1
 8002040:	b2db      	uxtb	r3, r3
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8002042:	6642      	str	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8002044:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  }

  /* during offset Polarization no current is flowing in the phases */
  pStator_Currents->a = 0;
 8002048:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 800204a:	bc10      	pop	{r4}
  pStator_Currents->a = 0;
 800204c:	600b      	str	r3, [r1, #0]
}
 800204e:	4770      	bx	lr

08002050 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param pHdl: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl)
{
 8002050:	4603      	mov	r3, r0
 8002052:	b430      	push	{r4, r5}
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;

  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8002054:	f890 0071 	ldrb.w	r0, [r0, #113]	; 0x71
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002058:	6f5a      	ldr	r2, [r3, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800205a:	f883 003a 	strb.w	r0, [r3, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800205e:	6892      	ldr	r2, [r2, #8]

  return R3_2_WriteTIMRegisters( &pHandle->_Super, (uint32_t)(pHandle->Half_PWMPeriod - 1u) );
 8002060:	f8b3 106c 	ldrh.w	r1, [r3, #108]	; 0x6c
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 8002064:	8e58      	ldrh	r0, [r3, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 8002066:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 8002068:	8edc      	ldrh	r4, [r3, #54]	; 0x36
  return R3_2_WriteTIMRegisters( &pHandle->_Super, (uint32_t)(pHandle->Half_PWMPeriod - 1u) );
 800206a:	3901      	subs	r1, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800206c:	6350      	str	r0, [r2, #52]	; 0x34
  if ( pHandle->_Super.SWerror == 1u )
 800206e:	8f18      	ldrh	r0, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, (uint32_t)(pHandle->Half_PWMPeriod - 1u) );
 8002070:	b289      	uxth	r1, r1
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002072:	6395      	str	r5, [r2, #56]	; 0x38
  if ( pHandle->_Super.SWerror == 1u )
 8002074:	2801      	cmp	r0, #1
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002076:	63d4      	str	r4, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002078:	6411      	str	r1, [r2, #64]	; 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800207a:	6a12      	ldr	r2, [r2, #32]
    pHandle->_Super.SWerror = 0u;
 800207c:	bf08      	it	eq
 800207e:	2200      	moveq	r2, #0
}
 8002080:	bc30      	pop	{r4, r5}
    hAux = MC_FOC_DURATION;
 8002082:	bf14      	ite	ne
 8002084:	f3c2 3000 	ubfxne	r0, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 8002088:	871a      	strheq	r2, [r3, #56]	; 0x38
}
 800208a:	4770      	bx	lr

0800208c <R3_2_SetADCSampPointSectX>:
  *         And call the WriteTIMRegisters method.
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak uint16_t R3_2_SetADCSampPointSectX( PWMC_Handle_t * pHdl )
{
 800208c:	b470      	push	{r4, r5, r6}
 800208e:	4603      	mov	r3, r0
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;

  /* Set CC4 as PWM mode 2 (default) */
  pHandle->PWM_Mode = LL_TIM_OCMODE_PWM2;
 8002090:	2570      	movs	r5, #112	; 0x70
  uint16_t hDeltaDuty;
  register uint16_t lowDuty = pHdl->lowDuty;
  register uint16_t midDuty = pHdl->midDuty;

  /* Check if sampling AB in the middle of PWM is possible */
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->Tafter )
 8002092:	6f44      	ldr	r4, [r0, #116]	; 0x74
  register uint16_t lowDuty = pHdl->lowDuty;
 8002094:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->Tafter )
 8002096:	f8b0 606c 	ldrh.w	r6, [r0, #108]	; 0x6c
 800209a:	f8b4 1084 	ldrh.w	r1, [r4, #132]	; 0x84
 800209e:	1ab0      	subs	r0, r6, r2
 80020a0:	b280      	uxth	r0, r0
 80020a2:	4288      	cmp	r0, r1
  pHandle->PWM_Mode = LL_TIM_OCMODE_PWM2;
 80020a4:	669d      	str	r5, [r3, #104]	; 0x68
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->Tafter )
 80020a6:	d917      	bls.n	80020d8 <R3_2_SetADCSampPointSectX+0x4c>
     * (AB are chosen) for all sectors in order to not induce current discontinuities when there are differences
     * between offsets */

    /* sector number needed by GetPhaseCurrent, phase A and B are sampled wIch corresponds
     * to sector 4 */
    pHandle->_Super.Sector = SECTOR_4;
 80020a8:	2103      	movs	r1, #3

    /* set sampling  point trigger in the middle of PWM period */
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 80020aa:	1e72      	subs	r2, r6, #1
 80020ac:	b292      	uxth	r2, r2
    pHandle->_Super.Sector = SECTOR_4;
 80020ae:	f883 103a 	strb.w	r1, [r3, #58]	; 0x3a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80020b2:	68a1      	ldr	r1, [r4, #8]
  LL_TIM_OC_SetCompareCH1( TIMx, pHandle->_Super.CntPhA );
 80020b4:	8e58      	ldrh	r0, [r3, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2( TIMx, pHandle->_Super.CntPhB );
 80020b6:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3( TIMx, pHandle->_Super.CntPhC );
 80020b8:	8edc      	ldrh	r4, [r3, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 80020ba:	6348      	str	r0, [r1, #52]	; 0x34
  if ( pHandle->_Super.SWerror == 1u )
 80020bc:	8f18      	ldrh	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR2, CompareValue);
 80020be:	638d      	str	r5, [r1, #56]	; 0x38
 80020c0:	2801      	cmp	r0, #1
  WRITE_REG(TIMx->CCR3, CompareValue);
 80020c2:	63cc      	str	r4, [r1, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80020c4:	640a      	str	r2, [r1, #64]	; 0x40
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80020c6:	6a0a      	ldr	r2, [r1, #32]
    pHandle->_Super.SWerror = 0u;
 80020c8:	bf08      	it	eq
 80020ca:	2200      	moveq	r2, #0
      }
    }
  }

  return R3_2_WriteTIMRegisters( &pHandle->_Super, hCntSmp );
}
 80020cc:	bc70      	pop	{r4, r5, r6}
    hAux = MC_FOC_DURATION;
 80020ce:	bf14      	ite	ne
 80020d0:	f3c2 3000 	ubfxne	r0, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 80020d4:	871a      	strheq	r2, [r3, #56]	; 0x38
}
 80020d6:	4770      	bx	lr
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 80020d8:	8fdd      	ldrh	r5, [r3, #62]	; 0x3e
 80020da:	1b55      	subs	r5, r2, r5
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 80020dc:	b2ad      	uxth	r5, r5
 80020de:	ebb5 0f40 	cmp.w	r5, r0, lsl #1
 80020e2:	d904      	bls.n	80020ee <R3_2_SetADCSampPointSectX+0x62>
      hCntSmp = lowDuty - pHandle->pParams_str->Tbefore;
 80020e4:	f8b4 1086 	ldrh.w	r1, [r4, #134]	; 0x86
 80020e8:	1a52      	subs	r2, r2, r1
 80020ea:	b292      	uxth	r2, r2
 80020ec:	e7e1      	b.n	80020b2 <R3_2_SetADCSampPointSectX+0x26>
      hCntSmp = lowDuty + pHandle->pParams_str->Tafter;
 80020ee:	4411      	add	r1, r2
 80020f0:	b28a      	uxth	r2, r1
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 80020f2:	4296      	cmp	r6, r2
 80020f4:	d8dd      	bhi.n	80020b2 <R3_2_SetADCSampPointSectX+0x26>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80020f6:	43d2      	mvns	r2, r2
        pHandle->PWM_Mode = LL_TIM_OCMODE_PWM1;
 80020f8:	2160      	movs	r1, #96	; 0x60
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 80020fa:	eb02 0246 	add.w	r2, r2, r6, lsl #1
 80020fe:	b292      	uxth	r2, r2
        pHandle->PWM_Mode = LL_TIM_OCMODE_PWM1;
 8002100:	6699      	str	r1, [r3, #104]	; 0x68
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8002102:	e7d6      	b.n	80020b2 <R3_2_SetADCSampPointSectX+0x26>

08002104 <R3_2_Init>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002104:	6f41      	ldr	r1, [r0, #116]	; 0x74
{
 8002106:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8002108:	688b      	ldr	r3, [r1, #8]
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 800210a:	680a      	ldr	r2, [r1, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800210c:	681c      	ldr	r4, [r3, #0]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800210e:	684d      	ldr	r5, [r1, #4]
 8002110:	f024 0401 	bic.w	r4, r4, #1
 8002114:	601c      	str	r4, [r3, #0]
  if ( (pHandle->pParams_str->EmergencyStop) != DISABLE )
 8002116:	f891 108a 	ldrb.w	r1, [r1, #138]	; 0x8a
 800211a:	b131      	cbz	r1, 800212a <R3_2_Init+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800211c:	f06f 0180 	mvn.w	r1, #128	; 0x80
 8002120:	6119      	str	r1, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8002122:	68d9      	ldr	r1, [r3, #12]
 8002124:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002128:	60d9      	str	r1, [r3, #12]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800212a:	6959      	ldr	r1, [r3, #20]
  if ( TIMx == TIM1 )
 800212c:	4c16      	ldr	r4, [pc, #88]	; (8002188 <R3_2_Init+0x84>)
 800212e:	f041 0101 	orr.w	r1, r1, #1
 8002132:	6159      	str	r1, [r3, #20]
  SET_BIT(TIMx->CCER, Channels);
 8002134:	6a19      	ldr	r1, [r3, #32]
 8002136:	42a3      	cmp	r3, r4
 8002138:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 800213c:	f041 0105 	orr.w	r1, r1, #5
 8002140:	6219      	str	r1, [r3, #32]
 8002142:	d017      	beq.n	8002174 <R3_2_Init+0x70>
{
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8002144:	f06f 0604 	mvn.w	r6, #4
  pHandle->PWM_Mode = LL_TIM_OCMODE_PWM2;
 8002148:	2470      	movs	r4, #112	; 0x70
  pHandle->OverCurrentFlag = false;
 800214a:	2100      	movs	r1, #0
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 800214c:	6893      	ldr	r3, [r2, #8]
 800214e:	f043 0301 	orr.w	r3, r3, #1
 8002152:	6093      	str	r3, [r2, #8]
 8002154:	68ab      	ldr	r3, [r5, #8]
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	60ab      	str	r3, [r5, #8]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800215c:	6016      	str	r6, [r2, #0]
{
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800215e:	6853      	ldr	r3, [r2, #4]
 8002160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002164:	6053      	str	r3, [r2, #4]
  pHandle->PWM_Mode = LL_TIM_OCMODE_PWM2;
 8002166:	6684      	str	r4, [r0, #104]	; 0x68
  pHandle->OverCurrentFlag = false;
 8002168:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
  pHandle->_Super.DTTest = 0u;
 800216c:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
}
 8002170:	bc70      	pop	{r4, r5, r6}
 8002172:	4770      	bx	lr
    pHandle->ADC_ExternalTriggerInjected = LL_ADC_INJ_TRIG_EXT_TIM1_CH4;
 8002174:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->CR, Periphs);
 8002178:	4904      	ldr	r1, [pc, #16]	; (800218c <R3_2_Init+0x88>)
 800217a:	684b      	ldr	r3, [r1, #4]
 800217c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002180:	604b      	str	r3, [r1, #4]
 8002182:	f8a0 406e 	strh.w	r4, [r0, #110]	; 0x6e
 8002186:	e7dd      	b.n	8002144 <R3_2_Init+0x40>
 8002188:	40012c00 	.word	0x40012c00
 800218c:	e0042000 	.word	0xe0042000

08002190 <R3_2_TurnOnLowSides>:
{
 8002190:	b470      	push	{r4, r5, r6}
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002192:	2300      	movs	r3, #0
  pHandle->_Super.TurnOnLowSidesAction = true;
 8002194:	2501      	movs	r5, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002196:	f06f 0401 	mvn.w	r4, #1
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 800219a:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800219c:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800219e:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
 80021a2:	6114      	str	r4, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80021a4:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80021a6:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80021a8:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80021aa:	6913      	ldr	r3, [r2, #16]
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == RESET)
 80021ac:	07db      	lsls	r3, r3, #31
 80021ae:	d5fc      	bpl.n	80021aa <R3_2_TurnOnLowSides+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80021b0:	f06f 0301 	mvn.w	r3, #1
 80021b4:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80021b6:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80021b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021bc:	6453      	str	r3, [r2, #68]	; 0x44
  if ( (pHandle->pParams_str->LowSideOutputs) == ES_GPIO )
 80021be:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d10f      	bne.n	80021e6 <R3_2_TurnOnLowSides+0x56>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80021c6:	e9d1 021e 	ldrd	r0, r2, [r1, #120]	; 0x78
    LL_GPIO_SetOutputPin (pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80021ca:	e9d1 6503 	ldrd	r6, r5, [r1, #12]
 80021ce:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
    LL_GPIO_SetOutputPin (pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80021d2:	694c      	ldr	r4, [r1, #20]
 80021d4:	f3c0 200f 	ubfx	r0, r0, #8, #16
 80021d8:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80021dc:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80021e0:	6130      	str	r0, [r6, #16]
 80021e2:	612a      	str	r2, [r5, #16]
 80021e4:	6123      	str	r3, [r4, #16]
}
 80021e6:	bc70      	pop	{r4, r5, r6}
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop

080021ec <R3_2_SwitchOnPWM>:
{  
 80021ec:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80021ee:	2500      	movs	r5, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80021f0:	f06f 0401 	mvn.w	r4, #1
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 80021f4:	6f41      	ldr	r1, [r0, #116]	; 0x74
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80021f6:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 80021fa:	688b      	ldr	r3, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80021fc:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8002200:	0850      	lsrs	r0, r2, #1
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8002202:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002204:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002206:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002208:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800220a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800220c:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800220e:	691a      	ldr	r2, [r3, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8002210:	07d2      	lsls	r2, r2, #31
 8002212:	d5fc      	bpl.n	800220e <R3_2_SwitchOnPWM+0x22>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002214:	f06f 0201 	mvn.w	r2, #1
 8002218:	611a      	str	r2, [r3, #16]
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800221a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800221c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002220:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002224:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002228:	645a      	str	r2, [r3, #68]	; 0x44
  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800222a:	f891 2088 	ldrb.w	r2, [r1, #136]	; 0x88
 800222e:	2a02      	cmp	r2, #2
 8002230:	d008      	beq.n	8002244 <R3_2_SwitchOnPWM+0x58>
}
 8002232:	bc30      	pop	{r4, r5}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002234:	f06f 0201 	mvn.w	r2, #1
 8002238:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	f042 0201 	orr.w	r2, r2, #1
 8002240:	60da      	str	r2, [r3, #12]
 8002242:	4770      	bx	lr
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8002244:	f240 5255 	movw	r2, #1365	; 0x555
 8002248:	6a18      	ldr	r0, [r3, #32]
 800224a:	6f8c      	ldr	r4, [r1, #120]	; 0x78
 800224c:	4382      	bics	r2, r0
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800224e:	68cd      	ldr	r5, [r1, #12]
 8002250:	e9d1 021f 	ldrd	r0, r2, [r1, #124]	; 0x7c
 8002254:	f3c4 240f 	ubfx	r4, r4, #8, #16
 8002258:	f3c0 200f 	ubfx	r0, r0, #8, #16
 800225c:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8002260:	d005      	beq.n	800226e <R3_2_SwitchOnPWM+0x82>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8002262:	616c      	str	r4, [r5, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8002264:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 8002268:	6160      	str	r0, [r4, #20]
 800226a:	614a      	str	r2, [r1, #20]
}
 800226c:	e7e1      	b.n	8002232 <R3_2_SwitchOnPWM+0x46>
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800226e:	612c      	str	r4, [r5, #16]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8002270:	e9d1 4104 	ldrd	r4, r1, [r1, #16]
 8002274:	6120      	str	r0, [r4, #16]
 8002276:	610a      	str	r2, [r1, #16]
}
 8002278:	e7db      	b.n	8002232 <R3_2_SwitchOnPWM+0x46>
 800227a:	bf00      	nop

0800227c <R3_2_SwitchOffPWM>:
{ 
 800227c:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 800227e:	2400      	movs	r4, #0
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 8002280:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002282:	689a      	ldr	r2, [r3, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002284:	68d1      	ldr	r1, [r2, #12]
 8002286:	f021 0101 	bic.w	r1, r1, #1
 800228a:	60d1      	str	r1, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800228c:	6c51      	ldr	r1, [r2, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 800228e:	f880 4042 	strb.w	r4, [r0, #66]	; 0x42
 8002292:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8002296:	6451      	str	r1, [r2, #68]	; 0x44
  if ( (pHandle->pParams_str->LowSideOutputs) == ES_GPIO )
 8002298:	f893 1088 	ldrb.w	r1, [r3, #136]	; 0x88
 800229c:	2902      	cmp	r1, #2
 800229e:	d10f      	bne.n	80022c0 <R3_2_SwitchOffPWM+0x44>
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 80022a0:	e9d3 401e 	ldrd	r4, r0, [r3, #120]	; 0x78
 80022a4:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
    LL_GPIO_ResetOutputPin (pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80022a8:	68dd      	ldr	r5, [r3, #12]
 80022aa:	f3c4 240f 	ubfx	r4, r4, #8, #16
 80022ae:	f3c0 200f 	ubfx	r0, r0, #8, #16
 80022b2:	f3c1 210f 	ubfx	r1, r1, #8, #16
 80022b6:	616c      	str	r4, [r5, #20]
    LL_GPIO_ResetOutputPin (pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80022b8:	e9d3 4304 	ldrd	r4, r3, [r3, #16]
 80022bc:	6160      	str	r0, [r4, #20]
 80022be:	6159      	str	r1, [r3, #20]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80022c0:	f06f 0301 	mvn.w	r3, #1
 80022c4:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80022c6:	6913      	ldr	r3, [r2, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80022c8:	07db      	lsls	r3, r3, #31
 80022ca:	d5fc      	bpl.n	80022c6 <R3_2_SwitchOffPWM+0x4a>
}
 80022cc:	bc30      	pop	{r4, r5}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80022ce:	f06f 0301 	mvn.w	r3, #1
 80022d2:	6113      	str	r3, [r2, #16]
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop

080022d8 <R3_2_CurrentReadingPolarization>:
{
 80022d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  pHandle->PhaseAOffset = 0u;
 80022dc:	2600      	movs	r6, #0
  pHandle->PolarizationSector = SECTOR_4;
 80022de:	2703      	movs	r7, #3
{
 80022e0:	4604      	mov	r4, r0
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80022e2:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 80022e4:	4937      	ldr	r1, [pc, #220]	; (80023c4 <R3_2_CurrentReadingPolarization+0xec>)
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80022e6:	689d      	ldr	r5, [r3, #8]
  pHandle->PolarizationCounter = 0u;
 80022e8:	f880 6070 	strb.w	r6, [r0, #112]	; 0x70
  CLEAR_BIT(TIMx->CCER, Channels);
 80022ec:	6a2b      	ldr	r3, [r5, #32]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 80022ee:	4a36      	ldr	r2, [pc, #216]	; (80023c8 <R3_2_CurrentReadingPolarization+0xf0>)
 80022f0:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 80022f4:	f023 0305 	bic.w	r3, r3, #5
  pHandle->PhaseBOffset = 0u;
 80022f8:	e9c0 6617 	strd	r6, r6, [r0, #92]	; 0x5c
  pHandle->PhaseCOffset = 0u;
 80022fc:	6646      	str	r6, [r0, #100]	; 0x64
 80022fe:	622b      	str	r3, [r5, #32]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8002300:	6041      	str	r1, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8002302:	6182      	str	r2, [r0, #24]
  pHandle->PolarizationSector = SECTOR_4;
 8002304:	f880 7071 	strb.w	r7, [r0, #113]	; 0x71
  pHandle->_Super.Sector = SECTOR_4;
 8002308:	f880 703a 	strb.w	r7, [r0, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800230c:	f7ff ff6e 	bl	80021ec <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8002310:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8002312:	f104 0838 	add.w	r8, r4, #56	; 0x38
 8002316:	f104 0970 	add.w	r9, r4, #112	; 0x70
 800231a:	f893 2089 	ldrb.w	r2, [r3, #137]	; 0x89
 800231e:	4641      	mov	r1, r8
 8002320:	464b      	mov	r3, r9
 8002322:	4628      	mov	r0, r5
 8002324:	f7ff fc26 	bl	8001b74 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8002328:	4620      	mov	r0, r4
 800232a:	f7ff ffa7 	bl	800227c <R3_2_SwitchOffPWM>
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 800232e:	4b27      	ldr	r3, [pc, #156]	; (80023cc <R3_2_CurrentReadingPolarization+0xf4>)
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8002330:	4620      	mov	r0, r4
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8002332:	6063      	str	r3, [r4, #4]
  pHandle->PolarizationCounter = 0u;
 8002334:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
  pHandle->PolarizationSector = SECTOR_1;
 8002338:	f884 6071 	strb.w	r6, [r4, #113]	; 0x71
  pHandle->_Super.Sector = SECTOR_1;  
 800233c:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 8002340:	f7ff ff54 	bl	80021ec <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 8002344:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8002346:	464b      	mov	r3, r9
 8002348:	4641      	mov	r1, r8
 800234a:	f892 2089 	ldrb.w	r2, [r2, #137]	; 0x89
 800234e:	4628      	mov	r0, r5
 8002350:	f7ff fc10 	bl	8001b74 <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 8002354:	4620      	mov	r0, r4
 8002356:	f7ff ff91 	bl	800227c <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= (NB_CONVERSIONS/2);
 800235a:	e9d4 1217 	ldrd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= (NB_CONVERSIONS/2);
 800235e:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->PhaseAOffset /= (NB_CONVERSIONS/2);
 8002360:	40f9      	lsrs	r1, r7
  pHandle->PhaseBOffset /= (NB_CONVERSIONS/2);
 8002362:	40fa      	lsrs	r2, r7
 8002364:	e9c4 1217 	strd	r1, r2, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= (NB_CONVERSIONS/2);
 8002368:	40fb      	lsrs	r3, r7
 800236a:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800236c:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 800236e:	4a18      	ldr	r2, [pc, #96]	; (80023d0 <R3_2_CurrentReadingPolarization+0xf8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8002370:	4918      	ldr	r1, [pc, #96]	; (80023d4 <R3_2_CurrentReadingPolarization+0xfc>)
 8002372:	f023 0308 	bic.w	r3, r3, #8
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 8002376:	61a2      	str	r2, [r4, #24]
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8002378:	6061      	str	r1, [r4, #4]
 800237a:	61ab      	str	r3, [r5, #24]
 800237c:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1(TIMx,pHandle->Half_PWMPeriod);
 800237e:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
 8002382:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002386:	61aa      	str	r2, [r5, #24]
 8002388:	69ea      	ldr	r2, [r5, #28]
 800238a:	f022 0208 	bic.w	r2, r2, #8
 800238e:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002390:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002392:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002394:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002396:	69ab      	ldr	r3, [r5, #24]
 8002398:	f043 0308 	orr.w	r3, r3, #8
 800239c:	61ab      	str	r3, [r5, #24]
 800239e:	69ab      	ldr	r3, [r5, #24]
 80023a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023a4:	61ab      	str	r3, [r5, #24]
 80023a6:	69eb      	ldr	r3, [r5, #28]
 80023a8:	f043 0308 	orr.w	r3, r3, #8
 80023ac:	61eb      	str	r3, [r5, #28]
  pHandle->_Super.Sector = SECTOR_4;
 80023ae:	f884 703a 	strb.w	r7, [r4, #58]	; 0x3a
  SET_BIT(TIMx->CCER, Channels);
 80023b2:	6a2b      	ldr	r3, [r5, #32]
 80023b4:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80023b8:	f043 0305 	orr.w	r3, r3, #5
 80023bc:	622b      	str	r3, [r5, #32]
}
 80023be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023c2:	bf00      	nop
 80023c4:	08001fcd 	.word	0x08001fcd
 80023c8:	08002051 	.word	0x08002051
 80023cc:	08002015 	.word	0x08002015
 80023d0:	0800208d 	.word	0x0800208d
 80023d4:	08001e51 	.word	0x08001e51

080023d8 <R3_2_TIMx_UP_IRQHandler>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_2_TIMx_UP_IRQHandler( PWMC_R3_2_Handle_t * pHandle)
{
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 80023d8:	6f41      	ldr	r1, [r0, #116]	; 0x74
{
 80023da:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80023dc:	e9d1 2300 	ldrd	r2, r3, [r1]
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTTRIG);
 80023e0:	6894      	ldr	r4, [r2, #8]
  TIM_TypeDef* TIMx = pHandle->pParams_str->TIMx;
 80023e2:	688d      	ldr	r5, [r1, #8]
 80023e4:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 80023e8:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTTRIG);
 80023ec:	6094      	str	r4, [r2, #8]
 80023ee:	689c      	ldr	r4, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80023f0:	6e86      	ldr	r6, [r0, #104]	; 0x68
 80023f2:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
 80023f6:	609c      	str	r4, [r3, #8]
  /* Disabling trigger to avoid unwanted conversion */
  LL_ADC_INJ_StopConversionExtTrig(ADCx_1);
  LL_ADC_INJ_StopConversionExtTrig(ADCx_2);

  /* Set next current channel according to sector  */
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector];
 80023f8:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR2, ADC_CR2_JEXTSEL, (TriggerSource & ADC_CR2_JEXTSEL));
 80023fc:	f407 47e0 	and.w	r7, r7, #28672	; 0x7000
 8002400:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8002404:	6c8c      	ldr	r4, [r1, #72]	; 0x48
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector];
 8002406:	6e09      	ldr	r1, [r1, #96]	; 0x60
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector];
 8002408:	6394      	str	r4, [r2, #56]	; 0x38
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector];
 800240a:	6399      	str	r1, [r3, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 800240c:	6a29      	ldr	r1, [r5, #32]
  
  /* Set edge detection trigger according to PWM Mode 1 or 2 */
  LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH4, pHandle->PWM_Mode);

  return &( pHandle->_Super.Motor );
}
 800240e:	3046      	adds	r0, #70	; 0x46
 8002410:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8002414:	6229      	str	r1, [r5, #32]
 8002416:	6894      	ldr	r4, [r2, #8]
 8002418:	f424 44e0 	bic.w	r4, r4, #28672	; 0x7000
 800241c:	433c      	orrs	r4, r7
 800241e:	6094      	str	r4, [r2, #8]
 8002420:	6899      	ldr	r1, [r3, #8]
 8002422:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8002426:	4339      	orrs	r1, r7
 8002428:	6099      	str	r1, [r3, #8]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 800242a:	6891      	ldr	r1, [r2, #8]
 800242c:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 8002430:	6091      	str	r1, [r2, #8]
 8002432:	689a      	ldr	r2, [r3, #8]
 8002434:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002438:	609a      	str	r2, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800243a:	69eb      	ldr	r3, [r5, #28]
 800243c:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
 8002440:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 8002444:	61eb      	str	r3, [r5, #28]
 8002446:	bcf0      	pop	{r4, r5, r6, r7}
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop

0800244c <R3_2_BRK_IRQHandler>:
 * @retval none
 */
__weak void *R3_2_BRK_IRQHandler(PWMC_R3_2_Handle_t *pHandle)
{

  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800244c:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 800244e:	4603      	mov	r3, r0
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8002450:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
 8002454:	2902      	cmp	r1, #2
 8002456:	d004      	beq.n	8002462 <R3_2_BRK_IRQHandler+0x16>
  {
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
  }
  pHandle->OverCurrentFlag = true;
 8002458:	2201      	movs	r2, #1

  return &(pHandle->_Super.Motor);
}
 800245a:	3046      	adds	r0, #70	; 0x46
  pHandle->OverCurrentFlag = true;
 800245c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
}
 8002460:	4770      	bx	lr
 8002462:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
{
 8002466:	b430      	push	{r4, r5}
 8002468:	e9d2 401e 	ldrd	r4, r0, [r2, #120]	; 0x78
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 800246c:	68d5      	ldr	r5, [r2, #12]
 800246e:	f3c4 240f 	ubfx	r4, r4, #8, #16
 8002472:	f3c0 200f 	ubfx	r0, r0, #8, #16
 8002476:	f3c1 210f 	ubfx	r1, r1, #8, #16
 800247a:	616c      	str	r4, [r5, #20]
     LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800247c:	e9d2 4204 	ldrd	r4, r2, [r2, #16]
 8002480:	6160      	str	r0, [r4, #20]
 8002482:	6151      	str	r1, [r2, #20]
  pHandle->OverCurrentFlag = true;
 8002484:	2201      	movs	r2, #1
}
 8002486:	bc30      	pop	{r4, r5}
 8002488:	f103 0046 	add.w	r0, r3, #70	; 0x46
  pHandle->OverCurrentFlag = true;
 800248c:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
}
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop

08002494 <R3_2_IsOverCurrentOccurred>:
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval uint16_t It returns MC_BREAK_IN whether an over current has been
  *                  detected since last method call, MC_NO_FAULTS otherwise.
  */
__weak uint16_t R3_2_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
 8002494:	4603      	mov	r3, r0
  PWMC_R3_2_Handle_t * pHandle = (PWMC_R3_2_Handle_t *) pHdl;
  uint16_t retVal = MC_NO_FAULTS;
  if (pHandle->OverCurrentFlag == true )
 8002496:	f890 0072 	ldrb.w	r0, [r0, #114]	; 0x72
 800249a:	b118      	cbz	r0, 80024a4 <R3_2_IsOverCurrentOccurred+0x10>
  {
    retVal = MC_BREAK_IN;
    pHandle->OverCurrentFlag = false;
 800249c:	2200      	movs	r2, #0
    retVal = MC_BREAK_IN;
 800249e:	2040      	movs	r0, #64	; 0x40
    pHandle->OverCurrentFlag = false;
 80024a0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
  }
  return retVal;
}
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop

080024a8 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 80024a8:	b430      	push	{r4, r5}
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80024aa:	8b82      	ldrh	r2, [r0, #28]
 80024ac:	8b44      	ldrh	r4, [r0, #26]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80024ae:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 80024b0:	4414      	add	r4, r2
 80024b2:	0864      	lsrs	r4, r4, #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80024b4:	b14b      	cbz	r3, 80024ca <RVBS_Clear+0x22>
  {
    pHandle->aBuffer[index] = aux;
 80024b6:	2300      	movs	r3, #0
 80024b8:	6a05      	ldr	r5, [r0, #32]
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	f825 4012 	strh.w	r4, [r5, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 80024c0:	8b01      	ldrh	r1, [r0, #24]
 80024c2:	3301      	adds	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	4291      	cmp	r1, r2
 80024c8:	d8f7      	bhi.n	80024ba <RVBS_Clear+0x12>
  }
  pHandle->_Super.LatestConv = aux;
 80024ca:	2300      	movs	r3, #0
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 80024cc:	461a      	mov	r2, r3
  pHandle->_Super.LatestConv = aux;
 80024ce:	f364 030f 	bfi	r3, r4, #0, #16
 80024d2:	f364 431f 	bfi	r3, r4, #16, #16
 80024d6:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 80024d8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 80024dc:	bc30      	pop	{r4, r5}
 80024de:	4770      	bx	lr

080024e0 <RVBS_Init>:
{
 80024e0:	b510      	push	{r4, lr}
 80024e2:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 80024e4:	300c      	adds	r0, #12
 80024e6:	f001 f855 	bl	8003594 <RCM_RegisterRegConv>
 80024ea:	4603      	mov	r3, r0
  RVBS_Clear( pHandle );
 80024ec:	4620      	mov	r0, r4
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 80024ee:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 80024f2:	f7ff ffd9 	bl	80024a8 <RVBS_Clear>
}
 80024f6:	bd10      	pop	{r4, pc}

080024f8 <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 80024f8:	88c3      	ldrh	r3, [r0, #6]
 80024fa:	8b42      	ldrh	r2, [r0, #26]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d305      	bcc.n	800250c <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8002500:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8002502:	4298      	cmp	r0, r3
 8002504:	bf8c      	ite	hi
 8002506:	2004      	movhi	r0, #4
 8002508:	2000      	movls	r0, #0
 800250a:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 800250c:	2002      	movs	r0, #2
  }
  return fault;
}
 800250e:	4770      	bx	lr

08002510 <RVBS_CalcAvVbus>:
{
 8002510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002512:	4605      	mov	r5, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8002514:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8002518:	f001 f90e 	bl	8003738 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 800251c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002520:	4298      	cmp	r0, r3
 8002522:	d01c      	beq.n	800255e <RVBS_CalcAvVbus+0x4e>
    pHandle->aBuffer[pHandle->index] = hAux;
 8002524:	6a2f      	ldr	r7, [r5, #32]
 8002526:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800252a:	f827 0013 	strh.w	r0, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800252e:	8b2e      	ldrh	r6, [r5, #24]
 8002530:	b1d6      	cbz	r6, 8002568 <RVBS_CalcAvVbus+0x58>
 8002532:	2300      	movs	r3, #0
    wtemp = 0;
 8002534:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8002536:	f837 4013 	ldrh.w	r4, [r7, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800253a:	3301      	adds	r3, #1
 800253c:	b2d9      	uxtb	r1, r3
 800253e:	42b1      	cmp	r1, r6
 8002540:	460b      	mov	r3, r1
      wtemp += pHandle->aBuffer[i];
 8002542:	4422      	add	r2, r4
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8002544:	d3f7      	bcc.n	8002536 <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8002546:	fbb2 f2f6 	udiv	r2, r2, r6
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800254a:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
 800254e:	3e01      	subs	r6, #1
 8002550:	42b3      	cmp	r3, r6
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8002552:	80ea      	strh	r2, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 8002554:	80a8      	strh	r0, [r5, #4]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8002556:	da09      	bge.n	800256c <RVBS_CalcAvVbus+0x5c>
      pHandle->index++;
 8002558:	3301      	adds	r3, #1
 800255a:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800255e:	4628      	mov	r0, r5
 8002560:	f7ff ffca 	bl	80024f8 <RVBS_CheckFaultState>
 8002564:	8128      	strh	r0, [r5, #8]
}
 8002566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8002568:	80ee      	strh	r6, [r5, #6]
    pHandle->_Super.LatestConv = hAux;
 800256a:	80a8      	strh	r0, [r5, #4]
      pHandle->index = 0;
 800256c:	2300      	movs	r3, #0
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800256e:	4628      	mov	r0, r5
      pHandle->index = 0;
 8002570:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8002574:	f7ff ffc0 	bl	80024f8 <RVBS_CheckFaultState>
 8002578:	8128      	strh	r0, [r5, #8]
}
 800257a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800257c <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 800257c:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 800257e:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8002580:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8002584:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8002588:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800258a:	4770      	bx	lr

0800258c <SPD_GetElAngle>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
	if(pHandle->open_loop){
 800258c:	f890 2020 	ldrb.w	r2, [r0, #32]
{
 8002590:	4603      	mov	r3, r0
	if(pHandle->open_loop){
 8002592:	b12a      	cbz	r2, 80025a0 <SPD_GetElAngle+0x14>
		pHandle->open_angle += pHandle->open_speed;
 8002594:	8c40      	ldrh	r0, [r0, #34]	; 0x22
 8002596:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8002598:	4410      	add	r0, r2
 800259a:	b200      	sxth	r0, r0
 800259c:	8458      	strh	r0, [r3, #34]	; 0x22
		return ( pHandle->open_angle );
 800259e:	4770      	bx	lr
	}else{
		return ( pHandle->hElAngle );
 80025a0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
	}
}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop

080025a8 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 80025a8:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop

080025b0 <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 80025b0:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop

080025b8 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 80025b8:	f9b1 3000 	ldrsh.w	r3, [r1]
{
 80025bc:	b430      	push	{r4, r5}
  if ( *pMecSpeedUnit < 0 )
 80025be:	2b00      	cmp	r3, #0
  {
    hAux = -( *pMecSpeedUnit );
 80025c0:	bfb8      	it	lt
 80025c2:	425b      	neglt	r3, r3
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80025c4:	8ac5      	ldrh	r5, [r0, #22]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 80025c6:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80025c8:	429d      	cmp	r5, r3
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 80025ca:	78c4      	ldrb	r4, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 80025cc:	7802      	ldrb	r2, [r0, #0]
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 80025ce:	8a81      	ldrh	r1, [r0, #20]
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 80025d0:	d817      	bhi.n	8002602 <SPD_IsMecSpeedReliable+0x4a>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 80025d2:	4299      	cmp	r1, r3
 80025d4:	bf2c      	ite	cs
 80025d6:	2300      	movcs	r3, #0
 80025d8:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 80025da:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80025de:	8b05      	ldrh	r5, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 80025e0:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 80025e2:	bfb8      	it	lt
 80025e4:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 80025e6:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 80025e8:	428d      	cmp	r5, r1
 80025ea:	d300      	bcc.n	80025ee <SPD_IsMecSpeedReliable+0x36>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 80025ec:	b15b      	cbz	r3, 8002606 <SPD_IsMecSpeedReliable+0x4e>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 80025ee:	4294      	cmp	r4, r2
 80025f0:	d901      	bls.n	80025f6 <SPD_IsMecSpeedReliable+0x3e>
    {
      bSpeedErrorNumber++;
 80025f2:	3201      	adds	r2, #1
 80025f4:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80025f6:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 80025f8:	1b10      	subs	r0, r2, r4
 80025fa:	bf18      	it	ne
 80025fc:	2001      	movne	r0, #1
 80025fe:	bc30      	pop	{r4, r5}
 8002600:	4770      	bx	lr
    SpeedError = true;
 8002602:	2301      	movs	r3, #1
 8002604:	e7e9      	b.n	80025da <SPD_IsMecSpeedReliable+0x22>
      bSpeedErrorNumber = 0u;
 8002606:	4294      	cmp	r4, r2
 8002608:	bf88      	it	hi
 800260a:	2200      	movhi	r2, #0
 800260c:	e7f3      	b.n	80025f6 <SPD_IsMecSpeedReliable+0x3e>
 800260e:	bf00      	nop

08002610 <STC_Init>:
  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
  pHandle->TargetFinal = 0;
 8002610:	2300      	movs	r3, #0
{
 8002612:	b430      	push	{r4, r5}
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8002614:	f9b0 502c 	ldrsh.w	r5, [r0, #44]	; 0x2c
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8002618:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
  pHandle->PISpeed = pPI;
 800261c:	6101      	str	r1, [r0, #16]
  pHandle->Mode = pHandle->ModeDefault;
 800261e:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8002622:	042d      	lsls	r5, r5, #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8002624:	0424      	lsls	r4, r4, #16
 8002626:	e9c0 5401 	strd	r5, r4, [r0, #4]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 800262a:	bc30      	pop	{r4, r5}
  pHandle->SPD = SPD_Handle;
 800262c:	6142      	str	r2, [r0, #20]
  pHandle->Mode = pHandle->ModeDefault;
 800262e:	7001      	strb	r1, [r0, #0]
  pHandle->TargetFinal = 0;
 8002630:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
 8002632:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8002634:	6183      	str	r3, [r0, #24]
}
 8002636:	4770      	bx	lr

08002638 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8002638:	6940      	ldr	r0, [r0, #20]
 800263a:	4770      	bx	lr

0800263c <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 800263c:	7803      	ldrb	r3, [r0, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d000      	beq.n	8002644 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8002642:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8002644:	2100      	movs	r1, #0
 8002646:	6900      	ldr	r0, [r0, #16]
 8002648:	f7ff b9e4 	b.w	8001a14 <PID_SetIntegralTerm>

0800264c <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800264c:	6880      	ldr	r0, [r0, #8]
 800264e:	2800      	cmp	r0, #0
 8002650:	bfbc      	itt	lt
 8002652:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8002656:	30ff      	addlt	r0, #255	; 0xff
}
 8002658:	1400      	asrs	r0, r0, #16
 800265a:	4770      	bx	lr

0800265c <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800265c:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800265e:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8002660:	60c3      	str	r3, [r0, #12]
}
 8002662:	4770      	bx	lr

08002664 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8002664:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8002666:	7803      	ldrb	r3, [r0, #0]
{
 8002668:	4604      	mov	r4, r0
 800266a:	460d      	mov	r5, r1
 800266c:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800266e:	b32b      	cbz	r3, 80026bc <STC_ExecRamp+0x58>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8002670:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8002672:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8002674:	2800      	cmp	r0, #0
 8002676:	bfbc      	itt	lt
 8002678:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 800267c:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800267e:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8002680:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8002684:	dd01      	ble.n	800268a <STC_ExecRamp+0x26>
      AllowedRange = false;
 8002686:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8002688:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800268a:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800268e:	428b      	cmp	r3, r1
 8002690:	dcf9      	bgt.n	8002686 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 8002692:	8c23      	ldrh	r3, [r4, #32]
 8002694:	4299      	cmp	r1, r3
 8002696:	da03      	bge.n	80026a0 <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8002698:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800269c:	428b      	cmp	r3, r1
 800269e:	dbf2      	blt.n	8002686 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 80026a0:	b9b6      	cbnz	r6, 80026d0 <STC_ExecRamp+0x6c>
      if ( pHandle->Mode == STC_SPEED_MODE )
 80026a2:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80026a4:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 80026a6:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 80026a8:	f04f 0300 	mov.w	r3, #0
 80026ac:	f04f 0001 	mov.w	r0, #1
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 80026b0:	bf0c      	ite	eq
 80026b2:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 80026b4:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 80026b6:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 80026b8:	61a3      	str	r3, [r4, #24]
}
 80026ba:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 80026bc:	f7ff ffc6 	bl	800264c <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 80026c0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80026c2:	429d      	cmp	r5, r3
 80026c4:	dcdf      	bgt.n	8002686 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 80026c6:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 80026ca:	42ab      	cmp	r3, r5
 80026cc:	dcdb      	bgt.n	8002686 <STC_ExecRamp+0x22>
 80026ce:	e7e7      	b.n	80026a0 <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80026d0:	8ba2      	ldrh	r2, [r4, #28]
      wAux /= 1000u;
 80026d2:	4908      	ldr	r1, [pc, #32]	; (80026f4 <STC_ExecRamp+0x90>)
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 80026d4:	fb06 f202 	mul.w	r2, r6, r2
      wAux /= 1000u;
 80026d8:	fba1 1202 	umull	r1, r2, r1, r2
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80026dc:	1a28      	subs	r0, r5, r0
      wAux /= 1000u;
 80026de:	0992      	lsrs	r2, r2, #6
      pHandle->RampRemainingStep++;
 80026e0:	3201      	adds	r2, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80026e2:	0403      	lsls	r3, r0, #16
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 80026e4:	fb93 f3f2 	sdiv	r3, r3, r2
      pHandle->IncDecAmount = wAux1;
 80026e8:	2001      	movs	r0, #1
      pHandle->TargetFinal = hTargetFinal;
 80026ea:	8065      	strh	r5, [r4, #2]
      pHandle->IncDecAmount = wAux1;
 80026ec:	61a3      	str	r3, [r4, #24]
      pHandle->RampRemainingStep++;
 80026ee:	60e2      	str	r2, [r4, #12]
}
 80026f0:	bd70      	pop	{r4, r5, r6, pc}
 80026f2:	bf00      	nop
 80026f4:	10624dd3 	.word	0x10624dd3

080026f8 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 80026f8:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 80026fa:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80026fe:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 8002700:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 8002702:	2a00      	cmp	r2, #0
 8002704:	bf08      	it	eq
 8002706:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 8002708:	2b01      	cmp	r3, #1
{
 800270a:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 800270c:	d90c      	bls.n	8002728 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800270e:	6981      	ldr	r1, [r0, #24]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 8002710:	3b01      	subs	r3, #1
    wCurrentReference += pHandle->IncDecAmount;
 8002712:	440e      	add	r6, r1
    pHandle->RampRemainingStep--;
 8002714:	2e00      	cmp	r6, #0
 8002716:	60c3      	str	r3, [r0, #12]
 8002718:	4630      	mov	r0, r6
 800271a:	db09      	blt.n	8002730 <STC_CalcTorqueReference+0x38>
 800271c:	1405      	asrs	r5, r0, #16
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800271e:	2a01      	cmp	r2, #1
 8002720:	d00a      	beq.n	8002738 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 8002722:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 8002724:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 8002726:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 8002728:	d012      	beq.n	8002750 <STC_CalcTorqueReference+0x58>
 800272a:	2e00      	cmp	r6, #0
 800272c:	4630      	mov	r0, r6
 800272e:	daf5      	bge.n	800271c <STC_CalcTorqueReference+0x24>
 8002730:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8002734:	30ff      	adds	r0, #255	; 0xff
 8002736:	e7f1      	b.n	800271c <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8002738:	6960      	ldr	r0, [r4, #20]
 800273a:	f7ff ff35 	bl	80025a8 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 800273e:	1a28      	subs	r0, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8002740:	b201      	sxth	r1, r0
 8002742:	6920      	ldr	r0, [r4, #16]
 8002744:	f7ff f968 	bl	8001a18 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8002748:	0403      	lsls	r3, r0, #16
 800274a:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 800274e:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->RampRemainingStep = 0u;
 8002750:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8002752:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8002756:	60c3      	str	r3, [r0, #12]
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8002758:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 800275a:	e7e0      	b.n	800271e <STC_CalcTorqueReference+0x26>

0800275c <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 800275c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop

08002764 <STC_GetDefaultIqdref>:
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8002764:	2200      	movs	r2, #0
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8002766:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
{
 800276a:	b082      	sub	sp, #8
  return IqdRefDefault;
 800276c:	b299      	uxth	r1, r3
 800276e:	f361 020f 	bfi	r2, r1, #0, #16
 8002772:	0c1b      	lsrs	r3, r3, #16
 8002774:	f363 421f 	bfi	r2, r3, #16, #16
}
 8002778:	4610      	mov	r0, r2
 800277a:	b002      	add	sp, #8
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop

08002780 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 8002780:	b510      	push	{r4, lr}
 8002782:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8002784:	6940      	ldr	r0, [r0, #20]
 8002786:	f7ff ff0f 	bl	80025a8 <SPD_GetAvrgMecSpeedUnit>
 800278a:	0400      	lsls	r0, r0, #16
 800278c:	6060      	str	r0, [r4, #4]
}
 800278e:	bd10      	pop	{r4, pc}

08002790 <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 8002790:	2300      	movs	r3, #0
 8002792:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8002794:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop

0800279c <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800279c:	b430      	push	{r4, r5}
 800279e:	4604      	mov	r4, r0
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80027a0:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80027a2:	8885      	ldrh	r5, [r0, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80027a4:	430b      	orrs	r3, r1
  State_t LocalState =  pHandle->bState;
 80027a6:	7800      	ldrb	r0, [r0, #0]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80027a8:	ea23 0202 	bic.w	r2, r3, r2
 80027ac:	b292      	uxth	r2, r2
  pHandle->hFaultOccurred |= hSetErrors;
 80027ae:	4329      	orrs	r1, r5

  if ( LocalState == FAULT_NOW )
 80027b0:	280a      	cmp	r0, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 80027b2:	8062      	strh	r2, [r4, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 80027b4:	80a1      	strh	r1, [r4, #4]
  if ( LocalState == FAULT_NOW )
 80027b6:	d007      	beq.n	80027c8 <STM_FaultProcessing+0x2c>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 80027b8:	b90a      	cbnz	r2, 80027be <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 80027ba:	bc30      	pop	{r4, r5}
 80027bc:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 80027be:	230a      	movs	r3, #10
 80027c0:	7023      	strb	r3, [r4, #0]
      LocalState = FAULT_NOW;
 80027c2:	4618      	mov	r0, r3
}
 80027c4:	bc30      	pop	{r4, r5}
 80027c6:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80027c8:	2a00      	cmp	r2, #0
 80027ca:	d1f6      	bne.n	80027ba <STM_FaultProcessing+0x1e>
      pHandle->bState = FAULT_OVER;
 80027cc:	200b      	movs	r0, #11
 80027ce:	7020      	strb	r0, [r4, #0]
}
 80027d0:	bc30      	pop	{r4, r5}
 80027d2:	4770      	bx	lr

080027d4 <STM_NextState>:
{
 80027d4:	b508      	push	{r3, lr}
 80027d6:	7803      	ldrb	r3, [r0, #0]
 80027d8:	2b14      	cmp	r3, #20
 80027da:	d810      	bhi.n	80027fe <STM_NextState+0x2a>
 80027dc:	e8df f003 	tbb	[pc, r3]
 80027e0:	240d545e 	.word	0x240d545e
 80027e4:	390d352e 	.word	0x390d352e
 80027e8:	0f0f3f3c 	.word	0x0f0f3f3c
 80027ec:	47650b44 	.word	0x47650b44
 80027f0:	504d1b4a 	.word	0x504d1b4a
 80027f4:	5b          	.byte	0x5b
 80027f5:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80027f6:	290e      	cmp	r1, #14
 80027f8:	d013      	beq.n	8002822 <STM_NextState+0x4e>
      if ( bState == ANY_STOP )
 80027fa:	2907      	cmp	r1, #7
 80027fc:	d011      	beq.n	8002822 <STM_NextState+0x4e>
 80027fe:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8002802:	2b01      	cmp	r3, #1
 8002804:	d018      	beq.n	8002838 <STM_NextState+0x64>
 8002806:	2907      	cmp	r1, #7
 8002808:	d016      	beq.n	8002838 <STM_NextState+0x64>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800280a:	2200      	movs	r2, #0
 800280c:	2180      	movs	r1, #128	; 0x80
 800280e:	f7ff ffc5 	bl	800279c <STM_FaultProcessing>
 8002812:	2000      	movs	r0, #0
}
 8002814:	bd08      	pop	{r3, pc}
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8002816:	2914      	cmp	r1, #20
 8002818:	d8f1      	bhi.n	80027fe <STM_NextState+0x2a>
 800281a:	4b26      	ldr	r3, [pc, #152]	; (80028b4 <STM_NextState+0xe0>)
 800281c:	40cb      	lsrs	r3, r1
 800281e:	07db      	lsls	r3, r3, #31
 8002820:	d5ed      	bpl.n	80027fe <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 8002822:	7001      	strb	r1, [r0, #0]
 8002824:	2001      	movs	r0, #1
}
 8002826:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 8002828:	2911      	cmp	r1, #17
 800282a:	d8ee      	bhi.n	800280a <STM_NextState+0x36>
 800282c:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <STM_NextState+0xe4>)
 800282e:	40cb      	lsrs	r3, r1
 8002830:	07da      	lsls	r2, r3, #31
 8002832:	d4f6      	bmi.n	8002822 <STM_NextState+0x4e>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8002834:	2903      	cmp	r1, #3
 8002836:	d1e8      	bne.n	800280a <STM_NextState+0x36>
 8002838:	2000      	movs	r0, #0
}
 800283a:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800283c:	2913      	cmp	r1, #19
 800283e:	d0f0      	beq.n	8002822 <STM_NextState+0x4e>
 8002840:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8002844:	2b05      	cmp	r3, #5
 8002846:	d1dc      	bne.n	8002802 <STM_NextState+0x2e>
 8002848:	e7eb      	b.n	8002822 <STM_NextState+0x4e>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800284a:	1f8b      	subs	r3, r1, #6
 800284c:	2b01      	cmp	r3, #1
 800284e:	d8d6      	bhi.n	80027fe <STM_NextState+0x2a>
 8002850:	e7e7      	b.n	8002822 <STM_NextState+0x4e>
      if ( bState == STOP )
 8002852:	2908      	cmp	r1, #8
 8002854:	d1d3      	bne.n	80027fe <STM_NextState+0x2a>
 8002856:	e7e4      	b.n	8002822 <STM_NextState+0x4e>
      if ( bState == STOP_IDLE )
 8002858:	2909      	cmp	r1, #9
 800285a:	d1d0      	bne.n	80027fe <STM_NextState+0x2a>
 800285c:	e7e1      	b.n	8002822 <STM_NextState+0x4e>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800285e:	2900      	cmp	r1, #0
 8002860:	d0df      	beq.n	8002822 <STM_NextState+0x4e>
 8002862:	290c      	cmp	r1, #12
 8002864:	d1cb      	bne.n	80027fe <STM_NextState+0x2a>
 8002866:	e7dc      	b.n	8002822 <STM_NextState+0x4e>
      if ( bState == IDLE )
 8002868:	2900      	cmp	r1, #0
 800286a:	d0da      	beq.n	8002822 <STM_NextState+0x4e>
 800286c:	e7c7      	b.n	80027fe <STM_NextState+0x2a>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800286e:	2902      	cmp	r1, #2
 8002870:	d1c3      	bne.n	80027fa <STM_NextState+0x26>
 8002872:	e7d6      	b.n	8002822 <STM_NextState+0x4e>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8002874:	2911      	cmp	r1, #17
 8002876:	d1c0      	bne.n	80027fa <STM_NextState+0x26>
 8002878:	e7d3      	b.n	8002822 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800287a:	2904      	cmp	r1, #4
 800287c:	d1bd      	bne.n	80027fa <STM_NextState+0x26>
 800287e:	e7d0      	b.n	8002822 <STM_NextState+0x4e>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8002880:	1f0b      	subs	r3, r1, #4
 8002882:	2b01      	cmp	r3, #1
 8002884:	d8b9      	bhi.n	80027fa <STM_NextState+0x26>
 8002886:	e7cc      	b.n	8002822 <STM_NextState+0x4e>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8002888:	2907      	cmp	r1, #7
 800288a:	d0ca      	beq.n	8002822 <STM_NextState+0x4e>
 800288c:	f1a1 030d 	sub.w	r3, r1, #13
 8002890:	2b01      	cmp	r3, #1
 8002892:	d8b4      	bhi.n	80027fe <STM_NextState+0x2a>
 8002894:	e7c5      	b.n	8002822 <STM_NextState+0x4e>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 8002896:	2912      	cmp	r1, #18
 8002898:	d1af      	bne.n	80027fa <STM_NextState+0x26>
 800289a:	e7c2      	b.n	8002822 <STM_NextState+0x4e>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800289c:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d0be      	beq.n	8002822 <STM_NextState+0x4e>
           || ( bState == ICLWAIT ) )
 80028a4:	290c      	cmp	r1, #12
 80028a6:	d1ae      	bne.n	8002806 <STM_NextState+0x32>
 80028a8:	e7bb      	b.n	8002822 <STM_NextState+0x4e>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 80028aa:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 80028ae:	2b07      	cmp	r3, #7
 80028b0:	d1a5      	bne.n	80027fe <STM_NextState+0x2a>
 80028b2:	e7b6      	b.n	8002822 <STM_NextState+0x4e>
 80028b4:	00140080 	.word	0x00140080
 80028b8:	00030092 	.word	0x00030092

080028bc <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 80028bc:	7800      	ldrb	r0, [r0, #0]
 80028be:	4770      	bx	lr

080028c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028c0:	480c      	ldr	r0, [pc, #48]	; (80028f4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028c2:	490d      	ldr	r1, [pc, #52]	; (80028f8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028c4:	4a0d      	ldr	r2, [pc, #52]	; (80028fc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c8:	e002      	b.n	80028d0 <LoopCopyDataInit>

080028ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ce:	3304      	adds	r3, #4

080028d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028d4:	d3f9      	bcc.n	80028ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028d6:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028d8:	4c0a      	ldr	r4, [pc, #40]	; (8002904 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028dc:	e001      	b.n	80028e2 <LoopFillZerobss>

080028de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028e0:	3204      	adds	r2, #4

080028e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028e4:	d3fb      	bcc.n	80028de <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80028e6:	f007 f975 	bl	8009bd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ea:	f00b fe31 	bl	800e550 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ee:	f005 fb83 	bl	8007ff8 <main>
  bx lr
 80028f2:	4770      	bx	lr
  ldr r0, =_sdata
 80028f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f8:	20000504 	.word	0x20000504
  ldr r2, =_sidata
 80028fc:	08011440 	.word	0x08011440
  ldr r2, =_sbss
 8002900:	20000508 	.word	0x20000508
  ldr r4, =_ebss
 8002904:	20004520 	.word	0x20004520

08002908 <BusFault_Handler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002908:	e7fe      	b.n	8002908 <BusFault_Handler>
	...

0800290c <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 800290c:	b410      	push	{r4}
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800290e:	2400      	movs	r4, #0
  pHandle->pSTC = pSTC;
 8002910:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8002914:	7304      	strb	r4, [r0, #12]
  pHandle->hFinalSpeed = 0;
 8002916:	81c4      	strh	r4, [r0, #14]
  pHandle->hFinalTorque = 0;
 8002918:	8204      	strh	r4, [r0, #16]
  pHandle->hDurationms = 0;
 800291a:	82c4      	strh	r4, [r0, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 800291c:	7604      	strb	r4, [r0, #24]
  pHandle->pFOCVars = pFOCVars;
 800291e:	6083      	str	r3, [r0, #8]
}
 8002920:	bc10      	pop	{r4}
 8002922:	4770      	bx	lr

08002924 <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 8002924:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002926:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 800292a:	2401      	movs	r4, #1
  pHandle->hFinalSpeed = hFinalSpeed;
 800292c:	81c1      	strh	r1, [r0, #14]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 800292e:	7304      	strb	r4, [r0, #12]
  pHandle->hDurationms = hDurationms;
 8002930:	82c2      	strh	r2, [r0, #22]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8002932:	bc10      	pop	{r4}
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002934:	8303      	strh	r3, [r0, #24]
}
 8002936:	4770      	bx	lr

08002938 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8002938:	b410      	push	{r4}
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800293a:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 800293c:	2402      	movs	r4, #2
  pHandle->hFinalTorque = hFinalTorque;
 800293e:	8201      	strh	r1, [r0, #16]
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8002940:	7304      	strb	r4, [r0, #12]
  pHandle->hDurationms = hDurationms;
 8002942:	82c2      	strh	r2, [r0, #22]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8002944:	bc10      	pop	{r4}
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002946:	8303      	strh	r3, [r0, #24]
}
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop

0800294c <MCI_SetCurrentReferences>:
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800294c:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800294e:	2301      	movs	r3, #1
{
 8002950:	b082      	sub	sp, #8
  pHandle->Iqdref.q = Iqdref.q;
 8002952:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8002956:	7302      	strb	r2, [r0, #12]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002958:	8303      	strh	r3, [r0, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 800295a:	b002      	add	sp, #8
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop

08002960 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8002960:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8002962:	2103      	movs	r1, #3
{
 8002964:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8002966:	6800      	ldr	r0, [r0, #0]
 8002968:	f7ff ff34 	bl	80027d4 <STM_NextState>

  if ( RetVal == true )
 800296c:	b108      	cbz	r0, 8002972 <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800296e:	2301      	movs	r3, #1
 8002970:	7623      	strb	r3, [r4, #24]
  }

  return RetVal;
}
 8002972:	bd10      	pop	{r4, pc}

08002974 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8002974:	2107      	movs	r1, #7
 8002976:	6800      	ldr	r0, [r0, #0]
 8002978:	f7ff bf2c 	b.w	80027d4 <STM_NextState>

0800297c <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 800297c:	b178      	cbz	r0, 800299e <MCI_ExecBufferedCommands+0x22>
{
 800297e:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8002980:	7e03      	ldrb	r3, [r0, #24]
 8002982:	4604      	mov	r4, r0
 8002984:	2b01      	cmp	r3, #1
 8002986:	d000      	beq.n	800298a <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8002988:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 800298a:	7b01      	ldrb	r1, [r0, #12]
 800298c:	2902      	cmp	r1, #2
 800298e:	d020      	beq.n	80029d2 <MCI_ExecBufferedCommands+0x56>
 8002990:	2903      	cmp	r1, #3
 8002992:	d005      	beq.n	80029a0 <MCI_ExecBufferedCommands+0x24>
 8002994:	2901      	cmp	r1, #1
 8002996:	d00c      	beq.n	80029b2 <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8002998:	2303      	movs	r3, #3
 800299a:	7623      	strb	r3, [r4, #24]
}
 800299c:	bd10      	pop	{r4, pc}
 800299e:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80029a0:	6882      	ldr	r2, [r0, #8]
 80029a2:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80029a6:	f8d0 0012 	ldr.w	r0, [r0, #18]
 80029aa:	6110      	str	r0, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80029ac:	2302      	movs	r3, #2
 80029ae:	7623      	strb	r3, [r4, #24]
}
 80029b0:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80029b2:	2200      	movs	r2, #0
 80029b4:	6883      	ldr	r3, [r0, #8]
 80029b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 80029ba:	6840      	ldr	r0, [r0, #4]
 80029bc:	f7ff fe4e 	bl	800265c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 80029c0:	8ae2      	ldrh	r2, [r4, #22]
 80029c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80029c6:	6860      	ldr	r0, [r4, #4]
 80029c8:	f7ff fe4c 	bl	8002664 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80029cc:	2800      	cmp	r0, #0
 80029ce:	d0e3      	beq.n	8002998 <MCI_ExecBufferedCommands+0x1c>
 80029d0:	e7ec      	b.n	80029ac <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80029d2:	2100      	movs	r1, #0
 80029d4:	6883      	ldr	r3, [r0, #8]
 80029d6:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 80029da:	6840      	ldr	r0, [r0, #4]
 80029dc:	f7ff fe3e 	bl	800265c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 80029e0:	8ae2      	ldrh	r2, [r4, #22]
 80029e2:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80029e6:	6860      	ldr	r0, [r4, #4]
 80029e8:	f7ff fe3c 	bl	8002664 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 80029ec:	2800      	cmp	r0, #0
 80029ee:	d0d3      	beq.n	8002998 <MCI_ExecBufferedCommands+0x1c>
 80029f0:	e7dc      	b.n	80029ac <MCI_ExecBufferedCommands+0x30>
 80029f2:	bf00      	nop

080029f4 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 80029f4:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 80029f6:	6840      	ldr	r0, [r0, #4]
 80029f8:	f7ff fe1e 	bl	8002638 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 80029fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8002a00:	f7ff bdd2 	b.w	80025a8 <SPD_GetAvrgMecSpeedUnit>

08002a04 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8002a04:	2300      	movs	r3, #0
 8002a06:	6882      	ldr	r2, [r0, #8]
{
 8002a08:	b082      	sub	sp, #8
  return ( pHandle->pFOCVars->Vqd );
 8002a0a:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8002a0e:	b282      	uxth	r2, r0
 8002a10:	f362 030f 	bfi	r3, r2, #0, #16
 8002a14:	0c00      	lsrs	r0, r0, #16
 8002a16:	f360 431f 	bfi	r3, r0, #16, #16
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	b002      	add	sp, #8
 8002a1e:	4770      	bx	lr

08002a20 <MCI_GetPhaseVoltageAmplitude>:
__weak int16_t MCI_GetPhaseVoltageAmplitude( MCI_Handle_t * pHandle )
{
  alphabeta_t Local_Voltage;
  int32_t wAux1, wAux2;

  Local_Voltage = pHandle->pFOCVars->Valphabeta;
 8002a20:	6882      	ldr	r2, [r0, #8]
{
 8002a22:	b508      	push	{r3, lr}
  wAux1 = ( int32_t )( Local_Voltage.alpha ) * Local_Voltage.alpha;
  wAux2 = ( int32_t )( Local_Voltage.beta ) * Local_Voltage.beta;
 8002a24:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
  wAux1 = ( int32_t )( Local_Voltage.alpha ) * Local_Voltage.alpha;
 8002a28:	f9b2 001a 	ldrsh.w	r0, [r2, #26]
  wAux2 = ( int32_t )( Local_Voltage.beta ) * Local_Voltage.beta;
 8002a2c:	fb03 f303 	mul.w	r3, r3, r3

  wAux1 += wAux2;
  wAux1 = MCM_Sqrt( wAux1 );
 8002a30:	fb00 3000 	mla	r0, r0, r0, r3
 8002a34:	f000 f8de 	bl	8002bf4 <MCM_Sqrt>
  if ( wAux1 > INT16_MAX )
  {
    wAux1 = ( int32_t ) INT16_MAX;
  }

  return ( ( int16_t ) wAux1 );
 8002a38:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8002a3c:	4298      	cmp	r0, r3
 8002a3e:	bfa8      	it	ge
 8002a40:	4618      	movge	r0, r3
}
 8002a42:	b200      	sxth	r0, r0
 8002a44:	bd08      	pop	{r3, pc}
 8002a46:	bf00      	nop

08002a48 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8002a48:	f644 12e6 	movw	r2, #18918	; 0x49e6
 8002a4c:	b203      	sxth	r3, r0
 8002a4e:	1401      	asrs	r1, r0, #16
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8002a50:	fb02 f003 	mul.w	r0, r2, r3
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8002a54:	fb02 f201 	mul.w	r2, r2, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8002a58:	4240      	negs	r0, r0
 8002a5a:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8002a5e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8002a62:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8002a64:	da05      	bge.n	8002a72 <MCM_Clarke+0x2a>
 8002a66:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8002a68:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8002a6c:	da0c      	bge.n	8002a88 <MCM_Clarke+0x40>
 8002a6e:	4a09      	ldr	r2, [pc, #36]	; (8002a94 <MCM_Clarke+0x4c>)
 8002a70:	e001      	b.n	8002a76 <MCM_Clarke+0x2e>
 8002a72:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8002a76:	2000      	movs	r0, #0
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	b292      	uxth	r2, r2
 8002a7c:	f363 000f 	bfi	r0, r3, #0, #16
 8002a80:	f362 401f 	bfi	r0, r2, #16, #16
}
 8002a84:	b004      	add	sp, #16
 8002a86:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8002a88:	4802      	ldr	r0, [pc, #8]	; (8002a94 <MCM_Clarke+0x4c>)
 8002a8a:	b20a      	sxth	r2, r1
 8002a8c:	4282      	cmp	r2, r0
 8002a8e:	bfb8      	it	lt
 8002a90:	4602      	movlt	r2, r0
 8002a92:	e7f0      	b.n	8002a76 <MCM_Clarke+0x2e>
 8002a94:	ffff8001 	.word	0xffff8001

08002a98 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = ( ( int32_t )32768 + ( int32_t )hAngle );
 8002a98:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = ( uint16_t )shindex;
  uhindex /= ( uint16_t )64;
 8002a9c:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8002aa0:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8002aa4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8002aa8:	b082      	sub	sp, #8
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8002aaa:	d028      	beq.n	8002afe <MCM_Trig_Functions+0x66>
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	d816      	bhi.n	8002ae2 <MCM_Trig_Functions+0x4a>
 8002ab4:	b361      	cbz	r1, 8002b10 <MCM_Trig_Functions+0x78>
 8002ab6:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8002aba:	d109      	bne.n	8002ad0 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
      break;

    case U270_360:
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002abc:	b2c0      	uxtb	r0, r0
 8002abe:	43c3      	mvns	r3, r0
 8002ac0:	491a      	ldr	r1, [pc, #104]	; (8002b2c <MCM_Trig_Functions+0x94>)
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8002ac8:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002acc:	4252      	negs	r2, r2
 8002ace:	b212      	sxth	r2, r2
      break;
    default:
      break;
  }
  return ( Local_Components );
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	b292      	uxth	r2, r2
 8002ad6:	f363 000f 	bfi	r0, r3, #0, #16
 8002ada:	f362 401f 	bfi	r0, r2, #16, #16
}
 8002ade:	b002      	add	sp, #8
 8002ae0:	4770      	bx	lr
  switch ( ( uint16_t )( uhindex ) & SIN_MASK )
 8002ae2:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 8002ae6:	d1f3      	bne.n	8002ad0 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002ae8:	b2c0      	uxtb	r0, r0
 8002aea:	43c2      	mvns	r2, r0
 8002aec:	490f      	ldr	r1, [pc, #60]	; (8002b2c <MCM_Trig_Functions+0x94>)
 8002aee:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002af0:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002af4:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002af8:	425b      	negs	r3, r3
 8002afa:	b21b      	sxth	r3, r3
      break;
 8002afc:	e7e8      	b.n	8002ad0 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8002afe:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002b00:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8002b02:	4a0a      	ldr	r2, [pc, #40]	; (8002b2c <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8002b0a:	f932 2010 	ldrsh.w	r2, [r2, r0, lsl #1]
      break;
 8002b0e:	e7df      	b.n	8002ad0 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002b10:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002b12:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002b14:	4a05      	ldr	r2, [pc, #20]	; (8002b2c <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002b1c:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002b20:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002b22:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8002b24:	b21b      	sxth	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8002b26:	b212      	sxth	r2, r2
      break;
 8002b28:	e7d2      	b.n	8002ad0 <MCM_Trig_Functions+0x38>
 8002b2a:	bf00      	nop
 8002b2c:	08010868 	.word	0x08010868

08002b30 <MCM_Park>:
{
 8002b30:	b570      	push	{r4, r5, r6, lr}
 8002b32:	4605      	mov	r5, r0
 8002b34:	4604      	mov	r4, r0
 8002b36:	b084      	sub	sp, #16
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8002b38:	4608      	mov	r0, r1
{
 8002b3a:	9501      	str	r5, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8002b3c:	f7ff ffac 	bl	8002a98 <MCM_Trig_Functions>
 8002b40:	b224      	sxth	r4, r4
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8002b42:	b206      	sxth	r6, r0
 8002b44:	fb06 f204 	mul.w	r2, r6, r4
 8002b48:	142d      	asrs	r5, r5, #16
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8002b4a:	1400      	asrs	r0, r0, #16
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8002b4c:	fb00 2215 	mls	r2, r0, r5, r2
  if ( wqd_tmp > INT16_MAX )
 8002b50:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002b54:	da12      	bge.n	8002b7c <MCM_Park+0x4c>
 8002b56:	13d3      	asrs	r3, r2, #15
  else if ( wqd_tmp < ( -32768 ) )
 8002b58:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002b5c:	4914      	ldr	r1, [pc, #80]	; (8002bb0 <MCM_Park+0x80>)
 8002b5e:	da21      	bge.n	8002ba4 <MCM_Park+0x74>
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8002b60:	fb05 f506 	mul.w	r5, r5, r6
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8002b64:	fb00 5404 	mla	r4, r0, r4, r5
  if ( wqd_tmp > INT16_MAX )
 8002b68:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8002b6c:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 8002b70:	da07      	bge.n	8002b82 <MCM_Park+0x52>
  else if ( wqd_tmp < ( -32768 ) )
 8002b72:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8002b76:	da0f      	bge.n	8002b98 <MCM_Park+0x68>
 8002b78:	4b0d      	ldr	r3, [pc, #52]	; (8002bb0 <MCM_Park+0x80>)
 8002b7a:	e004      	b.n	8002b86 <MCM_Park+0x56>
 8002b7c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8002b80:	e7ee      	b.n	8002b60 <MCM_Park+0x30>
 8002b82:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8002b86:	2000      	movs	r0, #0
 8002b88:	b28a      	uxth	r2, r1
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	f362 000f 	bfi	r0, r2, #0, #16
 8002b90:	f363 401f 	bfi	r0, r3, #16, #16
}
 8002b94:	b004      	add	sp, #16
 8002b96:	bd70      	pop	{r4, r5, r6, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8002b98:	4805      	ldr	r0, [pc, #20]	; (8002bb0 <MCM_Park+0x80>)
 8002b9a:	b213      	sxth	r3, r2
 8002b9c:	4283      	cmp	r3, r0
 8002b9e:	bfb8      	it	lt
 8002ba0:	4603      	movlt	r3, r0
 8002ba2:	e7f0      	b.n	8002b86 <MCM_Park+0x56>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8002ba4:	b21a      	sxth	r2, r3
 8002ba6:	4291      	cmp	r1, r2
 8002ba8:	bfb8      	it	lt
 8002baa:	4611      	movlt	r1, r2
 8002bac:	e7d8      	b.n	8002b60 <MCM_Park+0x30>
 8002bae:	bf00      	nop
 8002bb0:	ffff8001 	.word	0xffff8001

08002bb4 <MCM_Rev_Park>:
{
 8002bb4:	b530      	push	{r4, r5, lr}
 8002bb6:	4605      	mov	r5, r0
 8002bb8:	b085      	sub	sp, #20
 8002bba:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8002bbc:	4608      	mov	r0, r1
{
 8002bbe:	9501      	str	r5, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8002bc0:	f7ff ff6a 	bl	8002a98 <MCM_Trig_Functions>
 8002bc4:	4603      	mov	r3, r0
  return ( Output );
 8002bc6:	2000      	movs	r0, #0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8002bc8:	141a      	asrs	r2, r3, #16
 8002bca:	142d      	asrs	r5, r5, #16
 8002bcc:	fb02 f105 	mul.w	r1, r2, r5
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 8002bd0:	b21b      	sxth	r3, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8002bd2:	fb05 f503 	mul.w	r5, r5, r3
 8002bd6:	b224      	sxth	r4, r4
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8002bd8:	fb03 1304 	mla	r3, r3, r4, r1
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 8002bdc:	fb02 5414 	mls	r4, r2, r4, r5
  return ( Output );
 8002be0:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8002be4:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8002be8:	f363 000f 	bfi	r0, r3, #0, #16
 8002bec:	f364 401f 	bfi	r0, r4, #16, #16
}
 8002bf0:	b005      	add	sp, #20
 8002bf2:	bd30      	pop	{r4, r5, pc}

08002bf4 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt( int32_t wInput )
{
  int32_t wtemprootnew;

  if ( wInput > 0 )
 8002bf4:	1e03      	subs	r3, r0, #0
 8002bf6:	dd32      	ble.n	8002c5e <MCM_Sqrt+0x6a>
  {
  uint8_t biter = 0u;
  int32_t wtemproot;

    if ( wInput <= ( int32_t )2097152 )
 8002bf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
    {
      wtemproot = ( int32_t )128;
    }
    else
    {
      wtemproot = ( int32_t )8192;
 8002bfc:	bfd4      	ite	le
 8002bfe:	2080      	movle	r0, #128	; 0x80
 8002c00:	f44f 5000 	movgt.w	r0, #8192	; 0x2000
    }

    do
    {
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002c04:	fb93 f2f0 	sdiv	r2, r3, r0
 8002c08:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8002c0a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002c0e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8002c12:	d025      	beq.n	8002c60 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002c14:	fb93 f2f1 	sdiv	r2, r3, r1
 8002c18:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 8002c1a:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002c1e:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8002c22:	d01d      	beq.n	8002c60 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002c24:	fb93 f2f0 	sdiv	r2, r3, r0
 8002c28:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8002c2a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002c2e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8002c32:	d015      	beq.n	8002c60 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002c34:	fb93 f2f1 	sdiv	r2, r3, r1
 8002c38:	440a      	add	r2, r1
      if ( wtemprootnew == wtemproot )
 8002c3a:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002c3e:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8002c42:	d00d      	beq.n	8002c60 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002c44:	fb93 f2f0 	sdiv	r2, r3, r0
 8002c48:	4402      	add	r2, r0
      if ( wtemprootnew == wtemproot )
 8002c4a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002c4e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ( wtemprootnew == wtemproot )
 8002c52:	d005      	beq.n	8002c60 <MCM_Sqrt+0x6c>
      wtemprootnew = ( wtemproot + wInput / wtemproot ) / ( int32_t )2;
 8002c54:	fb93 f0f1 	sdiv	r0, r3, r1
 8002c58:	4408      	add	r0, r1
 8002c5a:	1040      	asrs	r0, r0, #1
      if ( wtemprootnew == wtemproot )
 8002c5c:	4770      	bx	lr
    while ( biter < 6u );

  }
  else
  {
    wtemprootnew = ( int32_t )0;
 8002c5e:	2000      	movs	r0, #0
  }

  return ( wtemprootnew );
}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop

08002c64 <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8002c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
 8002c66:	2400      	movs	r4, #0
{
 8002c68:	4605      	mov	r5, r0
  FOCVars[bMotor].Iab = NULL_ab;
 8002c6a:	4a16      	ldr	r2, [pc, #88]	; (8002cc4 <FOC_Clear+0x60>)
 8002c6c:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8002c70:	00de      	lsls	r6, r3, #3
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  FOCVars[bMotor].Iqd = NULL_qd;
 8002c72:	f106 010c 	add.w	r1, r6, #12
  FOCVars[bMotor].Iab = NULL_ab;
 8002c76:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
 8002c7a:	f106 0716 	add.w	r7, r6, #22
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002c7e:	4812      	ldr	r0, [pc, #72]	; (8002cc8 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8002c80:	50b4      	str	r4, [r6, r2]
 8002c82:	605c      	str	r4, [r3, #4]
  FOCVars[bMotor].Vqd = NULL_qd;
 8002c84:	18be      	adds	r6, r7, r2
  FOCVars[bMotor].Iqd = NULL_qd;
 8002c86:	508c      	str	r4, [r1, r2]
 8002c88:	4411      	add	r1, r2
 8002c8a:	604c      	str	r4, [r1, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002c8c:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8002c90:	83dc      	strh	r4, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002c92:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8002c94:	50bc      	str	r4, [r7, r2]
 8002c96:	6074      	str	r4, [r6, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8002c98:	841c      	strh	r4, [r3, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8002c9a:	f7fe febb 	bl	8001a14 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8002c9e:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <FOC_Clear+0x68>)
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002ca6:	f7fe feb5 	bl	8001a14 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <FOC_Clear+0x6c>)
 8002cac:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002cb0:	f7ff fcc4 	bl	800263c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002cb4:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <FOC_Clear+0x70>)
 8002cb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8002cba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002cbe:	f7ff b899 	b.w	8001df4 <PWMC_SwitchOffPWM>
 8002cc2:	bf00      	nop
 8002cc4:	200032d4 	.word	0x200032d4
 8002cc8:	200032c8 	.word	0x200032c8
 8002ccc:	200033a4 	.word	0x200033a4
 8002cd0:	200033a8 	.word	0x200033a8
 8002cd4:	200032c0 	.word	0x200032c0

08002cd8 <MCboot>:
{
 8002cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  bMCBootCompleted = 0;
 8002cdc:	2400      	movs	r4, #0
 8002cde:	4f5f      	ldr	r7, [pc, #380]	; (8002e5c <MCboot+0x184>)
{
 8002ce0:	b085      	sub	sp, #20
 8002ce2:	4606      	mov	r6, r0
  STM_Init(&STM[M1]);
 8002ce4:	485e      	ldr	r0, [pc, #376]	; (8002e60 <MCboot+0x188>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 8002ce6:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8002eac <MCboot+0x1d4>
{
 8002cea:	9100      	str	r1, [sp, #0]
  pCLM[M1] = &CircleLimitationM1;
 8002cec:	4d5d      	ldr	r5, [pc, #372]	; (8002e64 <MCboot+0x18c>)
  STM_Init(&STM[M1]);
 8002cee:	f7ff fd4f 	bl	8002790 <STM_Init>
  pCLM[M1] = &CircleLimitationM1;
 8002cf2:	495d      	ldr	r1, [pc, #372]	; (8002e68 <MCboot+0x190>)
  pMaxTorquePerAmpere[M1] = &MTPARegM1;
 8002cf4:	4b5d      	ldr	r3, [pc, #372]	; (8002e6c <MCboot+0x194>)
 8002cf6:	4a5e      	ldr	r2, [pc, #376]	; (8002e70 <MCboot+0x198>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002cf8:	485e      	ldr	r0, [pc, #376]	; (8002e74 <MCboot+0x19c>)
  bMCBootCompleted = 0;
 8002cfa:	703c      	strb	r4, [r7, #0]
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002cfc:	4f5e      	ldr	r7, [pc, #376]	; (8002e78 <MCboot+0x1a0>)
  pCLM[M1] = &CircleLimitationM1;
 8002cfe:	600d      	str	r5, [r1, #0]
  pMaxTorquePerAmpere[M1] = &MTPARegM1;
 8002d00:	601a      	str	r2, [r3, #0]
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002d02:	6038      	str	r0, [r7, #0]
  R3_2_Init(&PWM_Handle_M1);
 8002d04:	f7ff f9fe 	bl	8002104 <R3_2_Init>
  HALL_Init (&HALL_M1);
 8002d08:	4f5c      	ldr	r7, [pc, #368]	; (8002e7c <MCboot+0x1a4>)
  startTimers();
 8002d0a:	f7fe ff01 	bl	8001b10 <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 8002d0e:	4640      	mov	r0, r8
 8002d10:	f7fe fe78 	bl	8001a04 <PID_HandleInit>
  pSTC[M1] = &SpeednTorqCtrlM1;
 8002d14:	4d5a      	ldr	r5, [pc, #360]	; (8002e80 <MCboot+0x1a8>)
 8002d16:	4b5b      	ldr	r3, [pc, #364]	; (8002e84 <MCboot+0x1ac>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8002d18:	4a5b      	ldr	r2, [pc, #364]	; (8002e88 <MCboot+0x1b0>)
  HALL_Init (&HALL_M1);
 8002d1a:	4638      	mov	r0, r7
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8002d1c:	f8c2 8000 	str.w	r8, [r2]
  pSTC[M1] = &SpeednTorqCtrlM1;
 8002d20:	602b      	str	r3, [r5, #0]
  HALL_Init (&HALL_M1);
 8002d22:	f7fe fa77 	bl	8001214 <HALL_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8002d26:	4b58      	ldr	r3, [pc, #352]	; (8002e88 <MCboot+0x1b0>)
  PID_HandleInit(&PIDIqHandle_M1);
 8002d28:	f8df b184 	ldr.w	fp, [pc, #388]	; 8002eb0 <MCboot+0x1d8>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8002d2c:	6819      	ldr	r1, [r3, #0]
 8002d2e:	463a      	mov	r2, r7
  PID_HandleInit(&PIDIdHandle_M1);
 8002d30:	f8df a180 	ldr.w	sl, [pc, #384]	; 8002eb4 <MCboot+0x1dc>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &HALL_M1._Super);
 8002d34:	6828      	ldr	r0, [r5, #0]
 8002d36:	f7ff fc6b 	bl	8002610 <STC_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8002d3a:	4658      	mov	r0, fp
 8002d3c:	f7fe fe62 	bl	8001a04 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8002d40:	4650      	mov	r0, sl
 8002d42:	f7fe fe5f 	bl	8001a04 <PID_HandleInit>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8002d46:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8002eb8 <MCboot+0x1e0>
 8002d4a:	4850      	ldr	r0, [pc, #320]	; (8002e8c <MCboot+0x1b4>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 8002d4c:	4950      	ldr	r1, [pc, #320]	; (8002e90 <MCboot+0x1b8>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8002d4e:	4a51      	ldr	r2, [pc, #324]	; (8002e94 <MCboot+0x1bc>)
  NTC_Init(&TempSensorParamsM1);
 8002d50:	f8df 9168 	ldr.w	r9, [pc, #360]	; 8002ebc <MCboot+0x1e4>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8002d54:	f8c1 b000 	str.w	fp, [r1]
  pPIDId[M1] = &PIDIdHandle_M1;
 8002d58:	f8c2 a000 	str.w	sl, [r2]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8002d5c:	f8df b160 	ldr.w	fp, [pc, #352]	; 8002ec0 <MCboot+0x1e8>
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002d60:	f8df a160 	ldr.w	sl, [pc, #352]	; 8002ec4 <MCboot+0x1ec>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8002d64:	f8c8 0000 	str.w	r0, [r8]
  RVBS_Init(pBusSensorM1);
 8002d68:	f7ff fbba 	bl	80024e0 <RVBS_Init>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8002d6c:	f8d8 1000 	ldr.w	r1, [r8]
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8002d70:	4a49      	ldr	r2, [pc, #292]	; (8002e98 <MCboot+0x1c0>)
  NTC_Init(&TempSensorParamsM1);
 8002d72:	4648      	mov	r0, r9
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8002d74:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8002d78:	f8cb 2000 	str.w	r2, [fp]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002d7c:	f8c2 a10c 	str.w	sl, [r2, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 8002d80:	f7fe fdf6 	bl	8001970 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8002d84:	4b45      	ldr	r3, [pc, #276]	; (8002e9c <MCboot+0x1c4>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002d86:	4a46      	ldr	r2, [pc, #280]	; (8002ea0 <MCboot+0x1c8>)
 8002d88:	4846      	ldr	r0, [pc, #280]	; (8002ea4 <MCboot+0x1cc>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 8002d8a:	f8c3 9000 	str.w	r9, [r3]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002d8e:	6010      	str	r0, [r2, #0]
  REMNG_Init(pREMNG[M1]);
 8002d90:	f7ff fbf4 	bl	800257c <REMNG_Init>
  FOC_Clear(M1);
 8002d94:	4620      	mov	r0, r4
 8002d96:	f7ff ff65 	bl	8002c64 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 8002d9a:	f04f 0c01 	mov.w	ip, #1
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002d9e:	6828      	ldr	r0, [r5, #0]
  FOCVars[M1].bDriveInput = EXTERNAL;
 8002da0:	f88a c024 	strb.w	ip, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002da4:	f7ff fcde 	bl	8002764 <STC_GetDefaultIqdref>
 8002da8:	4602      	mov	r2, r0
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002daa:	6828      	ldr	r0, [r5, #0]
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002dac:	f8ca 2010 	str.w	r2, [sl, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002db0:	f7ff fcd8 	bl	8002764 <STC_GetDefaultIqdref>
  oMCInterface[M1] = & Mci[M1];
 8002db4:	f8df e110 	ldr.w	lr, [pc, #272]	; 8002ec8 <MCboot+0x1f0>
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002db8:	f3c0 4c0f 	ubfx	ip, r0, #16, #16
  oMCInterface[M1] = & Mci[M1];
 8002dbc:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8002ecc <MCboot+0x1f4>
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8002dc0:	4670      	mov	r0, lr
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002dc2:	f8aa c014 	strh.w	ip, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8002dc6:	682a      	ldr	r2, [r5, #0]
 8002dc8:	4653      	mov	r3, sl
 8002dca:	4925      	ldr	r1, [pc, #148]	; (8002e60 <MCboot+0x188>)
  oMCInterface[M1] = & Mci[M1];
 8002dcc:	f8c9 e000 	str.w	lr, [r9]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 8002dd0:	f7ff fd9c 	bl	800290c <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8002dd4:	f8d9 3000 	ldr.w	r3, [r9]
 8002dd8:	6828      	ldr	r0, [r5, #0]
 8002dda:	9301      	str	r3, [sp, #4]
 8002ddc:	f7ff fcbe 	bl	800275c <STC_GetMecSpeedRefUnitDefault>
 8002de0:	9b01      	ldr	r3, [sp, #4]
 8002de2:	4601      	mov	r1, r0
 8002de4:	4622      	mov	r2, r4
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fd9c 	bl	8002924 <MCI_ExecSpeedRamp>
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8002dec:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <MCboot+0x1b0>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8002dee:	4928      	ldr	r1, [pc, #160]	; (8002e90 <MCboot+0x1b8>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8002df0:	f8d3 c000 	ldr.w	ip, [r3]
  MCT[M1].pPIDId = pPIDId[M1];
 8002df4:	4a27      	ldr	r2, [pc, #156]	; (8002e94 <MCboot+0x1bc>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8002df6:	4b29      	ldr	r3, [pc, #164]	; (8002e9c <MCboot+0x1c4>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 8002df8:	6808      	ldr	r0, [r1, #0]
  pMCIList[M1] = oMCInterface[M1];
 8002dfa:	f8d9 e000 	ldr.w	lr, [r9]
  MCT[M1].pPIDId = pPIDId[M1];
 8002dfe:	6811      	ldr	r1, [r2, #0]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8002e00:	f8d3 9000 	ldr.w	r9, [r3]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8002e04:	4a1c      	ldr	r2, [pc, #112]	; (8002e78 <MCboot+0x1a0>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8002e06:	4b28      	ldr	r3, [pc, #160]	; (8002ea8 <MCboot+0x1d0>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8002e08:	6812      	ldr	r2, [r2, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8002e0a:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8002e0c:	f8d8 8000 	ldr.w	r8, [r8]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8002e10:	f8db a000 	ldr.w	sl, [fp]
  pMCIList[M1] = oMCInterface[M1];
 8002e14:	f8c6 e000 	str.w	lr, [r6]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8002e18:	e9c3 c000 	strd	ip, r0, [r3]
  bMCBootCompleted = 1;
 8002e1c:	f04f 0c01 	mov.w	ip, #1
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8002e20:	611a      	str	r2, [r3, #16]
  MCT[M1].pStateMachine = &STM[M1];
 8002e22:	4a0f      	ldr	r2, [pc, #60]	; (8002e60 <MCboot+0x188>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8002e24:	e9c3 980b 	strd	r9, r8, [r3, #44]	; 0x2c
  MCT[M1].pStateMachine = &STM[M1];
 8002e28:	629a      	str	r2, [r3, #40]	; 0x28
  pMCTList[M1] = &MCT[M1];
 8002e2a:	9a00      	ldr	r2, [sp, #0]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &HALL_M1;
 8002e2c:	e9c3 4705 	strd	r4, r7, [r3, #20]
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8002e30:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8002e34:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 8002e38:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  MCT[M1].pSCC = MC_NULL;
 8002e3c:	e9c3 4412 	strd	r4, r4, [r3, #72]	; 0x48
  MCT[M1].pPIDId = pPIDId[M1];
 8002e40:	6099      	str	r1, [r3, #8]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8002e42:	625d      	str	r5, [r3, #36]	; 0x24
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8002e44:	f8c3 a03c 	str.w	sl, [r3, #60]	; 0x3c
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8002e48:	60dc      	str	r4, [r3, #12]
  MCT[M1].pOTT = MC_NULL;
 8002e4a:	651c      	str	r4, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8002e4c:	6013      	str	r3, [r2, #0]
  bMCBootCompleted = 1;
 8002e4e:	4b03      	ldr	r3, [pc, #12]	; (8002e5c <MCboot+0x184>)
 8002e50:	f883 c000 	strb.w	ip, [r3]
}
 8002e54:	b005      	add	sp, #20
 8002e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e5a:	bf00      	nop
 8002e5c:	20000528 	.word	0x20000528
 8002e60:	20003394 	.word	0x20003394
 8002e64:	20000000 	.word	0x20000000
 8002e68:	20003370 	.word	0x20003370
 8002e6c:	20000530 	.word	0x20000530
 8002e70:	20000198 	.word	0x20000198
 8002e74:	20000374 	.word	0x20000374
 8002e78:	200032c0 	.word	0x200032c0
 8002e7c:	200000b4 	.word	0x200000b4
 8002e80:	200033a8 	.word	0x200033a8
 8002e84:	2000042c 	.word	0x2000042c
 8002e88:	200032c4 	.word	0x200032c4
 8002e8c:	20000404 	.word	0x20000404
 8002e90:	200032c8 	.word	0x200032c8
 8002e94:	200033a4 	.word	0x200033a4
 8002e98:	20000260 	.word	0x20000260
 8002e9c:	200032bc 	.word	0x200032bc
 8002ea0:	2000339c 	.word	0x2000339c
 8002ea4:	200003ec 	.word	0x200003ec
 8002ea8:	2000331c 	.word	0x2000331c
 8002eac:	20000234 	.word	0x20000234
 8002eb0:	20000208 	.word	0x20000208
 8002eb4:	200001dc 	.word	0x200001dc
 8002eb8:	20003374 	.word	0x20003374
 8002ebc:	20000460 	.word	0x20000460
 8002ec0:	200033a0 	.word	0x200033a0
 8002ec4:	200032d4 	.word	0x200032d4
 8002ec8:	20003378 	.word	0x20003378
 8002ecc:	200032cc 	.word	0x200032cc

08002ed0 <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop

08002ed4 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8002ed4:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8002ed6:	4c08      	ldr	r4, [pc, #32]	; (8002ef8 <FOC_CalcCurrRef+0x24>)
 8002ed8:	eb00 03c0 	add.w	r3, r0, r0, lsl #3
 8002edc:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
 8002ee0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002ee4:	b103      	cbz	r3, 8002ee8 <FOC_CalcCurrRef+0x14>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8002ee6:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8002ee8:	4b04      	ldr	r3, [pc, #16]	; (8002efc <FOC_CalcCurrRef+0x28>)
 8002eea:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002eee:	f7ff fc03 	bl	80026f8 <STC_CalcTorqueReference>
 8002ef2:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8002ef4:	8220      	strh	r0, [r4, #16]
}
 8002ef6:	bd10      	pop	{r4, pc}
 8002ef8:	200032d4 	.word	0x200032d4
 8002efc:	200033a8 	.word	0x200033a8

08002f00 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8002f00:	4b01      	ldr	r3, [pc, #4]	; (8002f08 <TSK_SetChargeBootCapDelayM1+0x8>)
 8002f02:	8018      	strh	r0, [r3, #0]
}
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	2000052a 	.word	0x2000052a

08002f0c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8002f0c:	4b03      	ldr	r3, [pc, #12]	; (8002f1c <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8002f0e:	8818      	ldrh	r0, [r3, #0]
 8002f10:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002f12:	fab0 f080 	clz	r0, r0
 8002f16:	0940      	lsrs	r0, r0, #5
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	2000052a 	.word	0x2000052a

08002f20 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8002f20:	4b01      	ldr	r3, [pc, #4]	; (8002f28 <TSK_SetStopPermanencyTimeM1+0x8>)
 8002f22:	8018      	strh	r0, [r3, #0]
}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	2000052e 	.word	0x2000052e

08002f2c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8002f2c:	4b03      	ldr	r3, [pc, #12]	; (8002f3c <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8002f2e:	8818      	ldrh	r0, [r3, #0]
 8002f30:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002f32:	fab0 f080 	clz	r0, r0
 8002f36:	0940      	lsrs	r0, r0, #5
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	2000052e 	.word	0x2000052e

08002f40 <TSK_MediumFrequencyTaskM1>:
  int16_t wAux = 0;
 8002f40:	2300      	movs	r3, #0
{
 8002f42:	b530      	push	{r4, r5, lr}
 8002f44:	b083      	sub	sp, #12
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8002f46:	f10d 0106 	add.w	r1, sp, #6
 8002f4a:	484d      	ldr	r0, [pc, #308]	; (8003080 <TSK_MediumFrequencyTaskM1+0x140>)
  int16_t wAux = 0;
 8002f4c:	f8ad 3006 	strh.w	r3, [sp, #6]
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8002f50:	f7fe fa90 	bl	8001474 <HALL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8002f54:	4d4b      	ldr	r5, [pc, #300]	; (8003084 <TSK_MediumFrequencyTaskM1+0x144>)
  bool IsSpeedReliable = HALL_CalcAvrgMecSpeedUnit( &HALL_M1, &wAux );
 8002f56:	4604      	mov	r4, r0
  PQD_CalcElMotorPower( pMPM[M1] );
 8002f58:	6828      	ldr	r0, [r5, #0]
 8002f5a:	f7fe fda3 	bl	8001aa4 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8002f5e:	484a      	ldr	r0, [pc, #296]	; (8003088 <TSK_MediumFrequencyTaskM1+0x148>)
 8002f60:	f7ff fcac 	bl	80028bc <STM_GetState>
  switch ( StateM1 )
 8002f64:	1ec3      	subs	r3, r0, #3
 8002f66:	2b0f      	cmp	r3, #15
 8002f68:	d80d      	bhi.n	8002f86 <TSK_MediumFrequencyTaskM1+0x46>
 8002f6a:	e8df f003 	tbb	[pc, r3]
 8002f6e:	2b1f      	.short	0x2b1f
 8002f70:	65524330 	.word	0x65524330
 8002f74:	0c0c0c08 	.word	0x0c0c0c08
 8002f78:	6e0c0c0c 	.word	0x6e0c0c0c
 8002f7c:	0e7c      	.short	0x0e7c
    STM_NextState( &STM[M1], IDLE );
 8002f7e:	2100      	movs	r1, #0
 8002f80:	4841      	ldr	r0, [pc, #260]	; (8003088 <TSK_MediumFrequencyTaskM1+0x148>)
 8002f82:	f7ff fc27 	bl	80027d4 <STM_NextState>
}
 8002f86:	b003      	add	sp, #12
 8002f88:	bd30      	pop	{r4, r5, pc}
    HALL_Clear( &HALL_M1 );
 8002f8a:	483d      	ldr	r0, [pc, #244]	; (8003080 <TSK_MediumFrequencyTaskM1+0x140>)
 8002f8c:	f7fe f9ce 	bl	800132c <HALL_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 8002f90:	2104      	movs	r1, #4
 8002f92:	483d      	ldr	r0, [pc, #244]	; (8003088 <TSK_MediumFrequencyTaskM1+0x148>)
 8002f94:	f7ff fc1e 	bl	80027d4 <STM_NextState>
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	d0f4      	beq.n	8002f86 <TSK_MediumFrequencyTaskM1+0x46>
      FOC_Clear( M1 );
 8002f9c:	2000      	movs	r0, #0
 8002f9e:	f7ff fe61 	bl	8002c64 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8002fa2:	4b3a      	ldr	r3, [pc, #232]	; (800308c <TSK_MediumFrequencyTaskM1+0x14c>)
 8002fa4:	6818      	ldr	r0, [r3, #0]
 8002fa6:	f7ff f921 	bl	80021ec <R3_2_SwitchOnPWM>
 8002faa:	e7ec      	b.n	8002f86 <TSK_MediumFrequencyTaskM1+0x46>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8002fac:	4b37      	ldr	r3, [pc, #220]	; (800308c <TSK_MediumFrequencyTaskM1+0x14c>)
 8002fae:	6818      	ldr	r0, [r3, #0]
 8002fb0:	f7ff f8ee 	bl	8002190 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8002fb4:	2014      	movs	r0, #20
 8002fb6:	f7ff ffa3 	bl	8002f00 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8002fba:	2110      	movs	r1, #16
 8002fbc:	4832      	ldr	r0, [pc, #200]	; (8003088 <TSK_MediumFrequencyTaskM1+0x148>)
 8002fbe:	f7ff fc09 	bl	80027d4 <STM_NextState>
    break;
 8002fc2:	e7e0      	b.n	8002f86 <TSK_MediumFrequencyTaskM1+0x46>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8002fc4:	2105      	movs	r1, #5
 8002fc6:	4830      	ldr	r0, [pc, #192]	; (8003088 <TSK_MediumFrequencyTaskM1+0x148>)
 8002fc8:	f7ff fc04 	bl	80027d4 <STM_NextState>
    break;
 8002fcc:	e7db      	b.n	8002f86 <TSK_MediumFrequencyTaskM1+0x46>
	  FOC_InitAdditionalMethods(M1);
 8002fce:	2000      	movs	r0, #0
 8002fd0:	f7ff ff7e 	bl	8002ed0 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8002fd4:	2000      	movs	r0, #0
 8002fd6:	f7ff ff7d 	bl	8002ed4 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8002fda:	2106      	movs	r1, #6
 8002fdc:	482a      	ldr	r0, [pc, #168]	; (8003088 <TSK_MediumFrequencyTaskM1+0x148>)
 8002fde:	f7ff fbf9 	bl	80027d4 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8002fe2:	4b2b      	ldr	r3, [pc, #172]	; (8003090 <TSK_MediumFrequencyTaskM1+0x150>)
 8002fe4:	6818      	ldr	r0, [r3, #0]
 8002fe6:	f7ff fbcb 	bl	8002780 <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8002fea:	4b2a      	ldr	r3, [pc, #168]	; (8003094 <TSK_MediumFrequencyTaskM1+0x154>)
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	f7ff fcc5 	bl	800297c <MCI_ExecBufferedCommands>
    break;
 8002ff2:	e7c8      	b.n	8002f86 <TSK_MediumFrequencyTaskM1+0x46>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8002ff4:	4b27      	ldr	r3, [pc, #156]	; (8003094 <TSK_MediumFrequencyTaskM1+0x154>)
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	f7ff fcc0 	bl	800297c <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f7ff ff69 	bl	8002ed4 <FOC_CalcCurrRef>
    if( !IsSpeedReliable )
 8003002:	2c00      	cmp	r4, #0
 8003004:	d1bf      	bne.n	8002f86 <TSK_MediumFrequencyTaskM1+0x46>
      STM_FaultProcessing( &STM[M1], MC_SPEED_FDBK, 0 );
 8003006:	4622      	mov	r2, r4
 8003008:	2120      	movs	r1, #32
 800300a:	481f      	ldr	r0, [pc, #124]	; (8003088 <TSK_MediumFrequencyTaskM1+0x148>)
 800300c:	f7ff fbc6 	bl	800279c <STM_FaultProcessing>
 8003010:	e7b9      	b.n	8002f86 <TSK_MediumFrequencyTaskM1+0x46>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8003012:	4b1e      	ldr	r3, [pc, #120]	; (800308c <TSK_MediumFrequencyTaskM1+0x14c>)
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	f7ff f931 	bl	800227c <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 800301a:	2000      	movs	r0, #0
 800301c:	f7ff fe22 	bl	8002c64 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8003020:	6828      	ldr	r0, [r5, #0]
 8003022:	f7fe fc65 	bl	80018f0 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8003026:	f44f 7048 	mov.w	r0, #800	; 0x320
 800302a:	f7ff ff79 	bl	8002f20 <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 800302e:	2108      	movs	r1, #8
 8003030:	4815      	ldr	r0, [pc, #84]	; (8003088 <TSK_MediumFrequencyTaskM1+0x148>)
 8003032:	f7ff fbcf 	bl	80027d4 <STM_NextState>
    break;
 8003036:	e7a6      	b.n	8002f86 <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8003038:	f7ff ff78 	bl	8002f2c <TSK_StopPermanencyTimeHasElapsedM1>
 800303c:	2800      	cmp	r0, #0
 800303e:	d0a2      	beq.n	8002f86 <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], STOP_IDLE );
 8003040:	2109      	movs	r1, #9
 8003042:	4811      	ldr	r0, [pc, #68]	; (8003088 <TSK_MediumFrequencyTaskM1+0x148>)
 8003044:	f7ff fbc6 	bl	80027d4 <STM_NextState>
 8003048:	e79d      	b.n	8002f86 <TSK_MediumFrequencyTaskM1+0x46>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 800304a:	f7ff ff5f 	bl	8002f0c <TSK_ChargeBootCapDelayHasElapsedM1>
 800304e:	2800      	cmp	r0, #0
 8003050:	d099      	beq.n	8002f86 <TSK_MediumFrequencyTaskM1+0x46>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8003052:	4b0e      	ldr	r3, [pc, #56]	; (800308c <TSK_MediumFrequencyTaskM1+0x14c>)
 8003054:	2100      	movs	r1, #0
 8003056:	6818      	ldr	r0, [r3, #0]
 8003058:	f7fe fece 	bl	8001df8 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 800305c:	2111      	movs	r1, #17
 800305e:	480a      	ldr	r0, [pc, #40]	; (8003088 <TSK_MediumFrequencyTaskM1+0x148>)
 8003060:	f7ff fbb8 	bl	80027d4 <STM_NextState>
 8003064:	e78f      	b.n	8002f86 <TSK_MediumFrequencyTaskM1+0x46>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <TSK_MediumFrequencyTaskM1+0x14c>)
 8003068:	2101      	movs	r1, #1
 800306a:	6818      	ldr	r0, [r3, #0]
 800306c:	f7fe fec4 	bl	8001df8 <PWMC_CurrentReadingCalibr>
 8003070:	2800      	cmp	r0, #0
 8003072:	d088      	beq.n	8002f86 <TSK_MediumFrequencyTaskM1+0x46>
      STM_NextState( &STM[M1], CLEAR );
 8003074:	2112      	movs	r1, #18
 8003076:	4804      	ldr	r0, [pc, #16]	; (8003088 <TSK_MediumFrequencyTaskM1+0x148>)
 8003078:	f7ff fbac 	bl	80027d4 <STM_NextState>
 800307c:	e783      	b.n	8002f86 <TSK_MediumFrequencyTaskM1+0x46>
 800307e:	bf00      	nop
 8003080:	200000b4 	.word	0x200000b4
 8003084:	200033a0 	.word	0x200033a0
 8003088:	20003394 	.word	0x20003394
 800308c:	200032c0 	.word	0x200032c0
 8003090:	200033a8 	.word	0x200033a8
 8003094:	200032cc 	.word	0x200032cc

08003098 <MC_Scheduler>:
{
 8003098:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 800309a:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <MC_Scheduler+0x48>)
 800309c:	781c      	ldrb	r4, [r3, #0]
 800309e:	2c01      	cmp	r4, #1
 80030a0:	d000      	beq.n	80030a4 <MC_Scheduler+0xc>
}
 80030a2:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 80030a4:	4d0f      	ldr	r5, [pc, #60]	; (80030e4 <MC_Scheduler+0x4c>)
 80030a6:	882b      	ldrh	r3, [r5, #0]
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	b1ab      	cbz	r3, 80030d8 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 80030ac:	882b      	ldrh	r3, [r5, #0]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 80030b4:	4a0c      	ldr	r2, [pc, #48]	; (80030e8 <MC_Scheduler+0x50>)
 80030b6:	8813      	ldrh	r3, [r2, #0]
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	b11b      	cbz	r3, 80030c4 <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 80030bc:	8813      	ldrh	r3, [r2, #0]
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 80030c4:	4a09      	ldr	r2, [pc, #36]	; (80030ec <MC_Scheduler+0x54>)
 80030c6:	8813      	ldrh	r3, [r2, #0]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0e9      	beq.n	80030a2 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 80030ce:	8813      	ldrh	r3, [r2, #0]
 80030d0:	3b01      	subs	r3, #1
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	8013      	strh	r3, [r2, #0]
}
 80030d6:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 80030d8:	f7ff ff32 	bl	8002f40 <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 80030dc:	802c      	strh	r4, [r5, #0]
 80030de:	e7e9      	b.n	80030b4 <MC_Scheduler+0x1c>
 80030e0:	20000528 	.word	0x20000528
 80030e4:	2000052c 	.word	0x2000052c
 80030e8:	2000052a 	.word	0x2000052a
 80030ec:	2000052e 	.word	0x2000052e

080030f0 <MC_RunMotorControlTasks>:
{
 80030f0:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 80030f2:	4b03      	ldr	r3, [pc, #12]	; (8003100 <MC_RunMotorControlTasks+0x10>)
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	b903      	cbnz	r3, 80030fa <MC_RunMotorControlTasks+0xa>
}
 80030f8:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 80030fa:	f7ff ffcd 	bl	8003098 <MC_Scheduler>
}
 80030fe:	bd08      	pop	{r3, pc}
 8003100:	20000528 	.word	0x20000528

08003104 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8003104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	/* USER CODE END HighFrequencyTask 0 */

	uint8_t bMotorNbr = 0;
	uint16_t hFOCreturn;

	HALL_CalcElAngle (&HALL_M1);
 8003108:	486d      	ldr	r0, [pc, #436]	; (80032c0 <TSK_HighFrequencyTask+0x1bc>)
{
 800310a:	b086      	sub	sp, #24
	HALL_CalcElAngle (&HALL_M1);
 800310c:	f7fe f98c 	bl	8001428 <HALL_CalcElAngle>
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;


  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8003110:	4b6c      	ldr	r3, [pc, #432]	; (80032c4 <TSK_HighFrequencyTask+0x1c0>)
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8003112:	4f6d      	ldr	r7, [pc, #436]	; (80032c8 <TSK_HighFrequencyTask+0x1c4>)
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8003114:	6818      	ldr	r0, [r3, #0]
 8003116:	f7ff fa8f 	bl	8002638 <STC_GetSpeedSensor>
 800311a:	4681      	mov	r9, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 800311c:	f7ff fa36 	bl	800258c <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8003120:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8003122:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8003124:	6838      	ldr	r0, [r7, #0]
 8003126:	f7fe fd49 	bl	8001bbc <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 800312a:	9803      	ldr	r0, [sp, #12]
 800312c:	f7ff fc8c 	bl	8002a48 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003130:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8003132:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003134:	f7ff fcfc 	bl	8002b30 <MCM_Park>
 8003138:	4605      	mov	r5, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800313a:	4c64      	ldr	r4, [pc, #400]	; (80032cc <TSK_HighFrequencyTask+0x1c8>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 800313c:	4b64      	ldr	r3, [pc, #400]	; (80032d0 <TSK_HighFrequencyTask+0x1cc>)
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800313e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003142:	fa0f f880 	sxth.w	r8, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 8003146:	eba1 0108 	sub.w	r1, r1, r8
 800314a:	6818      	ldr	r0, [r3, #0]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800314c:	9501      	str	r5, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1],
 800314e:	f7fe fc63 	bl	8001a18 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
 8003152:	4b60      	ldr	r3, [pc, #384]	; (80032d4 <TSK_HighFrequencyTask+0x1d0>)
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8003154:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003158:	142d      	asrs	r5, r5, #16
  Vqd.q = PI_Controller(pPIDIq[M1],
 800315a:	4682      	mov	sl, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 800315c:	1b49      	subs	r1, r1, r5
 800315e:	6818      	ldr	r0, [r3, #0]
 8003160:	f7fe fc5a 	bl	8001a18 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8003164:	4b5c      	ldr	r3, [pc, #368]	; (80032d8 <TSK_HighFrequencyTask+0x1d4>)
 8003166:	f8ad a008 	strh.w	sl, [sp, #8]
 800316a:	f8ad 000a 	strh.w	r0, [sp, #10]
 800316e:	9902      	ldr	r1, [sp, #8]
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	f7fe f81d 	bl	80011b0 <Circle_Limitation>
 8003176:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8003178:	4648      	mov	r0, r9
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800317a:	ea4f 4a23 	mov.w	sl, r3, asr #16
 800317e:	fa0f f983 	sxth.w	r9, r3
 8003182:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8003184:	f7ff fa14 	bl	80025b0 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8003188:	4631      	mov	r1, r6
 800318a:	9802      	ldr	r0, [sp, #8]
 800318c:	f7ff fd12 	bl	8002bb4 <MCM_Rev_Park>
 8003190:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8003192:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8003194:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8003196:	f7fe fd13 	bl	8001bc0 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Iq_sum += Iqd.q;
  FOCVars[M1].Iq_samples++;
  FOCVars[M1].Id_sum += Iqd.d;
  FOCVars[M1].Id_samples++;
  FOCVars[M1].Vq_sum += Vqd.q;
 800319a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FOCVars[M1].Iq_sum += Iqd.q;
 800319c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  FOCVars[M1].Id_sum += Iqd.d;
 800319e:	6b27      	ldr	r7, [r4, #48]	; 0x30
  FOCVars[M1].Vq_sum += Vqd.q;
 80031a0:	444a      	add	r2, r9
	if(samples.state == SAMP_START){
 80031a2:	4b4e      	ldr	r3, [pc, #312]	; (80032dc <TSK_HighFrequencyTask+0x1d8>)
  FOCVars[M1].Vqd = Vqd;
 80031a4:	f8a4 9016 	strh.w	r9, [r4, #22]
  FOCVars[M1].Iq_samples++;
 80031a8:	f8b4 902c 	ldrh.w	r9, [r4, #44]	; 0x2c
  FOCVars[M1].Iq_sum += Iqd.q;
 80031ac:	eb01 0e08 	add.w	lr, r1, r8
  FOCVars[M1].Id_sum += Iqd.d;
 80031b0:	442f      	add	r7, r5
  FOCVars[M1].Vq_samples++;
  FOCVars[M1].Vd_sum += Vqd.d;
 80031b2:	6c21      	ldr	r1, [r4, #64]	; 0x40
  FOCVars[M1].Iqd = Iqd;
 80031b4:	81e5      	strh	r5, [r4, #14]
  FOCVars[M1].Iab = Iab;
 80031b6:	9d03      	ldr	r5, [sp, #12]
  FOCVars[M1].Id_samples++;
 80031b8:	f8b4 c034 	ldrh.w	ip, [r4, #52]	; 0x34
  FOCVars[M1].Iqd = Iqd;
 80031bc:	f8a4 800c 	strh.w	r8, [r4, #12]
  FOCVars[M1].Vd_samples++;
  FOCVars[M1].Valphabeta = Valphabeta;
  FOCVars[M1].hElAngle = hElAngle;
 80031c0:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Iq_samples++;
 80031c2:	f109 0801 	add.w	r8, r9, #1
  FOCVars[M1].Vd_samples++;
 80031c6:	f8b4 6044 	ldrh.w	r6, [r4, #68]	; 0x44
  FOCVars[M1].Vq_samples++;
 80031ca:	f8b4 903c 	ldrh.w	r9, [r4, #60]	; 0x3c
  FOCVars[M1].Vq_sum += Vqd.q;
 80031ce:	63a2      	str	r2, [r4, #56]	; 0x38
	if(samples.state == SAMP_START){
 80031d0:	781a      	ldrb	r2, [r3, #0]
  FOCVars[M1].Vd_sum += Vqd.d;
 80031d2:	4451      	add	r1, sl
  FOCVars[M1].Vqd = Vqd;
 80031d4:	f8a4 a018 	strh.w	sl, [r4, #24]
  FOCVars[M1].Iab = Iab;
 80031d8:	6025      	str	r5, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80031da:	4682      	mov	sl, r0
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80031dc:	9d04      	ldr	r5, [sp, #16]
  FOCVars[M1].Valphabeta = Valphabeta;
 80031de:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Id_samples++;
 80031e0:	f10c 0c01 	add.w	ip, ip, #1
  FOCVars[M1].Vq_samples++;
 80031e4:	f109 0901 	add.w	r9, r9, #1
  FOCVars[M1].Vd_samples++;
 80031e8:	3601      	adds	r6, #1
	if(samples.state == SAMP_START){
 80031ea:	2a01      	cmp	r2, #1
  FOCVars[M1].Iq_sum += Iqd.q;
 80031ec:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
  FOCVars[M1].Id_sum += Iqd.d;
 80031f0:	6327      	str	r7, [r4, #48]	; 0x30
  FOCVars[M1].Vd_sum += Vqd.d;
 80031f2:	6421      	str	r1, [r4, #64]	; 0x40
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80031f4:	6065      	str	r5, [r4, #4]
  FOCVars[M1].Iq_samples++;
 80031f6:	f8a4 802c 	strh.w	r8, [r4, #44]	; 0x2c
  FOCVars[M1].Id_samples++;
 80031fa:	f8a4 c034 	strh.w	ip, [r4, #52]	; 0x34
  FOCVars[M1].Vq_samples++;
 80031fe:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  FOCVars[M1].Vd_samples++;
 8003202:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  FOCVars[M1].Valphabeta = Valphabeta;
 8003206:	f8c4 001a 	str.w	r0, [r4, #26]
	if(samples.state == SAMP_START){
 800320a:	d009      	beq.n	8003220 <TSK_HighFrequencyTask+0x11c>
	if(samples.state == SAMP_SAMPLING){
 800320c:	781a      	ldrb	r2, [r3, #0]
 800320e:	2a02      	cmp	r2, #2
 8003210:	d012      	beq.n	8003238 <TSK_HighFrequencyTask+0x134>
	if(hFOCreturn == MC_FOC_DURATION){
 8003212:	f1ba 0f01 	cmp.w	sl, #1
 8003216:	d047      	beq.n	80032a8 <TSK_HighFrequencyTask+0x1a4>
}
 8003218:	2000      	movs	r0, #0
 800321a:	b006      	add	sp, #24
 800321c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch(samples.mode){
 8003220:	7a9a      	ldrb	r2, [r3, #10]
 8003222:	2a01      	cmp	r2, #1
 8003224:	b2d1      	uxtb	r1, r2
 8003226:	d048      	beq.n	80032ba <TSK_HighFrequencyTask+0x1b6>
 8003228:	2902      	cmp	r1, #2
 800322a:	d1ef      	bne.n	800320c <TSK_HighFrequencyTask+0x108>
			if(FOCVars[M1].Iqdref.q){
 800322c:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 8003230:	2a00      	cmp	r2, #0
 8003232:	d0eb      	beq.n	800320c <TSK_HighFrequencyTask+0x108>
				samples.state = SAMP_SAMPLING;
 8003234:	7019      	strb	r1, [r3, #0]
 8003236:	e7e9      	b.n	800320c <TSK_HighFrequencyTask+0x108>
		samples.dec_state++;
 8003238:	789a      	ldrb	r2, [r3, #2]
 800323a:	3201      	adds	r2, #1
 800323c:	b2d2      	uxtb	r2, r2
 800323e:	709a      	strb	r2, [r3, #2]
		if(samples.dec_state == samples.dec){
 8003240:	7899      	ldrb	r1, [r3, #2]
 8003242:	785a      	ldrb	r2, [r3, #1]
 8003244:	4291      	cmp	r1, r2
 8003246:	d1e4      	bne.n	8003212 <TSK_HighFrequencyTask+0x10e>
			samples.dec_state = 0;
 8003248:	2200      	movs	r2, #0
 800324a:	709a      	strb	r2, [r3, #2]
			samples.m_curr0_samples[samples.index] = FOCVars[M1].Iab.a;
 800324c:	889a      	ldrh	r2, [r3, #4]
 800324e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8003252:	b292      	uxth	r2, r2
 8003254:	3204      	adds	r2, #4
 8003256:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800325a:	8091      	strh	r1, [r2, #4]
			samples.m_curr1_samples[samples.index] = FOCVars[M1].Iab.b;
 800325c:	889a      	ldrh	r2, [r3, #4]
 800325e:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8003262:	b292      	uxth	r2, r2
			samples.m_phase_samples[samples.index] = HALL_M1.MeasuredElAngle / 256;
 8003264:	4916      	ldr	r1, [pc, #88]	; (80032c0 <TSK_HighFrequencyTask+0x1bc>)
			samples.m_curr1_samples[samples.index] = FOCVars[M1].Iab.b;
 8003266:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
 800326a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800326e:	8090      	strh	r0, [r2, #4]
			samples.m_phase_samples[samples.index] = HALL_M1.MeasuredElAngle / 256;
 8003270:	f9b1 10b2 	ldrsh.w	r1, [r1, #178]	; 0xb2
 8003274:	889a      	ldrh	r2, [r3, #4]
 8003276:	2900      	cmp	r1, #0
 8003278:	bfb8      	it	lt
 800327a:	31ff      	addlt	r1, #255	; 0xff
 800327c:	b292      	uxth	r2, r2
 800327e:	f341 2107 	sbfx	r1, r1, #8, #8
 8003282:	441a      	add	r2, r3
 8003284:	f882 17dc 	strb.w	r1, [r2, #2012]	; 0x7dc
			samples.index++;
 8003288:	889a      	ldrh	r2, [r3, #4]
 800328a:	3201      	adds	r2, #1
 800328c:	b292      	uxth	r2, r2
 800328e:	809a      	strh	r2, [r3, #4]
			if(samples.index == samples.n_samp){
 8003290:	8899      	ldrh	r1, [r3, #4]
 8003292:	88da      	ldrh	r2, [r3, #6]
 8003294:	b289      	uxth	r1, r1
 8003296:	b292      	uxth	r2, r2
 8003298:	4291      	cmp	r1, r2
 800329a:	d1ba      	bne.n	8003212 <TSK_HighFrequencyTask+0x10e>
				samples.dec_state = 0;
 800329c:	2200      	movs	r2, #0
				samples.state = SAMP_FINISHED;
 800329e:	2103      	movs	r1, #3
				samples.dec_state = 0;
 80032a0:	709a      	strb	r2, [r3, #2]
				samples.index = 0;
 80032a2:	809a      	strh	r2, [r3, #4]
				samples.state = SAMP_FINISHED;
 80032a4:	7019      	strb	r1, [r3, #0]
 80032a6:	e7b4      	b.n	8003212 <TSK_HighFrequencyTask+0x10e>
		STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 80032a8:	4651      	mov	r1, sl
 80032aa:	2200      	movs	r2, #0
 80032ac:	480c      	ldr	r0, [pc, #48]	; (80032e0 <TSK_HighFrequencyTask+0x1dc>)
 80032ae:	f7ff fa75 	bl	800279c <STM_FaultProcessing>
}
 80032b2:	2000      	movs	r0, #0
 80032b4:	b006      	add	sp, #24
 80032b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			samples.state = SAMP_SAMPLING;
 80032ba:	2202      	movs	r2, #2
 80032bc:	701a      	strb	r2, [r3, #0]
			break;
 80032be:	e7a5      	b.n	800320c <TSK_HighFrequencyTask+0x108>
 80032c0:	200000b4 	.word	0x200000b4
 80032c4:	200033a8 	.word	0x200033a8
 80032c8:	200032c0 	.word	0x200032c0
 80032cc:	200032d4 	.word	0x200032d4
 80032d0:	200032c8 	.word	0x200032c8
 80032d4:	200033a4 	.word	0x200033a4
 80032d8:	20003370 	.word	0x20003370
 80032dc:	200033f0 	.word	0x200033f0
 80032e0:	20003394 	.word	0x20003394
 80032e4:	00000000 	.word	0x00000000

080032e8 <TSK_SafetyTask_PWMOFF>:
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80032e8:	4b3b      	ldr	r3, [pc, #236]	; (80033d8 <TSK_SafetyTask_PWMOFF+0xf0>)
{
 80032ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032ee:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80032f0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80032f4:	f7fe fb50 	bl	8001998 <NTC_CalcAvTemp>
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80032f8:	4f38      	ldr	r7, [pc, #224]	; (80033dc <TSK_SafetyTask_PWMOFF+0xf4>)
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80032fa:	4606      	mov	r6, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80032fc:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8003300:	f7fe fda4 	bl	8001e4c <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8003304:	f006 060e 	and.w	r6, r6, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8003308:	4306      	orrs	r6, r0
 800330a:	b2b5      	uxth	r5, r6
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 800330c:	b33c      	cbz	r4, 800335e <TSK_SafetyTask_PWMOFF+0x76>
			  last_pwm_state=true;
		  }
	  }
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 800330e:	43ea      	mvns	r2, r5
 8003310:	4e33      	ldr	r6, [pc, #204]	; (80033e0 <TSK_SafetyTask_PWMOFF+0xf8>)
 8003312:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8003316:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 800331a:	4629      	mov	r1, r5
 800331c:	b292      	uxth	r2, r2
 800331e:	4630      	mov	r0, r6
 8003320:	f7ff fa3c 	bl	800279c <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8003324:	4630      	mov	r0, r6
 8003326:	f7ff fac9 	bl	80028bc <STM_GetState>
 800332a:	280a      	cmp	r0, #10
 800332c:	d003      	beq.n	8003336 <TSK_SafetyTask_PWMOFF+0x4e>
 800332e:	280b      	cmp	r0, #11
 8003330:	d00f      	beq.n	8003352 <TSK_SafetyTask_PWMOFF+0x6a>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8003332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003336:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 800333a:	f7fe fd5b 	bl	8001df4 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 800333e:	4620      	mov	r0, r4
 8003340:	f7ff fc90 	bl	8002c64 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 8003344:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <TSK_SafetyTask_PWMOFF+0xfc>)
 8003346:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800334a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800334e:	f7fe bacf 	b.w	80018f0 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003352:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
}
 8003356:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800335a:	f7fe bd4b 	b.w	8001df4 <PWMC_SwitchOffPWM>
	  uint16_t voltage_fault = RVBS_CalcAvVbus(pBusSensorM1);
 800335e:	4e22      	ldr	r6, [pc, #136]	; (80033e8 <TSK_SafetyTask_PWMOFF+0x100>)
 8003360:	6830      	ldr	r0, [r6, #0]
 8003362:	f7ff f8d5 	bl	8002510 <RVBS_CalcAvVbus>
	  if(voltage_fault==MC_UNDER_VOLT){
 8003366:	2804      	cmp	r0, #4
 8003368:	d026      	beq.n	80033b8 <TSK_SafetyTask_PWMOFF+0xd0>
	  }else if (voltage_fault==MC_OVER_VOLT){
 800336a:	2802      	cmp	r0, #2
 800336c:	d027      	beq.n	80033be <TSK_SafetyTask_PWMOFF+0xd6>
	  }else if (last_pwm_state==false){
 800336e:	f8df a084 	ldr.w	sl, [pc, #132]	; 80033f4 <TSK_SafetyTask_PWMOFF+0x10c>
 8003372:	f89a 3000 	ldrb.w	r3, [sl]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1c9      	bne.n	800330e <TSK_SafetyTask_PWMOFF+0x26>
		  if(MCT[M1].pBusVoltageSensor->LatestConv < (pBusSensorM1->OverVoltageThreshold-(1*(65535/ADC_REFERENCE_VOLTAGE*VBUS_PARTITIONING_FACTOR)))){
 800337a:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <TSK_SafetyTask_PWMOFF+0x104>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	8898      	ldrh	r0, [r3, #4]
 8003380:	f7fd f842 	bl	8000408 <__aeabi_i2d>
 8003384:	6833      	ldr	r3, [r6, #0]
 8003386:	4680      	mov	r8, r0
 8003388:	8b58      	ldrh	r0, [r3, #26]
 800338a:	4689      	mov	r9, r1
 800338c:	f7fd f83c 	bl	8000408 <__aeabi_i2d>
 8003390:	a30f      	add	r3, pc, #60	; (adr r3, 80033d0 <TSK_SafetyTask_PWMOFF+0xe8>)
 8003392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003396:	f7fc fee9 	bl	800016c <__aeabi_dsub>
 800339a:	4602      	mov	r2, r0
 800339c:	460b      	mov	r3, r1
 800339e:	4640      	mov	r0, r8
 80033a0:	4649      	mov	r1, r9
 80033a2:	f7fd fb0d 	bl	80009c0 <__aeabi_dcmplt>
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d0b1      	beq.n	800330e <TSK_SafetyTask_PWMOFF+0x26>
			  MCI_StartMotor( &Mci[M1] );
 80033aa:	4811      	ldr	r0, [pc, #68]	; (80033f0 <TSK_SafetyTask_PWMOFF+0x108>)
 80033ac:	f7ff fad8 	bl	8002960 <MCI_StartMotor>
			  last_pwm_state=true;
 80033b0:	2301      	movs	r3, #1
 80033b2:	f88a 3000 	strb.w	r3, [sl]
 80033b6:	e7aa      	b.n	800330e <TSK_SafetyTask_PWMOFF+0x26>
		  CodeReturn |=  errMask[bMotor] & voltage_fault;
 80033b8:	f045 0504 	orr.w	r5, r5, #4
 80033bc:	e7a7      	b.n	800330e <TSK_SafetyTask_PWMOFF+0x26>
		  MCI_StopMotor( &Mci[M1] );
 80033be:	480c      	ldr	r0, [pc, #48]	; (80033f0 <TSK_SafetyTask_PWMOFF+0x108>)
 80033c0:	f7ff fad8 	bl	8002974 <MCI_StopMotor>
		  last_pwm_state = false;
 80033c4:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <TSK_SafetyTask_PWMOFF+0x10c>)
 80033c6:	701c      	strb	r4, [r3, #0]
 80033c8:	e7a1      	b.n	800330e <TSK_SafetyTask_PWMOFF+0x26>
 80033ca:	bf00      	nop
 80033cc:	f3af 8000 	nop.w
 80033d0:	6fb586fc 	.word	0x6fb586fc
 80033d4:	409099d8 	.word	0x409099d8
 80033d8:	200032bc 	.word	0x200032bc
 80033dc:	200032c0 	.word	0x200032c0
 80033e0:	20003394 	.word	0x20003394
 80033e4:	200033a0 	.word	0x200033a0
 80033e8:	20003374 	.word	0x20003374
 80033ec:	2000331c 	.word	0x2000331c
 80033f0:	20003378 	.word	0x20003378
 80033f4:	20000488 	.word	0x20000488

080033f8 <TSK_SafetyTask>:
{
 80033f8:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 80033fa:	4b06      	ldr	r3, [pc, #24]	; (8003414 <TSK_SafetyTask+0x1c>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d000      	beq.n	8003404 <TSK_SafetyTask+0xc>
}
 8003402:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8003404:	2000      	movs	r0, #0
 8003406:	f7ff ff6f 	bl	80032e8 <TSK_SafetyTask_PWMOFF>
}
 800340a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 800340e:	f000 b9c7 	b.w	80037a0 <RCM_ExecUserConv>
 8003412:	bf00      	nop
 8003414:	20000528 	.word	0x20000528

08003418 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8003418:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <TSK_HardwareFaultTask+0x18>)
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	f7fe ff2d 	bl	800227c <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8003422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	2180      	movs	r1, #128	; 0x80
 800342a:	4802      	ldr	r0, [pc, #8]	; (8003434 <TSK_HardwareFaultTask+0x1c>)
 800342c:	f7ff b9b6 	b.w	800279c <STM_FaultProcessing>
 8003430:	200032c0 	.word	0x200032c0
 8003434:	20003394 	.word	0x20003394

08003438 <startMediumFrequencyTask>:

/* startMediumFrequencyTask function */
void startMediumFrequencyTask(void const * argument)
{
 8003438:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MF task 1 */
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 800343a:	2001      	movs	r0, #1
 800343c:	f00a fb02 	bl	800da44 <vTaskDelay>
    MC_RunMotorControlTasks();
 8003440:	f7ff fe56 	bl	80030f0 <MC_RunMotorControlTasks>
  for(;;)
 8003444:	e7f9      	b.n	800343a <startMediumFrequencyTask+0x2>
 8003446:	bf00      	nop

08003448 <StartSafetyTask>:

/* startSafetyTask function */
void StartSafetyTask(void const * argument)
{
  /* USER CODE BEGIN SF task 1 */
	vTaskDelay(200);
 8003448:	20c8      	movs	r0, #200	; 0xc8
{
 800344a:	b508      	push	{r3, lr}
	vTaskDelay(200);
 800344c:	f00a fafa 	bl	800da44 <vTaskDelay>
  /* Infinite loop */
  for(;;)
  {
    /* delay of 500us */
    vTaskDelay(1);
 8003450:	2001      	movs	r0, #1
 8003452:	f00a faf7 	bl	800da44 <vTaskDelay>
    TSK_SafetyTask();
 8003456:	f7ff ffcf 	bl	80033f8 <TSK_SafetyTask>
  for(;;)
 800345a:	e7f9      	b.n	8003450 <StartSafetyTask+0x8>

0800345c <mc_lock_pins>:
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800345c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003460:	2000      	movs	r0, #0

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8003462:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003466:	f04f 1401 	mov.w	r4, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800346a:	f04f 0801 	mov.w	r8, #1
 800346e:	f04f 0e02 	mov.w	lr, #2
 8003472:	f04f 0c40 	mov.w	ip, #64	; 0x40
 8003476:	2704      	movs	r7, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003478:	4a33      	ldr	r2, [pc, #204]	; (8003548 <mc_lock_pins+0xec>)
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800347a:	2680      	movs	r6, #128	; 0x80
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800347c:	6191      	str	r1, [r2, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800347e:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003480:	6191      	str	r1, [r2, #24]
  temp = READ_REG(GPIOx->LCKR);
 8003482:	6993      	ldr	r3, [r2, #24]
 8003484:	b08f      	sub	sp, #60	; 0x3c
 8003486:	930d      	str	r3, [sp, #52]	; 0x34
  (void) temp;
 8003488:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800348a:	2520      	movs	r5, #32
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800348c:	6191      	str	r1, [r2, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800348e:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003490:	6191      	str	r1, [r2, #24]
  temp = READ_REG(GPIOx->LCKR);
 8003492:	6993      	ldr	r3, [r2, #24]
 8003494:	930c      	str	r3, [sp, #48]	; 0x30
  (void) temp;
 8003496:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003498:	6191      	str	r1, [r2, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800349a:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800349c:	6191      	str	r1, [r2, #24]
  temp = READ_REG(GPIOx->LCKR);
 800349e:	6993      	ldr	r3, [r2, #24]
 80034a0:	930b      	str	r3, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034a2:	4b2a      	ldr	r3, [pc, #168]	; (800354c <mc_lock_pins+0xf0>)
  (void) temp;
 80034a4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034a8:	619c      	str	r4, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034aa:	f8c3 8018 	str.w	r8, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034ae:	619c      	str	r4, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 80034b0:	699c      	ldr	r4, [r3, #24]
 80034b2:	940a      	str	r4, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034b4:	4c26      	ldr	r4, [pc, #152]	; (8003550 <mc_lock_pins+0xf4>)
  (void) temp;
 80034b6:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034ba:	619c      	str	r4, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034bc:	f8c3 e018 	str.w	lr, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034c0:	619c      	str	r4, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 80034c2:	699c      	ldr	r4, [r3, #24]
 80034c4:	9409      	str	r4, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034c6:	4c23      	ldr	r4, [pc, #140]	; (8003554 <mc_lock_pins+0xf8>)
  (void) temp;
 80034c8:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034cc:	6194      	str	r4, [r2, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034ce:	f8c2 c018 	str.w	ip, [r2, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034d2:	6194      	str	r4, [r2, #24]
  temp = READ_REG(GPIOx->LCKR);
 80034d4:	6994      	ldr	r4, [r2, #24]
 80034d6:	9408      	str	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034d8:	4c1f      	ldr	r4, [pc, #124]	; (8003558 <mc_lock_pins+0xfc>)
  (void) temp;
 80034da:	f8dd c020 	ldr.w	ip, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034de:	619c      	str	r4, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034e0:	619f      	str	r7, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034e2:	619c      	str	r4, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 80034e4:	699f      	ldr	r7, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034e6:	347c      	adds	r4, #124	; 0x7c
  temp = READ_REG(GPIOx->LCKR);
 80034e8:	9707      	str	r7, [sp, #28]
  (void) temp;
 80034ea:	9f07      	ldr	r7, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034ec:	6194      	str	r4, [r2, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034ee:	6196      	str	r6, [r2, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034f0:	6194      	str	r4, [r2, #24]
  temp = READ_REG(GPIOx->LCKR);
 80034f2:	6996      	ldr	r6, [r2, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034f4:	3c60      	subs	r4, #96	; 0x60
  temp = READ_REG(GPIOx->LCKR);
 80034f6:	9606      	str	r6, [sp, #24]
  (void) temp;
 80034f8:	9e06      	ldr	r6, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034fa:	6194      	str	r4, [r2, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034fc:	6195      	str	r5, [r2, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 80034fe:	6194      	str	r4, [r2, #24]
  temp = READ_REG(GPIOx->LCKR);
 8003500:	6992      	ldr	r2, [r2, #24]
 8003502:	9205      	str	r2, [sp, #20]
  (void) temp;
 8003504:	9a05      	ldr	r2, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003506:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003508:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800350a:	6199      	str	r1, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 800350c:	699a      	ldr	r2, [r3, #24]
 800350e:	9204      	str	r2, [sp, #16]
  (void) temp;
 8003510:	9a04      	ldr	r2, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003512:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003514:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003516:	6199      	str	r1, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 8003518:	699a      	ldr	r2, [r3, #24]
 800351a:	9203      	str	r2, [sp, #12]
  (void) temp;
 800351c:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800351e:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003520:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003522:	6199      	str	r1, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	9202      	str	r2, [sp, #8]
  (void) temp;
 8003528:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800352a:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800352c:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800352e:	6199      	str	r1, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	9201      	str	r2, [sp, #4]
  (void) temp;
 8003534:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003536:	6199      	str	r1, [r3, #24]
  WRITE_REG(GPIOx->LCKR, ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 8003538:	6198      	str	r0, [r3, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | ((PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU));
 800353a:	6199      	str	r1, [r3, #24]
  temp = READ_REG(GPIOx->LCKR);
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	9300      	str	r3, [sp, #0]
  (void) temp;
 8003540:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
}
 8003542:	b00f      	add	sp, #60	; 0x3c
 8003544:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003548:	40010c00 	.word	0x40010c00
 800354c:	40010800 	.word	0x40010800
 8003550:	00010002 	.word	0x00010002
 8003554:	00010040 	.word	0x00010040
 8003558:	00010004 	.word	0x00010004

0800355c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 800355c:	b508      	push	{r3, lr}
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 800355e:	4904      	ldr	r1, [pc, #16]	; (8003570 <MX_MotorControl_Init+0x14>)
 8003560:	4804      	ldr	r0, [pc, #16]	; (8003574 <MX_MotorControl_Init+0x18>)
 8003562:	f7ff fbb9 	bl	8002cd8 <MCboot>
  mc_lock_pins();

}
 8003566:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 800356a:	f7ff bf77 	b.w	800345c <mc_lock_pins>
 800356e:	bf00      	nop
 8003570:	200033b0 	.word	0x200033b0
 8003574:	200033ac 	.word	0x200033ac

08003578 <vPortSetupTimerInterrupt>:

void vPortSetupTimerInterrupt( void )
{
 8003578:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 800357a:	f007 fcf1 	bl	800af60 <HAL_RCC_GetHCLKFreq>
 800357e:	4b04      	ldr	r3, [pc, #16]	; (8003590 <vPortSetupTimerInterrupt+0x18>)
 8003580:	fba3 3000 	umull	r3, r0, r3, r0
}
 8003584:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8003588:	09c0      	lsrs	r0, r0, #7
 800358a:	f006 be05 	b.w	800a198 <HAL_SYSTICK_Config>
 800358e:	bf00      	nop
 8003590:	10624dd3 	.word	0x10624dd3

08003594 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003594:	4966      	ldr	r1, [pc, #408]	; (8003730 <RCM_RegisterRegConv+0x19c>)
{
 8003596:	4602      	mov	r2, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003598:	6808      	ldr	r0, [r1, #0]
{
 800359a:	b4f0      	push	{r4, r5, r6, r7}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800359c:	2800      	cmp	r0, #0
 800359e:	d02d      	beq.n	80035fc <RCM_RegisterRegConv+0x68>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80035a0:	7914      	ldrb	r4, [r2, #4]
 80035a2:	7903      	ldrb	r3, [r0, #4]
 80035a4:	429c      	cmp	r4, r3
 80035a6:	d01d      	beq.n	80035e4 <RCM_RegisterRegConv+0x50>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80035a8:	684d      	ldr	r5, [r1, #4]
 80035aa:	2d00      	cmp	r5, #0
 80035ac:	f000 80b0 	beq.w	8003710 <RCM_RegisterRegConv+0x17c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80035b0:	792b      	ldrb	r3, [r5, #4]
  uint8_t handle=255;
 80035b2:	20ff      	movs	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80035b4:	42a3      	cmp	r3, r4
 80035b6:	d029      	beq.n	800360c <RCM_RegisterRegConv+0x78>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80035b8:	688e      	ldr	r6, [r1, #8]
 80035ba:	2e00      	cmp	r6, #0
 80035bc:	f000 8092 	beq.w	80036e4 <RCM_RegisterRegConv+0x150>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80035c0:	7933      	ldrb	r3, [r6, #4]
 80035c2:	42a3      	cmp	r3, r4
 80035c4:	d028      	beq.n	8003618 <RCM_RegisterRegConv+0x84>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80035c6:	68cd      	ldr	r5, [r1, #12]
 80035c8:	2d00      	cmp	r5, #0
 80035ca:	f000 809c 	beq.w	8003706 <RCM_RegisterRegConv+0x172>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80035ce:	792b      	ldrb	r3, [r5, #4]
 80035d0:	42a3      	cmp	r3, r4
 80035d2:	f000 80ab 	beq.w	800372c <RCM_RegisterRegConv+0x198>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 80035d6:	2803      	cmp	r0, #3
 80035d8:	bf88      	it	hi
 80035da:	20ff      	movhi	r0, #255	; 0xff
 80035dc:	f240 8096 	bls.w	800370c <RCM_RegisterRegConv+0x178>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 80035e0:	bcf0      	pop	{r4, r5, r6, r7}
 80035e2:	4770      	bx	lr
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80035e4:	6800      	ldr	r0, [r0, #0]
 80035e6:	6813      	ldr	r3, [r2, #0]
 80035e8:	4283      	cmp	r3, r0
 80035ea:	d01b      	beq.n	8003624 <RCM_RegisterRegConv+0x90>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80035ec:	684d      	ldr	r5, [r1, #4]
 80035ee:	2d00      	cmp	r5, #0
 80035f0:	d1de      	bne.n	80035b0 <RCM_RegisterRegConv+0x1c>
 80035f2:	688e      	ldr	r6, [r1, #8]
      i++;
 80035f4:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80035f6:	2e00      	cmp	r6, #0
 80035f8:	d1e2      	bne.n	80035c0 <RCM_RegisterRegConv+0x2c>
 80035fa:	e077      	b.n	80036ec <RCM_RegisterRegConv+0x158>
 80035fc:	684d      	ldr	r5, [r1, #4]
 80035fe:	2d00      	cmp	r5, #0
 8003600:	f000 808c 	beq.w	800371c <RCM_RegisterRegConv+0x188>
 8003604:	7914      	ldrb	r4, [r2, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8003606:	792b      	ldrb	r3, [r5, #4]
 8003608:	42a3      	cmp	r3, r4
 800360a:	d1d5      	bne.n	80035b8 <RCM_RegisterRegConv+0x24>
 800360c:	682d      	ldr	r5, [r5, #0]
 800360e:	6813      	ldr	r3, [r2, #0]
 8003610:	429d      	cmp	r5, r3
 8003612:	d1d1      	bne.n	80035b8 <RCM_RegisterRegConv+0x24>
 8003614:	2001      	movs	r0, #1
 8003616:	e006      	b.n	8003626 <RCM_RegisterRegConv+0x92>
 8003618:	6835      	ldr	r5, [r6, #0]
 800361a:	6813      	ldr	r3, [r2, #0]
 800361c:	429d      	cmp	r5, r3
 800361e:	d1d2      	bne.n	80035c6 <RCM_RegisterRegConv+0x32>
      i++;
 8003620:	2002      	movs	r0, #2
 8003622:	e000      	b.n	8003626 <RCM_RegisterRegConv+0x92>
  uint8_t i=0;
 8003624:	2000      	movs	r0, #0
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003626:	2500      	movs	r5, #0
 8003628:	4c42      	ldr	r4, [pc, #264]	; (8003734 <RCM_RegisterRegConv+0x1a0>)
      RCM_handle_array [handle] = regConv;
 800362a:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 800362e:	6899      	ldr	r1, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003630:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8003634:	07cc      	lsls	r4, r1, #31
 8003636:	d418      	bmi.n	800366a <RCM_RegisterRegConv+0xd6>
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 8003638:	f06f 0502 	mvn.w	r5, #2
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800363c:	f06f 0404 	mvn.w	r4, #4
{
  /* Note: on this STM32 serie, there is no flag ADC group regular           */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "EOC" is corresponding to flag "EOS"                 */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, ADC_CR1_EOCIE);
 8003640:	6859      	ldr	r1, [r3, #4]
 8003642:	f021 0120 	bic.w	r1, r1, #32
 8003646:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOS);
 8003648:	601d      	str	r5, [r3, #0]
{
  /* Note: on this STM32 serie, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003650:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003652:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8003654:	6899      	ldr	r1, [r3, #8]
 8003656:	f041 0101 	orr.w	r1, r1, #1
 800365a:	6099      	str	r1, [r3, #8]
  SET_BIT(ADCx->CR2, ADC_CR2_CAL);
 800365c:	6899      	ldr	r1, [r3, #8]
 800365e:	f041 0104 	orr.w	r1, r1, #4
 8003662:	6099      	str	r1, [r3, #8]
  return (READ_BIT(ADCx->CR2, ADC_CR2_CAL) == (ADC_CR2_CAL));
 8003664:	6899      	ldr	r1, [r3, #8]
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )
 8003666:	0749      	lsls	r1, r1, #29
 8003668:	d4fc      	bmi.n	8003664 <RCM_RegisterRegConv+0xd0>
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800366a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800366c:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8003670:	62d9      	str	r1, [r3, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8003672:	7911      	ldrb	r1, [r2, #4]
 8003674:	2909      	cmp	r1, #9
 8003676:	d82d      	bhi.n	80036d4 <RCM_RegisterRegConv+0x140>
 8003678:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800367c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 8003680:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 8003684:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800368c:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003690:	fab4 f484 	clz	r4, r4
 8003694:	330c      	adds	r3, #12
 8003696:	40e7      	lsrs	r7, r4
  MODIFY_REG(*preg,
 8003698:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 800369c:	f04f 74f8 	mov.w	r4, #32505856	; 0x1f00000
 80036a0:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 80036a4:	fa94 f6a4 	rbit	r6, r4
 80036a8:	fab6 f686 	clz	r6, r6
 80036ac:	fa94 f4a4 	rbit	r4, r4
 80036b0:	fab4 f484 	clz	r4, r4
 80036b4:	f04f 0c07 	mov.w	ip, #7
 80036b8:	6892      	ldr	r2, [r2, #8]
 80036ba:	fa21 f606 	lsr.w	r6, r1, r6
 80036be:	fa0c f606 	lsl.w	r6, ip, r6
 80036c2:	40e1      	lsrs	r1, r4
 80036c4:	408a      	lsls	r2, r1
 80036c6:	ea25 0106 	bic.w	r1, r5, r6
 80036ca:	4311      	orrs	r1, r2
 80036cc:	f843 1027 	str.w	r1, [r3, r7, lsl #2]
}
 80036d0:	bcf0      	pop	{r4, r5, r6, r7}
 80036d2:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80036d4:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80036d8:	3c1e      	subs	r4, #30
 80036da:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 80036de:	f001 7700 	and.w	r7, r1, #33554432	; 0x2000000
 80036e2:	e7d1      	b.n	8003688 <RCM_RegisterRegConv+0xf4>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80036e4:	2804      	cmp	r0, #4
 80036e6:	d91e      	bls.n	8003726 <RCM_RegisterRegConv+0x192>
      i++;
 80036e8:	2002      	movs	r0, #2
 80036ea:	6813      	ldr	r3, [r2, #0]
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80036ec:	68cd      	ldr	r5, [r1, #12]
 80036ee:	2d00      	cmp	r5, #0
 80036f0:	d099      	beq.n	8003626 <RCM_RegisterRegConv+0x92>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80036f2:	792e      	ldrb	r6, [r5, #4]
 80036f4:	7914      	ldrb	r4, [r2, #4]
 80036f6:	42a6      	cmp	r6, r4
 80036f8:	d195      	bne.n	8003626 <RCM_RegisterRegConv+0x92>
 80036fa:	682c      	ldr	r4, [r5, #0]
 80036fc:	429c      	cmp	r4, r3
 80036fe:	f47f af6a 	bne.w	80035d6 <RCM_RegisterRegConv+0x42>
      i++;
 8003702:	2003      	movs	r0, #3
    if (handle < RCM_MAX_CONV )
 8003704:	e78f      	b.n	8003626 <RCM_RegisterRegConv+0x92>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003706:	2804      	cmp	r0, #4
 8003708:	d900      	bls.n	800370c <RCM_RegisterRegConv+0x178>
      i++;
 800370a:	2003      	movs	r0, #3
 800370c:	6813      	ldr	r3, [r2, #0]
 800370e:	e78a      	b.n	8003626 <RCM_RegisterRegConv+0x92>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003710:	688e      	ldr	r6, [r1, #8]
      i++;
 8003712:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8003714:	2e00      	cmp	r6, #0
 8003716:	f47f af53 	bne.w	80035c0 <RCM_RegisterRegConv+0x2c>
 800371a:	e7e6      	b.n	80036ea <RCM_RegisterRegConv+0x156>
 800371c:	688e      	ldr	r6, [r1, #8]
 800371e:	b116      	cbz	r6, 8003726 <RCM_RegisterRegConv+0x192>
  uint8_t i=0;
 8003720:	4628      	mov	r0, r5
 8003722:	7914      	ldrb	r4, [r2, #4]
 8003724:	e74c      	b.n	80035c0 <RCM_RegisterRegConv+0x2c>
 8003726:	4630      	mov	r0, r6
 8003728:	6813      	ldr	r3, [r2, #0]
 800372a:	e7df      	b.n	80036ec <RCM_RegisterRegConv+0x158>
 800372c:	6813      	ldr	r3, [r2, #0]
 800372e:	e7e4      	b.n	80036fa <RCM_RegisterRegConv+0x166>
 8003730:	200033dc 	.word	0x200033dc
 8003734:	200033b8 	.word	0x200033b8

08003738 <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 8003738:	b410      	push	{r4}
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800373a:	4b18      	ldr	r3, [pc, #96]	; (800379c <RCM_ExecRegularConv+0x64>)
 800373c:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003740:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003742:	6812      	ldr	r2, [r2, #0]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003744:	eb03 0143 	add.w	r1, r3, r3, lsl #1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003748:	2b09      	cmp	r3, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800374a:	bf93      	iteet	ls
 800374c:	ea43 5301 	orrls.w	r3, r3, r1, lsl #20
 8003750:	391e      	subhi	r1, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003752:	ea43 5301 	orrhi.w	r3, r3, r1, lsl #20
 8003756:	f043 7300 	orrls.w	r3, r3, #33554432	; 0x2000000
 800375a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800375e:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003762:	f44f 7400 	mov.w	r4, #512	; 0x200
 8003766:	fab1 f181 	clz	r1, r1
 800376a:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 800376e:	40cc      	lsrs	r4, r1
  MODIFY_REG(*preg,
 8003770:	f850 1024 	ldr.w	r1, [r0, r4, lsl #2]
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	f021 011f 	bic.w	r1, r1, #31
 800377c:	430b      	orrs	r3, r1
 800377e:	f840 3024 	str.w	r3, [r0, r4, lsl #2]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003782:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003784:	6893      	ldr	r3, [r2, #8]
 8003786:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800378a:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 800378c:	6813      	ldr	r3, [r2, #0]

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );

    LL_ADC_REG_StartConversionSWStart(RCM_handle_array[handle]->regADC);
  while ( LL_ADC_IsActiveFlag_EOS (RCM_handle_array[handle]->regADC ) == 0u) {}
 800378e:	079b      	lsls	r3, r3, #30
 8003790:	d5fc      	bpl.n	800378c <RCM_ExecRegularConv+0x54>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003792:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
return retVal;
}
 8003794:	bc10      	pop	{r4}
 8003796:	b280      	uxth	r0, r0
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	200033dc 	.word	0x200033dc

080037a0 <RCM_ExecUserConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 80037a0:	4b23      	ldr	r3, [pc, #140]	; (8003830 <RCM_ExecUserConv+0x90>)
 80037a2:	781a      	ldrb	r2, [r3, #0]
 80037a4:	2a01      	cmp	r2, #1
 80037a6:	d000      	beq.n	80037aa <RCM_ExecUserConv+0xa>
 80037a8:	4770      	bx	lr
{
 80037aa:	b470      	push	{r4, r5, r6}
  {
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80037ac:	4921      	ldr	r1, [pc, #132]	; (8003834 <RCM_ExecUserConv+0x94>)
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80037ae:	4a22      	ldr	r2, [pc, #136]	; (8003838 <RCM_ExecUserConv+0x98>)
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80037b0:	7808      	ldrb	r0, [r1, #0]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80037b2:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80037b6:	7911      	ldrb	r1, [r2, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80037b8:	6812      	ldr	r2, [r2, #0]
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80037ba:	eb01 0441 	add.w	r4, r1, r1, lsl #1
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80037be:	2909      	cmp	r1, #9
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80037c0:	bf93      	iteet	ls
 80037c2:	ea41 5104 	orrls.w	r1, r1, r4, lsl #20
 80037c6:	3c1e      	subhi	r4, #30
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80037c8:	ea41 5104 	orrhi.w	r1, r1, r4, lsl #20
 80037cc:	f041 7100 	orrls.w	r1, r1, #33554432	; 0x2000000
 80037d0:	f44f 7440 	mov.w	r4, #768	; 0x300
 80037d4:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 80037d8:	f44f 7600 	mov.w	r6, #512	; 0x200
 80037dc:	fab4 f484 	clz	r4, r4
 80037e0:	f102 052c 	add.w	r5, r2, #44	; 0x2c
 80037e4:	40e6      	lsrs	r6, r4
  MODIFY_REG(*preg,
 80037e6:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 80037ea:	f001 011f 	and.w	r1, r1, #31
 80037ee:	f024 041f 	bic.w	r4, r4, #31
 80037f2:	4321      	orrs	r1, r4
 80037f4:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 80037f8:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
  SET_BIT(ADCx->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80037fa:	6891      	ldr	r1, [r2, #8]
 80037fc:	f441 01a0 	orr.w	r1, r1, #5242880	; 0x500000
 8003800:	6091      	str	r1, [r2, #8]
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS));
 8003802:	6811      	ldr	r1, [r2, #0]
  while ( LL_ADC_IsActiveFlag_EOS (RCM_handle_array[handle]->regADC ) == 0u) {}
 8003804:	0789      	lsls	r1, r1, #30
 8003806:	d5fc      	bpl.n	8003802 <RCM_ExecUserConv+0x62>
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003808:	2602      	movs	r6, #2
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800380a:	4c0c      	ldr	r4, [pc, #48]	; (800383c <RCM_ExecUserConv+0x9c>)
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800380c:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 800380e:	f854 5030 	ldr.w	r5, [r4, r0, lsl #3]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003812:	4a0b      	ldr	r2, [pc, #44]	; (8003840 <RCM_ExecUserConv+0xa0>)
 8003814:	b289      	uxth	r1, r1
 8003816:	8011      	strh	r1, [r2, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003818:	701e      	strb	r6, [r3, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800381a:	b13d      	cbz	r5, 800382c <RCM_ExecUserConv+0x8c>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800381c:	2600      	movs	r6, #0
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800381e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003822:	701e      	strb	r6, [r3, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003824:	6862      	ldr	r2, [r4, #4]
 8003826:	462b      	mov	r3, r5
    }
  }
}
 8003828:	bc70      	pop	{r4, r5, r6}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800382a:	4718      	bx	r3
}
 800382c:	bc70      	pop	{r4, r5, r6}
 800382e:	4770      	bx	lr
 8003830:	200033d8 	.word	0x200033d8
 8003834:	200033b4 	.word	0x200033b4
 8003838:	200033dc 	.word	0x200033dc
 800383c:	200033b8 	.word	0x200033b8
 8003840:	200033ec 	.word	0x200033ec

08003844 <commands_send_packet>:
 *
 * @param len
 * The data length.
 */
void commands_send_packet(unsigned char *data, unsigned int len) {
	if (send_func) {
 8003844:	4b02      	ldr	r3, [pc, #8]	; (8003850 <commands_send_packet+0xc>)
 8003846:	681a      	ldr	r2, [r3, #0]
 8003848:	b10a      	cbz	r2, 800384e <commands_send_packet+0xa>
		send_func(data, len);
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4718      	bx	r3
	}
}
 800384e:	4770      	bx	lr
 8003850:	20000770 	.word	0x20000770

08003854 <commands_printf>:
void commands_printf(const char* format, ...) {
 8003854:	b40f      	push	{r0, r1, r2, r3}
 8003856:	b510      	push	{r4, lr}
	print_buffer[0] = COMM_PRINT;
 8003858:	4c0e      	ldr	r4, [pc, #56]	; (8003894 <commands_printf+0x40>)
 800385a:	2115      	movs	r1, #21
 800385c:	4620      	mov	r0, r4
void commands_printf(const char* format, ...) {
 800385e:	b082      	sub	sp, #8
 8003860:	ab04      	add	r3, sp, #16
 8003862:	f853 2b04 	ldr.w	r2, [r3], #4
	print_buffer[0] = COMM_PRINT;
 8003866:	f800 1b01 	strb.w	r1, [r0], #1
	len = vsnprintf(print_buffer + 1, PRINTF_STACK_SIZE - 1, format, arg);
 800386a:	2131      	movs	r1, #49	; 0x31
	va_start (arg, format);
 800386c:	9301      	str	r3, [sp, #4]
	len = vsnprintf(print_buffer + 1, PRINTF_STACK_SIZE - 1, format, arg);
 800386e:	f005 fd3b 	bl	80092e8 <vsnprintf_>
	if(len > 0) {
 8003872:	2800      	cmp	r0, #0
 8003874:	dd09      	ble.n	800388a <commands_printf+0x36>
	if (send_func) {
 8003876:	4b08      	ldr	r3, [pc, #32]	; (8003898 <commands_printf+0x44>)
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	b132      	cbz	r2, 800388a <commands_printf+0x36>
				(len < 254) ? len + 1 : 255);
 800387c:	28fe      	cmp	r0, #254	; 0xfe
 800387e:	bfa8      	it	ge
 8003880:	20fe      	movge	r0, #254	; 0xfe
		send_func(data, len);
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	1c41      	adds	r1, r0, #1
 8003886:	4620      	mov	r0, r4
 8003888:	4798      	blx	r3
}
 800388a:	b002      	add	sp, #8
 800388c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003890:	b004      	add	sp, #16
 8003892:	4770      	bx	lr
 8003894:	2000053c 	.word	0x2000053c
 8003898:	20000770 	.word	0x20000770
 800389c:	00000000 	.word	0x00000000

080038a0 <send_sample>:
samples.data[2][samples.index] = PWM_Handle_M1._Super.CntPhA;
samples.data[3][samples.index] = PWM_Handle_M1._Super.CntPhB;
samples.data[4][samples.index] = PWM_Handle_M1._Super.CntPhC;
samples.data[5][samples.index] = HALL_M1.MeasuredElAngle;
*/
void send_sample(){
 80038a0:	b570      	push	{r4, r5, r6, lr}
	if(samples.state == SAMP_FINISHED){
 80038a2:	4c47      	ldr	r4, [pc, #284]	; (80039c0 <send_sample+0x120>)
void send_sample(){
 80038a4:	b08c      	sub	sp, #48	; 0x30
	if(samples.state == SAMP_FINISHED){
 80038a6:	7823      	ldrb	r3, [r4, #0]
 80038a8:	2b03      	cmp	r3, #3
 80038aa:	d001      	beq.n	80038b0 <send_sample+0x10>
		}

		if(samples.vesc_tool_samples == 1000) commands_send_packet(buffer, index);
		commands_send_packet(buffer, index);
	}
}
 80038ac:	b00c      	add	sp, #48	; 0x30
 80038ae:	bd70      	pop	{r4, r5, r6, pc}
		buffer[index++] = COMM_SAMPLE_PRINT;
 80038b0:	2213      	movs	r2, #19
 80038b2:	2501      	movs	r5, #1
		buffer_append_float32_auto(buffer, (float)samples.m_curr0_samples[samples.index] / CURRENT_FACTOR, &index);
 80038b4:	88a3      	ldrh	r3, [r4, #4]
		buffer[index++] = COMM_SAMPLE_PRINT;
 80038b6:	f88d 2008 	strb.w	r2, [sp, #8]
		buffer_append_float32_auto(buffer, (float)samples.m_curr0_samples[samples.index] / CURRENT_FACTOR, &index);
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3304      	adds	r3, #4
 80038be:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80038c2:	8898      	ldrh	r0, [r3, #4]
		buffer[index++] = COMM_SAMPLE_PRINT;
 80038c4:	9501      	str	r5, [sp, #4]
		buffer_append_float32_auto(buffer, (float)samples.m_curr0_samples[samples.index] / CURRENT_FACTOR, &index);
 80038c6:	b200      	sxth	r0, r0
 80038c8:	f7fd f9f4 	bl	8000cb4 <__aeabi_i2f>
 80038cc:	f7fc fdae 	bl	800042c <__aeabi_f2d>
 80038d0:	a339      	add	r3, pc, #228	; (adr r3, 80039b8 <send_sample+0x118>)
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	f7fc fe01 	bl	80004dc <__aeabi_dmul>
 80038da:	f7fd f8e1 	bl	8000aa0 <__aeabi_d2f>
 80038de:	aa01      	add	r2, sp, #4
 80038e0:	4601      	mov	r1, r0
 80038e2:	a802      	add	r0, sp, #8
 80038e4:	f001 ff8a 	bl	80057fc <buffer_append_float32_auto>
		buffer_append_float32_auto(buffer, (float)samples.m_curr1_samples[samples.index] / CURRENT_FACTOR, &index);
 80038e8:	88a3      	ldrh	r3, [r4, #4]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038f0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80038f4:	8898      	ldrh	r0, [r3, #4]
 80038f6:	b200      	sxth	r0, r0
 80038f8:	f7fd f9dc 	bl	8000cb4 <__aeabi_i2f>
 80038fc:	f7fc fd96 	bl	800042c <__aeabi_f2d>
 8003900:	a32d      	add	r3, pc, #180	; (adr r3, 80039b8 <send_sample+0x118>)
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f7fc fde9 	bl	80004dc <__aeabi_dmul>
 800390a:	f7fd f8c9 	bl	8000aa0 <__aeabi_d2f>
 800390e:	aa01      	add	r2, sp, #4
 8003910:	4601      	mov	r1, r0
 8003912:	a802      	add	r0, sp, #8
 8003914:	f001 ff72 	bl	80057fc <buffer_append_float32_auto>
		buffer_append_float32_auto(buffer, 0, &index);
 8003918:	2100      	movs	r1, #0
 800391a:	aa01      	add	r2, sp, #4
 800391c:	a802      	add	r0, sp, #8
 800391e:	f001 ff6d 	bl	80057fc <buffer_append_float32_auto>
		buffer_append_float32_auto(buffer, 0, &index);
 8003922:	2100      	movs	r1, #0
 8003924:	aa01      	add	r2, sp, #4
 8003926:	a802      	add	r0, sp, #8
 8003928:	f001 ff68 	bl	80057fc <buffer_append_float32_auto>
		buffer_append_float32_auto(buffer, 0, &index);
 800392c:	2100      	movs	r1, #0
 800392e:	aa01      	add	r2, sp, #4
 8003930:	a802      	add	r0, sp, #8
 8003932:	f001 ff63 	bl	80057fc <buffer_append_float32_auto>
		buffer_append_float32_auto(buffer, 0, &index);
 8003936:	2100      	movs	r1, #0
 8003938:	aa01      	add	r2, sp, #4
 800393a:	a802      	add	r0, sp, #8
 800393c:	f001 ff5e 	bl	80057fc <buffer_append_float32_auto>
		buffer_append_float32_auto(buffer, 0, &index);
 8003940:	2100      	movs	r1, #0
 8003942:	aa01      	add	r2, sp, #4
 8003944:	a802      	add	r0, sp, #8
 8003946:	f001 ff59 	bl	80057fc <buffer_append_float32_auto>
		buffer_append_float32_auto(buffer, 16000, &index);
 800394a:	491e      	ldr	r1, [pc, #120]	; (80039c4 <send_sample+0x124>)
 800394c:	aa01      	add	r2, sp, #4
 800394e:	a802      	add	r0, sp, #8
 8003950:	f001 ff54 	bl	80057fc <buffer_append_float32_auto>
		buffer[index++] = samples.m_phase_samples[samples.index];
 8003954:	88a3      	ldrh	r3, [r4, #4]
		buffer[index++] = 1;
 8003956:	9901      	ldr	r1, [sp, #4]
		buffer[index++] = samples.m_phase_samples[samples.index];
 8003958:	b29b      	uxth	r3, r3
 800395a:	4423      	add	r3, r4
 800395c:	f893 67dc 	ldrb.w	r6, [r3, #2012]	; 0x7dc
		samples.index++;
 8003960:	88a3      	ldrh	r3, [r4, #4]
		buffer[index++] = 1;
 8003962:	aa0c      	add	r2, sp, #48	; 0x30
		samples.index++;
 8003964:	442b      	add	r3, r5
 8003966:	b29b      	uxth	r3, r3
 8003968:	80a3      	strh	r3, [r4, #4]
		buffer[index++] = 1;
 800396a:	1850      	adds	r0, r2, r1
		if(samples.index == samples.n_samp){
 800396c:	88a2      	ldrh	r2, [r4, #4]
 800396e:	88e3      	ldrh	r3, [r4, #6]
 8003970:	b292      	uxth	r2, r2
 8003972:	b29b      	uxth	r3, r3
		buffer[index++] = samples.m_phase_samples[samples.index];
 8003974:	3102      	adds	r1, #2
		if(samples.index == samples.n_samp){
 8003976:	429a      	cmp	r2, r3
		buffer[index++] = 1;
 8003978:	f800 5c28 	strb.w	r5, [r0, #-40]
		buffer[index++] = samples.m_phase_samples[samples.index];
 800397c:	9101      	str	r1, [sp, #4]
 800397e:	f800 6c27 	strb.w	r6, [r0, #-39]
		if(samples.index == samples.n_samp){
 8003982:	d015      	beq.n	80039b0 <send_sample+0x110>
		if(samples.vesc_tool_samples == 1000) commands_send_packet(buffer, index);
 8003984:	8923      	ldrh	r3, [r4, #8]
	if (send_func) {
 8003986:	4c10      	ldr	r4, [pc, #64]	; (80039c8 <send_sample+0x128>)
		if(samples.vesc_tool_samples == 1000) commands_send_packet(buffer, index);
 8003988:	b29b      	uxth	r3, r3
 800398a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800398e:	d007      	beq.n	80039a0 <send_sample+0x100>
	if (send_func) {
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d08a      	beq.n	80038ac <send_sample+0xc>
		send_func(data, len);
 8003996:	6823      	ldr	r3, [r4, #0]
 8003998:	a802      	add	r0, sp, #8
 800399a:	4798      	blx	r3
}
 800399c:	b00c      	add	sp, #48	; 0x30
 800399e:	bd70      	pop	{r4, r5, r6, pc}
	if (send_func) {
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d0f4      	beq.n	8003990 <send_sample+0xf0>
		send_func(data, len);
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	a802      	add	r0, sp, #8
 80039aa:	4798      	blx	r3
 80039ac:	9901      	ldr	r1, [sp, #4]
 80039ae:	e7ef      	b.n	8003990 <send_sample+0xf0>
			samples.index = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	80a3      	strh	r3, [r4, #4]
			samples.state = SAMP_IDLE;
 80039b4:	7023      	strb	r3, [r4, #0]
 80039b6:	e7e5      	b.n	8003984 <send_sample+0xe4>
 80039b8:	f7441b6d 	.word	0xf7441b6d
 80039bc:	3f69c86b 	.word	0x3f69c86b
 80039c0:	200033f0 	.word	0x200033f0
 80039c4:	467a0000 	.word	0x467a0000
 80039c8:	20000770 	.word	0x20000770
 80039cc:	00000000 	.word	0x00000000

080039d0 <commands_process_packet>:


void commands_process_packet(unsigned char *data, unsigned int len,
		void(*reply_func)(unsigned char *data, unsigned int len)) {

	if (!len) {
 80039d0:	2900      	cmp	r1, #0
 80039d2:	f000 813e 	beq.w	8003c52 <commands_process_packet+0x282>
		void(*reply_func)(unsigned char *data, unsigned int len)) {
 80039d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}

	COMM_PACKET_ID packet_id;

	packet_id = data[0];
 80039da:	4605      	mov	r5, r0
 80039dc:	4614      	mov	r4, r2
	data++;
	len--;


	send_func = reply_func;
 80039de:	f8df 8288 	ldr.w	r8, [pc, #648]	; 8003c68 <commands_process_packet+0x298>

	// Avoid calling invalid function pointer if it is null.
	// commands_send_packet will make the check.
	if (!reply_func) {
		reply_func = commands_send_packet;
 80039e2:	4a9c      	ldr	r2, [pc, #624]	; (8003c54 <commands_process_packet+0x284>)
	packet_id = data[0];
 80039e4:	f815 6b01 	ldrb.w	r6, [r5], #1
	send_func = reply_func;
 80039e8:	f8c8 4000 	str.w	r4, [r8]
 80039ec:	4603      	mov	r3, r0
		reply_func = commands_send_packet;
 80039ee:	2c00      	cmp	r4, #0
 80039f0:	bf08      	it	eq
 80039f2:	4614      	moveq	r4, r2
		void(*reply_func)(unsigned char *data, unsigned int len)) {
 80039f4:	b0ad      	sub	sp, #180	; 0xb4
	len--;
 80039f6:	1e4f      	subs	r7, r1, #1
	}


	switch (packet_id) {
 80039f8:	2e6e      	cmp	r6, #110	; 0x6e
 80039fa:	f200 8127 	bhi.w	8003c4c <commands_process_packet+0x27c>
 80039fe:	e8df f016 	tbh	[pc, r6, lsl #1]
 8003a02:	046b      	.short	0x046b
 8003a04:	017a0125 	.word	0x017a0125
 8003a08:	021c0140 	.word	0x021c0140
 8003a0c:	0135013d 	.word	0x0135013d
 8003a10:	04f304e7 	.word	0x04f304e7
 8003a14:	0426013d 	.word	0x0426013d
 8003a18:	0125013d 	.word	0x0125013d
 8003a1c:	015d0388 	.word	0x015d0388
 8003a20:	0125015d 	.word	0x0125015d
 8003a24:	01250125 	.word	0x01250125
 8003a28:	014f02c3 	.word	0x014f02c3
 8003a2c:	01250125 	.word	0x01250125
 8003a30:	01820125 	.word	0x01820125
 8003a34:	01250182 	.word	0x01250182
 8003a38:	03b50125 	.word	0x03b50125
 8003a3c:	013d04fe 	.word	0x013d04fe
 8003a40:	02f7037f 	.word	0x02f7037f
 8003a44:	012502dd 	.word	0x012502dd
 8003a48:	01250125 	.word	0x01250125
 8003a4c:	012503a7 	.word	0x012503a7
 8003a50:	03ae0125 	.word	0x03ae0125
 8003a54:	01250125 	.word	0x01250125
 8003a58:	01250125 	.word	0x01250125
 8003a5c:	01250125 	.word	0x01250125
 8003a60:	01a0006f 	.word	0x01a0006f
 8003a64:	021c01a0 	.word	0x021c01a0
 8003a68:	0125006f 	.word	0x0125006f
 8003a6c:	01250125 	.word	0x01250125
 8003a70:	01250125 	.word	0x01250125
 8003a74:	012503df 	.word	0x012503df
 8003a78:	017a0125 	.word	0x017a0125
 8003a7c:	01250140 	.word	0x01250140
 8003a80:	014f0125 	.word	0x014f0125
 8003a84:	0125048a 	.word	0x0125048a
 8003a88:	01250125 	.word	0x01250125
 8003a8c:	01250125 	.word	0x01250125
 8003a90:	01250125 	.word	0x01250125
 8003a94:	01550155 	.word	0x01550155
 8003a98:	01250125 	.word	0x01250125
 8003a9c:	01250125 	.word	0x01250125
 8003aa0:	012502ba 	.word	0x012502ba
 8003aa4:	01400140 	.word	0x01400140
 8003aa8:	04d00125 	.word	0x04d00125
 8003aac:	04320125 	.word	0x04320125
 8003ab0:	01250125 	.word	0x01250125
 8003ab4:	012504dc 	.word	0x012504dc
 8003ab8:	0125032e 	.word	0x0125032e
 8003abc:	01250125 	.word	0x01250125
 8003ac0:	01250125 	.word	0x01250125
 8003ac4:	01250125 	.word	0x01250125
 8003ac8:	01250125 	.word	0x01250125
 8003acc:	01250125 	.word	0x01250125
 8003ad0:	01250125 	.word	0x01250125
 8003ad4:	01250125 	.word	0x01250125
 8003ad8:	01250125 	.word	0x01250125
 8003adc:	03d40125 	.word	0x03d40125
					val.current_tot = 0;
					val.num_vescs = 0;
					val.wh_charge_tot = 0;
					val.wh_tot = 0;

					float wh_batt_left = 0.0;
 8003ae0:	2300      	movs	r3, #0
					float battery_level = VescToSTM_get_battery_level(&wh_batt_left);
 8003ae2:	a817      	add	r0, sp, #92	; 0x5c
					float wh_batt_left = 0.0;
 8003ae4:	9317      	str	r3, [sp, #92]	; 0x5c
					float battery_level = VescToSTM_get_battery_level(&wh_batt_left);
 8003ae6:	f001 fbc3 	bl	8005270 <VescToSTM_get_battery_level>

					int32_t ind = 0;
					//chMtxLock(&send_buffer_mutex);
					uint8_t *send_buffer = send_buffer_global;
					send_buffer[ind++] = packet_id;
 8003aea:	2301      	movs	r3, #1
 8003aec:	4f5a      	ldr	r7, [pc, #360]	; (8003c58 <commands_process_packet+0x288>)

					uint32_t mask = 0xFFFFFFFF;
					if (packet_id == COMM_GET_VALUES_SETUP_SELECTIVE) {
 8003aee:	2e33      	cmp	r6, #51	; 0x33
					float battery_level = VescToSTM_get_battery_level(&wh_batt_left);
 8003af0:	9013      	str	r0, [sp, #76]	; 0x4c
					send_buffer[ind++] = packet_id;
 8003af2:	9318      	str	r3, [sp, #96]	; 0x60
 8003af4:	703e      	strb	r6, [r7, #0]
					if (packet_id == COMM_GET_VALUES_SETUP_SELECTIVE) {
 8003af6:	f000 84bc 	beq.w	8004472 <commands_process_packet+0xaa2>
 8003afa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003afe:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003b02:	f44f 2e80 	mov.w	lr, #262144	; 0x40000
 8003b06:	e9cd 3c11 	strd	r3, ip, [sp, #68]	; 0x44
 8003b0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b0e:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 8003b12:	e9cd 3e0f 	strd	r3, lr, [sp, #60]	; 0x3c
 8003b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b1a:	f44f 4980 	mov.w	r9, #16384	; 0x4000
 8003b1e:	e9cd 380d 	strd	r3, r8, [sp, #52]	; 0x34
 8003b22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b26:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 8003b2a:	e9cd 390b 	strd	r3, r9, [sp, #44]	; 0x2c
 8003b2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b32:	f44f 6b80 	mov.w	fp, #1024	; 0x400
 8003b36:	e9cd 3a09 	strd	r3, sl, [sp, #36]	; 0x24
 8003b3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b42:	e9cd 3b07 	strd	r3, fp, [sp, #28]
 8003b46:	2380      	movs	r3, #128	; 0x80
 8003b48:	e9cd 3205 	strd	r3, r2, [sp, #20]
 8003b4c:	2340      	movs	r3, #64	; 0x40
 8003b4e:	2520      	movs	r5, #32
 8003b50:	2610      	movs	r6, #16
 8003b52:	f04f 0808 	mov.w	r8, #8
 8003b56:	f04f 0904 	mov.w	r9, #4
 8003b5a:	f04f 0a02 	mov.w	sl, #2
 8003b5e:	9304      	str	r3, [sp, #16]
 8003b60:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
						mask = buffer_get_uint32(data, &ind2);
						buffer_append_uint32(send_buffer, mask, &ind);
					}

					if (mask & ((uint32_t)1 << 0)) {
						buffer_append_float16(send_buffer, VescToSTM_get_temperature(), 1e1, &ind);
 8003b64:	f001 f96e 	bl	8004e44 <VescToSTM_get_temperature>
 8003b68:	465b      	mov	r3, fp
 8003b6a:	4601      	mov	r1, r0
 8003b6c:	4a3b      	ldr	r2, [pc, #236]	; (8003c5c <commands_process_packet+0x28c>)
 8003b6e:	483a      	ldr	r0, [pc, #232]	; (8003c58 <commands_process_packet+0x288>)
 8003b70:	f001 fe10 	bl	8005794 <buffer_append_float16>
					}
					if (mask & ((uint32_t)1 << 1)) {
 8003b74:	f1ba 0f00 	cmp.w	sl, #0
 8003b78:	d005      	beq.n	8003b86 <commands_process_packet+0x1b6>
						//buffer_append_float16(send_buffer, mc_interface_temp_motor_filtered(), 1e1, &ind);
						buffer_append_float16(send_buffer, 0, 1e1, &ind);
 8003b7a:	465b      	mov	r3, fp
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	4a37      	ldr	r2, [pc, #220]	; (8003c5c <commands_process_packet+0x28c>)
 8003b80:	4835      	ldr	r0, [pc, #212]	; (8003c58 <commands_process_packet+0x288>)
 8003b82:	f001 fe07 	bl	8005794 <buffer_append_float16>
					}
					if (mask & ((uint32_t)1 << 2)) {
 8003b86:	f1b9 0f00 	cmp.w	r9, #0
 8003b8a:	d005      	beq.n	8003b98 <commands_process_packet+0x1c8>
						buffer_append_float32(send_buffer, val.current_tot, 1e2, &ind);
 8003b8c:	465b      	mov	r3, fp
 8003b8e:	2100      	movs	r1, #0
 8003b90:	4a33      	ldr	r2, [pc, #204]	; (8003c60 <commands_process_packet+0x290>)
 8003b92:	4831      	ldr	r0, [pc, #196]	; (8003c58 <commands_process_packet+0x288>)
 8003b94:	f001 fe14 	bl	80057c0 <buffer_append_float32>
					}
					if (mask & ((uint32_t)1 << 3)) {
 8003b98:	f1b8 0f00 	cmp.w	r8, #0
 8003b9c:	d005      	beq.n	8003baa <commands_process_packet+0x1da>
						buffer_append_float32(send_buffer, val.current_in_tot, 1e2, &ind);
 8003b9e:	465b      	mov	r3, fp
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	4a2f      	ldr	r2, [pc, #188]	; (8003c60 <commands_process_packet+0x290>)
 8003ba4:	482c      	ldr	r0, [pc, #176]	; (8003c58 <commands_process_packet+0x288>)
 8003ba6:	f001 fe0b 	bl	80057c0 <buffer_append_float32>
					}
					if (mask & ((uint32_t)1 << 4)) {
 8003baa:	b13e      	cbz	r6, 8003bbc <commands_process_packet+0x1ec>
						buffer_append_float16(send_buffer, VescToSTM_get_duty_cycle_now(), 1e3, &ind);
 8003bac:	f001 fc8c 	bl	80054c8 <VescToSTM_get_duty_cycle_now>
 8003bb0:	465b      	mov	r3, fp
 8003bb2:	4601      	mov	r1, r0
 8003bb4:	4a2b      	ldr	r2, [pc, #172]	; (8003c64 <commands_process_packet+0x294>)
 8003bb6:	4828      	ldr	r0, [pc, #160]	; (8003c58 <commands_process_packet+0x288>)
 8003bb8:	f001 fdec 	bl	8005794 <buffer_append_float16>
					}
					if (mask & ((uint32_t)1 << 5)) {
 8003bbc:	2d00      	cmp	r5, #0
 8003bbe:	f040 8604 	bne.w	80047ca <commands_process_packet+0xdfa>
						buffer_append_float32(send_buffer, VescToSTM_get_erpm(), 1e0, &ind);
					}
					if (mask & ((uint32_t)1 << 6)) {
 8003bc2:	9b04      	ldr	r3, [sp, #16]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f040 85a9 	bne.w	800471c <commands_process_packet+0xd4c>
						buffer_append_float32(send_buffer, VescToSTM_get_odometer(), 1e3, &ind);
					}
					if (mask & ((uint32_t)1 << 7)) {
 8003bca:	9b05      	ldr	r3, [sp, #20]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f040 859b 	bne.w	8004708 <commands_process_packet+0xd38>
						buffer_append_float16(send_buffer, VescToSTM_get_bus_voltage(), 1e1, &ind);
					}
					if (mask & ((uint32_t)1 << 8)) {
 8003bd2:	9b06      	ldr	r3, [sp, #24]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f040 868f 	bne.w	80048f8 <commands_process_packet+0xf28>
						buffer_append_float16(send_buffer, battery_level, 1e3, &ind);
					}
					if (mask & ((uint32_t)1 << 9)) {
 8003bda:	9b07      	ldr	r3, [sp, #28]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f040 8683 	bne.w	80048e8 <commands_process_packet+0xf18>
						buffer_append_float32(send_buffer, val.ah_tot, 1e4, &ind);
					}
					if (mask & ((uint32_t)1 << 10)) {
 8003be2:	9b08      	ldr	r3, [sp, #32]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f040 8677 	bne.w	80048d8 <commands_process_packet+0xf08>
						buffer_append_float32(send_buffer, val.ah_charge_tot, 1e4, &ind);
					}
					if (mask & ((uint32_t)1 << 11)) {
 8003bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	f040 866b 	bne.w	80048c8 <commands_process_packet+0xef8>
						buffer_append_float32(send_buffer, val.wh_tot, 1e4, &ind);
					}
					if (mask & ((uint32_t)1 << 12)) {
 8003bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f040 865f 	bne.w	80048b8 <commands_process_packet+0xee8>
						buffer_append_float32(send_buffer, val.wh_charge_tot, 1e4, &ind);
					}
					if (mask & ((uint32_t)1 << 13)) {
 8003bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f040 8651 	bne.w	80048a4 <commands_process_packet+0xed4>
						buffer_append_float32(send_buffer, VescToSTM_get_distance(), 1e3, &ind);
					}
					if (mask & ((uint32_t)1 << 14)) {
 8003c02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f040 8643 	bne.w	8004890 <commands_process_packet+0xec0>
						buffer_append_float32(send_buffer, VescToSTM_get_distance_abs(), 1e3, &ind);
					}
					if (mask & ((uint32_t)1 << 15)) {
 8003c0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f040 8635 	bne.w	800487c <commands_process_packet+0xeac>
						buffer_append_float32(send_buffer, VescToSTM_get_pid_pos_now(), 1e6, &ind);
					}
					if (mask & ((uint32_t)1 << 16)) {
 8003c12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f040 85e5 	bne.w	80047e4 <commands_process_packet+0xe14>
						send_buffer[ind++] = VescToSTM_get_fault();
					}
					if (mask & ((uint32_t)1 << 17)) {
 8003c1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c1c:	b123      	cbz	r3, 8003c28 <commands_process_packet+0x258>
						//uint8_t current_controller_id = app_get_configuration()->controller_id;
						//send_buffer[ind++] = current_controller_id;
						send_buffer[ind++] = 0;
 8003c1e:	2100      	movs	r1, #0
 8003c20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	54f9      	strb	r1, [r7, r3]
 8003c26:	9218      	str	r2, [sp, #96]	; 0x60
					}
					if (mask & ((uint32_t)1 << 18)) {
 8003c28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c2a:	b123      	cbz	r3, 8003c36 <commands_process_packet+0x266>
						send_buffer[ind++] = val.num_vescs;
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	54f9      	strb	r1, [r7, r3]
 8003c34:	9218      	str	r2, [sp, #96]	; 0x60
					}
					if (mask & ((uint32_t)1 << 19)) {
 8003c36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	f040 8547 	bne.w	80046cc <commands_process_packet+0xcfc>
						buffer_append_float32(send_buffer, wh_batt_left, 1e3, &ind);
					}
					if (mask & ((uint32_t)1 << 20)) {
 8003c3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f040 853a 	bne.w	80046ba <commands_process_packet+0xcea>
						buffer_append_uint32(send_buffer, VescToSTM_get_odometer(), &ind);
					}

					reply_func(send_buffer, ind);
 8003c46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003c48:	4803      	ldr	r0, [pc, #12]	; (8003c58 <commands_process_packet+0x288>)
 8003c4a:	47a0      	blx	r4

				default:
					break;
				}

}
 8003c4c:	b02d      	add	sp, #180	; 0xb4
 8003c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c52:	4770      	bx	lr
 8003c54:	08003845 	.word	0x08003845
 8003c58:	20000570 	.word	0x20000570
 8003c5c:	41200000 	.word	0x41200000
 8003c60:	42c80000 	.word	0x42c80000
 8003c64:	447a0000 	.word	0x447a0000
 8003c68:	20000770 	.word	0x20000770
				int32_t ind = 0;
 8003c6c:	2300      	movs	r3, #0
				VescToSTM_set_torque(buffer_get_int32(data, &ind));
 8003c6e:	a91a      	add	r1, sp, #104	; 0x68
 8003c70:	4628      	mov	r0, r5
				int32_t ind = 0;
 8003c72:	931a      	str	r3, [sp, #104]	; 0x68
				VescToSTM_set_torque(buffer_get_int32(data, &ind));
 8003c74:	f001 fe1e 	bl	80058b4 <buffer_get_int32>
 8003c78:	f000 ff8e 	bl	8004b98 <VescToSTM_set_torque>
				VescToSTM_timeout_reset();
 8003c7c:	f000 ff44 	bl	8004b08 <VescToSTM_timeout_reset>
			} break;
 8003c80:	e7e4      	b.n	8003c4c <commands_process_packet+0x27c>
			send_buffer[ind++] = 1;
 8003c82:	2102      	movs	r1, #2
			send_buffer[ind++] = COMM_WRITE_NEW_APP_DATA;
 8003c84:	f240 1303 	movw	r3, #259	; 0x103
			buffer_append_uint32(send_buffer, 0, &ind);
 8003c88:	a81a      	add	r0, sp, #104	; 0x68
			send_buffer[ind++] = 1;
 8003c8a:	9118      	str	r1, [sp, #96]	; 0x60
			buffer_append_uint32(send_buffer, 0, &ind);
 8003c8c:	aa18      	add	r2, sp, #96	; 0x60
 8003c8e:	2100      	movs	r1, #0
			send_buffer[ind++] = COMM_WRITE_NEW_APP_DATA;
 8003c90:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
			buffer_append_uint32(send_buffer, 0, &ind);
 8003c94:	f001 fd68 	bl	8005768 <buffer_append_uint32>
			reply_func(send_buffer, ind);
 8003c98:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003c9a:	a81a      	add	r0, sp, #104	; 0x68
 8003c9c:	47a0      	blx	r4
		} break;
 8003c9e:	e7d5      	b.n	8003c4c <commands_process_packet+0x27c>
					data[len] = '\0';
 8003ca0:	2200      	movs	r2, #0
					terminal_process_string((char*)data);
 8003ca2:	4628      	mov	r0, r5
					data[len] = '\0';
 8003ca4:	545a      	strb	r2, [r3, r1]
					terminal_process_string((char*)data);
 8003ca6:	f003 f849 	bl	8006d3c <terminal_process_string>
					break;
 8003caa:	e7cf      	b.n	8003c4c <commands_process_packet+0x27c>
					send_buffer[ind++] = COMM_ERASE_BOOTLOADER;
 8003cac:	f240 1349 	movw	r3, #329	; 0x149
					reply_func(send_buffer, ind);
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	a81a      	add	r0, sp, #104	; 0x68
					send_buffer[ind++] = COMM_ERASE_BOOTLOADER;
 8003cb4:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
					reply_func(send_buffer, ind);
 8003cb8:	47a0      	blx	r4
				} break;
 8003cba:	e7c7      	b.n	8003c4c <commands_process_packet+0x27c>
					mc_configuration *mcconf = pvPortMalloc(sizeof(mc_configuration));
 8003cbc:	f44f 70c6 	mov.w	r0, #396	; 0x18c
 8003cc0:	f008 f9ce 	bl	800c060 <pvPortMalloc>
					if (packet_id == COMM_GET_MCCONF) {
 8003cc4:	2e0e      	cmp	r6, #14
					mc_configuration *mcconf = pvPortMalloc(sizeof(mc_configuration));
 8003cc6:	4604      	mov	r4, r0
					if (packet_id == COMM_GET_MCCONF) {
 8003cc8:	f000 84cd 	beq.w	8004666 <commands_process_packet+0xc96>
						confgenerator_set_defaults_mcconf(mcconf);
 8003ccc:	f002 fe86 	bl	80069dc <confgenerator_set_defaults_mcconf>
	send_buffer_global[0] = packet_id;
 8003cd0:	4dc1      	ldr	r5, [pc, #772]	; (8003fd8 <commands_process_packet+0x608>)
	int32_t len = confgenerator_serialize_mcconf(send_buffer_global + 1, mcconf);
 8003cd2:	4621      	mov	r1, r4
	send_buffer_global[0] = packet_id;
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	f800 6b01 	strb.w	r6, [r0], #1
	int32_t len = confgenerator_serialize_mcconf(send_buffer_global + 1, mcconf);
 8003cda:	f002 f85f 	bl	8005d9c <confgenerator_serialize_mcconf>
	if (send_func) {
 8003cde:	f8d8 3000 	ldr.w	r3, [r8]
 8003ce2:	b123      	cbz	r3, 8003cee <commands_process_packet+0x31e>
		send_func(data, len);
 8003ce4:	1c41      	adds	r1, r0, #1
 8003ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8003cea:	4628      	mov	r0, r5
 8003cec:	4798      	blx	r3
					vPortFree(mcconf);
 8003cee:	4620      	mov	r0, r4
 8003cf0:	f008 fa70 	bl	800c1d4 <vPortFree>
				} break;
 8003cf4:	e7aa      	b.n	8003c4c <commands_process_packet+0x27c>
			send_buffer[ind++] = COMM_ERASE_NEW_APP;
 8003cf6:	f44f 7381 	mov.w	r3, #258	; 0x102
			reply_func(send_buffer, ind);
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	a81a      	add	r0, sp, #104	; 0x68
			send_buffer[ind++] = COMM_ERASE_NEW_APP;
 8003cfe:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
			reply_func(send_buffer, ind);
 8003d02:	47a0      	blx	r4
		} break;
 8003d04:	e7a2      	b.n	8003c4c <commands_process_packet+0x27c>
					float r = 0.0;
 8003d06:	2200      	movs	r2, #0
					float l = 1.0;
 8003d08:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
					tune_foc_measure_res_ind(&r, &l);
 8003d0c:	a917      	add	r1, sp, #92	; 0x5c
 8003d0e:	a816      	add	r0, sp, #88	; 0x58
					float r = 0.0;
 8003d10:	9216      	str	r2, [sp, #88]	; 0x58
					float l = 1.0;
 8003d12:	9317      	str	r3, [sp, #92]	; 0x5c
					tune_foc_measure_res_ind(&r, &l);
 8003d14:	f003 fde6 	bl	80078e4 <tune_foc_measure_res_ind>
					send_buffer[ind++] = COMM_DETECT_MOTOR_R_L;
 8003d18:	2101      	movs	r1, #1
 8003d1a:	2519      	movs	r5, #25
					buffer_append_float32(send_buffer, r, 1e6, &ind);
 8003d1c:	ab18      	add	r3, sp, #96	; 0x60
 8003d1e:	a81a      	add	r0, sp, #104	; 0x68
					send_buffer[ind++] = COMM_DETECT_MOTOR_R_L;
 8003d20:	9118      	str	r1, [sp, #96]	; 0x60
					buffer_append_float32(send_buffer, r, 1e6, &ind);
 8003d22:	4aae      	ldr	r2, [pc, #696]	; (8003fdc <commands_process_packet+0x60c>)
 8003d24:	9916      	ldr	r1, [sp, #88]	; 0x58
					send_buffer[ind++] = COMM_DETECT_MOTOR_R_L;
 8003d26:	f88d 5068 	strb.w	r5, [sp, #104]	; 0x68
					buffer_append_float32(send_buffer, r, 1e6, &ind);
 8003d2a:	f001 fd49 	bl	80057c0 <buffer_append_float32>
					buffer_append_float32(send_buffer, l, 1e3, &ind);
 8003d2e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8003d30:	a81a      	add	r0, sp, #104	; 0x68
 8003d32:	4aab      	ldr	r2, [pc, #684]	; (8003fe0 <commands_process_packet+0x610>)
 8003d34:	ab18      	add	r3, sp, #96	; 0x60
 8003d36:	f001 fd43 	bl	80057c0 <buffer_append_float32>
					reply_func(send_buffer, ind);
 8003d3a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003d3c:	a81a      	add	r0, sp, #104	; 0x68
 8003d3e:	47a0      	blx	r4
					break;
 8003d40:	e784      	b.n	8003c4c <commands_process_packet+0x27c>
					bool divide_by_controllers = data[ind++];
 8003d42:	2204      	movs	r2, #4
					bool ack = data[ind++];
 8003d44:	78db      	ldrb	r3, [r3, #3]
					mcconf->l_current_min_scale = buffer_get_float32_auto(data, &ind);
 8003d46:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
 8003d4a:	4659      	mov	r1, fp
 8003d4c:	4628      	mov	r0, r5
					bool ack = data[ind++];
 8003d4e:	9304      	str	r3, [sp, #16]
					bool divide_by_controllers = data[ind++];
 8003d50:	9218      	str	r2, [sp, #96]	; 0x60
					mcconf->l_current_min_scale = buffer_get_float32_auto(data, &ind);
 8003d52:	f001 fdfb 	bl	800594c <buffer_get_float32_auto>
 8003d56:	4603      	mov	r3, r0
 8003d58:	f8df a290 	ldr.w	sl, [pc, #656]	; 8003fec <commands_process_packet+0x61c>
					mcconf->l_current_max_scale = buffer_get_float32_auto(data, &ind);
 8003d5c:	4659      	mov	r1, fp
 8003d5e:	4628      	mov	r0, r5
					mcconf->l_current_min_scale = buffer_get_float32_auto(data, &ind);
 8003d60:	f8ca 3064 	str.w	r3, [sl, #100]	; 0x64
					mcconf->l_current_max_scale = buffer_get_float32_auto(data, &ind);
 8003d64:	f001 fdf2 	bl	800594c <buffer_get_float32_auto>
					if (packet_id == COMM_SET_MCCONF_TEMP_SETUP) {
 8003d68:	2e31      	cmp	r6, #49	; 0x31
					mcconf->l_current_max_scale = buffer_get_float32_auto(data, &ind);
 8003d6a:	f8ca 0060 	str.w	r0, [sl, #96]	; 0x60
					if (packet_id == COMM_SET_MCCONF_TEMP_SETUP) {
 8003d6e:	f000 8431 	beq.w	80045d4 <commands_process_packet+0xc04>
						mcconf->l_min_erpm = buffer_get_float32_auto(data, &ind);
 8003d72:	4659      	mov	r1, fp
 8003d74:	4628      	mov	r0, r5
 8003d76:	f001 fde9 	bl	800594c <buffer_get_float32_auto>
 8003d7a:	4603      	mov	r3, r0
						mcconf->l_max_erpm = buffer_get_float32_auto(data, &ind);
 8003d7c:	4659      	mov	r1, fp
 8003d7e:	4628      	mov	r0, r5
						mcconf->l_min_erpm = buffer_get_float32_auto(data, &ind);
 8003d80:	f8ca 3014 	str.w	r3, [sl, #20]
						mcconf->l_max_erpm = buffer_get_float32_auto(data, &ind);
 8003d84:	f001 fde2 	bl	800594c <buffer_get_float32_auto>
 8003d88:	f8ca 0018 	str.w	r0, [sl, #24]
					mcconf->l_min_duty = buffer_get_float32_auto(data, &ind);
 8003d8c:	4659      	mov	r1, fp
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f001 fddc 	bl	800594c <buffer_get_float32_auto>
 8003d94:	4603      	mov	r3, r0
					mcconf->l_max_duty = buffer_get_float32_auto(data, &ind);
 8003d96:	4659      	mov	r1, fp
 8003d98:	4628      	mov	r0, r5
					mcconf->l_min_duty = buffer_get_float32_auto(data, &ind);
 8003d9a:	f8ca 3050 	str.w	r3, [sl, #80]	; 0x50
					mcconf->l_max_duty = buffer_get_float32_auto(data, &ind);
 8003d9e:	f001 fdd5 	bl	800594c <buffer_get_float32_auto>
 8003da2:	4603      	mov	r3, r0
					mcconf->l_watt_min = buffer_get_float32_auto(data, &ind) / controller_num;
 8003da4:	4659      	mov	r1, fp
 8003da6:	4628      	mov	r0, r5
					mcconf->l_max_duty = buffer_get_float32_auto(data, &ind);
 8003da8:	f8ca 3054 	str.w	r3, [sl, #84]	; 0x54
					mcconf->l_watt_min = buffer_get_float32_auto(data, &ind) / controller_num;
 8003dac:	f001 fdce 	bl	800594c <buffer_get_float32_auto>
 8003db0:	4603      	mov	r3, r0
					mcconf->l_watt_max = buffer_get_float32_auto(data, &ind) / controller_num;
 8003db2:	4659      	mov	r1, fp
 8003db4:	4628      	mov	r0, r5
					mcconf->l_watt_min = buffer_get_float32_auto(data, &ind) / controller_num;
 8003db6:	f8ca 305c 	str.w	r3, [sl, #92]	; 0x5c
					mcconf->l_watt_max = buffer_get_float32_auto(data, &ind) / controller_num;
 8003dba:	f001 fdc7 	bl	800594c <buffer_get_float32_auto>
					ind -= 8;
 8003dbe:	9b18      	ldr	r3, [sp, #96]	; 0x60
					buffer_append_float32_auto(data, mcconf->l_watt_min, &ind);
 8003dc0:	465a      	mov	r2, fp
					ind -= 8;
 8003dc2:	3b08      	subs	r3, #8
					buffer_append_float32_auto(data, mcconf->l_watt_min, &ind);
 8003dc4:	f8da 105c 	ldr.w	r1, [sl, #92]	; 0x5c
					mcconf->l_watt_max = buffer_get_float32_auto(data, &ind) / controller_num;
 8003dc8:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
					buffer_append_float32_auto(data, mcconf->l_watt_min, &ind);
 8003dcc:	4628      	mov	r0, r5
					ind -= 8;
 8003dce:	9318      	str	r3, [sp, #96]	; 0x60
					buffer_append_float32_auto(data, mcconf->l_watt_min, &ind);
 8003dd0:	f001 fd14 	bl	80057fc <buffer_append_float32_auto>
					buffer_append_float32_auto(data, mcconf->l_watt_max, &ind);
 8003dd4:	465a      	mov	r2, fp
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f8da 1058 	ldr.w	r1, [sl, #88]	; 0x58
 8003ddc:	f001 fd0e 	bl	80057fc <buffer_append_float32_auto>
					if ((int32_t)len >= (ind + 8)) {
 8003de0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003de2:	3307      	adds	r3, #7
 8003de4:	42bb      	cmp	r3, r7
 8003de6:	f2c0 847f 	blt.w	80046e8 <commands_process_packet+0xd18>
 8003dea:	f8da 7008 	ldr.w	r7, [sl, #8]
					mcconf->lo_current_min = mcconf->l_current_min * mcconf->l_current_min_scale;
 8003dee:	f8da 1064 	ldr.w	r1, [sl, #100]	; 0x64
 8003df2:	f8da 0004 	ldr.w	r0, [sl, #4]
 8003df6:	f7fc ffb1 	bl	8000d5c <__aeabi_fmul>
					mcconf->lo_current_max = mcconf->l_current_max * mcconf->l_current_max_scale;
 8003dfa:	f8da 1060 	ldr.w	r1, [sl, #96]	; 0x60
					mcconf->lo_current_min = mcconf->l_current_min * mcconf->l_current_min_scale;
 8003dfe:	4605      	mov	r5, r0
 8003e00:	f8ca 0070 	str.w	r0, [sl, #112]	; 0x70
					mcconf->lo_current_max = mcconf->l_current_max * mcconf->l_current_max_scale;
 8003e04:	f8da 0000 	ldr.w	r0, [sl]
 8003e08:	f7fc ffa8 	bl	8000d5c <__aeabi_fmul>
					mcconf->lo_in_current_min = mcconf->l_in_current_min;
 8003e0c:	f8da 300c 	ldr.w	r3, [sl, #12]
					mcconf->lo_current_motor_min_now = mcconf->lo_current_min;
 8003e10:	f8ca 5080 	str.w	r5, [sl, #128]	; 0x80
					mcconf->lo_in_current_min = mcconf->l_in_current_min;
 8003e14:	f8ca 3078 	str.w	r3, [sl, #120]	; 0x78
					if (ack) {
 8003e18:	9b04      	ldr	r3, [sp, #16]
					mcconf->lo_current_max = mcconf->l_current_max * mcconf->l_current_max_scale;
 8003e1a:	f8ca 006c 	str.w	r0, [sl, #108]	; 0x6c
					mcconf->lo_current_motor_max_now = mcconf->lo_current_max;
 8003e1e:	f8ca 007c 	str.w	r0, [sl, #124]	; 0x7c
					mcconf->lo_in_current_max = mcconf->l_in_current_max;
 8003e22:	f8ca 7074 	str.w	r7, [sl, #116]	; 0x74
					if (ack) {
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f43f af10 	beq.w	8003c4c <commands_process_packet+0x27c>
						send_buffer[ind++] = packet_id;
 8003e2c:	2101      	movs	r1, #1
						reply_func(send_buffer, ind);
 8003e2e:	a81a      	add	r0, sp, #104	; 0x68
						send_buffer[ind++] = packet_id;
 8003e30:	f88d 6068 	strb.w	r6, [sp, #104]	; 0x68
 8003e34:	9118      	str	r1, [sp, #96]	; 0x60
						reply_func(send_buffer, ind);
 8003e36:	47a0      	blx	r4
				} break;
 8003e38:	e708      	b.n	8003c4c <commands_process_packet+0x27c>
			send_buffer[ind++] = packet_id;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	4f66      	ldr	r7, [pc, #408]	; (8003fd8 <commands_process_packet+0x608>)
			if (packet_id == COMM_GET_VALUES_SELECTIVE) {
 8003e3e:	2e32      	cmp	r6, #50	; 0x32
			send_buffer[ind++] = packet_id;
 8003e40:	9318      	str	r3, [sp, #96]	; 0x60
 8003e42:	703e      	strb	r6, [r7, #0]
			if (packet_id == COMM_GET_VALUES_SELECTIVE) {
 8003e44:	f000 8364 	beq.w	8004510 <commands_process_packet+0xb40>
 8003e48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003e4c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003e50:	f44f 2580 	mov.w	r5, #262144	; 0x40000
 8003e54:	e9cd 3011 	strd	r3, r0, [sp, #68]	; 0x44
 8003e58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003e5c:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8003e60:	e9cd 350f 	strd	r3, r5, [sp, #60]	; 0x3c
 8003e64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e68:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
 8003e6c:	e9cd 360d 	strd	r3, r6, [sp, #52]	; 0x34
 8003e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003e74:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
 8003e78:	e9cd 3c0b 	strd	r3, ip, [sp, #44]	; 0x2c
 8003e7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e80:	f44f 6880 	mov.w	r8, #1024	; 0x400
 8003e84:	e9cd 3e09 	strd	r3, lr, [sp, #36]	; 0x24
 8003e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e8c:	f44f 7980 	mov.w	r9, #256	; 0x100
 8003e90:	e9cd 3807 	strd	r3, r8, [sp, #28]
 8003e94:	2380      	movs	r3, #128	; 0x80
 8003e96:	e9cd 3905 	strd	r3, r9, [sp, #20]
 8003e9a:	2340      	movs	r3, #64	; 0x40
 8003e9c:	2520      	movs	r5, #32
 8003e9e:	2610      	movs	r6, #16
 8003ea0:	f04f 0808 	mov.w	r8, #8
 8003ea4:	f04f 0904 	mov.w	r9, #4
 8003ea8:	f04f 0a02 	mov.w	sl, #2
 8003eac:	9304      	str	r3, [sp, #16]
 8003eae:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
				buffer_append_float16(send_buffer, VescToSTM_get_temperature() , 1e1, &ind);
 8003eb2:	f000 ffc7 	bl	8004e44 <VescToSTM_get_temperature>
 8003eb6:	465b      	mov	r3, fp
 8003eb8:	4601      	mov	r1, r0
 8003eba:	4a4a      	ldr	r2, [pc, #296]	; (8003fe4 <commands_process_packet+0x614>)
 8003ebc:	4846      	ldr	r0, [pc, #280]	; (8003fd8 <commands_process_packet+0x608>)
 8003ebe:	f001 fc69 	bl	8005794 <buffer_append_float16>
			if (mask & ((uint32_t)1 << 1)) {
 8003ec2:	f1ba 0f00 	cmp.w	sl, #0
 8003ec6:	f040 82c9 	bne.w	800445c <commands_process_packet+0xa8c>
			if (mask & ((uint32_t)1 << 2)) {
 8003eca:	f1b9 0f00 	cmp.w	r9, #0
 8003ece:	f040 82b8 	bne.w	8004442 <commands_process_packet+0xa72>
			if (mask & ((uint32_t)1 << 3)) {
 8003ed2:	f1b8 0f00 	cmp.w	r8, #0
 8003ed6:	f040 82a8 	bne.w	800442a <commands_process_packet+0xa5a>
			if (mask & ((uint32_t)1 << 4)) {
 8003eda:	2e00      	cmp	r6, #0
 8003edc:	f040 829c 	bne.w	8004418 <commands_process_packet+0xa48>
			if (mask & ((uint32_t)1 << 5)) {
 8003ee0:	2d00      	cmp	r5, #0
 8003ee2:	f040 84a3 	bne.w	800482c <commands_process_packet+0xe5c>
			if (mask & ((uint32_t)1 << 6)) {
 8003ee6:	9b04      	ldr	r3, [sp, #16]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	f040 8495 	bne.w	8004818 <commands_process_packet+0xe48>
			if (mask & ((uint32_t)1 << 7)) {
 8003eee:	9b05      	ldr	r3, [sp, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f040 845d 	bne.w	80047b0 <commands_process_packet+0xde0>
			if (mask & ((uint32_t)1 << 8)) {
 8003ef6:	9b06      	ldr	r3, [sp, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f040 844f 	bne.w	800479c <commands_process_packet+0xdcc>
			if (mask & ((uint32_t)1 << 9)) {
 8003efe:	9b07      	ldr	r3, [sp, #28]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f040 8443 	bne.w	800478c <commands_process_packet+0xdbc>
			if (mask & ((uint32_t)1 << 10)) {
 8003f06:	9b08      	ldr	r3, [sp, #32]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f040 8437 	bne.w	800477c <commands_process_packet+0xdac>
			if (mask & ((uint32_t)1 << 11)) {
 8003f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f040 842b 	bne.w	800476c <commands_process_packet+0xd9c>
			if (mask & ((uint32_t)1 << 12)) {
 8003f16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f040 841f 	bne.w	800475c <commands_process_packet+0xd8c>
			if (mask & ((uint32_t)1 << 13)) {
 8003f1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	f040 8411 	bne.w	8004748 <commands_process_packet+0xd78>
			if (mask & ((uint32_t)1 << 14)) {
 8003f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f040 8403 	bne.w	8004734 <commands_process_packet+0xd64>
			if (mask & ((uint32_t)1 << 15)) {
 8003f2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f040 8469 	bne.w	8004808 <commands_process_packet+0xe38>
			if (mask & ((uint32_t)1 << 16)) {
 8003f36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f040 845b 	bne.w	80047f4 <commands_process_packet+0xe24>
			if (mask & ((uint32_t)1 << 17)) {
 8003f3e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003f40:	b123      	cbz	r3, 8003f4c <commands_process_packet+0x57c>
				send_buffer[ind++] = current_controller_id;
 8003f42:	2101      	movs	r1, #1
 8003f44:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003f46:	185a      	adds	r2, r3, r1
 8003f48:	54f9      	strb	r1, [r7, r3]
 8003f4a:	9218      	str	r2, [sp, #96]	; 0x60
			if (mask & ((uint32_t)1 << 18)) {
 8003f4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	f040 8480 	bne.w	8004854 <commands_process_packet+0xe84>
			if (mask & ((uint32_t)1 << 19)) {
 8003f54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f040 8472 	bne.w	8004840 <commands_process_packet+0xe70>
			if (mask & ((uint32_t)1 << 20)) {
 8003f5c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f43f ae71 	beq.w	8003c46 <commands_process_packet+0x276>
				buffer_append_float32(send_buffer, VescToSTM_get_Vq(), 1e3, &ind);
 8003f64:	f001 f850 	bl	8005008 <VescToSTM_get_Vq>
 8003f68:	465b      	mov	r3, fp
 8003f6a:	4601      	mov	r1, r0
 8003f6c:	4a1c      	ldr	r2, [pc, #112]	; (8003fe0 <commands_process_packet+0x610>)
 8003f6e:	481a      	ldr	r0, [pc, #104]	; (8003fd8 <commands_process_packet+0x608>)
 8003f70:	f001 fc26 	bl	80057c0 <buffer_append_float32>
 8003f74:	e667      	b.n	8003c46 <commands_process_packet+0x276>
					memset(send_buffer,0,36);
 8003f76:	2224      	movs	r2, #36	; 0x24
 8003f78:	2100      	movs	r1, #0
 8003f7a:	a81a      	add	r0, sp, #104	; 0x68
 8003f7c:	f00a fb34 	bl	800e5e8 <memset>
					reply_func(send_buffer, ind);
 8003f80:	2125      	movs	r1, #37	; 0x25
 8003f82:	a81a      	add	r0, sp, #104	; 0x68
 8003f84:	47a0      	blx	r4
				} break;
 8003f86:	e661      	b.n	8003c4c <commands_process_packet+0x27c>
					samples.mode = data[ind++];
 8003f88:	2601      	movs	r6, #1
 8003f8a:	4c17      	ldr	r4, [pc, #92]	; (8003fe8 <commands_process_packet+0x618>)
 8003f8c:	7843      	ldrb	r3, [r0, #1]
					sample_len = buffer_get_uint16(data, &ind);
 8003f8e:	a91a      	add	r1, sp, #104	; 0x68
 8003f90:	4628      	mov	r0, r5
					samples.mode = data[ind++];
 8003f92:	72a3      	strb	r3, [r4, #10]
 8003f94:	961a      	str	r6, [sp, #104]	; 0x68
					sample_len = buffer_get_uint16(data, &ind);
 8003f96:	f001 fc83 	bl	80058a0 <buffer_get_uint16>
					sample_len = sample_len > ADC_SAMPLE_MAX_LEN ? ADC_SAMPLE_MAX_LEN : sample_len;
 8003f9a:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
					samples.index = 0;
 8003f9e:	f04f 0300 	mov.w	r3, #0
					sample_len = sample_len > ADC_SAMPLE_MAX_LEN ? ADC_SAMPLE_MAX_LEN : sample_len;
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	bf28      	it	cs
 8003fa6:	f44f 72fa 	movcs.w	r2, #500	; 0x1f4
					samples.dec = data[ind++];
 8003faa:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003fac:	5c69      	ldrb	r1, [r5, r1]
 8003fae:	7061      	strb	r1, [r4, #1]
					samples.vesc_tool_samples = sample_len;
 8003fb0:	8120      	strh	r0, [r4, #8]
					samples.n_samp = sample_len;
 8003fb2:	80e2      	strh	r2, [r4, #6]
					samples.index = 0;
 8003fb4:	80a3      	strh	r3, [r4, #4]
					samples.dec_state = 0;
 8003fb6:	70a3      	strb	r3, [r4, #2]
					samples.state = SAMP_START;
 8003fb8:	7026      	strb	r6, [r4, #0]
				} break;
 8003fba:	e647      	b.n	8003c4c <commands_process_packet+0x27c>
					send_buffer[ind++] = COMM_GET_DECODED_CHUK;
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	2321      	movs	r3, #33	; 0x21
 8003fc0:	9118      	str	r1, [sp, #96]	; 0x60
					buffer_append_int32(send_buffer, 0, &ind);
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	a81a      	add	r0, sp, #104	; 0x68
 8003fc6:	aa18      	add	r2, sp, #96	; 0x60
					send_buffer[ind++] = COMM_GPD_BUFFER_SIZE_LEFT;
 8003fc8:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
					buffer_append_int32(send_buffer, 128, &ind);
 8003fcc:	f001 fbb6 	bl	800573c <buffer_append_int32>
					reply_func(send_buffer, ind);
 8003fd0:	9918      	ldr	r1, [sp, #96]	; 0x60
 8003fd2:	a81a      	add	r0, sp, #104	; 0x68
 8003fd4:	47a0      	blx	r4
				} break;
 8003fd6:	e639      	b.n	8003c4c <commands_process_packet+0x27c>
 8003fd8:	20000570 	.word	0x20000570
 8003fdc:	49742400 	.word	0x49742400
 8003fe0:	447a0000 	.word	0x447a0000
 8003fe4:	41200000 	.word	0x41200000
 8003fe8:	200033f0 	.word	0x200033f0
 8003fec:	20003dc4 	.word	0x20003dc4
					send_buffer[ind++] = COMM_GET_DECODED_ADC;
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	2320      	movs	r3, #32
					buffer_append_int32(send_buffer, (int32_t)(VescToSTM_get_battery_level(NULL) * 1000000.0), &ind);
 8003ff4:	2000      	movs	r0, #0
					send_buffer[ind++] = COMM_GET_DECODED_ADC;
 8003ff6:	9218      	str	r2, [sp, #96]	; 0x60
 8003ff8:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
					buffer_append_int32(send_buffer, (int32_t)(VescToSTM_get_battery_level(NULL) * 1000000.0), &ind);
 8003ffc:	f001 f938 	bl	8005270 <VescToSTM_get_battery_level>
 8004000:	f7fc fa14 	bl	800042c <__aeabi_f2d>
 8004004:	a3ac      	add	r3, pc, #688	; (adr r3, 80042b8 <commands_process_packet+0x8e8>)
 8004006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400a:	f7fc fa67 	bl	80004dc <__aeabi_dmul>
 800400e:	f7fc fcff 	bl	8000a10 <__aeabi_d2iz>
 8004012:	aa18      	add	r2, sp, #96	; 0x60
 8004014:	4601      	mov	r1, r0
 8004016:	a81a      	add	r0, sp, #104	; 0x68
 8004018:	f001 fb90 	bl	800573c <buffer_append_int32>
					buffer_append_int32(send_buffer, (int32_t)(VBS_GetAvBusVoltage_V(pMCT[M1]->pBusVoltageSensor) * 1000000.0), &ind);
 800401c:	4ba8      	ldr	r3, [pc, #672]	; (80042c0 <commands_process_packet+0x8f0>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004022:	f7fd f8bf 	bl	80011a4 <VBS_GetAvBusVoltage_V>
 8004026:	f7fc f9ef 	bl	8000408 <__aeabi_i2d>
 800402a:	a3a3      	add	r3, pc, #652	; (adr r3, 80042b8 <commands_process_packet+0x8e8>)
 800402c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004030:	f7fc fa54 	bl	80004dc <__aeabi_dmul>
 8004034:	f7fc fcec 	bl	8000a10 <__aeabi_d2iz>
 8004038:	aa18      	add	r2, sp, #96	; 0x60
 800403a:	4601      	mov	r1, r0
 800403c:	a81a      	add	r0, sp, #104	; 0x68
 800403e:	f001 fb7d 	bl	800573c <buffer_append_int32>
					buffer_append_int32(send_buffer, 0, &ind);
 8004042:	2100      	movs	r1, #0
 8004044:	aa18      	add	r2, sp, #96	; 0x60
 8004046:	a81a      	add	r0, sp, #104	; 0x68
 8004048:	f001 fb78 	bl	800573c <buffer_append_int32>
					buffer_append_int32(send_buffer, 0, &ind);
 800404c:	a81a      	add	r0, sp, #104	; 0x68
 800404e:	2100      	movs	r1, #0
 8004050:	aa18      	add	r2, sp, #96	; 0x60
 8004052:	f001 fb73 	bl	800573c <buffer_append_int32>
					reply_func(send_buffer, ind);
 8004056:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004058:	a81a      	add	r0, sp, #104	; 0x68
 800405a:	47a0      	blx	r4
				} break;
 800405c:	e5f6      	b.n	8003c4c <commands_process_packet+0x27c>
					send_buffer[ind++] = packet_id;
 800405e:	2001      	movs	r0, #1
 8004060:	235b      	movs	r3, #91	; 0x5b
					buffer_append_float32_auto(send_buffer, mcconf->l_current_min_scale, &ind);
 8004062:	4d98      	ldr	r5, [pc, #608]	; (80042c4 <commands_process_packet+0x8f4>)
 8004064:	aa18      	add	r2, sp, #96	; 0x60
 8004066:	6e69      	ldr	r1, [r5, #100]	; 0x64
					send_buffer[ind++] = packet_id;
 8004068:	9018      	str	r0, [sp, #96]	; 0x60
					buffer_append_float32_auto(send_buffer, mcconf->l_current_min_scale, &ind);
 800406a:	a81a      	add	r0, sp, #104	; 0x68
					send_buffer[ind++] = packet_id;
 800406c:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
					buffer_append_float32_auto(send_buffer, mcconf->l_current_min_scale, &ind);
 8004070:	f001 fbc4 	bl	80057fc <buffer_append_float32_auto>
					buffer_append_float32_auto(send_buffer, mcconf->l_current_max_scale, &ind);
 8004074:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8004076:	aa18      	add	r2, sp, #96	; 0x60
 8004078:	a81a      	add	r0, sp, #104	; 0x68
 800407a:	f001 fbbf 	bl	80057fc <buffer_append_float32_auto>
					buffer_append_float32_auto(send_buffer, mcconf->l_min_erpm, &ind);
 800407e:	6969      	ldr	r1, [r5, #20]
 8004080:	aa18      	add	r2, sp, #96	; 0x60
 8004082:	a81a      	add	r0, sp, #104	; 0x68
 8004084:	f001 fbba 	bl	80057fc <buffer_append_float32_auto>
					buffer_append_float32_auto(send_buffer, mcconf->l_max_erpm, &ind);
 8004088:	69a9      	ldr	r1, [r5, #24]
 800408a:	aa18      	add	r2, sp, #96	; 0x60
 800408c:	a81a      	add	r0, sp, #104	; 0x68
 800408e:	f001 fbb5 	bl	80057fc <buffer_append_float32_auto>
					buffer_append_float32_auto(send_buffer, mcconf->l_min_duty, &ind);
 8004092:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8004094:	aa18      	add	r2, sp, #96	; 0x60
 8004096:	a81a      	add	r0, sp, #104	; 0x68
 8004098:	f001 fbb0 	bl	80057fc <buffer_append_float32_auto>
					buffer_append_float32_auto(send_buffer, mcconf->l_max_duty, &ind);
 800409c:	6d69      	ldr	r1, [r5, #84]	; 0x54
 800409e:	aa18      	add	r2, sp, #96	; 0x60
 80040a0:	a81a      	add	r0, sp, #104	; 0x68
 80040a2:	f001 fbab 	bl	80057fc <buffer_append_float32_auto>
					buffer_append_float32_auto(send_buffer, mcconf->l_watt_min, &ind);
 80040a6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 80040a8:	aa18      	add	r2, sp, #96	; 0x60
 80040aa:	a81a      	add	r0, sp, #104	; 0x68
 80040ac:	f001 fba6 	bl	80057fc <buffer_append_float32_auto>
					buffer_append_float32_auto(send_buffer, mcconf->l_watt_max, &ind);
 80040b0:	6da9      	ldr	r1, [r5, #88]	; 0x58
 80040b2:	aa18      	add	r2, sp, #96	; 0x60
 80040b4:	a81a      	add	r0, sp, #104	; 0x68
 80040b6:	f001 fba1 	bl	80057fc <buffer_append_float32_auto>
					buffer_append_float32_auto(send_buffer, mcconf->l_in_current_min, &ind);
 80040ba:	68e9      	ldr	r1, [r5, #12]
 80040bc:	aa18      	add	r2, sp, #96	; 0x60
 80040be:	a81a      	add	r0, sp, #104	; 0x68
 80040c0:	f001 fb9c 	bl	80057fc <buffer_append_float32_auto>
					buffer_append_float32_auto(send_buffer, mcconf->l_in_current_max, &ind);
 80040c4:	68a9      	ldr	r1, [r5, #8]
 80040c6:	aa18      	add	r2, sp, #96	; 0x60
 80040c8:	a81a      	add	r0, sp, #104	; 0x68
 80040ca:	f001 fb97 	bl	80057fc <buffer_append_float32_auto>
					send_buffer[ind++] = (uint8_t)mcconf->si_motor_poles;
 80040ce:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80040d0:	f895 0170 	ldrb.w	r0, [r5, #368]	; 0x170
 80040d4:	aa2c      	add	r2, sp, #176	; 0xb0
 80040d6:	18d1      	adds	r1, r2, r3
 80040d8:	f801 0c48 	strb.w	r0, [r1, #-72]
 80040dc:	3301      	adds	r3, #1
					buffer_append_float32_auto(send_buffer, mcconf->si_gear_ratio, &ind);
 80040de:	f8d5 1174 	ldr.w	r1, [r5, #372]	; 0x174
 80040e2:	aa18      	add	r2, sp, #96	; 0x60
 80040e4:	a81a      	add	r0, sp, #104	; 0x68
					send_buffer[ind++] = (uint8_t)mcconf->si_motor_poles;
 80040e6:	9318      	str	r3, [sp, #96]	; 0x60
					buffer_append_float32_auto(send_buffer, mcconf->si_gear_ratio, &ind);
 80040e8:	f001 fb88 	bl	80057fc <buffer_append_float32_auto>
					buffer_append_float32_auto(send_buffer, mcconf->si_wheel_diameter, &ind);
 80040ec:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 80040f0:	a81a      	add	r0, sp, #104	; 0x68
 80040f2:	aa18      	add	r2, sp, #96	; 0x60
 80040f4:	f001 fb82 	bl	80057fc <buffer_append_float32_auto>
					reply_func(send_buffer, ind);
 80040f8:	9918      	ldr	r1, [sp, #96]	; 0x60
 80040fa:	a81a      	add	r0, sp, #104	; 0x68
 80040fc:	47a0      	blx	r4
				} break;
 80040fe:	e5a5      	b.n	8003c4c <commands_process_packet+0x27c>
					send_buffer[ind++] = COMM_GET_DECODED_PPM;
 8004100:	2101      	movs	r1, #1
 8004102:	231f      	movs	r3, #31
 8004104:	9118      	str	r1, [sp, #96]	; 0x60
					buffer_append_int32(send_buffer, 0, &ind);
 8004106:	aa18      	add	r2, sp, #96	; 0x60
 8004108:	2100      	movs	r1, #0
 800410a:	a81a      	add	r0, sp, #104	; 0x68
					send_buffer[ind++] = COMM_GET_DECODED_PPM;
 800410c:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
					buffer_append_int32(send_buffer, 0, &ind);
 8004110:	e79a      	b.n	8004048 <commands_process_packet+0x678>
				mc_configuration *mcconf = pvPortMalloc(sizeof(mc_configuration));
 8004112:	f44f 70c6 	mov.w	r0, #396	; 0x18c
 8004116:	f007 ffa3 	bl	800c060 <pvPortMalloc>
 800411a:	4607      	mov	r7, r0
				*mcconf = *mc_interface_get_configuration();
 800411c:	f001 fcb8 	bl	8005a90 <mc_interface_get_configuration>
 8004120:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8004124:	4601      	mov	r1, r0
 8004126:	4638      	mov	r0, r7
 8004128:	f00a fa36 	bl	800e598 <memcpy>
				if (confgenerator_deserialize_mcconf(data, mcconf)) {
 800412c:	4639      	mov	r1, r7
 800412e:	4628      	mov	r0, r5
 8004130:	f002 f950 	bl	80063d4 <confgenerator_deserialize_mcconf>
 8004134:	2800      	cmp	r0, #0
 8004136:	f040 82a0 	bne.w	800467a <commands_process_packet+0xcaa>
 800413a:	ae1a      	add	r6, sp, #104	; 0x68
				send_buffer[ind++] = packet_id;
 800413c:	230d      	movs	r3, #13
				reply_func(send_buffer, ind);
 800413e:	4630      	mov	r0, r6
 8004140:	2101      	movs	r1, #1
				send_buffer[ind++] = packet_id;
 8004142:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
				reply_func(send_buffer, ind);
 8004146:	47a0      	blx	r4
				vPortFree(mcconf);
 8004148:	4638      	mov	r0, r7
 800414a:	f008 f843 	bl	800c1d4 <vPortFree>
				} break;
 800414e:	e57d      	b.n	8003c4c <commands_process_packet+0x27c>
					send_buffer[ind++] = packet_id;
 8004150:	2325      	movs	r3, #37	; 0x25
					reply_func(send_buffer, ind);
 8004152:	2102      	movs	r1, #2
 8004154:	a81a      	add	r0, sp, #104	; 0x68
					send_buffer[ind++] = packet_id;
 8004156:	f8ad 3068 	strh.w	r3, [sp, #104]	; 0x68
					reply_func(send_buffer, ind);
 800415a:	47a0      	blx	r4
				} break;
 800415c:	e576      	b.n	8003c4c <commands_process_packet+0x27c>
					send_buffer[ind++] = COMM_GPD_BUFFER_SIZE_LEFT;
 800415e:	2101      	movs	r1, #1
 8004160:	2328      	movs	r3, #40	; 0x28
 8004162:	9118      	str	r1, [sp, #96]	; 0x60
					buffer_append_int32(send_buffer, 128, &ind);
 8004164:	a81a      	add	r0, sp, #104	; 0x68
 8004166:	2180      	movs	r1, #128	; 0x80
 8004168:	aa18      	add	r2, sp, #96	; 0x60
 800416a:	e72d      	b.n	8003fc8 <commands_process_packet+0x5f8>
					int32_t ind = 0;
 800416c:	2300      	movs	r3, #0
					bool res = tune_mcpwm_foc_hall_detect(buffer_get_int32(data, &ind), hall_tab);
 800416e:	a917      	add	r1, sp, #92	; 0x5c
 8004170:	4628      	mov	r0, r5
					int32_t ind = 0;
 8004172:	9317      	str	r3, [sp, #92]	; 0x5c
					bool res = tune_mcpwm_foc_hall_detect(buffer_get_int32(data, &ind), hall_tab);
 8004174:	f001 fb9e 	bl	80058b4 <buffer_get_int32>
 8004178:	f7fc fd9c 	bl	8000cb4 <__aeabi_i2f>
 800417c:	a918      	add	r1, sp, #96	; 0x60
 800417e:	f002 fe0f 	bl	8006da0 <tune_mcpwm_foc_hall_detect>
					send_buffer[ind++] = res ? 0 : 1;
 8004182:	250a      	movs	r5, #10
					bool res = tune_mcpwm_foc_hall_detect(buffer_get_int32(data, &ind), hall_tab);
 8004184:	4602      	mov	r2, r0
					send_buffer[ind++] = COMM_DETECT_HALL_FOC;
 8004186:	261c      	movs	r6, #28
					memcpy(send_buffer + ind, hall_tab, 8);
 8004188:	ab18      	add	r3, sp, #96	; 0x60
 800418a:	cb03      	ldmia	r3!, {r0, r1}
					send_buffer[ind++] = res ? 0 : 1;
 800418c:	f082 0301 	eor.w	r3, r2, #1
					memcpy(send_buffer + ind, hall_tab, 8);
 8004190:	f8cd 0069 	str.w	r0, [sp, #105]	; 0x69
 8004194:	f8cd 106d 	str.w	r1, [sp, #109]	; 0x6d
					reply_func(send_buffer, ind);
 8004198:	a81a      	add	r0, sp, #104	; 0x68
 800419a:	4629      	mov	r1, r5
					send_buffer[ind++] = res ? 0 : 1;
 800419c:	f88d 3071 	strb.w	r3, [sp, #113]	; 0x71
 80041a0:	9517      	str	r5, [sp, #92]	; 0x5c
					send_buffer[ind++] = COMM_DETECT_HALL_FOC;
 80041a2:	f88d 6068 	strb.w	r6, [sp, #104]	; 0x68
					reply_func(send_buffer, ind);
 80041a6:	47a0      	blx	r4
				} break;
 80041a8:	e550      	b.n	8003c4c <commands_process_packet+0x27c>
					int32_t ind = 0;
 80041aa:	2300      	movs	r3, #0
					VescToSTM_set_odometer(buffer_get_uint32(data, &ind));
 80041ac:	a91a      	add	r1, sp, #104	; 0x68
 80041ae:	4628      	mov	r0, r5
					int32_t ind = 0;
 80041b0:	931a      	str	r3, [sp, #104]	; 0x68
					VescToSTM_set_odometer(buffer_get_uint32(data, &ind));
 80041b2:	f001 fb91 	bl	80058d8 <buffer_get_uint32>
 80041b6:	f000 ffcf 	bl	8005158 <VescToSTM_set_odometer>
					VescToSTM_timeout_reset();
 80041ba:	f000 fca5 	bl	8004b08 <VescToSTM_timeout_reset>
				} break;
 80041be:	e545      	b.n	8003c4c <commands_process_packet+0x27c>
					int32_t ind = 0;
 80041c0:	2300      	movs	r3, #0
					float current = buffer_get_float32(data, 1e3, &ind);
 80041c2:	4941      	ldr	r1, [pc, #260]	; (80042c8 <commands_process_packet+0x8f8>)
 80041c4:	aa15      	add	r2, sp, #84	; 0x54
 80041c6:	4628      	mov	r0, r5
					int32_t ind = 0;
 80041c8:	9315      	str	r3, [sp, #84]	; 0x54
					float current = buffer_get_float32(data, 1e3, &ind);
 80041ca:	f001 fba9 	bl	8005920 <buffer_get_float32>
					float erpm_per_sec = buffer_get_float32(data, 1e3, &ind);
 80041ce:	493e      	ldr	r1, [pc, #248]	; (80042c8 <commands_process_packet+0x8f8>)
 80041d0:	aa15      	add	r2, sp, #84	; 0x54
					float current = buffer_get_float32(data, 1e3, &ind);
 80041d2:	4606      	mov	r6, r0
					float erpm_per_sec = buffer_get_float32(data, 1e3, &ind);
 80041d4:	4628      	mov	r0, r5
 80041d6:	f001 fba3 	bl	8005920 <buffer_get_float32>
					float duty = buffer_get_float32(data, 1e3, &ind);
 80041da:	493b      	ldr	r1, [pc, #236]	; (80042c8 <commands_process_packet+0x8f8>)
 80041dc:	aa15      	add	r2, sp, #84	; 0x54
					float erpm_per_sec = buffer_get_float32(data, 1e3, &ind);
 80041de:	4681      	mov	r9, r0
					float duty = buffer_get_float32(data, 1e3, &ind);
 80041e0:	4628      	mov	r0, r5
 80041e2:	f001 fb9d 	bl	8005920 <buffer_get_float32>
					float resistance = buffer_get_float32(data, 1e6, &ind);
 80041e6:	aa15      	add	r2, sp, #84	; 0x54
					float duty = buffer_get_float32(data, 1e3, &ind);
 80041e8:	4680      	mov	r8, r0
					float resistance = buffer_get_float32(data, 1e6, &ind);
 80041ea:	4938      	ldr	r1, [pc, #224]	; (80042cc <commands_process_packet+0x8fc>)
 80041ec:	4628      	mov	r0, r5
 80041ee:	f001 fb97 	bl	8005920 <buffer_get_float32>
					if (len >= (uint32_t)ind + 4) {
 80041f2:	9a15      	ldr	r2, [sp, #84]	; 0x54
					float resistance = buffer_get_float32(data, 1e6, &ind);
 80041f4:	4682      	mov	sl, r0
					if (len >= (uint32_t)ind + 4) {
 80041f6:	3204      	adds	r2, #4
 80041f8:	42ba      	cmp	r2, r7
 80041fa:	f240 826f 	bls.w	80046dc <commands_process_packet+0xd0c>
					float inductance = 0.0;
 80041fe:	2000      	movs	r0, #0
					bool res = tune_foc_measure_flux_linkage_openloop(current, duty,
 8004200:	ad18      	add	r5, sp, #96	; 0x60
 8004202:	9503      	str	r5, [sp, #12]
 8004204:	af17      	add	r7, sp, #92	; 0x5c
 8004206:	ad16      	add	r5, sp, #88	; 0x58
 8004208:	4641      	mov	r1, r8
 800420a:	e9cd 5701 	strd	r5, r7, [sp, #4]
 800420e:	9000      	str	r0, [sp, #0]
 8004210:	4653      	mov	r3, sl
 8004212:	464a      	mov	r2, r9
 8004214:	4630      	mov	r0, r6
 8004216:	f003 fb7f 	bl	8007918 <tune_foc_measure_flux_linkage_openloop>
					if (undriven_samples > 60) {
 800421a:	492d      	ldr	r1, [pc, #180]	; (80042d0 <commands_process_packet+0x900>)
					bool res = tune_foc_measure_flux_linkage_openloop(current, duty,
 800421c:	4605      	mov	r5, r0
					if (undriven_samples > 60) {
 800421e:	9818      	ldr	r0, [sp, #96]	; 0x60
 8004220:	f7fc ff58 	bl	80010d4 <__aeabi_fcmpgt>
 8004224:	b108      	cbz	r0, 800422a <commands_process_packet+0x85a>
						linkage = linkage_undriven;
 8004226:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004228:	9316      	str	r3, [sp, #88]	; 0x58
					if (!res) {
 800422a:	2d00      	cmp	r5, #0
 800422c:	f000 81be 	beq.w	80045ac <commands_process_packet+0xbdc>
 8004230:	9916      	ldr	r1, [sp, #88]	; 0x58
					send_buffer[ind++] = COMM_DETECT_MOTOR_FLUX_LINKAGE_OPENLOOP;
 8004232:	2201      	movs	r2, #1
 8004234:	2539      	movs	r5, #57	; 0x39
					buffer_append_float32(send_buffer, linkage, 1e7, &ind);
 8004236:	a81a      	add	r0, sp, #104	; 0x68
					send_buffer[ind++] = COMM_DETECT_MOTOR_FLUX_LINKAGE_OPENLOOP;
 8004238:	9215      	str	r2, [sp, #84]	; 0x54
					buffer_append_float32(send_buffer, linkage, 1e7, &ind);
 800423a:	ab15      	add	r3, sp, #84	; 0x54
 800423c:	4a25      	ldr	r2, [pc, #148]	; (80042d4 <commands_process_packet+0x904>)
					send_buffer[ind++] = COMM_DETECT_MOTOR_FLUX_LINKAGE_OPENLOOP;
 800423e:	f88d 5068 	strb.w	r5, [sp, #104]	; 0x68
					buffer_append_float32(send_buffer, linkage, 1e7, &ind);
 8004242:	f001 fabd 	bl	80057c0 <buffer_append_float32>
					reply_func(send_buffer, ind);
 8004246:	9915      	ldr	r1, [sp, #84]	; 0x54
 8004248:	a81a      	add	r0, sp, #104	; 0x68
 800424a:	47a0      	blx	r4
				} break;
 800424c:	e4fe      	b.n	8003c4c <commands_process_packet+0x27c>
				int32_t ind = 0;
 800424e:	2300      	movs	r3, #0
				VescToSTM_set_handbrake(buffer_get_float32(data, 1e3, &ind));
 8004250:	491d      	ldr	r1, [pc, #116]	; (80042c8 <commands_process_packet+0x8f8>)
 8004252:	aa1a      	add	r2, sp, #104	; 0x68
 8004254:	4628      	mov	r0, r5
				int32_t ind = 0;
 8004256:	931a      	str	r3, [sp, #104]	; 0x68
				VescToSTM_set_handbrake(buffer_get_float32(data, 1e3, &ind));
 8004258:	f001 fb62 	bl	8005920 <buffer_get_float32>
 800425c:	f000 ffcc 	bl	80051f8 <VescToSTM_set_handbrake>
				VescToSTM_timeout_reset();
 8004260:	f000 fc52 	bl	8004b08 <VescToSTM_timeout_reset>
			} break;
 8004264:	e4f2      	b.n	8003c4c <commands_process_packet+0x27c>
					int32_t ind = 0;
 8004266:	2300      	movs	r3, #0
					float start = buffer_get_float32(data, 1e3, &ind);
 8004268:	4628      	mov	r0, r5
 800426a:	4917      	ldr	r1, [pc, #92]	; (80042c8 <commands_process_packet+0x8f8>)
 800426c:	aa18      	add	r2, sp, #96	; 0x60
					int32_t ind = 0;
 800426e:	9318      	str	r3, [sp, #96]	; 0x60
					float start = buffer_get_float32(data, 1e3, &ind);
 8004270:	f001 fb56 	bl	8005920 <buffer_get_float32>
					float end = buffer_get_float32(data, 1e3, &ind);
 8004274:	4914      	ldr	r1, [pc, #80]	; (80042c8 <commands_process_packet+0x8f8>)
					float start = buffer_get_float32(data, 1e3, &ind);
 8004276:	4606      	mov	r6, r0
					float end = buffer_get_float32(data, 1e3, &ind);
 8004278:	aa18      	add	r2, sp, #96	; 0x60
 800427a:	4628      	mov	r0, r5
 800427c:	f001 fb50 	bl	8005920 <buffer_get_float32>
					if (mcconf->l_battery_cut_start != start || mcconf->l_battery_cut_end != end) {
 8004280:	f8df a040 	ldr.w	sl, [pc, #64]	; 80042c4 <commands_process_packet+0x8f4>
					float end = buffer_get_float32(data, 1e3, &ind);
 8004284:	4605      	mov	r5, r0
					if (mcconf->l_battery_cut_start != start || mcconf->l_battery_cut_end != end) {
 8004286:	4631      	mov	r1, r6
 8004288:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
 800428c:	f7fc fefa 	bl	8001084 <__aeabi_fcmpeq>
 8004290:	b128      	cbz	r0, 800429e <commands_process_packet+0x8ce>
 8004292:	4629      	mov	r1, r5
 8004294:	f8da 0034 	ldr.w	r0, [sl, #52]	; 0x34
 8004298:	f7fc fef4 	bl	8001084 <__aeabi_fcmpeq>
 800429c:	b918      	cbnz	r0, 80042a6 <commands_process_packet+0x8d6>
						mcconf->l_battery_cut_start = start;
 800429e:	f8ca 6030 	str.w	r6, [sl, #48]	; 0x30
						mcconf->l_battery_cut_end = end;
 80042a2:	f8ca 5034 	str.w	r5, [sl, #52]	; 0x34
					send_buffer[ind++] = packet_id;
 80042a6:	2356      	movs	r3, #86	; 0x56
 80042a8:	2101      	movs	r1, #1
					reply_func(send_buffer, ind);
 80042aa:	a81a      	add	r0, sp, #104	; 0x68
					send_buffer[ind++] = packet_id;
 80042ac:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80042b0:	9118      	str	r1, [sp, #96]	; 0x60
					reply_func(send_buffer, ind);
 80042b2:	47a0      	blx	r4
				} break;
 80042b4:	e4ca      	b.n	8003c4c <commands_process_packet+0x27c>
 80042b6:	bf00      	nop
 80042b8:	00000000 	.word	0x00000000
 80042bc:	412e8480 	.word	0x412e8480
 80042c0:	200033b0 	.word	0x200033b0
 80042c4:	20003dc4 	.word	0x20003dc4
 80042c8:	447a0000 	.word	0x447a0000
 80042cc:	49742400 	.word	0x49742400
 80042d0:	42700000 	.word	0x42700000
 80042d4:	4b189680 	.word	0x4b189680
		send_buffer[ind++] = COMM_FW_VERSION;
 80042d8:	f44f 61a0 	mov.w	r1, #1280	; 0x500
		send_buffer[ind++] = FW_VERSION_MINOR;
 80042dc:	2202      	movs	r2, #2
		strcpy((char*)(send_buffer + ind), HW_NAME);
 80042de:	4bb5      	ldr	r3, [pc, #724]	; (80045b4 <commands_process_packet+0xbe4>)
		send_buffer[ind++] = COMM_FW_VERSION;
 80042e0:	f8ad 1068 	strh.w	r1, [sp, #104]	; 0x68
		strcpy((char*)(send_buffer + ind), HW_NAME);
 80042e4:	881d      	ldrh	r5, [r3, #0]
 80042e6:	789b      	ldrb	r3, [r3, #2]
		ind += VescToSTM_get_uid(send_buffer + ind, 12);
 80042e8:	210c      	movs	r1, #12
 80042ea:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
		strcpy((char*)(send_buffer + ind), HW_NAME);
 80042ee:	f8ad 506b 	strh.w	r5, [sp, #107]	; 0x6b
 80042f2:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
		send_buffer[ind++] = FW_VERSION_MINOR;
 80042f6:	f88d 206a 	strb.w	r2, [sp, #106]	; 0x6a
		ind += VescToSTM_get_uid(send_buffer + ind, 12);
 80042fa:	f000 fbe5 	bl	8004ac8 <VescToSTM_get_uid>
		send_buffer[ind++] = 1;
 80042fe:	2501      	movs	r5, #1
		ind += VescToSTM_get_uid(send_buffer + ind, 12);
 8004300:	4601      	mov	r1, r0
		fw_version_sent_cnt++;
 8004302:	4aad      	ldr	r2, [pc, #692]	; (80045b8 <commands_process_packet+0xbe8>)
		ind += VescToSTM_get_uid(send_buffer + ind, 12);
 8004304:	1d83      	adds	r3, r0, #6
		strcpy((char*)(send_buffer + ind), HW_NAME);
 8004306:	a81a      	add	r0, sp, #104	; 0x68
		send_buffer[ind++] = 1;
 8004308:	50c5      	str	r5, [r0, r3]
		fw_version_sent_cnt++;
 800430a:	6813      	ldr	r3, [r2, #0]
		reply_func(send_buffer, ind);
 800430c:	310a      	adds	r1, #10
		fw_version_sent_cnt++;
 800430e:	442b      	add	r3, r5
 8004310:	6013      	str	r3, [r2, #0]
		reply_func(send_buffer, ind);
 8004312:	47a0      	blx	r4
		} break;
 8004314:	e49a      	b.n	8003c4c <commands_process_packet+0x27c>
					send_buffer[ind++] = packet_id;
 8004316:	2241      	movs	r2, #65	; 0x41
					int32_t ind2 = 0;
 8004318:	2300      	movs	r3, #0
					send_buffer[ind++] = packet_id;
 800431a:	2601      	movs	r6, #1
					uint32_t mask = buffer_get_uint16(data, &ind2);
 800431c:	4628      	mov	r0, r5
 800431e:	a918      	add	r1, sp, #96	; 0x60
					send_buffer[ind++] = packet_id;
 8004320:	9617      	str	r6, [sp, #92]	; 0x5c
 8004322:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
					int32_t ind2 = 0;
 8004326:	9318      	str	r3, [sp, #96]	; 0x60
					uint32_t mask = buffer_get_uint16(data, &ind2);
 8004328:	f001 faba 	bl	80058a0 <buffer_get_uint16>
 800432c:	4605      	mov	r5, r0
					buffer_append_uint16(send_buffer, mask, &ind);
 800432e:	ae1a      	add	r6, sp, #104	; 0x68
 8004330:	4601      	mov	r1, r0
 8004332:	aa17      	add	r2, sp, #92	; 0x5c
 8004334:	4630      	mov	r0, r6
 8004336:	f001 f9f5 	bl	8005724 <buffer_append_uint16>
						if (mask & ((uint32_t)1 << i)) {
 800433a:	07ef      	lsls	r7, r5, #31
 800433c:	f100 8350 	bmi.w	80049e0 <commands_process_packet+0x1010>
 8004340:	07a8      	lsls	r0, r5, #30
 8004342:	f100 8347 	bmi.w	80049d4 <commands_process_packet+0x1004>
 8004346:	0769      	lsls	r1, r5, #29
 8004348:	f100 833e 	bmi.w	80049c8 <commands_process_packet+0xff8>
 800434c:	072a      	lsls	r2, r5, #28
 800434e:	f100 8335 	bmi.w	80049bc <commands_process_packet+0xfec>
 8004352:	06eb      	lsls	r3, r5, #27
 8004354:	f100 832c 	bmi.w	80049b0 <commands_process_packet+0xfe0>
 8004358:	06af      	lsls	r7, r5, #26
 800435a:	f100 8323 	bmi.w	80049a4 <commands_process_packet+0xfd4>
 800435e:	0668      	lsls	r0, r5, #25
 8004360:	f100 831a 	bmi.w	8004998 <commands_process_packet+0xfc8>
 8004364:	0629      	lsls	r1, r5, #24
 8004366:	f100 8311 	bmi.w	800498c <commands_process_packet+0xfbc>
 800436a:	05ea      	lsls	r2, r5, #23
 800436c:	f100 8308 	bmi.w	8004980 <commands_process_packet+0xfb0>
 8004370:	05ab      	lsls	r3, r5, #22
 8004372:	f100 82ff 	bmi.w	8004974 <commands_process_packet+0xfa4>
 8004376:	056f      	lsls	r7, r5, #21
 8004378:	f100 82f6 	bmi.w	8004968 <commands_process_packet+0xf98>
 800437c:	0528      	lsls	r0, r5, #20
 800437e:	f100 82ed 	bmi.w	800495c <commands_process_packet+0xf8c>
 8004382:	04e9      	lsls	r1, r5, #19
 8004384:	f100 82e4 	bmi.w	8004950 <commands_process_packet+0xf80>
 8004388:	04aa      	lsls	r2, r5, #18
 800438a:	f100 82db 	bmi.w	8004944 <commands_process_packet+0xf74>
 800438e:	046b      	lsls	r3, r5, #17
 8004390:	f100 82c0 	bmi.w	8004914 <commands_process_packet+0xf44>
 8004394:	0beb      	lsrs	r3, r5, #15
 8004396:	f040 82b7 	bne.w	8004908 <commands_process_packet+0xf38>
					reply_func(send_buffer, ind);
 800439a:	4630      	mov	r0, r6
 800439c:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800439e:	47a0      	blx	r4
				} break;
 80043a0:	e454      	b.n	8003c4c <commands_process_packet+0x27c>
					int32_t ind = 0;
 80043a2:	2300      	movs	r3, #0
					VescToSTM_set_current_rel(buffer_get_float32(data, 1e5, &ind));
 80043a4:	4985      	ldr	r1, [pc, #532]	; (80045bc <commands_process_packet+0xbec>)
 80043a6:	aa1a      	add	r2, sp, #104	; 0x68
 80043a8:	4628      	mov	r0, r5
					int32_t ind = 0;
 80043aa:	931a      	str	r3, [sp, #104]	; 0x68
					VescToSTM_set_current_rel(buffer_get_float32(data, 1e5, &ind));
 80043ac:	f001 fab8 	bl	8005920 <buffer_get_float32>
 80043b0:	f001 f8a8 	bl	8005504 <VescToSTM_set_current_rel>
					VescToSTM_timeout_reset();
 80043b4:	f000 fba8 	bl	8004b08 <VescToSTM_timeout_reset>
				} break;
 80043b8:	e448      	b.n	8003c4c <commands_process_packet+0x27c>
					if (ack) {
 80043ba:	7843      	ldrb	r3, [r0, #1]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f43f ac45 	beq.w	8003c4c <commands_process_packet+0x27c>
						send_buffer[ind++] = packet_id;
 80043c2:	2359      	movs	r3, #89	; 0x59
						reply_func(send_buffer, ind);
 80043c4:	2101      	movs	r1, #1
 80043c6:	a81a      	add	r0, sp, #104	; 0x68
						send_buffer[ind++] = packet_id;
 80043c8:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
						reply_func(send_buffer, ind);
 80043cc:	47a0      	blx	r4
 80043ce:	e43d      	b.n	8003c4c <commands_process_packet+0x27c>
				int32_t ind = 0;
 80043d0:	2300      	movs	r3, #0
				VescToSTM_set_brake(buffer_get_int32(data, &ind)*-1);
 80043d2:	a91a      	add	r1, sp, #104	; 0x68
 80043d4:	4628      	mov	r0, r5
				int32_t ind = 0;
 80043d6:	931a      	str	r3, [sp, #104]	; 0x68
				VescToSTM_set_brake(buffer_get_int32(data, &ind)*-1);
 80043d8:	f001 fa6c 	bl	80058b4 <buffer_get_int32>
 80043dc:	4240      	negs	r0, r0
 80043de:	f000 fc67 	bl	8004cb0 <VescToSTM_set_brake>
				VescToSTM_timeout_reset();
 80043e2:	f000 fb91 	bl	8004b08 <VescToSTM_timeout_reset>
			} break;
 80043e6:	e431      	b.n	8003c4c <commands_process_packet+0x27c>
				int32_t ind = 0;
 80043e8:	2300      	movs	r3, #0
				VescToSTM_set_speed(buffer_get_int32(data, &ind));
 80043ea:	a91a      	add	r1, sp, #104	; 0x68
 80043ec:	4628      	mov	r0, r5
				int32_t ind = 0;
 80043ee:	931a      	str	r3, [sp, #104]	; 0x68
				VescToSTM_set_speed(buffer_get_int32(data, &ind));
 80043f0:	f001 fa60 	bl	80058b4 <buffer_get_int32>
 80043f4:	f000 fca0 	bl	8004d38 <VescToSTM_set_speed>
				VescToSTM_timeout_reset();
 80043f8:	f000 fb86 	bl	8004b08 <VescToSTM_timeout_reset>
			} break;
 80043fc:	e426      	b.n	8003c4c <commands_process_packet+0x27c>
  __ASM volatile ("dsb 0xF":::"memory");
 80043fe:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004402:	496f      	ldr	r1, [pc, #444]	; (80045c0 <commands_process_packet+0xbf0>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004404:	4b6f      	ldr	r3, [pc, #444]	; (80045c4 <commands_process_packet+0xbf4>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004406:	68ca      	ldr	r2, [r1, #12]
 8004408:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800440c:	4313      	orrs	r3, r2
 800440e:	60cb      	str	r3, [r1, #12]
 8004410:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004414:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8004416:	e7fd      	b.n	8004414 <commands_process_packet+0xa44>
				buffer_append_float32(send_buffer, VescToSTM_get_id(), 1e2, &ind);
 8004418:	f000 fd6e 	bl	8004ef8 <VescToSTM_get_id>
 800441c:	465b      	mov	r3, fp
 800441e:	4601      	mov	r1, r0
 8004420:	4a69      	ldr	r2, [pc, #420]	; (80045c8 <commands_process_packet+0xbf8>)
 8004422:	486a      	ldr	r0, [pc, #424]	; (80045cc <commands_process_packet+0xbfc>)
 8004424:	f001 f9cc 	bl	80057c0 <buffer_append_float32>
 8004428:	e55a      	b.n	8003ee0 <commands_process_packet+0x510>
				buffer_append_float32(send_buffer, VescToSTM_get_input_current(), 1e2, &ind);
 800442a:	f000 fd4b 	bl	8004ec4 <VescToSTM_get_input_current>
 800442e:	465b      	mov	r3, fp
 8004430:	4601      	mov	r1, r0
 8004432:	4a65      	ldr	r2, [pc, #404]	; (80045c8 <commands_process_packet+0xbf8>)
 8004434:	4865      	ldr	r0, [pc, #404]	; (80045cc <commands_process_packet+0xbfc>)
 8004436:	f001 f9c3 	bl	80057c0 <buffer_append_float32>
			if (mask & ((uint32_t)1 << 4)) {
 800443a:	2e00      	cmp	r6, #0
 800443c:	f43f ad50 	beq.w	8003ee0 <commands_process_packet+0x510>
 8004440:	e7ea      	b.n	8004418 <commands_process_packet+0xa48>
				buffer_append_float32(send_buffer, VescToSTM_get_phase_current(), 1e2, &ind);
 8004442:	f000 fd0d 	bl	8004e60 <VescToSTM_get_phase_current>
 8004446:	465b      	mov	r3, fp
 8004448:	4601      	mov	r1, r0
 800444a:	4a5f      	ldr	r2, [pc, #380]	; (80045c8 <commands_process_packet+0xbf8>)
 800444c:	485f      	ldr	r0, [pc, #380]	; (80045cc <commands_process_packet+0xbfc>)
 800444e:	f001 f9b7 	bl	80057c0 <buffer_append_float32>
			if (mask & ((uint32_t)1 << 3)) {
 8004452:	f1b8 0f00 	cmp.w	r8, #0
 8004456:	f43f ad40 	beq.w	8003eda <commands_process_packet+0x50a>
 800445a:	e7e6      	b.n	800442a <commands_process_packet+0xa5a>
				buffer_append_float16(send_buffer, 0, 1e1, &ind);
 800445c:	465b      	mov	r3, fp
 800445e:	2100      	movs	r1, #0
 8004460:	4a5b      	ldr	r2, [pc, #364]	; (80045d0 <commands_process_packet+0xc00>)
 8004462:	485a      	ldr	r0, [pc, #360]	; (80045cc <commands_process_packet+0xbfc>)
 8004464:	f001 f996 	bl	8005794 <buffer_append_float16>
			if (mask & ((uint32_t)1 << 2)) {
 8004468:	f1b9 0f00 	cmp.w	r9, #0
 800446c:	f43f ad31 	beq.w	8003ed2 <commands_process_packet+0x502>
 8004470:	e7e7      	b.n	8004442 <commands_process_packet+0xa72>
						int32_t ind2 = 0;
 8004472:	2300      	movs	r3, #0
						mask = buffer_get_uint32(data, &ind2);
 8004474:	4628      	mov	r0, r5
 8004476:	a91a      	add	r1, sp, #104	; 0x68
						int32_t ind2 = 0;
 8004478:	931a      	str	r3, [sp, #104]	; 0x68
						mask = buffer_get_uint32(data, &ind2);
 800447a:	f001 fa2d 	bl	80058d8 <buffer_get_uint32>
						buffer_append_uint32(send_buffer, mask, &ind);
 800447e:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
						mask = buffer_get_uint32(data, &ind2);
 8004482:	4601      	mov	r1, r0
						buffer_append_uint32(send_buffer, mask, &ind);
 8004484:	9004      	str	r0, [sp, #16]
 8004486:	465a      	mov	r2, fp
 8004488:	4638      	mov	r0, r7
 800448a:	f001 f96d 	bl	8005768 <buffer_append_uint32>
					if (mask & ((uint32_t)1 << 0)) {
 800448e:	9904      	ldr	r1, [sp, #16]
 8004490:	f001 0340 	and.w	r3, r1, #64	; 0x40
 8004494:	9304      	str	r3, [sp, #16]
 8004496:	f001 0380 	and.w	r3, r1, #128	; 0x80
 800449a:	9305      	str	r3, [sp, #20]
 800449c:	f401 7380 	and.w	r3, r1, #256	; 0x100
 80044a0:	9306      	str	r3, [sp, #24]
 80044a2:	f401 7300 	and.w	r3, r1, #512	; 0x200
 80044a6:	9307      	str	r3, [sp, #28]
 80044a8:	f401 6380 	and.w	r3, r1, #1024	; 0x400
 80044ac:	9308      	str	r3, [sp, #32]
 80044ae:	f401 6300 	and.w	r3, r1, #2048	; 0x800
 80044b2:	9309      	str	r3, [sp, #36]	; 0x24
 80044b4:	f401 5380 	and.w	r3, r1, #4096	; 0x1000
 80044b8:	930a      	str	r3, [sp, #40]	; 0x28
 80044ba:	f401 5300 	and.w	r3, r1, #8192	; 0x2000
 80044be:	930b      	str	r3, [sp, #44]	; 0x2c
 80044c0:	f401 4380 	and.w	r3, r1, #16384	; 0x4000
 80044c4:	930c      	str	r3, [sp, #48]	; 0x30
 80044c6:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
 80044ca:	930d      	str	r3, [sp, #52]	; 0x34
 80044cc:	f401 3380 	and.w	r3, r1, #65536	; 0x10000
 80044d0:	930e      	str	r3, [sp, #56]	; 0x38
 80044d2:	f401 3300 	and.w	r3, r1, #131072	; 0x20000
 80044d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80044d8:	f401 2380 	and.w	r3, r1, #262144	; 0x40000
 80044dc:	9310      	str	r3, [sp, #64]	; 0x40
 80044de:	f401 2300 	and.w	r3, r1, #524288	; 0x80000
 80044e2:	f001 0a02 	and.w	sl, r1, #2
 80044e6:	f001 0904 	and.w	r9, r1, #4
 80044ea:	f001 0808 	and.w	r8, r1, #8
 80044ee:	f001 0610 	and.w	r6, r1, #16
 80044f2:	f001 0520 	and.w	r5, r1, #32
 80044f6:	9311      	str	r3, [sp, #68]	; 0x44
 80044f8:	f401 1380 	and.w	r3, r1, #1048576	; 0x100000
 80044fc:	07c9      	lsls	r1, r1, #31
 80044fe:	9312      	str	r3, [sp, #72]	; 0x48
 8004500:	f53f ab30 	bmi.w	8003b64 <commands_process_packet+0x194>
					if (mask & ((uint32_t)1 << 1)) {
 8004504:	f1ba 0f00 	cmp.w	sl, #0
 8004508:	f43f ab3d 	beq.w	8003b86 <commands_process_packet+0x1b6>
 800450c:	f7ff bb35 	b.w	8003b7a <commands_process_packet+0x1aa>
				int32_t ind2 = 0;
 8004510:	2300      	movs	r3, #0
				mask = buffer_get_uint32(data, &ind2);
 8004512:	4628      	mov	r0, r5
 8004514:	a91a      	add	r1, sp, #104	; 0x68
				int32_t ind2 = 0;
 8004516:	931a      	str	r3, [sp, #104]	; 0x68
				mask = buffer_get_uint32(data, &ind2);
 8004518:	f001 f9de 	bl	80058d8 <buffer_get_uint32>
				buffer_append_uint32(send_buffer, mask, &ind);
 800451c:	f10d 0b60 	add.w	fp, sp, #96	; 0x60
				mask = buffer_get_uint32(data, &ind2);
 8004520:	4601      	mov	r1, r0
				buffer_append_uint32(send_buffer, mask, &ind);
 8004522:	9004      	str	r0, [sp, #16]
 8004524:	465a      	mov	r2, fp
 8004526:	4638      	mov	r0, r7
 8004528:	f001 f91e 	bl	8005768 <buffer_append_uint32>
			if (mask & ((uint32_t)1 << 0)) {
 800452c:	9904      	ldr	r1, [sp, #16]
 800452e:	f001 0340 	and.w	r3, r1, #64	; 0x40
 8004532:	9304      	str	r3, [sp, #16]
 8004534:	f001 0380 	and.w	r3, r1, #128	; 0x80
 8004538:	9305      	str	r3, [sp, #20]
 800453a:	f401 7380 	and.w	r3, r1, #256	; 0x100
 800453e:	9306      	str	r3, [sp, #24]
 8004540:	f401 7300 	and.w	r3, r1, #512	; 0x200
 8004544:	9307      	str	r3, [sp, #28]
 8004546:	f401 6380 	and.w	r3, r1, #1024	; 0x400
 800454a:	9308      	str	r3, [sp, #32]
 800454c:	f401 6300 	and.w	r3, r1, #2048	; 0x800
 8004550:	9309      	str	r3, [sp, #36]	; 0x24
 8004552:	f401 5380 	and.w	r3, r1, #4096	; 0x1000
 8004556:	930a      	str	r3, [sp, #40]	; 0x28
 8004558:	f401 5300 	and.w	r3, r1, #8192	; 0x2000
 800455c:	930b      	str	r3, [sp, #44]	; 0x2c
 800455e:	f401 4380 	and.w	r3, r1, #16384	; 0x4000
 8004562:	930c      	str	r3, [sp, #48]	; 0x30
 8004564:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
 8004568:	930d      	str	r3, [sp, #52]	; 0x34
 800456a:	f401 3380 	and.w	r3, r1, #65536	; 0x10000
 800456e:	930e      	str	r3, [sp, #56]	; 0x38
 8004570:	f401 3300 	and.w	r3, r1, #131072	; 0x20000
 8004574:	930f      	str	r3, [sp, #60]	; 0x3c
 8004576:	f401 2380 	and.w	r3, r1, #262144	; 0x40000
 800457a:	9310      	str	r3, [sp, #64]	; 0x40
 800457c:	f401 2300 	and.w	r3, r1, #524288	; 0x80000
 8004580:	9311      	str	r3, [sp, #68]	; 0x44
 8004582:	f401 1380 	and.w	r3, r1, #1048576	; 0x100000
 8004586:	9312      	str	r3, [sp, #72]	; 0x48
 8004588:	07cb      	lsls	r3, r1, #31
 800458a:	f001 0a02 	and.w	sl, r1, #2
 800458e:	f001 0904 	and.w	r9, r1, #4
 8004592:	f001 0808 	and.w	r8, r1, #8
 8004596:	f001 0610 	and.w	r6, r1, #16
 800459a:	f001 0520 	and.w	r5, r1, #32
 800459e:	f53f ac88 	bmi.w	8003eb2 <commands_process_packet+0x4e2>
			if (mask & ((uint32_t)1 << 1)) {
 80045a2:	f1ba 0f00 	cmp.w	sl, #0
 80045a6:	f43f ac90 	beq.w	8003eca <commands_process_packet+0x4fa>
 80045aa:	e757      	b.n	800445c <commands_process_packet+0xa8c>
						linkage = 0.0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	4619      	mov	r1, r3
 80045b0:	9316      	str	r3, [sp, #88]	; 0x58
 80045b2:	e63e      	b.n	8004232 <commands_process_packet+0x862>
 80045b4:	08010af8 	.word	0x08010af8
 80045b8:	20000538 	.word	0x20000538
 80045bc:	47c35000 	.word	0x47c35000
 80045c0:	e000ed00 	.word	0xe000ed00
 80045c4:	05fa0004 	.word	0x05fa0004
 80045c8:	42c80000 	.word	0x42c80000
 80045cc:	20000570 	.word	0x20000570
 80045d0:	41200000 	.word	0x41200000
						const float fact = ((mcconf->si_motor_poles / 2.0) * 60.0 *
 80045d4:	f89a 0170 	ldrb.w	r0, [sl, #368]	; 0x170
 80045d8:	f7fb ff16 	bl	8000408 <__aeabi_i2d>
 80045dc:	4680      	mov	r8, r0
								mcconf->si_gear_ratio) / (mcconf->si_wheel_diameter * M_PI);
 80045de:	f8da 0174 	ldr.w	r0, [sl, #372]	; 0x174
						const float fact = ((mcconf->si_motor_poles / 2.0) * 60.0 *
 80045e2:	4689      	mov	r9, r1
								mcconf->si_gear_ratio) / (mcconf->si_wheel_diameter * M_PI);
 80045e4:	f7fb ff22 	bl	800042c <__aeabi_f2d>
 80045e8:	a3cd      	add	r3, pc, #820	; (adr r3, 8004920 <commands_process_packet+0xf50>)
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f7fb ff75 	bl	80004dc <__aeabi_dmul>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	4640      	mov	r0, r8
 80045f8:	4649      	mov	r1, r9
 80045fa:	f7fb ff6f 	bl	80004dc <__aeabi_dmul>
 80045fe:	4680      	mov	r8, r0
 8004600:	f8da 0178 	ldr.w	r0, [sl, #376]	; 0x178
 8004604:	4689      	mov	r9, r1
 8004606:	f7fb ff11 	bl	800042c <__aeabi_f2d>
 800460a:	4602      	mov	r2, r0
 800460c:	460b      	mov	r3, r1
 800460e:	4640      	mov	r0, r8
 8004610:	4649      	mov	r1, r9
 8004612:	f7fc f88d 	bl	8000730 <__aeabi_ddiv>
						const float fact = ((mcconf->si_motor_poles / 2.0) * 60.0 *
 8004616:	f7fc fa43 	bl	8000aa0 <__aeabi_d2f>
 800461a:	4680      	mov	r8, r0
						mcconf->l_min_erpm = buffer_get_float32_auto(data, &ind) * fact;
 800461c:	4659      	mov	r1, fp
 800461e:	4628      	mov	r0, r5
 8004620:	f001 f994 	bl	800594c <buffer_get_float32_auto>
 8004624:	4641      	mov	r1, r8
 8004626:	f7fc fb99 	bl	8000d5c <__aeabi_fmul>
 800462a:	4603      	mov	r3, r0
						mcconf->l_max_erpm = buffer_get_float32_auto(data, &ind) * fact;
 800462c:	4659      	mov	r1, fp
 800462e:	4628      	mov	r0, r5
						mcconf->l_min_erpm = buffer_get_float32_auto(data, &ind) * fact;
 8004630:	f8ca 3014 	str.w	r3, [sl, #20]
						mcconf->l_max_erpm = buffer_get_float32_auto(data, &ind) * fact;
 8004634:	f001 f98a 	bl	800594c <buffer_get_float32_auto>
 8004638:	4641      	mov	r1, r8
 800463a:	f7fc fb8f 	bl	8000d5c <__aeabi_fmul>
 800463e:	4684      	mov	ip, r0
						ind -= 8;
 8004640:	9b18      	ldr	r3, [sp, #96]	; 0x60
						buffer_append_float32_auto(data, mcconf->l_min_erpm, &ind);
 8004642:	465a      	mov	r2, fp
 8004644:	4628      	mov	r0, r5
 8004646:	f8da 1014 	ldr.w	r1, [sl, #20]
						ind -= 8;
 800464a:	3b08      	subs	r3, #8
						mcconf->l_max_erpm = buffer_get_float32_auto(data, &ind) * fact;
 800464c:	f8ca c018 	str.w	ip, [sl, #24]
						ind -= 8;
 8004650:	9318      	str	r3, [sp, #96]	; 0x60
						buffer_append_float32_auto(data, mcconf->l_min_erpm, &ind);
 8004652:	f001 f8d3 	bl	80057fc <buffer_append_float32_auto>
						buffer_append_float32_auto(data, mcconf->l_max_erpm, &ind);
 8004656:	465a      	mov	r2, fp
 8004658:	4628      	mov	r0, r5
 800465a:	f8da 1018 	ldr.w	r1, [sl, #24]
 800465e:	f001 f8cd 	bl	80057fc <buffer_append_float32_auto>
 8004662:	f7ff bb93 	b.w	8003d8c <commands_process_packet+0x3bc>
						*mcconf = *mc_interface_get_configuration();
 8004666:	f001 fa13 	bl	8005a90 <mc_interface_get_configuration>
 800466a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800466e:	4601      	mov	r1, r0
 8004670:	4620      	mov	r0, r4
 8004672:	f009 ff91 	bl	800e598 <memcpy>
 8004676:	f7ff bb2b 	b.w	8003cd0 <commands_process_packet+0x300>
					utils_truncate_number(&mcconf->l_current_max_scale , 0.0, 1.0);
 800467a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800467e:	2100      	movs	r1, #0
 8004680:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8004684:	f003 fbfa 	bl	8007e7c <utils_truncate_number>
					utils_truncate_number(&mcconf->l_current_min_scale , 0.0, 1.0);
 8004688:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800468c:	2100      	movs	r1, #0
 800468e:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8004692:	f003 fbf3 	bl	8007e7c <utils_truncate_number>
					conf_general_setup_mc(mcconf);
 8004696:	4638      	mov	r0, r7
 8004698:	f001 f9fe 	bl	8005a98 <conf_general_setup_mc>
					conf_general_store_mc_configuration(mcconf, 0);
 800469c:	2100      	movs	r1, #0
 800469e:	4638      	mov	r0, r7
 80046a0:	f001 f990 	bl	80059c4 <conf_general_store_mc_configuration>
					vTaskDelay(100);
 80046a4:	2064      	movs	r0, #100	; 0x64
 80046a6:	f009 f9cd 	bl	800da44 <vTaskDelay>
					send_buffer[ind++] = packet_id;
 80046aa:	230d      	movs	r3, #13
					reply_func(send_buffer, ind);
 80046ac:	ae1a      	add	r6, sp, #104	; 0x68
 80046ae:	4630      	mov	r0, r6
 80046b0:	2101      	movs	r1, #1
					send_buffer[ind++] = packet_id;
 80046b2:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
					reply_func(send_buffer, ind);
 80046b6:	47a0      	blx	r4
 80046b8:	e540      	b.n	800413c <commands_process_packet+0x76c>
						buffer_append_uint32(send_buffer, VescToSTM_get_odometer(), &ind);
 80046ba:	f000 fd69 	bl	8005190 <VescToSTM_get_odometer>
 80046be:	465a      	mov	r2, fp
 80046c0:	4601      	mov	r1, r0
 80046c2:	4899      	ldr	r0, [pc, #612]	; (8004928 <commands_process_packet+0xf58>)
 80046c4:	f001 f850 	bl	8005768 <buffer_append_uint32>
 80046c8:	f7ff babd 	b.w	8003c46 <commands_process_packet+0x276>
						buffer_append_float32(send_buffer, wh_batt_left, 1e3, &ind);
 80046cc:	465b      	mov	r3, fp
 80046ce:	4a97      	ldr	r2, [pc, #604]	; (800492c <commands_process_packet+0xf5c>)
 80046d0:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80046d2:	4895      	ldr	r0, [pc, #596]	; (8004928 <commands_process_packet+0xf58>)
 80046d4:	f001 f874 	bl	80057c0 <buffer_append_float32>
 80046d8:	f7ff bab1 	b.w	8003c3e <commands_process_packet+0x26e>
						inductance = buffer_get_float32(data, 1e8, &ind);
 80046dc:	4628      	mov	r0, r5
 80046de:	4994      	ldr	r1, [pc, #592]	; (8004930 <commands_process_packet+0xf60>)
 80046e0:	aa15      	add	r2, sp, #84	; 0x54
 80046e2:	f001 f91d 	bl	8005920 <buffer_get_float32>
 80046e6:	e58b      	b.n	8004200 <commands_process_packet+0x830>
						mcconf->l_in_current_min = buffer_get_float32_auto(data, &ind);
 80046e8:	4659      	mov	r1, fp
 80046ea:	4628      	mov	r0, r5
 80046ec:	f001 f92e 	bl	800594c <buffer_get_float32_auto>
 80046f0:	4603      	mov	r3, r0
						mcconf->l_in_current_max = buffer_get_float32_auto(data, &ind);
 80046f2:	4659      	mov	r1, fp
 80046f4:	4628      	mov	r0, r5
						mcconf->l_in_current_min = buffer_get_float32_auto(data, &ind);
 80046f6:	f8ca 300c 	str.w	r3, [sl, #12]
						mcconf->l_in_current_max = buffer_get_float32_auto(data, &ind);
 80046fa:	f001 f927 	bl	800594c <buffer_get_float32_auto>
 80046fe:	4607      	mov	r7, r0
 8004700:	f8ca 0008 	str.w	r0, [sl, #8]
 8004704:	f7ff bb73 	b.w	8003dee <commands_process_packet+0x41e>
						buffer_append_float16(send_buffer, VescToSTM_get_bus_voltage(), 1e1, &ind);
 8004708:	f000 fcc2 	bl	8005090 <VescToSTM_get_bus_voltage>
 800470c:	465b      	mov	r3, fp
 800470e:	4601      	mov	r1, r0
 8004710:	4a88      	ldr	r2, [pc, #544]	; (8004934 <commands_process_packet+0xf64>)
 8004712:	4885      	ldr	r0, [pc, #532]	; (8004928 <commands_process_packet+0xf58>)
 8004714:	f001 f83e 	bl	8005794 <buffer_append_float16>
 8004718:	f7ff ba5b 	b.w	8003bd2 <commands_process_packet+0x202>
						buffer_append_float32(send_buffer, VescToSTM_get_odometer(), 1e3, &ind);
 800471c:	f000 fd38 	bl	8005190 <VescToSTM_get_odometer>
 8004720:	f7fc fac4 	bl	8000cac <__aeabi_ui2f>
 8004724:	465b      	mov	r3, fp
 8004726:	4601      	mov	r1, r0
 8004728:	4a80      	ldr	r2, [pc, #512]	; (800492c <commands_process_packet+0xf5c>)
 800472a:	487f      	ldr	r0, [pc, #508]	; (8004928 <commands_process_packet+0xf58>)
 800472c:	f001 f848 	bl	80057c0 <buffer_append_float32>
 8004730:	f7ff ba4b 	b.w	8003bca <commands_process_packet+0x1fa>
				buffer_append_int32(send_buffer, VescToSTM_get_tachometer_abs_value(false), &ind);
 8004734:	2000      	movs	r0, #0
 8004736:	f000 fd53 	bl	80051e0 <VescToSTM_get_tachometer_abs_value>
 800473a:	465a      	mov	r2, fp
 800473c:	4601      	mov	r1, r0
 800473e:	487a      	ldr	r0, [pc, #488]	; (8004928 <commands_process_packet+0xf58>)
 8004740:	f000 fffc 	bl	800573c <buffer_append_int32>
 8004744:	f7ff bbf3 	b.w	8003f2e <commands_process_packet+0x55e>
				buffer_append_int32(send_buffer, VescToSTM_get_tachometer_value(false), &ind);
 8004748:	2000      	movs	r0, #0
 800474a:	f000 fd3d 	bl	80051c8 <VescToSTM_get_tachometer_value>
 800474e:	465a      	mov	r2, fp
 8004750:	4601      	mov	r1, r0
 8004752:	4875      	ldr	r0, [pc, #468]	; (8004928 <commands_process_packet+0xf58>)
 8004754:	f000 fff2 	bl	800573c <buffer_append_int32>
 8004758:	f7ff bbe5 	b.w	8003f26 <commands_process_packet+0x556>
				buffer_append_float32(send_buffer, 0, 1e4, &ind);
 800475c:	465b      	mov	r3, fp
 800475e:	2100      	movs	r1, #0
 8004760:	4a75      	ldr	r2, [pc, #468]	; (8004938 <commands_process_packet+0xf68>)
 8004762:	4871      	ldr	r0, [pc, #452]	; (8004928 <commands_process_packet+0xf58>)
 8004764:	f001 f82c 	bl	80057c0 <buffer_append_float32>
 8004768:	f7ff bbd9 	b.w	8003f1e <commands_process_packet+0x54e>
				buffer_append_float32(send_buffer, 0, 1e4, &ind);
 800476c:	465b      	mov	r3, fp
 800476e:	2100      	movs	r1, #0
 8004770:	4a71      	ldr	r2, [pc, #452]	; (8004938 <commands_process_packet+0xf68>)
 8004772:	486d      	ldr	r0, [pc, #436]	; (8004928 <commands_process_packet+0xf58>)
 8004774:	f001 f824 	bl	80057c0 <buffer_append_float32>
 8004778:	f7ff bbcd 	b.w	8003f16 <commands_process_packet+0x546>
				buffer_append_float32(send_buffer, 0, 1e4, &ind);
 800477c:	465b      	mov	r3, fp
 800477e:	2100      	movs	r1, #0
 8004780:	4a6d      	ldr	r2, [pc, #436]	; (8004938 <commands_process_packet+0xf68>)
 8004782:	4869      	ldr	r0, [pc, #420]	; (8004928 <commands_process_packet+0xf58>)
 8004784:	f001 f81c 	bl	80057c0 <buffer_append_float32>
 8004788:	f7ff bbc1 	b.w	8003f0e <commands_process_packet+0x53e>
				buffer_append_float32(send_buffer, 0, 1e4, &ind);
 800478c:	465b      	mov	r3, fp
 800478e:	2100      	movs	r1, #0
 8004790:	4a69      	ldr	r2, [pc, #420]	; (8004938 <commands_process_packet+0xf68>)
 8004792:	4865      	ldr	r0, [pc, #404]	; (8004928 <commands_process_packet+0xf58>)
 8004794:	f001 f814 	bl	80057c0 <buffer_append_float32>
 8004798:	f7ff bbb5 	b.w	8003f06 <commands_process_packet+0x536>
				buffer_append_float16(send_buffer, VescToSTM_get_bus_voltage(), 1e1, &ind);
 800479c:	f000 fc78 	bl	8005090 <VescToSTM_get_bus_voltage>
 80047a0:	465b      	mov	r3, fp
 80047a2:	4601      	mov	r1, r0
 80047a4:	4a63      	ldr	r2, [pc, #396]	; (8004934 <commands_process_packet+0xf64>)
 80047a6:	4860      	ldr	r0, [pc, #384]	; (8004928 <commands_process_packet+0xf58>)
 80047a8:	f000 fff4 	bl	8005794 <buffer_append_float16>
 80047ac:	f7ff bba7 	b.w	8003efe <commands_process_packet+0x52e>
				buffer_append_float32(send_buffer, VescToSTM_get_erpm(), 1e0, &ind);
 80047b0:	f000 fc88 	bl	80050c4 <VescToSTM_get_erpm>
 80047b4:	f7fc fa7e 	bl	8000cb4 <__aeabi_i2f>
 80047b8:	465b      	mov	r3, fp
 80047ba:	4601      	mov	r1, r0
 80047bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047c0:	4859      	ldr	r0, [pc, #356]	; (8004928 <commands_process_packet+0xf58>)
 80047c2:	f000 fffd 	bl	80057c0 <buffer_append_float32>
 80047c6:	f7ff bb96 	b.w	8003ef6 <commands_process_packet+0x526>
						buffer_append_float32(send_buffer, VescToSTM_get_erpm(), 1e0, &ind);
 80047ca:	f000 fc7b 	bl	80050c4 <VescToSTM_get_erpm>
 80047ce:	f7fc fa71 	bl	8000cb4 <__aeabi_i2f>
 80047d2:	465b      	mov	r3, fp
 80047d4:	4601      	mov	r1, r0
 80047d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80047da:	4853      	ldr	r0, [pc, #332]	; (8004928 <commands_process_packet+0xf58>)
 80047dc:	f000 fff0 	bl	80057c0 <buffer_append_float32>
 80047e0:	f7ff b9ef 	b.w	8003bc2 <commands_process_packet+0x1f2>
						send_buffer[ind++] = VescToSTM_get_fault();
 80047e4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 80047e6:	1c6b      	adds	r3, r5, #1
 80047e8:	9318      	str	r3, [sp, #96]	; 0x60
 80047ea:	f000 feed 	bl	80055c8 <VescToSTM_get_fault>
 80047ee:	5578      	strb	r0, [r7, r5]
 80047f0:	f7ff ba13 	b.w	8003c1a <commands_process_packet+0x24a>
				buffer_append_float32(send_buffer, VescToSTM_get_pid_pos_now(), 1e6, &ind);
 80047f4:	f000 f976 	bl	8004ae4 <VescToSTM_get_pid_pos_now>
 80047f8:	465b      	mov	r3, fp
 80047fa:	4601      	mov	r1, r0
 80047fc:	4a4f      	ldr	r2, [pc, #316]	; (800493c <commands_process_packet+0xf6c>)
 80047fe:	484a      	ldr	r0, [pc, #296]	; (8004928 <commands_process_packet+0xf58>)
 8004800:	f000 ffde 	bl	80057c0 <buffer_append_float32>
 8004804:	f7ff bb9b 	b.w	8003f3e <commands_process_packet+0x56e>
				send_buffer[ind++] = VescToSTM_get_fault();
 8004808:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800480a:	1c6b      	adds	r3, r5, #1
 800480c:	9318      	str	r3, [sp, #96]	; 0x60
 800480e:	f000 fedb 	bl	80055c8 <VescToSTM_get_fault>
 8004812:	5578      	strb	r0, [r7, r5]
 8004814:	f7ff bb8f 	b.w	8003f36 <commands_process_packet+0x566>
				buffer_append_float16(send_buffer, VescToSTM_get_duty_cycle_now(), 1e3, &ind);
 8004818:	f000 fe56 	bl	80054c8 <VescToSTM_get_duty_cycle_now>
 800481c:	465b      	mov	r3, fp
 800481e:	4601      	mov	r1, r0
 8004820:	4a42      	ldr	r2, [pc, #264]	; (800492c <commands_process_packet+0xf5c>)
 8004822:	4841      	ldr	r0, [pc, #260]	; (8004928 <commands_process_packet+0xf58>)
 8004824:	f000 ffb6 	bl	8005794 <buffer_append_float16>
 8004828:	f7ff bb61 	b.w	8003eee <commands_process_packet+0x51e>
				buffer_append_float32(send_buffer, VescToSTM_get_iq(), 1e2, &ind);
 800482c:	f000 fb84 	bl	8004f38 <VescToSTM_get_iq>
 8004830:	465b      	mov	r3, fp
 8004832:	4601      	mov	r1, r0
 8004834:	4a42      	ldr	r2, [pc, #264]	; (8004940 <commands_process_packet+0xf70>)
 8004836:	483c      	ldr	r0, [pc, #240]	; (8004928 <commands_process_packet+0xf58>)
 8004838:	f000 ffc2 	bl	80057c0 <buffer_append_float32>
 800483c:	f7ff bb53 	b.w	8003ee6 <commands_process_packet+0x516>
				buffer_append_float32(send_buffer, VescToSTM_get_Vd(), 1e3, &ind);
 8004840:	f000 fb9a 	bl	8004f78 <VescToSTM_get_Vd>
 8004844:	465b      	mov	r3, fp
 8004846:	4601      	mov	r1, r0
 8004848:	4a38      	ldr	r2, [pc, #224]	; (800492c <commands_process_packet+0xf5c>)
 800484a:	4837      	ldr	r0, [pc, #220]	; (8004928 <commands_process_packet+0xf58>)
 800484c:	f000 ffb8 	bl	80057c0 <buffer_append_float32>
 8004850:	f7ff bb84 	b.w	8003f5c <commands_process_packet+0x58c>
				buffer_append_float16(send_buffer, 0, 1e1, &ind);
 8004854:	465b      	mov	r3, fp
 8004856:	2100      	movs	r1, #0
 8004858:	4a36      	ldr	r2, [pc, #216]	; (8004934 <commands_process_packet+0xf64>)
 800485a:	4833      	ldr	r0, [pc, #204]	; (8004928 <commands_process_packet+0xf58>)
 800485c:	f000 ff9a 	bl	8005794 <buffer_append_float16>
				buffer_append_float16(send_buffer, 0, 1e1, &ind);
 8004860:	465b      	mov	r3, fp
 8004862:	2100      	movs	r1, #0
 8004864:	4a33      	ldr	r2, [pc, #204]	; (8004934 <commands_process_packet+0xf64>)
 8004866:	4830      	ldr	r0, [pc, #192]	; (8004928 <commands_process_packet+0xf58>)
 8004868:	f000 ff94 	bl	8005794 <buffer_append_float16>
				buffer_append_float16(send_buffer, 0, 1e1, &ind);
 800486c:	465b      	mov	r3, fp
 800486e:	2100      	movs	r1, #0
 8004870:	4a30      	ldr	r2, [pc, #192]	; (8004934 <commands_process_packet+0xf64>)
 8004872:	482d      	ldr	r0, [pc, #180]	; (8004928 <commands_process_packet+0xf58>)
 8004874:	f000 ff8e 	bl	8005794 <buffer_append_float16>
 8004878:	f7ff bb6c 	b.w	8003f54 <commands_process_packet+0x584>
						buffer_append_float32(send_buffer, VescToSTM_get_pid_pos_now(), 1e6, &ind);
 800487c:	f000 f932 	bl	8004ae4 <VescToSTM_get_pid_pos_now>
 8004880:	465b      	mov	r3, fp
 8004882:	4601      	mov	r1, r0
 8004884:	4a2d      	ldr	r2, [pc, #180]	; (800493c <commands_process_packet+0xf6c>)
 8004886:	4828      	ldr	r0, [pc, #160]	; (8004928 <commands_process_packet+0xf58>)
 8004888:	f000 ff9a 	bl	80057c0 <buffer_append_float32>
 800488c:	f7ff b9c1 	b.w	8003c12 <commands_process_packet+0x242>
						buffer_append_float32(send_buffer, VescToSTM_get_distance_abs(), 1e3, &ind);
 8004890:	f000 fc52 	bl	8005138 <VescToSTM_get_distance_abs>
 8004894:	465b      	mov	r3, fp
 8004896:	4601      	mov	r1, r0
 8004898:	4a24      	ldr	r2, [pc, #144]	; (800492c <commands_process_packet+0xf5c>)
 800489a:	4823      	ldr	r0, [pc, #140]	; (8004928 <commands_process_packet+0xf58>)
 800489c:	f000 ff90 	bl	80057c0 <buffer_append_float32>
 80048a0:	f7ff b9b3 	b.w	8003c0a <commands_process_packet+0x23a>
						buffer_append_float32(send_buffer, VescToSTM_get_distance(), 1e3, &ind);
 80048a4:	f000 fc38 	bl	8005118 <VescToSTM_get_distance>
 80048a8:	465b      	mov	r3, fp
 80048aa:	4601      	mov	r1, r0
 80048ac:	4a1f      	ldr	r2, [pc, #124]	; (800492c <commands_process_packet+0xf5c>)
 80048ae:	481e      	ldr	r0, [pc, #120]	; (8004928 <commands_process_packet+0xf58>)
 80048b0:	f000 ff86 	bl	80057c0 <buffer_append_float32>
 80048b4:	f7ff b9a5 	b.w	8003c02 <commands_process_packet+0x232>
						buffer_append_float32(send_buffer, val.wh_charge_tot, 1e4, &ind);
 80048b8:	465b      	mov	r3, fp
 80048ba:	2100      	movs	r1, #0
 80048bc:	4a1e      	ldr	r2, [pc, #120]	; (8004938 <commands_process_packet+0xf68>)
 80048be:	481a      	ldr	r0, [pc, #104]	; (8004928 <commands_process_packet+0xf58>)
 80048c0:	f000 ff7e 	bl	80057c0 <buffer_append_float32>
 80048c4:	f7ff b999 	b.w	8003bfa <commands_process_packet+0x22a>
						buffer_append_float32(send_buffer, val.wh_tot, 1e4, &ind);
 80048c8:	465b      	mov	r3, fp
 80048ca:	2100      	movs	r1, #0
 80048cc:	4a1a      	ldr	r2, [pc, #104]	; (8004938 <commands_process_packet+0xf68>)
 80048ce:	4816      	ldr	r0, [pc, #88]	; (8004928 <commands_process_packet+0xf58>)
 80048d0:	f000 ff76 	bl	80057c0 <buffer_append_float32>
 80048d4:	f7ff b98d 	b.w	8003bf2 <commands_process_packet+0x222>
						buffer_append_float32(send_buffer, val.ah_charge_tot, 1e4, &ind);
 80048d8:	465b      	mov	r3, fp
 80048da:	2100      	movs	r1, #0
 80048dc:	4a16      	ldr	r2, [pc, #88]	; (8004938 <commands_process_packet+0xf68>)
 80048de:	4812      	ldr	r0, [pc, #72]	; (8004928 <commands_process_packet+0xf58>)
 80048e0:	f000 ff6e 	bl	80057c0 <buffer_append_float32>
 80048e4:	f7ff b981 	b.w	8003bea <commands_process_packet+0x21a>
						buffer_append_float32(send_buffer, val.ah_tot, 1e4, &ind);
 80048e8:	465b      	mov	r3, fp
 80048ea:	2100      	movs	r1, #0
 80048ec:	4a12      	ldr	r2, [pc, #72]	; (8004938 <commands_process_packet+0xf68>)
 80048ee:	480e      	ldr	r0, [pc, #56]	; (8004928 <commands_process_packet+0xf58>)
 80048f0:	f000 ff66 	bl	80057c0 <buffer_append_float32>
 80048f4:	f7ff b975 	b.w	8003be2 <commands_process_packet+0x212>
						buffer_append_float16(send_buffer, battery_level, 1e3, &ind);
 80048f8:	465b      	mov	r3, fp
 80048fa:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80048fc:	4a0b      	ldr	r2, [pc, #44]	; (800492c <commands_process_packet+0xf5c>)
 80048fe:	480a      	ldr	r0, [pc, #40]	; (8004928 <commands_process_packet+0xf58>)
 8004900:	f000 ff48 	bl	8005794 <buffer_append_float16>
 8004904:	f7ff b969 	b.w	8003bda <commands_process_packet+0x20a>
							buffer_append_float32_auto(send_buffer, 0, &ind);
 8004908:	2100      	movs	r1, #0
 800490a:	4630      	mov	r0, r6
 800490c:	aa17      	add	r2, sp, #92	; 0x5c
 800490e:	f000 ff75 	bl	80057fc <buffer_append_float32_auto>
 8004912:	e542      	b.n	800439a <commands_process_packet+0x9ca>
 8004914:	2100      	movs	r1, #0
 8004916:	4630      	mov	r0, r6
 8004918:	aa17      	add	r2, sp, #92	; 0x5c
 800491a:	f000 ff6f 	bl	80057fc <buffer_append_float32_auto>
 800491e:	e539      	b.n	8004394 <commands_process_packet+0x9c4>
 8004920:	66ed2bfb 	.word	0x66ed2bfb
 8004924:	4023193d 	.word	0x4023193d
 8004928:	20000570 	.word	0x20000570
 800492c:	447a0000 	.word	0x447a0000
 8004930:	4cbebc20 	.word	0x4cbebc20
 8004934:	41200000 	.word	0x41200000
 8004938:	461c4000 	.word	0x461c4000
 800493c:	49742400 	.word	0x49742400
 8004940:	42c80000 	.word	0x42c80000
 8004944:	2100      	movs	r1, #0
 8004946:	4630      	mov	r0, r6
 8004948:	aa17      	add	r2, sp, #92	; 0x5c
 800494a:	f000 ff57 	bl	80057fc <buffer_append_float32_auto>
 800494e:	e51e      	b.n	800438e <commands_process_packet+0x9be>
 8004950:	2100      	movs	r1, #0
 8004952:	4630      	mov	r0, r6
 8004954:	aa17      	add	r2, sp, #92	; 0x5c
 8004956:	f000 ff51 	bl	80057fc <buffer_append_float32_auto>
 800495a:	e515      	b.n	8004388 <commands_process_packet+0x9b8>
 800495c:	2100      	movs	r1, #0
 800495e:	4630      	mov	r0, r6
 8004960:	aa17      	add	r2, sp, #92	; 0x5c
 8004962:	f000 ff4b 	bl	80057fc <buffer_append_float32_auto>
 8004966:	e50c      	b.n	8004382 <commands_process_packet+0x9b2>
 8004968:	2100      	movs	r1, #0
 800496a:	4630      	mov	r0, r6
 800496c:	aa17      	add	r2, sp, #92	; 0x5c
 800496e:	f000 ff45 	bl	80057fc <buffer_append_float32_auto>
 8004972:	e503      	b.n	800437c <commands_process_packet+0x9ac>
 8004974:	2100      	movs	r1, #0
 8004976:	4630      	mov	r0, r6
 8004978:	aa17      	add	r2, sp, #92	; 0x5c
 800497a:	f000 ff3f 	bl	80057fc <buffer_append_float32_auto>
 800497e:	e4fa      	b.n	8004376 <commands_process_packet+0x9a6>
 8004980:	2100      	movs	r1, #0
 8004982:	4630      	mov	r0, r6
 8004984:	aa17      	add	r2, sp, #92	; 0x5c
 8004986:	f000 ff39 	bl	80057fc <buffer_append_float32_auto>
 800498a:	e4f1      	b.n	8004370 <commands_process_packet+0x9a0>
 800498c:	2100      	movs	r1, #0
 800498e:	4630      	mov	r0, r6
 8004990:	aa17      	add	r2, sp, #92	; 0x5c
 8004992:	f000 ff33 	bl	80057fc <buffer_append_float32_auto>
 8004996:	e4e8      	b.n	800436a <commands_process_packet+0x99a>
 8004998:	2100      	movs	r1, #0
 800499a:	4630      	mov	r0, r6
 800499c:	aa17      	add	r2, sp, #92	; 0x5c
 800499e:	f000 ff2d 	bl	80057fc <buffer_append_float32_auto>
 80049a2:	e4df      	b.n	8004364 <commands_process_packet+0x994>
 80049a4:	2100      	movs	r1, #0
 80049a6:	4630      	mov	r0, r6
 80049a8:	aa17      	add	r2, sp, #92	; 0x5c
 80049aa:	f000 ff27 	bl	80057fc <buffer_append_float32_auto>
 80049ae:	e4d6      	b.n	800435e <commands_process_packet+0x98e>
 80049b0:	2100      	movs	r1, #0
 80049b2:	4630      	mov	r0, r6
 80049b4:	aa17      	add	r2, sp, #92	; 0x5c
 80049b6:	f000 ff21 	bl	80057fc <buffer_append_float32_auto>
 80049ba:	e4cd      	b.n	8004358 <commands_process_packet+0x988>
 80049bc:	2100      	movs	r1, #0
 80049be:	4630      	mov	r0, r6
 80049c0:	aa17      	add	r2, sp, #92	; 0x5c
 80049c2:	f000 ff1b 	bl	80057fc <buffer_append_float32_auto>
 80049c6:	e4c4      	b.n	8004352 <commands_process_packet+0x982>
 80049c8:	2100      	movs	r1, #0
 80049ca:	4630      	mov	r0, r6
 80049cc:	aa17      	add	r2, sp, #92	; 0x5c
 80049ce:	f000 ff15 	bl	80057fc <buffer_append_float32_auto>
 80049d2:	e4bb      	b.n	800434c <commands_process_packet+0x97c>
 80049d4:	2100      	movs	r1, #0
 80049d6:	4630      	mov	r0, r6
 80049d8:	aa17      	add	r2, sp, #92	; 0x5c
 80049da:	f000 ff0f 	bl	80057fc <buffer_append_float32_auto>
 80049de:	e4b2      	b.n	8004346 <commands_process_packet+0x976>
 80049e0:	2100      	movs	r1, #0
 80049e2:	4630      	mov	r0, r6
 80049e4:	aa17      	add	r2, sp, #92	; 0x5c
 80049e6:	f000 ff09 	bl	80057fc <buffer_append_float32_auto>
 80049ea:	e4a9      	b.n	8004340 <commands_process_packet+0x970>
 80049ec:	0000      	movs	r0, r0
	...

080049f0 <VescToSTM_init_odometer>:
	float ret = curr_ma * CURRENT_FACTOR_mA;
	return ret;

}

void VescToSTM_init_odometer(mc_configuration* conf){
 80049f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049f2:	4604      	mov	r4, r0
	tacho_scale = (conf->si_wheel_diameter * M_PI) / (3.0 * conf->si_motor_poles * conf->si_gear_ratio);
 80049f4:	f8d0 0178 	ldr.w	r0, [r0, #376]	; 0x178
 80049f8:	f7fb fd18 	bl	800042c <__aeabi_f2d>
 80049fc:	a312      	add	r3, pc, #72	; (adr r3, 8004a48 <VescToSTM_init_odometer+0x58>)
 80049fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a02:	f7fb fd6b 	bl	80004dc <__aeabi_dmul>
 8004a06:	4606      	mov	r6, r0
 8004a08:	f894 0170 	ldrb.w	r0, [r4, #368]	; 0x170
 8004a0c:	460f      	mov	r7, r1
 8004a0e:	f7fb fcfb 	bl	8000408 <__aeabi_i2d>
 8004a12:	4602      	mov	r2, r0
 8004a14:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
 8004a18:	460d      	mov	r5, r1
 8004a1a:	4614      	mov	r4, r2
 8004a1c:	f7fb fd06 	bl	800042c <__aeabi_f2d>
 8004a20:	4602      	mov	r2, r0
 8004a22:	460b      	mov	r3, r1
 8004a24:	4620      	mov	r0, r4
 8004a26:	4629      	mov	r1, r5
 8004a28:	f7fb fd58 	bl	80004dc <__aeabi_dmul>
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	4602      	mov	r2, r0
 8004a30:	4639      	mov	r1, r7
 8004a32:	4630      	mov	r0, r6
 8004a34:	f7fb fe7c 	bl	8000730 <__aeabi_ddiv>
 8004a38:	f7fc f832 	bl	8000aa0 <__aeabi_d2f>
 8004a3c:	4b04      	ldr	r3, [pc, #16]	; (8004a50 <VescToSTM_init_odometer+0x60>)
 8004a3e:	6018      	str	r0, [r3, #0]
}
 8004a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a42:	bf00      	nop
 8004a44:	f3af 8000 	nop.w
 8004a48:	382d7365 	.word	0x382d7365
 8004a4c:	3ff0c152 	.word	0x3ff0c152
 8004a50:	2000077c 	.word	0x2000077c

08004a54 <VescToSTM_set_open_loop>:
	int32_t out = ((int32_t)HALL_M1._Super.DPPConvFactor * erpm) / ((int32_t) SPEED_UNIT * (int32_t)HALL_M1._Super.hMeasurementFrequency);
	return out;
}

void VescToSTM_set_open_loop(bool enabled, int16_t init_angle, int16_t erpm){
	if(enabled){
 8004a54:	b1a8      	cbz	r0, 8004a82 <VescToSTM_set_open_loop+0x2e>
void VescToSTM_set_open_loop(bool enabled, int16_t init_angle, int16_t erpm){
 8004a56:	b410      	push	{r4}
		pMCI[M1]->pSTC->SPD->open_angle = init_angle;
		pMCI[M1]->pSTC->SPD->open_loop = true;
 8004a58:	2401      	movs	r4, #1
	int32_t out = ((int32_t)HALL_M1._Super.DPPConvFactor * erpm) / ((int32_t) SPEED_UNIT * (int32_t)HALL_M1._Super.hMeasurementFrequency);
 8004a5a:	4b0e      	ldr	r3, [pc, #56]	; (8004a94 <VescToSTM_set_open_loop+0x40>)
 8004a5c:	69d8      	ldr	r0, [r3, #28]
 8004a5e:	8b5b      	ldrh	r3, [r3, #26]
 8004a60:	fb00 f202 	mul.w	r2, r0, r2
 8004a64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004a68:	40a3      	lsls	r3, r4
 8004a6a:	fb92 f3f3 	sdiv	r3, r2, r3
		pMCI[M1]->pSTC->SPD->open_angle = init_angle;
 8004a6e:	4a0a      	ldr	r2, [pc, #40]	; (8004a98 <VescToSTM_set_open_loop+0x44>)
 8004a70:	6812      	ldr	r2, [r2, #0]
 8004a72:	6852      	ldr	r2, [r2, #4]
 8004a74:	6952      	ldr	r2, [r2, #20]
		pMCI[M1]->pSTC->SPD->open_loop = true;
 8004a76:	f882 4020 	strb.w	r4, [r2, #32]
		pMCI[M1]->pSTC->SPD->open_speed = erpm_to_int16(erpm);
	}else{
		pMCI[M1]->pSTC->SPD->open_loop = false;
		pMCI[M1]->pSTC->SPD->open_speed = 0;
	}
}
 8004a7a:	bc10      	pop	{r4}
	return out;
 8004a7c:	8493      	strh	r3, [r2, #36]	; 0x24
		pMCI[M1]->pSTC->SPD->open_angle = init_angle;
 8004a7e:	8451      	strh	r1, [r2, #34]	; 0x22
}
 8004a80:	4770      	bx	lr
		pMCI[M1]->pSTC->SPD->open_loop = false;
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <VescToSTM_set_open_loop+0x44>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f883 0020 	strb.w	r0, [r3, #32]
		pMCI[M1]->pSTC->SPD->open_speed = 0;
 8004a8e:	8498      	strh	r0, [r3, #36]	; 0x24
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	200000b4 	.word	0x200000b4
 8004a98:	200033ac 	.word	0x200033ac

08004a9c <VescToSTM_set_open_loop_rpm>:
	int32_t out = ((int32_t)HALL_M1._Super.DPPConvFactor * erpm) / ((int32_t) SPEED_UNIT * (int32_t)HALL_M1._Super.hMeasurementFrequency);
 8004a9c:	4908      	ldr	r1, [pc, #32]	; (8004ac0 <VescToSTM_set_open_loop_rpm+0x24>)

void VescToSTM_set_open_loop_rpm(int16_t erpm){
 8004a9e:	b410      	push	{r4}
	int32_t out = ((int32_t)HALL_M1._Super.DPPConvFactor * erpm) / ((int32_t) SPEED_UNIT * (int32_t)HALL_M1._Super.hMeasurementFrequency);
 8004aa0:	69ca      	ldr	r2, [r1, #28]
 8004aa2:	8b4b      	ldrh	r3, [r1, #26]
 8004aa4:	fb02 f200 	mul.w	r2, r2, r0
 8004aa8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004aac:	005b      	lsls	r3, r3, #1
 8004aae:	fb92 f3f3 	sdiv	r3, r2, r3
	pMCI[M1]->pSTC->SPD->open_speed = erpm_to_int16(erpm);
 8004ab2:	4c04      	ldr	r4, [pc, #16]	; (8004ac4 <VescToSTM_set_open_loop_rpm+0x28>)
 8004ab4:	6822      	ldr	r2, [r4, #0]
}
 8004ab6:	bc10      	pop	{r4}
	pMCI[M1]->pSTC->SPD->open_speed = erpm_to_int16(erpm);
 8004ab8:	6852      	ldr	r2, [r2, #4]
 8004aba:	6952      	ldr	r2, [r2, #20]
	return out;
 8004abc:	8493      	strh	r3, [r2, #36]	; 0x24
}
 8004abe:	4770      	bx	lr
 8004ac0:	200000b4 	.word	0x200000b4
 8004ac4:	200033ac 	.word	0x200033ac

08004ac8 <VescToSTM_get_uid>:


const uint8_t test[12] = {1,2,3,4,5,6,7,8,9,10,11,12};
uint8_t VescToSTM_get_uid(uint8_t * ptr, uint8_t size){
	if(size>12) size=12;
 8004ac8:	290c      	cmp	r1, #12
 8004aca:	bf28      	it	cs
 8004acc:	210c      	movcs	r1, #12
uint8_t VescToSTM_get_uid(uint8_t * ptr, uint8_t size){
 8004ace:	b510      	push	{r4, lr}
 8004ad0:	460c      	mov	r4, r1
	memcpy(ptr, test, size);
 8004ad2:	4903      	ldr	r1, [pc, #12]	; (8004ae0 <VescToSTM_get_uid+0x18>)
 8004ad4:	4622      	mov	r2, r4
 8004ad6:	f009 fd5f 	bl	800e598 <memcpy>
	return size;
}
 8004ada:	4620      	mov	r0, r4
 8004adc:	bd10      	pop	{r4, pc}
 8004ade:	bf00      	nop
 8004ae0:	08010afc 	.word	0x08010afc

08004ae4 <VescToSTM_get_pid_pos_now>:


float VescToSTM_get_pid_pos_now(){
 8004ae4:	b508      	push	{r3, lr}
	return 360.0 / 65536.0 * (float)pMCI[M1]->pSTC->SPD->hElAngle;
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <VescToSTM_get_pid_pos_now+0x1c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
 8004af2:	f7fc f8df 	bl	8000cb4 <__aeabi_i2f>
 8004af6:	4903      	ldr	r1, [pc, #12]	; (8004b04 <VescToSTM_get_pid_pos_now+0x20>)
 8004af8:	f7fc f930 	bl	8000d5c <__aeabi_fmul>
}
 8004afc:	bd08      	pop	{r3, pc}
 8004afe:	bf00      	nop
 8004b00:	200033ac 	.word	0x200033ac
 8004b04:	3bb40000 	.word	0x3bb40000

08004b08 <VescToSTM_timeout_reset>:

uint32_t last_reset=0;
bool timeout_enable = true;
void VescToSTM_timeout_reset(){
 8004b08:	b508      	push	{r3, lr}
	last_reset = xTaskGetTickCount();
 8004b0a:	f008 fe47 	bl	800d79c <xTaskGetTickCount>
 8004b0e:	4b01      	ldr	r3, [pc, #4]	; (8004b14 <VescToSTM_timeout_reset+0xc>)
 8004b10:	6018      	str	r0, [r3, #0]
};
 8004b12:	bd08      	pop	{r3, pc}
 8004b14:	20000774 	.word	0x20000774

08004b18 <VescToSTM_handle_timeout>:
void VescToSTM_handle_timeout(){
	if(!timeout_enable) {
 8004b18:	4b18      	ldr	r3, [pc, #96]	; (8004b7c <VescToSTM_handle_timeout+0x64>)
void VescToSTM_handle_timeout(){
 8004b1a:	b510      	push	{r4, lr}
	if(!timeout_enable) {
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	b143      	cbz	r3, 8004b32 <VescToSTM_handle_timeout+0x1a>
 8004b20:	4c17      	ldr	r4, [pc, #92]	; (8004b80 <VescToSTM_handle_timeout+0x68>)
		VescToSTM_timeout_reset();
	}
	if((xTaskGetTickCount() - last_reset) > 2000){
 8004b22:	f008 fe3b 	bl	800d79c <xTaskGetTickCount>
 8004b26:	6823      	ldr	r3, [r4, #0]
 8004b28:	1ac0      	subs	r0, r0, r3
 8004b2a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8004b2e:	d805      	bhi.n	8004b3c <VescToSTM_handle_timeout+0x24>
		VescToSTM_set_brake(0);
	}
};
 8004b30:	bd10      	pop	{r4, pc}
	last_reset = xTaskGetTickCount();
 8004b32:	f008 fe33 	bl	800d79c <xTaskGetTickCount>
 8004b36:	4c12      	ldr	r4, [pc, #72]	; (8004b80 <VescToSTM_handle_timeout+0x68>)
 8004b38:	6020      	str	r0, [r4, #0]
};
 8004b3a:	e7f2      	b.n	8004b22 <VescToSTM_handle_timeout+0xa>
	}

}

void VescToSTM_set_brake(int32_t current){
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	4911      	ldr	r1, [pc, #68]	; (8004b84 <VescToSTM_handle_timeout+0x6c>)
	int32_t q = current_to_torque(current);
	if(q > SpeednTorqCtrlM1.MaxPositiveTorque){
		q = SpeednTorqCtrlM1.MaxPositiveTorque;
	}else if (q < SpeednTorqCtrlM1.MinNegativeTorque){
 8004b40:	4b11      	ldr	r3, [pc, #68]	; (8004b88 <VescToSTM_handle_timeout+0x70>)
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8004b42:	6808      	ldr	r0, [r1, #0]
 8004b44:	6844      	ldr	r4, [r0, #4]
 8004b46:	6961      	ldr	r1, [r4, #20]
 8004b48:	f881 2020 	strb.w	r2, [r1, #32]
	}else if (q < SpeednTorqCtrlM1.MinNegativeTorque){
 8004b4c:	f9b3 1028 	ldrsh.w	r1, [r3, #40]	; 0x28
		q = SpeednTorqCtrlM1.MinNegativeTorque;
	}
	if(q > 0){
 8004b50:	4291      	cmp	r1, r2
 8004b52:	ea21 73e1 	bic.w	r3, r1, r1, asr #31
 8004b56:	dd08      	ble.n	8004b6a <VescToSTM_handle_timeout+0x52>
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = q;
 8004b58:	6924      	ldr	r4, [r4, #16]
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = -q;
 8004b5a:	425b      	negs	r3, r3
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = q;
 8004b5c:	82a1      	strh	r1, [r4, #20]
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = -q;
 8004b5e:	82e3      	strh	r3, [r4, #22]
		MCI_ExecSpeedRamp(pMCI[M1], 0 , 0);
 8004b60:	4611      	mov	r1, r2
};
 8004b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		MCI_ExecSpeedRamp(pMCI[M1], 0 , 0);
 8004b66:	f7fd bedd 	b.w	8002924 <MCI_ExecSpeedRamp>
	}else{
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = -q;
 8004b6a:	6921      	ldr	r1, [r4, #16]
 8004b6c:	425b      	negs	r3, r3
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = q;
 8004b6e:	82ca      	strh	r2, [r1, #22]
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = -q;
 8004b70:	828b      	strh	r3, [r1, #20]
};
 8004b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		MCI_ExecSpeedRamp(pMCI[M1], 0 , 0);
 8004b76:	4611      	mov	r1, r2
 8004b78:	f7fd bed4 	b.w	8002924 <MCI_ExecSpeedRamp>
 8004b7c:	20000489 	.word	0x20000489
 8004b80:	20000774 	.word	0x20000774
 8004b84:	200033ac 	.word	0x200033ac
 8004b88:	2000042c 	.word	0x2000042c

08004b8c <VescToSTM_enable_timeout>:
	timeout_enable = enbale;
 8004b8c:	4b01      	ldr	r3, [pc, #4]	; (8004b94 <VescToSTM_enable_timeout+0x8>)
 8004b8e:	7018      	strb	r0, [r3, #0]
}
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	20000489 	.word	0x20000489

08004b98 <VescToSTM_set_torque>:
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8004b98:	2200      	movs	r2, #0
void VescToSTM_set_torque(int32_t current){
 8004b9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8004b9e:	4f40      	ldr	r7, [pc, #256]	; (8004ca0 <VescToSTM_set_torque+0x108>)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f883 2020 	strb.w	r2, [r3, #32]
	float ret = curr_ma * CURRENT_FACTOR_mA;
 8004baa:	f7fb fc2d 	bl	8000408 <__aeabi_i2d>
 8004bae:	a33a      	add	r3, pc, #232	; (adr r3, 8004c98 <VescToSTM_set_torque+0x100>)
 8004bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bb4:	f7fb fc92 	bl	80004dc <__aeabi_dmul>
 8004bb8:	f7fb ff72 	bl	8000aa0 <__aeabi_d2f>
	return ret;
 8004bbc:	f7fc faaa 	bl	8001114 <__aeabi_f2iz>
	if(q > SpeednTorqCtrlM1.MaxPositiveTorque){
 8004bc0:	4b38      	ldr	r3, [pc, #224]	; (8004ca4 <VescToSTM_set_torque+0x10c>)
 8004bc2:	8cdc      	ldrh	r4, [r3, #38]	; 0x26
 8004bc4:	4284      	cmp	r4, r0
 8004bc6:	db04      	blt.n	8004bd2 <VescToSTM_set_torque+0x3a>
	}else if (q < SpeednTorqCtrlM1.MinNegativeTorque){
 8004bc8:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
 8004bcc:	4284      	cmp	r4, r0
 8004bce:	bfb8      	it	lt
 8004bd0:	4604      	movlt	r4, r0
	uint16_t Vin = VBS_GetAvBusVoltage_V(pMCT[M1]->pBusVoltageSensor);
 8004bd2:	4b35      	ldr	r3, [pc, #212]	; (8004ca8 <VescToSTM_set_torque+0x110>)
	if(Vin < mc_conf.l_battery_cut_start){
 8004bd4:	4d35      	ldr	r5, [pc, #212]	; (8004cac <VescToSTM_set_torque+0x114>)
	uint16_t Vin = VBS_GetAvBusVoltage_V(pMCT[M1]->pBusVoltageSensor);
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004bda:	f7fc fae3 	bl	80011a4 <VBS_GetAvBusVoltage_V>
	if(Vin < mc_conf.l_battery_cut_start){
 8004bde:	f7fc f869 	bl	8000cb4 <__aeabi_i2f>
 8004be2:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8004be6:	4606      	mov	r6, r0
 8004be8:	4641      	mov	r1, r8
 8004bea:	f7fc fa55 	bl	8001098 <__aeabi_fcmplt>
 8004bee:	b1c8      	cbz	r0, 8004c24 <VescToSTM_set_torque+0x8c>
		float qRed = (float)q / diff * VinDiff;
 8004bf0:	4620      	mov	r0, r4
 8004bf2:	f7fc f85f 	bl	8000cb4 <__aeabi_i2f>
		float diff = mc_conf.l_battery_cut_start - mc_conf.l_battery_cut_end;
 8004bf6:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		float qRed = (float)q / diff * VinDiff;
 8004bfa:	4604      	mov	r4, r0
		float diff = mc_conf.l_battery_cut_start - mc_conf.l_battery_cut_end;
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	4640      	mov	r0, r8
 8004c00:	f7fb ffa2 	bl	8000b48 <__aeabi_fsub>
 8004c04:	4601      	mov	r1, r0
		float qRed = (float)q / diff * VinDiff;
 8004c06:	4620      	mov	r0, r4
 8004c08:	f7fc f95c 	bl	8000ec4 <__aeabi_fdiv>
		float VinDiff = Vin - mc_conf.l_battery_cut_end;
 8004c0c:	4649      	mov	r1, r9
		float qRed = (float)q / diff * VinDiff;
 8004c0e:	4604      	mov	r4, r0
		float VinDiff = Vin - mc_conf.l_battery_cut_end;
 8004c10:	4630      	mov	r0, r6
 8004c12:	f7fb ff99 	bl	8000b48 <__aeabi_fsub>
 8004c16:	4601      	mov	r1, r0
		float qRed = (float)q / diff * VinDiff;
 8004c18:	4620      	mov	r0, r4
 8004c1a:	f7fc f89f 	bl	8000d5c <__aeabi_fmul>
		q = qRed;
 8004c1e:	f7fc fa79 	bl	8001114 <__aeabi_f2iz>
 8004c22:	4604      	mov	r4, r0
	if(q > 0){
 8004c24:	2c00      	cmp	r4, #0
		pMCI[M1]->pSTC->PISpeed->wUpperIntegralLimit = (uint32_t)q * SP_KDDIV;
 8004c26:	683e      	ldr	r6, [r7, #0]
	if(q > 0){
 8004c28:	dd20      	ble.n	8004c6c <VescToSTM_set_torque+0xd4>
		pMCI[M1]->pSTC->PISpeed->wUpperIntegralLimit = (uint32_t)q * SP_KDDIV;
 8004c2a:	6872      	ldr	r2, [r6, #4]
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = mc_conf.s_pid_allow_braking ? -q : 0;
 8004c2c:	f895 0124 	ldrb.w	r0, [r5, #292]	; 0x124
		pMCI[M1]->pSTC->PISpeed->wUpperIntegralLimit = (uint32_t)q * SP_KDDIV;
 8004c30:	6912      	ldr	r2, [r2, #16]
		pMCI[M1]->pSTC->PISpeed->wLowerIntegralLimit = (uint32_t)-q * SP_KDDIV;
 8004c32:	ebc4 7304 	rsb	r3, r4, r4, lsl #28
		pMCI[M1]->pSTC->PISpeed->wUpperIntegralLimit = (uint32_t)q * SP_KDDIV;
 8004c36:	0121      	lsls	r1, r4, #4
		pMCI[M1]->pSTC->PISpeed->wLowerIntegralLimit = (uint32_t)-q * SP_KDDIV;
 8004c38:	011b      	lsls	r3, r3, #4
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = q;
 8004c3a:	8294      	strh	r4, [r2, #20]
		pMCI[M1]->pSTC->PISpeed->wUpperIntegralLimit = (uint32_t)q * SP_KDDIV;
 8004c3c:	60d1      	str	r1, [r2, #12]
		pMCI[M1]->pSTC->PISpeed->wLowerIntegralLimit = (uint32_t)-q * SP_KDDIV;
 8004c3e:	6113      	str	r3, [r2, #16]
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = mc_conf.s_pid_allow_braking ? -q : 0;
 8004c40:	b988      	cbnz	r0, 8004c66 <VescToSTM_set_torque+0xce>
 8004c42:	82d0      	strh	r0, [r2, #22]
		MCI_ExecSpeedRamp(pMCI[M1], mc_conf.l_max_erpm / mc_conf.si_motor_poles , 0);
 8004c44:	f895 0170 	ldrb.w	r0, [r5, #368]	; 0x170
 8004c48:	f7fc f834 	bl	8000cb4 <__aeabi_i2f>
 8004c4c:	4601      	mov	r1, r0
 8004c4e:	69a8      	ldr	r0, [r5, #24]
		MCI_ExecSpeedRamp(pMCI[M1], mc_conf.l_min_erpm / mc_conf.si_motor_poles , 0);
 8004c50:	f7fc f938 	bl	8000ec4 <__aeabi_fdiv>
 8004c54:	f7fc fa5e 	bl	8001114 <__aeabi_f2iz>
 8004c58:	2200      	movs	r2, #0
 8004c5a:	b201      	sxth	r1, r0
 8004c5c:	4630      	mov	r0, r6
}
 8004c5e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		MCI_ExecSpeedRamp(pMCI[M1], mc_conf.l_min_erpm / mc_conf.si_motor_poles , 0);
 8004c62:	f7fd be5f 	b.w	8002924 <MCI_ExecSpeedRamp>
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = mc_conf.s_pid_allow_braking ? -q : 0;
 8004c66:	4260      	negs	r0, r4
 8004c68:	b200      	sxth	r0, r0
 8004c6a:	e7ea      	b.n	8004c42 <VescToSTM_set_torque+0xaa>
		pMCI[M1]->pSTC->PISpeed->wUpperIntegralLimit = (uint32_t)-q * SP_KDDIV;
 8004c6c:	6871      	ldr	r1, [r6, #4]
 8004c6e:	ebc4 7304 	rsb	r3, r4, r4, lsl #28
 8004c72:	6909      	ldr	r1, [r1, #16]
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = mc_conf.s_pid_allow_braking ? -q : 0;
 8004c74:	f895 2124 	ldrb.w	r2, [r5, #292]	; 0x124
		pMCI[M1]->pSTC->PISpeed->wUpperIntegralLimit = (uint32_t)-q * SP_KDDIV;
 8004c78:	011b      	lsls	r3, r3, #4
 8004c7a:	60cb      	str	r3, [r1, #12]
		pMCI[M1]->pSTC->PISpeed->wLowerIntegralLimit = (uint32_t)q * SP_KDDIV;
 8004c7c:	0123      	lsls	r3, r4, #4
 8004c7e:	610b      	str	r3, [r1, #16]
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = mc_conf.s_pid_allow_braking ? -q : 0;
 8004c80:	b10a      	cbz	r2, 8004c86 <VescToSTM_set_torque+0xee>
 8004c82:	4262      	negs	r2, r4
 8004c84:	b212      	sxth	r2, r2
 8004c86:	828a      	strh	r2, [r1, #20]
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = q;
 8004c88:	82cc      	strh	r4, [r1, #22]
		MCI_ExecSpeedRamp(pMCI[M1], mc_conf.l_min_erpm / mc_conf.si_motor_poles , 0);
 8004c8a:	f895 0170 	ldrb.w	r0, [r5, #368]	; 0x170
 8004c8e:	f7fc f811 	bl	8000cb4 <__aeabi_i2f>
 8004c92:	4601      	mov	r1, r0
 8004c94:	6968      	ldr	r0, [r5, #20]
 8004c96:	e7db      	b.n	8004c50 <VescToSTM_set_torque+0xb8>
 8004c98:	35bd512f 	.word	0x35bd512f
 8004c9c:	3fd455b0 	.word	0x3fd455b0
 8004ca0:	200033ac 	.word	0x200033ac
 8004ca4:	2000042c 	.word	0x2000042c
 8004ca8:	200033b0 	.word	0x200033b0
 8004cac:	20003dc4 	.word	0x20003dc4

08004cb0 <VescToSTM_set_brake>:
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8004cb0:	2200      	movs	r2, #0
void VescToSTM_set_brake(int32_t current){
 8004cb2:	b538      	push	{r3, r4, r5, lr}
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8004cb4:	4b1e      	ldr	r3, [pc, #120]	; (8004d30 <VescToSTM_set_brake+0x80>)
 8004cb6:	681c      	ldr	r4, [r3, #0]
 8004cb8:	6865      	ldr	r5, [r4, #4]
 8004cba:	696b      	ldr	r3, [r5, #20]
 8004cbc:	f883 2020 	strb.w	r2, [r3, #32]
	float ret = curr_ma * CURRENT_FACTOR_mA;
 8004cc0:	f7fb fba2 	bl	8000408 <__aeabi_i2d>
 8004cc4:	a318      	add	r3, pc, #96	; (adr r3, 8004d28 <VescToSTM_set_brake+0x78>)
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	f7fb fc07 	bl	80004dc <__aeabi_dmul>
 8004cce:	f7fb fee7 	bl	8000aa0 <__aeabi_d2f>
	return ret;
 8004cd2:	f7fc fa1f 	bl	8001114 <__aeabi_f2iz>
	if(q > SpeednTorqCtrlM1.MaxPositiveTorque){
 8004cd6:	4a17      	ldr	r2, [pc, #92]	; (8004d34 <VescToSTM_set_brake+0x84>)
 8004cd8:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004cda:	4283      	cmp	r3, r0
 8004cdc:	db13      	blt.n	8004d06 <VescToSTM_set_brake+0x56>
	}else if (q < SpeednTorqCtrlM1.MinNegativeTorque){
 8004cde:	f9b2 1028 	ldrsh.w	r1, [r2, #40]	; 0x28
		MCI_ExecSpeedRamp(pMCI[M1], 0 , 0);
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	4281      	cmp	r1, r0
 8004ce6:	bfb8      	it	lt
 8004ce8:	4601      	movlt	r1, r0
 8004cea:	b28b      	uxth	r3, r1
	if(q > 0){
 8004cec:	2900      	cmp	r1, #0
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = q;
 8004cee:	6928      	ldr	r0, [r5, #16]
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = -q;
 8004cf0:	f1c3 0300 	rsb	r3, r3, #0
	if(q > 0){
 8004cf4:	dd0f      	ble.n	8004d16 <VescToSTM_set_brake+0x66>
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = q;
 8004cf6:	8281      	strh	r1, [r0, #20]
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = -q;
 8004cf8:	82c3      	strh	r3, [r0, #22]
		MCI_ExecSpeedRamp(pMCI[M1], 0 , 0);
 8004cfa:	4611      	mov	r1, r2
 8004cfc:	4620      	mov	r0, r4
	}
}
 8004cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		MCI_ExecSpeedRamp(pMCI[M1], 0 , 0);
 8004d02:	f7fd be0f 	b.w	8002924 <MCI_ExecSpeedRamp>
 8004d06:	4619      	mov	r1, r3
	if(q > 0){
 8004d08:	2900      	cmp	r1, #0
		MCI_ExecSpeedRamp(pMCI[M1], 0 , 0);
 8004d0a:	f04f 0200 	mov.w	r2, #0
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = q;
 8004d0e:	6928      	ldr	r0, [r5, #16]
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = -q;
 8004d10:	f1c3 0300 	rsb	r3, r3, #0
	if(q > 0){
 8004d14:	dcef      	bgt.n	8004cf6 <VescToSTM_set_brake+0x46>
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = q;
 8004d16:	82c1      	strh	r1, [r0, #22]
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = -q;
 8004d18:	8283      	strh	r3, [r0, #20]
		MCI_ExecSpeedRamp(pMCI[M1], 0 , 0);
 8004d1a:	4611      	mov	r1, r2
 8004d1c:	4620      	mov	r0, r4
}
 8004d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		MCI_ExecSpeedRamp(pMCI[M1], 0 , 0);
 8004d22:	f7fd bdff 	b.w	8002924 <MCI_ExecSpeedRamp>
 8004d26:	bf00      	nop
 8004d28:	35bd512f 	.word	0x35bd512f
 8004d2c:	3fd455b0 	.word	0x3fd455b0
 8004d30:	200033ac 	.word	0x200033ac
 8004d34:	2000042c 	.word	0x2000042c

08004d38 <VescToSTM_set_speed>:


void VescToSTM_set_speed(int32_t rpm){
 8004d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int32_t erpm = rpm * mc_conf.si_motor_poles;
 8004d3c:	4d3e      	ldr	r5, [pc, #248]	; (8004e38 <VescToSTM_set_speed+0x100>)
void VescToSTM_set_speed(int32_t rpm){
 8004d3e:	4606      	mov	r6, r0
	int32_t erpm = rpm * mc_conf.si_motor_poles;
 8004d40:	f895 8170 	ldrb.w	r8, [r5, #368]	; 0x170
 8004d44:	fb00 f408 	mul.w	r4, r0, r8
	if(erpm>0){
 8004d48:	2c00      	cmp	r4, #0
		if(erpm < mc_conf.s_pid_min_erpm) erpm = mc_conf.s_pid_min_erpm;
 8004d4a:	4620      	mov	r0, r4
	if(erpm>0){
 8004d4c:	dd44      	ble.n	8004dd8 <VescToSTM_set_speed+0xa0>
		if(erpm < mc_conf.s_pid_min_erpm) erpm = mc_conf.s_pid_min_erpm;
 8004d4e:	f7fb ffb1 	bl	8000cb4 <__aeabi_i2f>
 8004d52:	f8d5 9120 	ldr.w	r9, [r5, #288]	; 0x120
 8004d56:	4607      	mov	r7, r0
 8004d58:	4649      	mov	r1, r9
 8004d5a:	f7fc f99d 	bl	8001098 <__aeabi_fcmplt>
 8004d5e:	b130      	cbz	r0, 8004d6e <VescToSTM_set_speed+0x36>
 8004d60:	4648      	mov	r0, r9
 8004d62:	f7fc f9d7 	bl	8001114 <__aeabi_f2iz>
 8004d66:	4604      	mov	r4, r0
 8004d68:	f7fb ffa4 	bl	8000cb4 <__aeabi_i2f>
 8004d6c:	4607      	mov	r7, r0
		if(erpm > mc_conf.l_max_erpm) erpm = mc_conf.l_max_erpm;
 8004d6e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8004d72:	4639      	mov	r1, r7
 8004d74:	4648      	mov	r0, r9
 8004d76:	f7fc f98f 	bl	8001098 <__aeabi_fcmplt>
 8004d7a:	2800      	cmp	r0, #0
 8004d7c:	d146      	bne.n	8004e0c <VescToSTM_set_speed+0xd4>
	}else{
		if(erpm > -mc_conf.s_pid_min_erpm) erpm = -mc_conf.s_pid_min_erpm;
		if(erpm < mc_conf.l_min_erpm) erpm = mc_conf.l_min_erpm;
	}
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8004d7e:	2100      	movs	r1, #0
 8004d80:	4b2e      	ldr	r3, [pc, #184]	; (8004e3c <VescToSTM_set_speed+0x104>)
	if(rpm>0){
 8004d82:	428e      	cmp	r6, r1
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8004d84:	681f      	ldr	r7, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	f882 1020 	strb.w	r1, [r2, #32]
	if(rpm>0){
 8004d8e:	dd47      	ble.n	8004e20 <VescToSTM_set_speed+0xe8>
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = SpeednTorqCtrlM1.MaxPositiveTorque;
 8004d90:	492b      	ldr	r1, [pc, #172]	; (8004e40 <VescToSTM_set_speed+0x108>)
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	8cc8      	ldrh	r0, [r1, #38]	; 0x26
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = mc_conf.s_pid_allow_braking ? SpeednTorqCtrlM1.MinNegativeTorque : 0;
 8004d96:	f895 3124 	ldrb.w	r3, [r5, #292]	; 0x124
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = SpeednTorqCtrlM1.MaxPositiveTorque;
 8004d9a:	8290      	strh	r0, [r2, #20]
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = mc_conf.s_pid_allow_braking ? SpeednTorqCtrlM1.MinNegativeTorque : 0;
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d13c      	bne.n	8004e1a <VescToSTM_set_speed+0xe2>
 8004da0:	82d3      	strh	r3, [r2, #22]
	}else{
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = mc_conf.s_pid_allow_braking ? SpeednTorqCtrlM1.MaxPositiveTorque : 0;
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = SpeednTorqCtrlM1.MinNegativeTorque;
	}
	int32_t ramp_time = 0;
	if(mc_conf.s_pid_ramp_erpms_s) ramp_time = (float)(erpm * 1000) / mc_conf.s_pid_ramp_erpms_s;
 8004da2:	f8d5 5128 	ldr.w	r5, [r5, #296]	; 0x128
 8004da6:	2100      	movs	r1, #0
 8004da8:	4628      	mov	r0, r5
 8004daa:	f7fc f96b 	bl	8001084 <__aeabi_fcmpeq>
 8004dae:	bb90      	cbnz	r0, 8004e16 <VescToSTM_set_speed+0xde>
 8004db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004db4:	fb00 f004 	mul.w	r0, r0, r4
 8004db8:	f7fb ff7c 	bl	8000cb4 <__aeabi_i2f>
 8004dbc:	4629      	mov	r1, r5
 8004dbe:	f7fc f881 	bl	8000ec4 <__aeabi_fdiv>
 8004dc2:	f7fc f9a7 	bl	8001114 <__aeabi_f2iz>
 8004dc6:	b282      	uxth	r2, r0
	MCI_ExecSpeedRamp(pMCI[M1], erpm / mc_conf.si_motor_poles, ramp_time);
 8004dc8:	fb94 f1f8 	sdiv	r1, r4, r8
 8004dcc:	4638      	mov	r0, r7
}
 8004dce:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	MCI_ExecSpeedRamp(pMCI[M1], erpm / mc_conf.si_motor_poles, ramp_time);
 8004dd2:	b209      	sxth	r1, r1
 8004dd4:	f7fd bda6 	b.w	8002924 <MCI_ExecSpeedRamp>
		if(erpm > -mc_conf.s_pid_min_erpm) erpm = -mc_conf.s_pid_min_erpm;
 8004dd8:	f7fb ff6c 	bl	8000cb4 <__aeabi_i2f>
 8004ddc:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
 8004de0:	4607      	mov	r7, r0
 8004de2:	f101 4900 	add.w	r9, r1, #2147483648	; 0x80000000
 8004de6:	4649      	mov	r1, r9
 8004de8:	f7fc f974 	bl	80010d4 <__aeabi_fcmpgt>
 8004dec:	b130      	cbz	r0, 8004dfc <VescToSTM_set_speed+0xc4>
 8004dee:	4648      	mov	r0, r9
 8004df0:	f7fc f990 	bl	8001114 <__aeabi_f2iz>
 8004df4:	4604      	mov	r4, r0
 8004df6:	f7fb ff5d 	bl	8000cb4 <__aeabi_i2f>
 8004dfa:	4607      	mov	r7, r0
		if(erpm < mc_conf.l_min_erpm) erpm = mc_conf.l_min_erpm;
 8004dfc:	f8d5 9014 	ldr.w	r9, [r5, #20]
 8004e00:	4639      	mov	r1, r7
 8004e02:	4648      	mov	r0, r9
 8004e04:	f7fc f966 	bl	80010d4 <__aeabi_fcmpgt>
 8004e08:	2800      	cmp	r0, #0
 8004e0a:	d0b8      	beq.n	8004d7e <VescToSTM_set_speed+0x46>
 8004e0c:	4648      	mov	r0, r9
 8004e0e:	f7fc f981 	bl	8001114 <__aeabi_f2iz>
 8004e12:	4604      	mov	r4, r0
 8004e14:	e7b3      	b.n	8004d7e <VescToSTM_set_speed+0x46>
 8004e16:	2200      	movs	r2, #0
 8004e18:	e7d6      	b.n	8004dc8 <VescToSTM_set_speed+0x90>
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = mc_conf.s_pid_allow_braking ? SpeednTorqCtrlM1.MinNegativeTorque : 0;
 8004e1a:	f9b1 3028 	ldrsh.w	r3, [r1, #40]	; 0x28
 8004e1e:	e7bf      	b.n	8004da0 <VescToSTM_set_speed+0x68>
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = mc_conf.s_pid_allow_braking ? SpeednTorqCtrlM1.MaxPositiveTorque : 0;
 8004e20:	f895 2124 	ldrb.w	r2, [r5, #292]	; 0x124
 8004e24:	4906      	ldr	r1, [pc, #24]	; (8004e40 <VescToSTM_set_speed+0x108>)
 8004e26:	b10a      	cbz	r2, 8004e2c <VescToSTM_set_speed+0xf4>
 8004e28:	f9b1 2026 	ldrsh.w	r2, [r1, #38]	; 0x26
 8004e2c:	691b      	ldr	r3, [r3, #16]
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = SpeednTorqCtrlM1.MinNegativeTorque;
 8004e2e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = mc_conf.s_pid_allow_braking ? SpeednTorqCtrlM1.MaxPositiveTorque : 0;
 8004e30:	829a      	strh	r2, [r3, #20]
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = SpeednTorqCtrlM1.MinNegativeTorque;
 8004e32:	82d9      	strh	r1, [r3, #22]
 8004e34:	e7b5      	b.n	8004da2 <VescToSTM_set_speed+0x6a>
 8004e36:	bf00      	nop
 8004e38:	20003dc4 	.word	0x20003dc4
 8004e3c:	200033ac 	.word	0x200033ac
 8004e40:	2000042c 	.word	0x2000042c

08004e44 <VescToSTM_get_temperature>:




float VescToSTM_get_temperature(){
 8004e44:	b508      	push	{r3, lr}
	return NTC_GetAvTemp_C(pMCT[M1]->pTemperatureSensor);
 8004e46:	4b04      	ldr	r3, [pc, #16]	; (8004e58 <VescToSTM_get_temperature+0x14>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004e4c:	f7fc fdc2 	bl	80019d4 <NTC_GetAvTemp_C>
 8004e50:	f7fb ff30 	bl	8000cb4 <__aeabi_i2f>
}
 8004e54:	bd08      	pop	{r3, pc}
 8004e56:	bf00      	nop
 8004e58:	200033b0 	.word	0x200033b0
 8004e5c:	00000000 	.word	0x00000000

08004e60 <VescToSTM_get_phase_current>:


float VescToSTM_get_phase_current(){
	if(!pMCI[M1]->pFOCVars->Iq_samples || !pMCI[M1]->pFOCVars->Id_samples) return 0;
 8004e60:	4b17      	ldr	r3, [pc, #92]	; (8004ec0 <VescToSTM_get_phase_current+0x60>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e68:	b10a      	cbz	r2, 8004e6e <VescToSTM_get_phase_current+0xe>
 8004e6a:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8004e6c:	b909      	cbnz	r1, 8004e72 <VescToSTM_get_phase_current+0x12>
 8004e6e:	2000      	movs	r0, #0
	wAux1 += wAux2;
	wAux1 = MCM_Sqrt(wAux1);
	wAux1 = wAux1 * SIGN(iq);

	return (float)wAux1 / CURRENT_FACTOR;
}
 8004e70:	4770      	bx	lr
	int32_t id = pMCI[M1]->pFOCVars->Id_sum / pMCI[M1]->pFOCVars->Id_samples;
 8004e72:	6b18      	ldr	r0, [r3, #48]	; 0x30
float VescToSTM_get_phase_current(){
 8004e74:	b510      	push	{r4, lr}
	int32_t id = pMCI[M1]->pFOCVars->Id_sum / pMCI[M1]->pFOCVars->Id_samples;
 8004e76:	fb90 f0f1 	sdiv	r0, r0, r1
	int32_t iq = pMCI[M1]->pFOCVars->Iq_sum / pMCI[M1]->pFOCVars->Iq_samples;
 8004e7a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	int32_t wAux2 = id * id;
 8004e7c:	fb00 f000 	mul.w	r0, r0, r0
	int32_t iq = pMCI[M1]->pFOCVars->Iq_sum / pMCI[M1]->pFOCVars->Iq_samples;
 8004e80:	fb94 f4f2 	sdiv	r4, r4, r2
	pMCI[M1]->pFOCVars->Iq_sum = 0;
 8004e84:	2200      	movs	r2, #0
	wAux1 = MCM_Sqrt(wAux1);
 8004e86:	fb04 0004 	mla	r0, r4, r4, r0
	pMCI[M1]->pFOCVars->Iq_sum = 0;
 8004e8a:	629a      	str	r2, [r3, #40]	; 0x28
	pMCI[M1]->pFOCVars->Iq_samples = 0;
 8004e8c:	859a      	strh	r2, [r3, #44]	; 0x2c
	pMCI[M1]->pFOCVars->Id_sum = 0;
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30
	pMCI[M1]->pFOCVars->Id_samples = 0;
 8004e90:	869a      	strh	r2, [r3, #52]	; 0x34
	wAux1 = MCM_Sqrt(wAux1);
 8004e92:	f7fd feaf 	bl	8002bf4 <MCM_Sqrt>
	wAux1 = wAux1 * SIGN(iq);
 8004e96:	2c00      	cmp	r4, #0
 8004e98:	bfb8      	it	lt
 8004e9a:	4240      	neglt	r0, r0
	return (float)wAux1 / CURRENT_FACTOR;
 8004e9c:	f7fb ff0a 	bl	8000cb4 <__aeabi_i2f>
 8004ea0:	f7fb fac4 	bl	800042c <__aeabi_f2d>
 8004ea4:	a304      	add	r3, pc, #16	; (adr r3, 8004eb8 <VescToSTM_get_phase_current+0x58>)
 8004ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eaa:	f7fb fb17 	bl	80004dc <__aeabi_dmul>
 8004eae:	f7fb fdf7 	bl	8000aa0 <__aeabi_d2f>
}
 8004eb2:	bd10      	pop	{r4, pc}
 8004eb4:	f3af 8000 	nop.w
 8004eb8:	f7441b6d 	.word	0xf7441b6d
 8004ebc:	3f69c86b 	.word	0x3f69c86b
 8004ec0:	200033ac 	.word	0x200033ac

08004ec4 <VescToSTM_get_input_current>:

float VescToSTM_get_input_current(){
	return (float)pMPM[M1]->_super.hAvrgElMotorPowerW/(float)VBS_GetAvBusVoltage_V(pMCT[M1]->pBusVoltageSensor);
 8004ec4:	4b09      	ldr	r3, [pc, #36]	; (8004eec <VescToSTM_get_input_current+0x28>)
float VescToSTM_get_input_current(){
 8004ec6:	b510      	push	{r4, lr}
	return (float)pMPM[M1]->_super.hAvrgElMotorPowerW/(float)VBS_GetAvBusVoltage_V(pMCT[M1]->pBusVoltageSensor);
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f9b3 0104 	ldrsh.w	r0, [r3, #260]	; 0x104
 8004ece:	f7fb fef1 	bl	8000cb4 <__aeabi_i2f>
 8004ed2:	4b07      	ldr	r3, [pc, #28]	; (8004ef0 <VescToSTM_get_input_current+0x2c>)
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004eda:	f7fc f963 	bl	80011a4 <VBS_GetAvBusVoltage_V>
 8004ede:	f7fb fee5 	bl	8000cac <__aeabi_ui2f>
 8004ee2:	4601      	mov	r1, r0
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f7fb ffed 	bl	8000ec4 <__aeabi_fdiv>
}
 8004eea:	bd10      	pop	{r4, pc}
 8004eec:	200033a0 	.word	0x200033a0
 8004ef0:	200033b0 	.word	0x200033b0
 8004ef4:	00000000 	.word	0x00000000

08004ef8 <VescToSTM_get_id>:
 * Read and reset the average direct axis motor current. (FOC only)
 *
 * @return
 * The average D axis current.
 */
float VescToSTM_get_id(){
 8004ef8:	b508      	push	{r3, lr}
	if(!pMCI[M1]->pFOCVars->Id_samples) return 0;
 8004efa:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <VescToSTM_get_id+0x38>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8004f02:	b17a      	cbz	r2, 8004f24 <VescToSTM_get_id+0x2c>
	int32_t id = pMCI[M1]->pFOCVars->Id_sum / pMCI[M1]->pFOCVars->Id_samples;
	pMCI[M1]->pFOCVars->Id_sum = 0;
 8004f04:	2100      	movs	r1, #0
	int32_t id = pMCI[M1]->pFOCVars->Id_sum / pMCI[M1]->pFOCVars->Id_samples;
 8004f06:	6b18      	ldr	r0, [r3, #48]	; 0x30
	pMCI[M1]->pFOCVars->Id_samples = 0;
 8004f08:	8699      	strh	r1, [r3, #52]	; 0x34
	return id / CURRENT_FACTOR;
 8004f0a:	fb90 f0f2 	sdiv	r0, r0, r2
	pMCI[M1]->pFOCVars->Id_sum = 0;
 8004f0e:	6319      	str	r1, [r3, #48]	; 0x30
	return id / CURRENT_FACTOR;
 8004f10:	f7fb fa7a 	bl	8000408 <__aeabi_i2d>
 8004f14:	a304      	add	r3, pc, #16	; (adr r3, 8004f28 <VescToSTM_get_id+0x30>)
 8004f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f1a:	f7fb fadf 	bl	80004dc <__aeabi_dmul>
 8004f1e:	f7fb fdbf 	bl	8000aa0 <__aeabi_d2f>
}
 8004f22:	bd08      	pop	{r3, pc}
	if(!pMCI[M1]->pFOCVars->Id_samples) return 0;
 8004f24:	2000      	movs	r0, #0
}
 8004f26:	bd08      	pop	{r3, pc}
 8004f28:	f7441b6d 	.word	0xf7441b6d
 8004f2c:	3f69c86b 	.word	0x3f69c86b
 8004f30:	200033ac 	.word	0x200033ac
 8004f34:	00000000 	.word	0x00000000

08004f38 <VescToSTM_get_iq>:
 * Read and reset the average quadrature axis motor current. (FOC only)
 *
 * @return
 * The average Q axis current.
 */
float VescToSTM_get_iq(){
 8004f38:	b508      	push	{r3, lr}
	if(!pMCI[M1]->pFOCVars->Iq_samples) return 0;
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	; (8004f70 <VescToSTM_get_iq+0x38>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004f42:	b17a      	cbz	r2, 8004f64 <VescToSTM_get_iq+0x2c>
	int32_t iq = pMCI[M1]->pFOCVars->Iq_sum / pMCI[M1]->pFOCVars->Iq_samples;
	pMCI[M1]->pFOCVars->Iq_sum = 0;
 8004f44:	2100      	movs	r1, #0
	int32_t iq = pMCI[M1]->pFOCVars->Iq_sum / pMCI[M1]->pFOCVars->Iq_samples;
 8004f46:	6a98      	ldr	r0, [r3, #40]	; 0x28
	pMCI[M1]->pFOCVars->Iq_samples = 0;
 8004f48:	8599      	strh	r1, [r3, #44]	; 0x2c
	return iq / CURRENT_FACTOR;
 8004f4a:	fb90 f0f2 	sdiv	r0, r0, r2
	pMCI[M1]->pFOCVars->Iq_sum = 0;
 8004f4e:	6299      	str	r1, [r3, #40]	; 0x28
	return iq / CURRENT_FACTOR;
 8004f50:	f7fb fa5a 	bl	8000408 <__aeabi_i2d>
 8004f54:	a304      	add	r3, pc, #16	; (adr r3, 8004f68 <VescToSTM_get_iq+0x30>)
 8004f56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5a:	f7fb fabf 	bl	80004dc <__aeabi_dmul>
 8004f5e:	f7fb fd9f 	bl	8000aa0 <__aeabi_d2f>
}
 8004f62:	bd08      	pop	{r3, pc}
	if(!pMCI[M1]->pFOCVars->Iq_samples) return 0;
 8004f64:	2000      	movs	r0, #0
}
 8004f66:	bd08      	pop	{r3, pc}
 8004f68:	f7441b6d 	.word	0xf7441b6d
 8004f6c:	3f69c86b 	.word	0x3f69c86b
 8004f70:	200033ac 	.word	0x200033ac
 8004f74:	00000000 	.word	0x00000000

08004f78 <VescToSTM_get_Vd>:
 * Read and reset the average direct axis motor voltage. (FOC only)
 *
 * @return
 * The average D axis voltage.
 */
float VescToSTM_get_Vd(){
 8004f78:	b570      	push	{r4, r5, r6, lr}
	if(!pMCI[M1]->pFOCVars->Vd_samples) return 0;
 8004f7a:	4c1f      	ldr	r4, [pc, #124]	; (8004ff8 <VescToSTM_get_Vd+0x80>)
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f84:	b90b      	cbnz	r3, 8004f8a <VescToSTM_get_Vd+0x12>
 8004f86:	2000      	movs	r0, #0
	int32_t Vd = pMCI[M1]->pFOCVars->Vd_sum / pMCI[M1]->pFOCVars->Vd_samples;
	pMCI[M1]->pFOCVars->Vd_sum = 0;
	pMCI[M1]->pFOCVars->Vd_samples = 0;
	float fVd = Vin / 65536.0 * (float)Vd;
	return fVd;
}
 8004f88:	bd70      	pop	{r4, r5, r6, pc}
	float fVq = Vin / 65536.0 * (float)Vq;
	return fVq;
}

float VescToSTM_get_bus_voltage(){
	return (float)(VBS_GetAvBusVoltage_d(pMCT[M1]->pBusVoltageSensor)) / BATTERY_VOLTAGE_GAIN;
 8004f8a:	4b1c      	ldr	r3, [pc, #112]	; (8004ffc <VescToSTM_get_Vd+0x84>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f90:	f7fc f906 	bl	80011a0 <VBS_GetAvBusVoltage_d>
	pMCI[M1]->pFOCVars->Vd_sum = 0;
 8004f94:	2200      	movs	r2, #0
	int32_t Vd = pMCI[M1]->pFOCVars->Vd_sum / pMCI[M1]->pFOCVars->Vd_samples;
 8004f96:	6823      	ldr	r3, [r4, #0]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f8b3 1044 	ldrh.w	r1, [r3, #68]	; 0x44
 8004f9e:	6c1e      	ldr	r6, [r3, #64]	; 0x40
	pMCI[M1]->pFOCVars->Vd_samples = 0;
 8004fa0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	pMCI[M1]->pFOCVars->Vd_sum = 0;
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40
	int32_t Vd = pMCI[M1]->pFOCVars->Vd_sum / pMCI[M1]->pFOCVars->Vd_samples;
 8004fa6:	fb96 f6f1 	sdiv	r6, r6, r1
	return (float)(VBS_GetAvBusVoltage_d(pMCT[M1]->pBusVoltageSensor)) / BATTERY_VOLTAGE_GAIN;
 8004faa:	f7fb fe7f 	bl	8000cac <__aeabi_ui2f>
 8004fae:	f7fb fa3d 	bl	800042c <__aeabi_f2d>
 8004fb2:	a30f      	add	r3, pc, #60	; (adr r3, 8004ff0 <VescToSTM_get_Vd+0x78>)
 8004fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb8:	f7fb fa90 	bl	80004dc <__aeabi_dmul>
 8004fbc:	f7fb fd70 	bl	8000aa0 <__aeabi_d2f>
	float fVd = Vin / 65536.0 * (float)Vd;
 8004fc0:	f7fb fa34 	bl	800042c <__aeabi_f2d>
 8004fc4:	4604      	mov	r4, r0
 8004fc6:	4630      	mov	r0, r6
 8004fc8:	460d      	mov	r5, r1
 8004fca:	f7fb fe73 	bl	8000cb4 <__aeabi_i2f>
 8004fce:	f7fb fa2d 	bl	800042c <__aeabi_f2d>
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	4b0a      	ldr	r3, [pc, #40]	; (8005000 <VescToSTM_get_Vd+0x88>)
 8004fd6:	f7fb fa81 	bl	80004dc <__aeabi_dmul>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4620      	mov	r0, r4
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	f7fb fa7b 	bl	80004dc <__aeabi_dmul>
 8004fe6:	f7fb fd5b 	bl	8000aa0 <__aeabi_d2f>
}
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
 8004fec:	f3af 8000 	nop.w
 8004ff0:	cc71658a 	.word	0xcc71658a
 8004ff4:	3f479c9c 	.word	0x3f479c9c
 8004ff8:	200033ac 	.word	0x200033ac
 8004ffc:	200033b0 	.word	0x200033b0
 8005000:	3ef00000 	.word	0x3ef00000
 8005004:	00000000 	.word	0x00000000

08005008 <VescToSTM_get_Vq>:
float VescToSTM_get_Vq(){
 8005008:	b570      	push	{r4, r5, r6, lr}
	if(!pMCI[M1]->pFOCVars->Vq_samples) return 0;
 800500a:	4c1d      	ldr	r4, [pc, #116]	; (8005080 <VescToSTM_get_Vq+0x78>)
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005012:	b90b      	cbnz	r3, 8005018 <VescToSTM_get_Vq+0x10>
 8005014:	2000      	movs	r0, #0
}
 8005016:	bd70      	pop	{r4, r5, r6, pc}
	return (float)(VBS_GetAvBusVoltage_d(pMCT[M1]->pBusVoltageSensor)) / BATTERY_VOLTAGE_GAIN;
 8005018:	4b1a      	ldr	r3, [pc, #104]	; (8005084 <VescToSTM_get_Vq+0x7c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800501e:	f7fc f8bf 	bl	80011a0 <VBS_GetAvBusVoltage_d>
	pMCI[M1]->pFOCVars->Vq_sum = 0;
 8005022:	2200      	movs	r2, #0
	int32_t Vq = pMCI[M1]->pFOCVars->Vq_sum / pMCI[M1]->pFOCVars->Vq_samples;
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 800502a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
	pMCI[M1]->pFOCVars->Vq_samples = 0;
 800502c:	879a      	strh	r2, [r3, #60]	; 0x3c
	pMCI[M1]->pFOCVars->Vq_sum = 0;
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
	int32_t Vq = pMCI[M1]->pFOCVars->Vq_sum / pMCI[M1]->pFOCVars->Vq_samples;
 8005030:	fb96 f6f1 	sdiv	r6, r6, r1
	return (float)(VBS_GetAvBusVoltage_d(pMCT[M1]->pBusVoltageSensor)) / BATTERY_VOLTAGE_GAIN;
 8005034:	f7fb fe3a 	bl	8000cac <__aeabi_ui2f>
 8005038:	f7fb f9f8 	bl	800042c <__aeabi_f2d>
 800503c:	a30e      	add	r3, pc, #56	; (adr r3, 8005078 <VescToSTM_get_Vq+0x70>)
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	f7fb fa4b 	bl	80004dc <__aeabi_dmul>
 8005046:	f7fb fd2b 	bl	8000aa0 <__aeabi_d2f>
	float fVq = Vin / 65536.0 * (float)Vq;
 800504a:	f7fb f9ef 	bl	800042c <__aeabi_f2d>
 800504e:	4604      	mov	r4, r0
 8005050:	4630      	mov	r0, r6
 8005052:	460d      	mov	r5, r1
 8005054:	f7fb fe2e 	bl	8000cb4 <__aeabi_i2f>
 8005058:	f7fb f9e8 	bl	800042c <__aeabi_f2d>
 800505c:	2200      	movs	r2, #0
 800505e:	4b0a      	ldr	r3, [pc, #40]	; (8005088 <VescToSTM_get_Vq+0x80>)
 8005060:	f7fb fa3c 	bl	80004dc <__aeabi_dmul>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4620      	mov	r0, r4
 800506a:	4629      	mov	r1, r5
 800506c:	f7fb fa36 	bl	80004dc <__aeabi_dmul>
 8005070:	f7fb fd16 	bl	8000aa0 <__aeabi_d2f>
}
 8005074:	bd70      	pop	{r4, r5, r6, pc}
 8005076:	bf00      	nop
 8005078:	cc71658a 	.word	0xcc71658a
 800507c:	3f479c9c 	.word	0x3f479c9c
 8005080:	200033ac 	.word	0x200033ac
 8005084:	200033b0 	.word	0x200033b0
 8005088:	3ef00000 	.word	0x3ef00000
 800508c:	00000000 	.word	0x00000000

08005090 <VescToSTM_get_bus_voltage>:
float VescToSTM_get_bus_voltage(){
 8005090:	b508      	push	{r3, lr}
	return (float)(VBS_GetAvBusVoltage_d(pMCT[M1]->pBusVoltageSensor)) / BATTERY_VOLTAGE_GAIN;
 8005092:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <VescToSTM_get_bus_voltage+0x30>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005098:	f7fc f882 	bl	80011a0 <VBS_GetAvBusVoltage_d>
 800509c:	f7fb fe06 	bl	8000cac <__aeabi_ui2f>
 80050a0:	f7fb f9c4 	bl	800042c <__aeabi_f2d>
 80050a4:	a304      	add	r3, pc, #16	; (adr r3, 80050b8 <VescToSTM_get_bus_voltage+0x28>)
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	f7fb fa17 	bl	80004dc <__aeabi_dmul>
 80050ae:	f7fb fcf7 	bl	8000aa0 <__aeabi_d2f>
}
 80050b2:	bd08      	pop	{r3, pc}
 80050b4:	f3af 8000 	nop.w
 80050b8:	cc71658a 	.word	0xcc71658a
 80050bc:	3f479c9c 	.word	0x3f479c9c
 80050c0:	200033b0 	.word	0x200033b0

080050c4 <VescToSTM_get_erpm>:

int32_t VescToSTM_get_erpm(){
 80050c4:	b508      	push	{r3, lr}
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] ) * HALL_M1._Super.bElToMecRatio;
 80050c6:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <VescToSTM_get_erpm+0x14>)
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	f7fd fc93 	bl	80029f4 <MCI_GetAvrgMecSpeedUnit>
 80050ce:	4b03      	ldr	r3, [pc, #12]	; (80050dc <VescToSTM_get_erpm+0x18>)
 80050d0:	785b      	ldrb	r3, [r3, #1]
}
 80050d2:	fb00 f003 	mul.w	r0, r0, r3
 80050d6:	bd08      	pop	{r3, pc}
 80050d8:	200033ac 	.word	0x200033ac
 80050dc:	200000b4 	.word	0x200000b4

080050e0 <VescToSTM_get_erpm_fast>:

int32_t VescToSTM_get_erpm_fast(){
	return ( int16_t )( (  HALL_M1._Super.hElSpeedDpp * ( int32_t )HALL_M1._Super.hMeasurementFrequency * (int32_t) SPEED_UNIT ) / (( int32_t ) HALL_M1._Super.DPPConvFactor));
 80050e0:	4a06      	ldr	r2, [pc, #24]	; (80050fc <VescToSTM_get_erpm_fast+0x1c>)
 80050e2:	f9b2 000e 	ldrsh.w	r0, [r2, #14]
 80050e6:	8b53      	ldrh	r3, [r2, #26]
 80050e8:	69d2      	ldr	r2, [r2, #28]
 80050ea:	fb03 f300 	mul.w	r3, r3, r0
 80050ee:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80050f2:	0040      	lsls	r0, r0, #1
 80050f4:	fb90 f0f2 	sdiv	r0, r0, r2
}
 80050f8:	b200      	sxth	r0, r0
 80050fa:	4770      	bx	lr
 80050fc:	200000b4 	.word	0x200000b4

08005100 <VescToSTM_stop_motor>:
int32_t VescToSTM_get_rpm(){
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
}

void VescToSTM_stop_motor(){
	MCI_StopMotor( pMCI[M1] );
 8005100:	4b01      	ldr	r3, [pc, #4]	; (8005108 <VescToSTM_stop_motor+0x8>)
 8005102:	6818      	ldr	r0, [r3, #0]
 8005104:	f7fd bc36 	b.w	8002974 <MCI_StopMotor>
 8005108:	200033ac 	.word	0x200033ac

0800510c <VescToSTM_start_motor>:
}
void VescToSTM_start_motor(){
	MCI_StartMotor( pMCI[M1] );
 800510c:	4b01      	ldr	r3, [pc, #4]	; (8005114 <VescToSTM_start_motor+0x8>)
 800510e:	6818      	ldr	r0, [r3, #0]
 8005110:	f7fd bc26 	b.w	8002960 <MCI_StartMotor>
 8005114:	200033ac 	.word	0x200033ac

08005118 <VescToSTM_get_distance>:
 * Get the distance traveled based on wheel diameter, gearing and motor pole settings.
 *
 * @return
 * Distance traveled since boot, in meters
 */
float VescToSTM_get_distance(void) {
 8005118:	b508      	push	{r3, lr}
 * @return
 * The tachometer value in motor steps. The number of motor revolutions will
 * be this number divided by (3 * MOTOR_POLE_NUMBER).
 */
int32_t VescToSTM_get_tachometer_value(bool reset) {
	int val = HALL_M1.tachometer;
 800511a:	4b05      	ldr	r3, [pc, #20]	; (8005130 <VescToSTM_get_distance+0x18>)
	return VescToSTM_get_tachometer_value(false) * tacho_scale;
 800511c:	f8d3 00dc 	ldr.w	r0, [r3, #220]	; 0xdc
 8005120:	f7fb fdc8 	bl	8000cb4 <__aeabi_i2f>
 8005124:	4b03      	ldr	r3, [pc, #12]	; (8005134 <VescToSTM_get_distance+0x1c>)
 8005126:	6819      	ldr	r1, [r3, #0]
 8005128:	f7fb fe18 	bl	8000d5c <__aeabi_fmul>
}
 800512c:	bd08      	pop	{r3, pc}
 800512e:	bf00      	nop
 8005130:	200000b4 	.word	0x200000b4
 8005134:	2000077c 	.word	0x2000077c

08005138 <VescToSTM_get_distance_abs>:
float VescToSTM_get_distance_abs(void) {
 8005138:	b508      	push	{r3, lr}
 * @return
 * The tachometer value in motor steps. The number of motor revolutions will
 * be this number divided by (3 * MOTOR_POLE_NUMBER).
 */
int32_t VescToSTM_get_tachometer_abs_value(bool reset) {
	int val = HALL_M1.tachometer_abs;
 800513a:	4b05      	ldr	r3, [pc, #20]	; (8005150 <VescToSTM_get_distance_abs+0x18>)
	return VescToSTM_get_tachometer_abs_value(false) * tacho_scale;
 800513c:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8005140:	f7fb fdb8 	bl	8000cb4 <__aeabi_i2f>
 8005144:	4b03      	ldr	r3, [pc, #12]	; (8005154 <VescToSTM_get_distance_abs+0x1c>)
 8005146:	6819      	ldr	r1, [r3, #0]
 8005148:	f7fb fe08 	bl	8000d5c <__aeabi_fmul>
}
 800514c:	bd08      	pop	{r3, pc}
 800514e:	bf00      	nop
 8005150:	200000b4 	.word	0x200000b4
 8005154:	2000077c 	.word	0x2000077c

08005158 <VescToSTM_set_odometer>:
void VescToSTM_set_odometer(uint32_t new_odometer_meters) {
 8005158:	b538      	push	{r3, r4, r5, lr}
	m_odometer_meters = new_odometer_meters - VescToSTM_get_distance_abs();
 800515a:	f7fb fda7 	bl	8000cac <__aeabi_ui2f>
	int val = HALL_M1.tachometer_abs;
 800515e:	4b09      	ldr	r3, [pc, #36]	; (8005184 <VescToSTM_set_odometer+0x2c>)
	m_odometer_meters = new_odometer_meters - VescToSTM_get_distance_abs();
 8005160:	4604      	mov	r4, r0
	return VescToSTM_get_tachometer_abs_value(false) * tacho_scale;
 8005162:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8005166:	f7fb fda5 	bl	8000cb4 <__aeabi_i2f>
 800516a:	4b07      	ldr	r3, [pc, #28]	; (8005188 <VescToSTM_set_odometer+0x30>)
	m_odometer_meters = new_odometer_meters - VescToSTM_get_distance_abs();
 800516c:	4d07      	ldr	r5, [pc, #28]	; (800518c <VescToSTM_set_odometer+0x34>)
	return VescToSTM_get_tachometer_abs_value(false) * tacho_scale;
 800516e:	6819      	ldr	r1, [r3, #0]
 8005170:	f7fb fdf4 	bl	8000d5c <__aeabi_fmul>
 8005174:	4601      	mov	r1, r0
	m_odometer_meters = new_odometer_meters - VescToSTM_get_distance_abs();
 8005176:	4620      	mov	r0, r4
 8005178:	f7fb fce6 	bl	8000b48 <__aeabi_fsub>
 800517c:	f7fb fff0 	bl	8001160 <__aeabi_f2uiz>
 8005180:	6028      	str	r0, [r5, #0]
}
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	200000b4 	.word	0x200000b4
 8005188:	2000077c 	.word	0x2000077c
 800518c:	20000778 	.word	0x20000778

08005190 <VescToSTM_get_odometer>:
	int val = HALL_M1.tachometer_abs;
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <VescToSTM_get_odometer+0x2c>)
uint32_t VescToSTM_get_odometer(void) {
 8005192:	b510      	push	{r4, lr}
	return VescToSTM_get_tachometer_abs_value(false) * tacho_scale;
 8005194:	f8d3 00e0 	ldr.w	r0, [r3, #224]	; 0xe0
 8005198:	f7fb fd8c 	bl	8000cb4 <__aeabi_i2f>
 800519c:	4b08      	ldr	r3, [pc, #32]	; (80051c0 <VescToSTM_get_odometer+0x30>)
 800519e:	6819      	ldr	r1, [r3, #0]
 80051a0:	f7fb fddc 	bl	8000d5c <__aeabi_fmul>
	return m_odometer_meters + VescToSTM_get_distance_abs();
 80051a4:	4b07      	ldr	r3, [pc, #28]	; (80051c4 <VescToSTM_get_odometer+0x34>)
	return VescToSTM_get_tachometer_abs_value(false) * tacho_scale;
 80051a6:	4604      	mov	r4, r0
	return m_odometer_meters + VescToSTM_get_distance_abs();
 80051a8:	6818      	ldr	r0, [r3, #0]
 80051aa:	f7fb fd7f 	bl	8000cac <__aeabi_ui2f>
 80051ae:	4601      	mov	r1, r0
 80051b0:	4620      	mov	r0, r4
 80051b2:	f7fb fccb 	bl	8000b4c <__addsf3>
 80051b6:	f7fb ffd3 	bl	8001160 <__aeabi_f2uiz>
}
 80051ba:	bd10      	pop	{r4, pc}
 80051bc:	200000b4 	.word	0x200000b4
 80051c0:	2000077c 	.word	0x2000077c
 80051c4:	20000778 	.word	0x20000778

080051c8 <VescToSTM_get_tachometer_value>:
	int val = HALL_M1.tachometer;
 80051c8:	4b04      	ldr	r3, [pc, #16]	; (80051dc <VescToSTM_get_tachometer_value+0x14>)
 80051ca:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
	if (reset) {
 80051ce:	b110      	cbz	r0, 80051d6 <VescToSTM_get_tachometer_value+0xe>
		HALL_M1.tachometer = 0;
 80051d0:	2100      	movs	r1, #0
 80051d2:	f8c3 10dc 	str.w	r1, [r3, #220]	; 0xdc
}
 80051d6:	4610      	mov	r0, r2
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	200000b4 	.word	0x200000b4

080051e0 <VescToSTM_get_tachometer_abs_value>:
	int val = HALL_M1.tachometer_abs;
 80051e0:	4b04      	ldr	r3, [pc, #16]	; (80051f4 <VescToSTM_get_tachometer_abs_value+0x14>)
 80051e2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0

	if (reset) {
 80051e6:	b110      	cbz	r0, 80051ee <VescToSTM_get_tachometer_abs_value+0xe>
		HALL_M1.tachometer_abs = 0;
 80051e8:	2100      	movs	r1, #0
 80051ea:	f8c3 10e0 	str.w	r1, [r3, #224]	; 0xe0
	}

	return val;
}
 80051ee:	4610      	mov	r0, r2
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop
 80051f4:	200000b4 	.word	0x200000b4

080051f8 <VescToSTM_set_handbrake>:
 * handbrake.
 *
 * @param current
 * The brake current to use.
 */
void VescToSTM_set_handbrake(float current) {
 80051f8:	b570      	push	{r4, r5, r6, lr}
	int32_t q = abs(current_to_torque(current*1000));
 80051fa:	4919      	ldr	r1, [pc, #100]	; (8005260 <VescToSTM_set_handbrake+0x68>)
 80051fc:	f7fb fdae 	bl	8000d5c <__aeabi_fmul>
 8005200:	f7fb ff88 	bl	8001114 <__aeabi_f2iz>
	float ret = curr_ma * CURRENT_FACTOR_mA;
 8005204:	f7fb f900 	bl	8000408 <__aeabi_i2d>
 8005208:	a313      	add	r3, pc, #76	; (adr r3, 8005258 <VescToSTM_set_handbrake+0x60>)
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	f7fb f965 	bl	80004dc <__aeabi_dmul>
 8005212:	f7fb fc45 	bl	8000aa0 <__aeabi_d2f>
	return ret;
 8005216:	f7fb ff7d 	bl	8001114 <__aeabi_f2iz>

	pMCI[M1]->pSTC->SPD->open_loop = true;
 800521a:	2601      	movs	r6, #1
	pMCI[M1]->pSTC->SPD->open_angle = 0;
 800521c:	2200      	movs	r2, #0
	pMCI[M1]->pSTC->SPD->open_loop = true;
 800521e:	4b11      	ldr	r3, [pc, #68]	; (8005264 <VescToSTM_set_handbrake+0x6c>)
	int32_t q = abs(current_to_torque(current*1000));
 8005220:	ea80 71e0 	eor.w	r1, r0, r0, asr #31
 8005224:	eba1 71e0 	sub.w	r1, r1, r0, asr #31
	pMCI[M1]->pSTC->SPD->open_loop = true;
 8005228:	6818      	ldr	r0, [r3, #0]

	if(q > SpeednTorqCtrlM1.MaxPositiveTorque){
 800522a:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <VescToSTM_set_handbrake+0x70>)
	pMCI[M1]->pSTC->SPD->open_loop = true;
 800522c:	6845      	ldr	r5, [r0, #4]
 800522e:	696c      	ldr	r4, [r5, #20]
 8005230:	f884 6020 	strb.w	r6, [r4, #32]
	if(q > SpeednTorqCtrlM1.MaxPositiveTorque){
 8005234:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
		q = SpeednTorqCtrlM1.MaxPositiveTorque;
	}
	pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = q;
 8005236:	692d      	ldr	r5, [r5, #16]
 8005238:	428b      	cmp	r3, r1
 800523a:	bfa8      	it	ge
 800523c:	460b      	movge	r3, r1
 800523e:	4611      	mov	r1, r2
 8005240:	b21b      	sxth	r3, r3
 8005242:	f363 010f 	bfi	r1, r3, #0, #16
 8005246:	f363 411f 	bfi	r1, r3, #16, #16
	pMCI[M1]->pSTC->SPD->open_angle = 0;
 800524a:	8462      	strh	r2, [r4, #34]	; 0x22
	pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = q;
 800524c:	6169      	str	r1, [r5, #20]
	pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = q;
	MCI_ExecSpeedRamp(pMCI[M1], 0 , 0);
 800524e:	4611      	mov	r1, r2
}
 8005250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	MCI_ExecSpeedRamp(pMCI[M1], 0 , 0);
 8005254:	f7fd bb66 	b.w	8002924 <MCI_ExecSpeedRamp>
 8005258:	35bd512f 	.word	0x35bd512f
 800525c:	3fd455b0 	.word	0x3fd455b0
 8005260:	447a0000 	.word	0x447a0000
 8005264:	200033ac 	.word	0x200033ac
 8005268:	2000042c 	.word	0x2000042c
 800526c:	00000000 	.word	0x00000000

08005270 <VescToSTM_get_battery_level>:
 * Pointer to where to store the remaining watt hours, can be null.
 *
 * @return
 * Battery level, range 0 to 1
 */
float VescToSTM_get_battery_level(float *wh_left) {
 8005270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (float)(VBS_GetAvBusVoltage_d(pMCT[M1]->pBusVoltageSensor)) / BATTERY_VOLTAGE_GAIN;
 8005274:	4b8a      	ldr	r3, [pc, #552]	; (80054a0 <VescToSTM_get_battery_level+0x230>)
float VescToSTM_get_battery_level(float *wh_left) {
 8005276:	b082      	sub	sp, #8
	return (float)(VBS_GetAvBusVoltage_d(pMCT[M1]->pBusVoltageSensor)) / BATTERY_VOLTAGE_GAIN;
 8005278:	681b      	ldr	r3, [r3, #0]
float VescToSTM_get_battery_level(float *wh_left) {
 800527a:	4604      	mov	r4, r0
	return (float)(VBS_GetAvBusVoltage_d(pMCT[M1]->pBusVoltageSensor)) / BATTERY_VOLTAGE_GAIN;
 800527c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800527e:	f7fb ff8f 	bl	80011a0 <VBS_GetAvBusVoltage_d>
 8005282:	f7fb fd13 	bl	8000cac <__aeabi_ui2f>
 8005286:	f7fb f8d1 	bl	800042c <__aeabi_f2d>
 800528a:	a377      	add	r3, pc, #476	; (adr r3, 8005468 <VescToSTM_get_battery_level+0x1f8>)
 800528c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005290:	f7fb f924 	bl	80004dc <__aeabi_dmul>
 8005294:	f7fb fc04 	bl	8000aa0 <__aeabi_d2f>
	const volatile mc_configuration *conf = &mc_conf;
	const float v_in = VescToSTM_get_bus_voltage();
	float battery_avg_voltage = 0.0;
	float battery_avg_voltage_left = 0.0;
	float ah_left = 0;
	float ah_tot = conf->si_battery_ah;
 8005298:	4b82      	ldr	r3, [pc, #520]	; (80054a4 <VescToSTM_get_battery_level+0x234>)
	return (float)(VBS_GetAvBusVoltage_d(pMCT[M1]->pBusVoltageSensor)) / BATTERY_VOLTAGE_GAIN;
 800529a:	4605      	mov	r5, r0
	float ah_tot = conf->si_battery_ah;
 800529c:	f8d3 6184 	ldr.w	r6, [r3, #388]	; 0x184

	switch (conf->si_battery_type) {
 80052a0:	f893 117c 	ldrb.w	r1, [r3, #380]	; 0x17c
 80052a4:	2901      	cmp	r1, #1
 80052a6:	d00c      	beq.n	80052c2 <VescToSTM_get_battery_level+0x52>
 80052a8:	b2ca      	uxtb	r2, r1
 80052aa:	2a02      	cmp	r2, #2
 80052ac:	f000 809e 	beq.w	80053ec <VescToSTM_get_battery_level+0x17c>
 80052b0:	2a00      	cmp	r2, #0
 80052b2:	d04e      	beq.n	8005352 <VescToSTM_get_battery_level+0xe2>
 80052b4:	2500      	movs	r5, #0
 80052b6:	487c      	ldr	r0, [pc, #496]	; (80054a8 <VescToSTM_get_battery_level+0x238>)
	}

	const float wh_batt_tot = ah_tot * battery_avg_voltage;
	const float wh_batt_left = ah_left * battery_avg_voltage_left;

	if (wh_left) {
 80052b8:	b104      	cbz	r4, 80052bc <VescToSTM_get_battery_level+0x4c>
		*wh_left = wh_batt_left;
 80052ba:	6025      	str	r5, [r4, #0]
	}

	return wh_batt_left / wh_batt_tot;
}
 80052bc:	b002      	add	sp, #8
 80052be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		battery_avg_voltage = ((2.8 + 3.6) / 2.0) * (float)(conf->si_battery_cells);
 80052c2:	f8d3 a180 	ldr.w	sl, [r3, #384]	; 0x180
		battery_avg_voltage_left = ((2.8 * (float)(conf->si_battery_cells) + v_in) / 2.0);
 80052c6:	f8d3 8180 	ldr.w	r8, [r3, #384]	; 0x180
		ah_left = utils_map(v_in / (float)(conf->si_battery_cells),
 80052ca:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 80052ce:	f8d3 7184 	ldr.w	r7, [r3, #388]	; 0x184
 80052d2:	f7fb fcef 	bl	8000cb4 <__aeabi_i2f>
 80052d6:	4601      	mov	r1, r0
 80052d8:	4628      	mov	r0, r5
 80052da:	f7fb fdf3 	bl	8000ec4 <__aeabi_fdiv>
 80052de:	2300      	movs	r3, #0
 80052e0:	4a72      	ldr	r2, [pc, #456]	; (80054ac <VescToSTM_get_battery_level+0x23c>)
 80052e2:	4973      	ldr	r1, [pc, #460]	; (80054b0 <VescToSTM_get_battery_level+0x240>)
 80052e4:	9700      	str	r7, [sp, #0]
 80052e6:	f002 fddf 	bl	8007ea8 <utils_map>
 80052ea:	4607      	mov	r7, r0
		battery_avg_voltage_left = ((2.8 * (float)(conf->si_battery_cells) + v_in) / 2.0);
 80052ec:	4640      	mov	r0, r8
 80052ee:	f7fb fce1 	bl	8000cb4 <__aeabi_i2f>
 80052f2:	f7fb f89b 	bl	800042c <__aeabi_f2d>
 80052f6:	a35e      	add	r3, pc, #376	; (adr r3, 8005470 <VescToSTM_get_battery_level+0x200>)
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f7fb f8ee 	bl	80004dc <__aeabi_dmul>
 8005300:	4680      	mov	r8, r0
 8005302:	4628      	mov	r0, r5
 8005304:	4689      	mov	r9, r1
 8005306:	f7fb f891 	bl	800042c <__aeabi_f2d>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4640      	mov	r0, r8
 8005310:	4649      	mov	r1, r9
 8005312:	f7fa ff2d 	bl	8000170 <__adddf3>
 8005316:	2200      	movs	r2, #0
 8005318:	4b66      	ldr	r3, [pc, #408]	; (80054b4 <VescToSTM_get_battery_level+0x244>)
 800531a:	f7fb f8df 	bl	80004dc <__aeabi_dmul>
 800531e:	f7fb fbbf 	bl	8000aa0 <__aeabi_d2f>
 8005322:	4639      	mov	r1, r7
 8005324:	f7fb fd1a 	bl	8000d5c <__aeabi_fmul>
 8005328:	4605      	mov	r5, r0
		battery_avg_voltage = ((2.8 + 3.6) / 2.0) * (float)(conf->si_battery_cells);
 800532a:	4650      	mov	r0, sl
 800532c:	f7fb fcc2 	bl	8000cb4 <__aeabi_i2f>
 8005330:	f7fb f87c 	bl	800042c <__aeabi_f2d>
 8005334:	a350      	add	r3, pc, #320	; (adr r3, 8005478 <VescToSTM_get_battery_level+0x208>)
 8005336:	e9d3 2300 	ldrd	r2, r3, [r3]
		battery_avg_voltage = ((2.1 + 2.36) / 2.0) * (float)(conf->si_battery_cells);
 800533a:	f7fb f8cf 	bl	80004dc <__aeabi_dmul>
 800533e:	f7fb fbaf 	bl	8000aa0 <__aeabi_d2f>
 8005342:	4631      	mov	r1, r6
 8005344:	f7fb fd0a 	bl	8000d5c <__aeabi_fmul>
 8005348:	4601      	mov	r1, r0
 800534a:	4628      	mov	r0, r5
 800534c:	f7fb fdba 	bl	8000ec4 <__aeabi_fdiv>
		break;
 8005350:	e7b2      	b.n	80052b8 <VescToSTM_get_battery_level+0x48>
		battery_avg_voltage = ((3.2 + 4.2) / 2.0) * (float)(conf->si_battery_cells);
 8005352:	f8d3 7180 	ldr.w	r7, [r3, #384]	; 0x180
		battery_avg_voltage_left = ((3.2 * (float)(conf->si_battery_cells) + v_in) / 2.0);
 8005356:	f8d3 8180 	ldr.w	r8, [r3, #384]	; 0x180
		float batt_left = utils_map(v_in / (float)(conf->si_battery_cells),
 800535a:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 800535e:	f7fb fca9 	bl	8000cb4 <__aeabi_i2f>
 8005362:	4601      	mov	r1, r0
 8005364:	4628      	mov	r0, r5
 8005366:	f7fb fdad 	bl	8000ec4 <__aeabi_fdiv>
 800536a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800536e:	2300      	movs	r3, #0
 8005370:	4951      	ldr	r1, [pc, #324]	; (80054b8 <VescToSTM_get_battery_level+0x248>)
 8005372:	9200      	str	r2, [sp, #0]
 8005374:	4a51      	ldr	r2, [pc, #324]	; (80054bc <VescToSTM_get_battery_level+0x24c>)
 8005376:	f002 fd97 	bl	8007ea8 <utils_map>
		batt_left = utils_batt_liion_norm_v_to_capacity(batt_left);
 800537a:	f002 fdb1 	bl	8007ee0 <utils_batt_liion_norm_v_to_capacity>
 800537e:	4682      	mov	sl, r0
		ah_tot *= 0.85; // 0.85 because the battery is not fully depleted at 3.2V / cell
 8005380:	4630      	mov	r0, r6
 8005382:	f7fb f853 	bl	800042c <__aeabi_f2d>
 8005386:	a33e      	add	r3, pc, #248	; (adr r3, 8005480 <VescToSTM_get_battery_level+0x210>)
 8005388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538c:	f7fb f8a6 	bl	80004dc <__aeabi_dmul>
 8005390:	f7fb fb86 	bl	8000aa0 <__aeabi_d2f>
 8005394:	4606      	mov	r6, r0
		battery_avg_voltage_left = ((3.2 * (float)(conf->si_battery_cells) + v_in) / 2.0);
 8005396:	4640      	mov	r0, r8
 8005398:	f7fb fc8c 	bl	8000cb4 <__aeabi_i2f>
 800539c:	f7fb f846 	bl	800042c <__aeabi_f2d>
 80053a0:	a335      	add	r3, pc, #212	; (adr r3, 8005478 <VescToSTM_get_battery_level+0x208>)
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f7fb f899 	bl	80004dc <__aeabi_dmul>
 80053aa:	4680      	mov	r8, r0
 80053ac:	4628      	mov	r0, r5
 80053ae:	4689      	mov	r9, r1
 80053b0:	f7fb f83c 	bl	800042c <__aeabi_f2d>
 80053b4:	4602      	mov	r2, r0
 80053b6:	460b      	mov	r3, r1
 80053b8:	4640      	mov	r0, r8
 80053ba:	4649      	mov	r1, r9
 80053bc:	f7fa fed8 	bl	8000170 <__adddf3>
 80053c0:	2200      	movs	r2, #0
 80053c2:	4b3c      	ldr	r3, [pc, #240]	; (80054b4 <VescToSTM_get_battery_level+0x244>)
 80053c4:	f7fb f88a 	bl	80004dc <__aeabi_dmul>
 80053c8:	f7fb fb6a 	bl	8000aa0 <__aeabi_d2f>
 80053cc:	4631      	mov	r1, r6
 80053ce:	f7fb fcc5 	bl	8000d5c <__aeabi_fmul>
 80053d2:	4651      	mov	r1, sl
 80053d4:	f7fb fcc2 	bl	8000d5c <__aeabi_fmul>
 80053d8:	4605      	mov	r5, r0
		battery_avg_voltage = ((3.2 + 4.2) / 2.0) * (float)(conf->si_battery_cells);
 80053da:	4638      	mov	r0, r7
 80053dc:	f7fb fc6a 	bl	8000cb4 <__aeabi_i2f>
 80053e0:	f7fb f824 	bl	800042c <__aeabi_f2d>
 80053e4:	a328      	add	r3, pc, #160	; (adr r3, 8005488 <VescToSTM_get_battery_level+0x218>)
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	e7a6      	b.n	800533a <VescToSTM_get_battery_level+0xca>
		battery_avg_voltage = ((2.1 + 2.36) / 2.0) * (float)(conf->si_battery_cells);
 80053ec:	f8d3 a180 	ldr.w	sl, [r3, #384]	; 0x180
		battery_avg_voltage_left = ((2.1 * (float)(conf->si_battery_cells) + v_in) / 2.0);
 80053f0:	f8d3 8180 	ldr.w	r8, [r3, #384]	; 0x180
		ah_left = utils_map(v_in / (float)(conf->si_battery_cells),
 80053f4:	f8d3 0180 	ldr.w	r0, [r3, #384]	; 0x180
 80053f8:	f8d3 7184 	ldr.w	r7, [r3, #388]	; 0x184
 80053fc:	f7fb fc5a 	bl	8000cb4 <__aeabi_i2f>
 8005400:	4601      	mov	r1, r0
 8005402:	4628      	mov	r0, r5
 8005404:	f7fb fd5e 	bl	8000ec4 <__aeabi_fdiv>
 8005408:	2300      	movs	r3, #0
 800540a:	4a2d      	ldr	r2, [pc, #180]	; (80054c0 <VescToSTM_get_battery_level+0x250>)
 800540c:	492d      	ldr	r1, [pc, #180]	; (80054c4 <VescToSTM_get_battery_level+0x254>)
 800540e:	9700      	str	r7, [sp, #0]
 8005410:	f002 fd4a 	bl	8007ea8 <utils_map>
 8005414:	4607      	mov	r7, r0
		battery_avg_voltage_left = ((2.1 * (float)(conf->si_battery_cells) + v_in) / 2.0);
 8005416:	4640      	mov	r0, r8
 8005418:	f7fb fc4c 	bl	8000cb4 <__aeabi_i2f>
 800541c:	f7fb f806 	bl	800042c <__aeabi_f2d>
 8005420:	a31b      	add	r3, pc, #108	; (adr r3, 8005490 <VescToSTM_get_battery_level+0x220>)
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f7fb f859 	bl	80004dc <__aeabi_dmul>
 800542a:	4680      	mov	r8, r0
 800542c:	4628      	mov	r0, r5
 800542e:	4689      	mov	r9, r1
 8005430:	f7fa fffc 	bl	800042c <__aeabi_f2d>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4640      	mov	r0, r8
 800543a:	4649      	mov	r1, r9
 800543c:	f7fa fe98 	bl	8000170 <__adddf3>
 8005440:	2200      	movs	r2, #0
 8005442:	4b1c      	ldr	r3, [pc, #112]	; (80054b4 <VescToSTM_get_battery_level+0x244>)
 8005444:	f7fb f84a 	bl	80004dc <__aeabi_dmul>
 8005448:	f7fb fb2a 	bl	8000aa0 <__aeabi_d2f>
 800544c:	4639      	mov	r1, r7
 800544e:	f7fb fc85 	bl	8000d5c <__aeabi_fmul>
 8005452:	4605      	mov	r5, r0
		battery_avg_voltage = ((2.1 + 2.36) / 2.0) * (float)(conf->si_battery_cells);
 8005454:	4650      	mov	r0, sl
 8005456:	f7fb fc2d 	bl	8000cb4 <__aeabi_i2f>
 800545a:	f7fa ffe7 	bl	800042c <__aeabi_f2d>
 800545e:	a30e      	add	r3, pc, #56	; (adr r3, 8005498 <VescToSTM_get_battery_level+0x228>)
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	e769      	b.n	800533a <VescToSTM_get_battery_level+0xca>
 8005466:	bf00      	nop
 8005468:	cc71658a 	.word	0xcc71658a
 800546c:	3f479c9c 	.word	0x3f479c9c
 8005470:	66666666 	.word	0x66666666
 8005474:	40066666 	.word	0x40066666
 8005478:	9999999a 	.word	0x9999999a
 800547c:	40099999 	.word	0x40099999
 8005480:	33333333 	.word	0x33333333
 8005484:	3feb3333 	.word	0x3feb3333
 8005488:	9999999a 	.word	0x9999999a
 800548c:	400d9999 	.word	0x400d9999
 8005490:	cccccccd 	.word	0xcccccccd
 8005494:	4000cccc 	.word	0x4000cccc
 8005498:	3d70a3d7 	.word	0x3d70a3d7
 800549c:	4001d70a 	.word	0x4001d70a
 80054a0:	200033b0 	.word	0x200033b0
 80054a4:	20003dc4 	.word	0x20003dc4
 80054a8:	7fc00000 	.word	0x7fc00000
 80054ac:	40666666 	.word	0x40666666
 80054b0:	40266666 	.word	0x40266666
 80054b4:	3fe00000 	.word	0x3fe00000
 80054b8:	404ccccd 	.word	0x404ccccd
 80054bc:	40866666 	.word	0x40866666
 80054c0:	40170a3d 	.word	0x40170a3d
 80054c4:	40066666 	.word	0x40066666

080054c8 <VescToSTM_get_duty_cycle_now>:

float VescToSTM_get_duty_cycle_now(void) {
 80054c8:	b510      	push	{r4, lr}
	qd_t Vqd = 	MCI_GetVqd(pMCI[M1]);
 80054ca:	4c0d      	ldr	r4, [pc, #52]	; (8005500 <VescToSTM_get_duty_cycle_now+0x38>)
float VescToSTM_get_duty_cycle_now(void) {
 80054cc:	b082      	sub	sp, #8
	qd_t Vqd = 	MCI_GetVqd(pMCI[M1]);
 80054ce:	6820      	ldr	r0, [r4, #0]
 80054d0:	f7fd fa98 	bl	8002a04 <MCI_GetVqd>
 80054d4:	4603      	mov	r3, r0
	float amplitude = (MCI_GetPhaseVoltageAmplitude(pMCI[M1]) * SIGN(Vqd.q)) / 32768.0;
 80054d6:	6820      	ldr	r0, [r4, #0]
	qd_t Vqd = 	MCI_GetVqd(pMCI[M1]);
 80054d8:	9301      	str	r3, [sp, #4]
	float amplitude = (MCI_GetPhaseVoltageAmplitude(pMCI[M1]) * SIGN(Vqd.q)) / 32768.0;
 80054da:	f7fd faa1 	bl	8002a20 <MCI_GetPhaseVoltageAmplitude>
 80054de:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bfb8      	it	lt
 80054e6:	4240      	neglt	r0, r0
 80054e8:	f7fa ff8e 	bl	8000408 <__aeabi_i2d>
 80054ec:	2200      	movs	r2, #0
 80054ee:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80054f2:	f7fa fff3 	bl	80004dc <__aeabi_dmul>
 80054f6:	f7fb fad3 	bl	8000aa0 <__aeabi_d2f>
	return amplitude;
}
 80054fa:	b002      	add	sp, #8
 80054fc:	bd10      	pop	{r4, pc}
 80054fe:	bf00      	nop
 8005500:	200033ac 	.word	0x200033ac

08005504 <VescToSTM_set_current_rel>:
 *
 * @param current
 * The relative current value, range [-1.0 1.0]
 */
void VescToSTM_set_current_rel(float val) {
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8005504:	2200      	movs	r2, #0
 8005506:	4b2d      	ldr	r3, [pc, #180]	; (80055bc <VescToSTM_set_current_rel+0xb8>)
void VescToSTM_set_current_rel(float val) {
 8005508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	pMCI[M1]->pSTC->SPD->open_loop = false;
 800550c:	681d      	ldr	r5, [r3, #0]
	uint32_t q;
	float torque;
	if(val>0){
 800550e:	2100      	movs	r1, #0
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8005510:	686f      	ldr	r7, [r5, #4]
void VescToSTM_set_current_rel(float val) {
 8005512:	4606      	mov	r6, r0
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8005514:	697b      	ldr	r3, [r7, #20]
		torque = (float)SpeednTorqCtrlM1.MaxPositiveTorque * val;
 8005516:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80055c4 <VescToSTM_set_current_rel+0xc0>
	pMCI[M1]->pSTC->SPD->open_loop = false;
 800551a:	f883 2020 	strb.w	r2, [r3, #32]
	if(val>0){
 800551e:	f7fb fdd9 	bl	80010d4 <__aeabi_fcmpgt>
 8005522:	b390      	cbz	r0, 800558a <VescToSTM_set_current_rel+0x86>
		torque = (float)SpeednTorqCtrlM1.MaxPositiveTorque * val;
 8005524:	f8b8 4026 	ldrh.w	r4, [r8, #38]	; 0x26
 8005528:	4620      	mov	r0, r4
 800552a:	f7fb fbbf 	bl	8000cac <__aeabi_ui2f>
 800552e:	4631      	mov	r1, r6
 8005530:	f7fb fc14 	bl	8000d5c <__aeabi_fmul>
		q = torque;
 8005534:	f7fb fe14 	bl	8001160 <__aeabi_f2uiz>
		torque = (float)SpeednTorqCtrlM1.MinNegativeTorque * val;
		q = torque;
		q = q *-1;
	}

	if(q > SpeednTorqCtrlM1.MaxPositiveTorque){
 8005538:	4284      	cmp	r4, r0
 800553a:	d304      	bcc.n	8005546 <VescToSTM_set_current_rel+0x42>
		q = SpeednTorqCtrlM1.MaxPositiveTorque;
	}else if (q < SpeednTorqCtrlM1.MinNegativeTorque){
 800553c:	f9b8 4028 	ldrsh.w	r4, [r8, #40]	; 0x28
 8005540:	4284      	cmp	r4, r0
 8005542:	bf38      	it	cc
 8005544:	4604      	movcc	r4, r0
		q = SpeednTorqCtrlM1.MinNegativeTorque;
	}
	if(q > 0){
 8005546:	b36c      	cbz	r4, 80055a4 <VescToSTM_set_current_rel+0xa0>
		pMCI[M1]->pSTC->PISpeed->wUpperIntegralLimit = (uint32_t)q * SP_KDDIV;
 8005548:	6939      	ldr	r1, [r7, #16]
		pMCI[M1]->pSTC->PISpeed->wLowerIntegralLimit = (uint32_t)-q * SP_KDDIV;
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = q;
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = mc_conf.s_pid_allow_braking ? -q : 0;
 800554a:	4e1d      	ldr	r6, [pc, #116]	; (80055c0 <VescToSTM_set_current_rel+0xbc>)
		pMCI[M1]->pSTC->PISpeed->wUpperIntegralLimit = (uint32_t)q * SP_KDDIV;
 800554c:	0122      	lsls	r2, r4, #4
		pMCI[M1]->pSTC->PISpeed->wLowerIntegralLimit = (uint32_t)-q * SP_KDDIV;
 800554e:	ebc4 7304 	rsb	r3, r4, r4, lsl #28
		pMCI[M1]->pSTC->PISpeed->wUpperIntegralLimit = (uint32_t)q * SP_KDDIV;
 8005552:	60ca      	str	r2, [r1, #12]
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = mc_conf.s_pid_allow_braking ? -q : 0;
 8005554:	f896 2124 	ldrb.w	r2, [r6, #292]	; 0x124
		pMCI[M1]->pSTC->PISpeed->wLowerIntegralLimit = (uint32_t)-q * SP_KDDIV;
 8005558:	011b      	lsls	r3, r3, #4
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = q;
 800555a:	828c      	strh	r4, [r1, #20]
		pMCI[M1]->pSTC->PISpeed->wLowerIntegralLimit = (uint32_t)-q * SP_KDDIV;
 800555c:	610b      	str	r3, [r1, #16]
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = mc_conf.s_pid_allow_braking ? -q : 0;
 800555e:	b98a      	cbnz	r2, 8005584 <VescToSTM_set_current_rel+0x80>
 8005560:	82ca      	strh	r2, [r1, #22]
		MCI_ExecSpeedRamp(pMCI[M1], mc_conf.l_max_erpm / mc_conf.si_motor_poles , 0);
 8005562:	f896 0170 	ldrb.w	r0, [r6, #368]	; 0x170
 8005566:	f7fb fba5 	bl	8000cb4 <__aeabi_i2f>
 800556a:	4601      	mov	r1, r0
 800556c:	69b0      	ldr	r0, [r6, #24]
 800556e:	f7fb fca9 	bl	8000ec4 <__aeabi_fdiv>
 8005572:	f7fb fdcf 	bl	8001114 <__aeabi_f2iz>
 8005576:	2200      	movs	r2, #0
 8005578:	b201      	sxth	r1, r0
 800557a:	4628      	mov	r0, r5
		pMCI[M1]->pSTC->PISpeed->wLowerIntegralLimit = (uint32_t)q * SP_KDDIV;
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = mc_conf.s_pid_allow_braking ? -q : 0;
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = q;
		MCI_ExecSpeedRamp(pMCI[M1], mc_conf.l_min_erpm / mc_conf.si_motor_poles , 0);
	}
}
 800557c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		MCI_ExecSpeedRamp(pMCI[M1], mc_conf.l_max_erpm / mc_conf.si_motor_poles , 0);
 8005580:	f7fd b9d0 	b.w	8002924 <MCI_ExecSpeedRamp>
		pMCI[M1]->pSTC->PISpeed->hLowerOutputLimit = mc_conf.s_pid_allow_braking ? -q : 0;
 8005584:	4262      	negs	r2, r4
 8005586:	b212      	sxth	r2, r2
 8005588:	e7ea      	b.n	8005560 <VescToSTM_set_current_rel+0x5c>
		torque = (float)SpeednTorqCtrlM1.MinNegativeTorque * val;
 800558a:	f9b8 0028 	ldrsh.w	r0, [r8, #40]	; 0x28
 800558e:	f7fb fb91 	bl	8000cb4 <__aeabi_i2f>
 8005592:	4631      	mov	r1, r6
 8005594:	f7fb fbe2 	bl	8000d5c <__aeabi_fmul>
		q = torque;
 8005598:	f7fb fde2 	bl	8001160 <__aeabi_f2uiz>
		q = q *-1;
 800559c:	f8b8 4026 	ldrh.w	r4, [r8, #38]	; 0x26
 80055a0:	4240      	negs	r0, r0
 80055a2:	e7c9      	b.n	8005538 <VescToSTM_set_current_rel+0x34>
		pMCI[M1]->pSTC->PISpeed->wUpperIntegralLimit = (uint32_t)-q * SP_KDDIV;
 80055a4:	693b      	ldr	r3, [r7, #16]
		MCI_ExecSpeedRamp(pMCI[M1], mc_conf.l_min_erpm / mc_conf.si_motor_poles , 0);
 80055a6:	4e06      	ldr	r6, [pc, #24]	; (80055c0 <VescToSTM_set_current_rel+0xbc>)
		pMCI[M1]->pSTC->PISpeed->wLowerIntegralLimit = (uint32_t)q * SP_KDDIV;
 80055a8:	e9c3 4403 	strd	r4, r4, [r3, #12]
		pMCI[M1]->pSTC->PISpeed->hUpperOutputLimit = mc_conf.s_pid_allow_braking ? -q : 0;
 80055ac:	615c      	str	r4, [r3, #20]
		MCI_ExecSpeedRamp(pMCI[M1], mc_conf.l_min_erpm / mc_conf.si_motor_poles , 0);
 80055ae:	f896 0170 	ldrb.w	r0, [r6, #368]	; 0x170
 80055b2:	f7fb fb7f 	bl	8000cb4 <__aeabi_i2f>
 80055b6:	4601      	mov	r1, r0
 80055b8:	6970      	ldr	r0, [r6, #20]
 80055ba:	e7d8      	b.n	800556e <VescToSTM_set_current_rel+0x6a>
 80055bc:	200033ac 	.word	0x200033ac
 80055c0:	20003dc4 	.word	0x20003dc4
 80055c4:	2000042c 	.word	0x2000042c

080055c8 <VescToSTM_get_fault>:


mc_fault_code VescToSTM_get_fault(void) {
	mc_fault_code fault = FAULT_CODE_NONE;
	return fault;
}
 80055c8:	2000      	movs	r0, #0
 80055ca:	4770      	bx	lr

080055cc <app_set_configuration>:
 * Reconfigure and restart all apps. Some apps don't have any configuration options.
 *
 * @param conf
 * The new configuration to use.
 */
void app_set_configuration(app_configuration *conf) {
 80055cc:	b510      	push	{r4, lr}
	appconf = *conf;
 80055ce:	4c0e      	ldr	r4, [pc, #56]	; (8005608 <app_set_configuration+0x3c>)
void app_set_configuration(app_configuration *conf) {
 80055d0:	4601      	mov	r1, r0
	appconf = *conf;
 80055d2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80055d6:	4620      	mov	r0, r4
 80055d8:	f008 ffde 	bl	800e598 <memcpy>

	app_uartcomm_stop();
 80055dc:	f000 f87c 	bl	80056d8 <app_uartcomm_stop>

	switch (appconf.app_to_use) {
 80055e0:	7ee3      	ldrb	r3, [r4, #27]
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d006      	beq.n	80055f4 <app_set_configuration+0x28>
			break;
		default:
			break;
	}

	app_uartcomm_configure(appconf.app_uart_baudrate, appconf.permanent_uart_enabled);
 80055e6:	7da1      	ldrb	r1, [r4, #22]
 80055e8:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
 80055ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	app_uartcomm_configure(appconf.app_uart_baudrate, appconf.permanent_uart_enabled);
 80055f0:	f000 b882 	b.w	80056f8 <app_uartcomm_configure>
			app_uartcomm_start();
 80055f4:	f000 f84e 	bl	8005694 <app_uartcomm_start>
	app_uartcomm_configure(appconf.app_uart_baudrate, appconf.permanent_uart_enabled);
 80055f8:	7da1      	ldrb	r1, [r4, #22]
 80055fa:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
}
 80055fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	app_uartcomm_configure(appconf.app_uart_baudrate, appconf.permanent_uart_enabled);
 8005602:	f000 b879 	b.w	80056f8 <app_uartcomm_configure>
 8005606:	bf00      	nop
 8005608:	20000780 	.word	0x20000780

0800560c <app_calc_crc>:
 * Pointer to app_configuration or NULL for current appconf
 *
 * @return
 * CRC16 (with crc field in struct temporarily set to zero).
 */
unsigned app_calc_crc(app_configuration* conf) {
 800560c:	b538      	push	{r3, r4, r5, lr}
	//if(null == conf)
	//	conf = &appconf;

	unsigned crc_old = conf->crc;
	conf->crc = 0;
 800560e:	2300      	movs	r3, #0
unsigned app_calc_crc(app_configuration* conf) {
 8005610:	4604      	mov	r4, r0
	unsigned crc_old = conf->crc;
 8005612:	f8b0 51e0 	ldrh.w	r5, [r0, #480]	; 0x1e0
	unsigned crc_new = crc16((uint8_t*)conf, sizeof(app_configuration));
 8005616:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
	conf->crc = 0;
 800561a:	f8a0 31e0 	strh.w	r3, [r0, #480]	; 0x1e0
	unsigned crc_new = crc16((uint8_t*)conf, sizeof(app_configuration));
 800561e:	f001 fa61 	bl	8006ae4 <crc16>
	conf->crc = crc_old;
 8005622:	f8a4 51e0 	strh.w	r5, [r4, #480]	; 0x1e0
	return crc_new;
}
 8005626:	bd38      	pop	{r3, r4, r5, pc}

08005628 <task_app_usart>:
	if (thread_is_running && uart_is_running) {
		//sdStart(&HW_UART_DEV, &uart_cfg);
	}
}

void task_app_usart(void * argument){
 8005628:	4b01      	ldr	r3, [pc, #4]	; (8005630 <task_app_usart+0x8>)

	for(;;) {
		bool rx = true;
		while (rx) {
			rx = false;
			if (uart_is_running) {
 800562a:	781a      	ldrb	r2, [r3, #0]
		while (rx) {
 800562c:	e7fd      	b.n	800562a <task_app_usart+0x2>
 800562e:	bf00      	nop
 8005630:	20000965 	.word	0x20000965

08005634 <process_packet>:
	commands_process_packet(data, len, app_uartcomm_send_packet);
 8005634:	4a01      	ldr	r2, [pc, #4]	; (800563c <process_packet+0x8>)
 8005636:	f7fe b9cb 	b.w	80039d0 <commands_process_packet>
 800563a:	bf00      	nop
 800563c:	08005641 	.word	0x08005641

08005640 <app_uartcomm_send_packet>:
	packet_send_packet(data, len, PACKET_HANDLER);
 8005640:	2201      	movs	r2, #1
 8005642:	f001 ba79 	b.w	8006b38 <packet_send_packet>
 8005646:	bf00      	nop

08005648 <send_packet>:
	if (uart_is_running) {
 8005648:	4b0f      	ldr	r3, [pc, #60]	; (8005688 <send_packet+0x40>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	b1d3      	cbz	r3, 8005684 <send_packet+0x3c>
static void send_packet(unsigned char *data, unsigned int len) {
 800564e:	b570      	push	{r4, r5, r6, lr}
 8005650:	4605      	mov	r5, r0
 8005652:	460c      	mov	r4, r1
		while(HAL_DMA_GetState(&APP_USART_DMA_TX) == HAL_DMA_STATE_BUSY) osDelay(1);
 8005654:	4e0d      	ldr	r6, [pc, #52]	; (800568c <send_packet+0x44>)
 8005656:	e002      	b.n	800565e <send_packet+0x16>
 8005658:	2001      	movs	r0, #1
 800565a:	f006 fccb 	bl	800bff4 <osDelay>
 800565e:	4630      	mov	r0, r6
 8005660:	f004 fedc 	bl	800a41c <HAL_DMA_GetState>
 8005664:	2802      	cmp	r0, #2
 8005666:	d0f7      	beq.n	8005658 <send_packet+0x10>
		while( HAL_UART_Transmit_DMA(&APP_USART, data, len) != HAL_OK ) osDelay(1);
 8005668:	4e09      	ldr	r6, [pc, #36]	; (8005690 <send_packet+0x48>)
 800566a:	b2a4      	uxth	r4, r4
 800566c:	e002      	b.n	8005674 <send_packet+0x2c>
 800566e:	2001      	movs	r0, #1
 8005670:	f006 fcc0 	bl	800bff4 <osDelay>
 8005674:	4622      	mov	r2, r4
 8005676:	4629      	mov	r1, r5
 8005678:	4630      	mov	r0, r6
 800567a:	f006 fb3b 	bl	800bcf4 <HAL_UART_Transmit_DMA>
 800567e:	2800      	cmp	r0, #0
 8005680:	d1f5      	bne.n	800566e <send_packet+0x26>
}
 8005682:	bd70      	pop	{r4, r5, r6, pc}
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000965 	.word	0x20000965
 800568c:	200042f0 	.word	0x200042f0
 8005690:	20004408 	.word	0x20004408

08005694 <app_uartcomm_start>:
void app_uartcomm_start(void) {
 8005694:	b510      	push	{r4, lr}
	if (!thread_is_running) {
 8005696:	4c0a      	ldr	r4, [pc, #40]	; (80056c0 <app_uartcomm_start+0x2c>)
	packet_init(send_packet, process_packet, PACKET_HANDLER);
 8005698:	2201      	movs	r2, #1
 800569a:	490a      	ldr	r1, [pc, #40]	; (80056c4 <app_uartcomm_start+0x30>)
 800569c:	480a      	ldr	r0, [pc, #40]	; (80056c8 <app_uartcomm_start+0x34>)
 800569e:	f001 fa39 	bl	8006b14 <packet_init>
	if (!thread_is_running) {
 80056a2:	7823      	ldrb	r3, [r4, #0]
 80056a4:	b103      	cbz	r3, 80056a8 <app_uartcomm_start+0x14>
}
 80056a6:	bd10      	pop	{r4, pc}
		AppUsartHandle = osThreadNew(task_app_usart, NULL, &APPUSART_attributes);
 80056a8:	4a08      	ldr	r2, [pc, #32]	; (80056cc <app_uartcomm_start+0x38>)
 80056aa:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80056ae:	4808      	ldr	r0, [pc, #32]	; (80056d0 <app_uartcomm_start+0x3c>)
 80056b0:	f006 fc3e 	bl	800bf30 <osThreadNew>
		thread_is_running = true;
 80056b4:	2201      	movs	r2, #1
		AppUsartHandle = osThreadNew(task_app_usart, NULL, &APPUSART_attributes);
 80056b6:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <app_uartcomm_start+0x40>)
		thread_is_running = true;
 80056b8:	7022      	strb	r2, [r4, #0]
		AppUsartHandle = osThreadNew(task_app_usart, NULL, &APPUSART_attributes);
 80056ba:	6018      	str	r0, [r3, #0]
}
 80056bc:	bd10      	pop	{r4, pc}
 80056be:	bf00      	nop
 80056c0:	20000964 	.word	0x20000964
 80056c4:	08005635 	.word	0x08005635
 80056c8:	08005649 	.word	0x08005649
 80056cc:	08010b14 	.word	0x08010b14
 80056d0:	08005629 	.word	0x08005629
 80056d4:	20003dc0 	.word	0x20003dc0

080056d8 <app_uartcomm_stop>:
void app_uartcomm_stop(void) {
 80056d8:	b510      	push	{r4, lr}
	if (uart_is_running) {
 80056da:	4c05      	ldr	r4, [pc, #20]	; (80056f0 <app_uartcomm_stop+0x18>)
 80056dc:	7823      	ldrb	r3, [r4, #0]
 80056de:	b903      	cbnz	r3, 80056e2 <app_uartcomm_stop+0xa>
}
 80056e0:	bd10      	pop	{r4, pc}
		HAL_UART_DMAStop(&APP_USART);
 80056e2:	4804      	ldr	r0, [pc, #16]	; (80056f4 <app_uartcomm_stop+0x1c>)
 80056e4:	f006 fb40 	bl	800bd68 <HAL_UART_DMAStop>
		uart_is_running = false;
 80056e8:	2300      	movs	r3, #0
 80056ea:	7023      	strb	r3, [r4, #0]
}
 80056ec:	bd10      	pop	{r4, pc}
 80056ee:	bf00      	nop
 80056f0:	20000965 	.word	0x20000965
 80056f4:	20004408 	.word	0x20004408

080056f8 <app_uartcomm_configure>:
	if (thread_is_running && uart_is_running) {
 80056f8:	4b02      	ldr	r3, [pc, #8]	; (8005704 <app_uartcomm_configure+0xc>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	b10b      	cbz	r3, 8005702 <app_uartcomm_configure+0xa>
 80056fe:	4b02      	ldr	r3, [pc, #8]	; (8005708 <app_uartcomm_configure+0x10>)
 8005700:	781b      	ldrb	r3, [r3, #0]
}
 8005702:	4770      	bx	lr
 8005704:	20000964 	.word	0x20000964
 8005708:	20000965 	.word	0x20000965

0800570c <buffer_append_int16>:
#include "buffer.h"
#include <math.h>
#include <stdbool.h>

void buffer_append_int16(uint8_t* buffer, int16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
 800570c:	6813      	ldr	r3, [r2, #0]
void buffer_append_int16(uint8_t* buffer, int16_t number, int32_t *index) {
 800570e:	b430      	push	{r4, r5}
	buffer[(*index)++] = number >> 8;
 8005710:	1c5d      	adds	r5, r3, #1
 8005712:	120c      	asrs	r4, r1, #8
 8005714:	6015      	str	r5, [r2, #0]
 8005716:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number;
 8005718:	6813      	ldr	r3, [r2, #0]
 800571a:	1c5c      	adds	r4, r3, #1
 800571c:	6014      	str	r4, [r2, #0]
 800571e:	54c1      	strb	r1, [r0, r3]
}
 8005720:	bc30      	pop	{r4, r5}
 8005722:	4770      	bx	lr

08005724 <buffer_append_uint16>:

void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
	buffer[(*index)++] = number >> 8;
 8005724:	6813      	ldr	r3, [r2, #0]
void buffer_append_uint16(uint8_t* buffer, uint16_t number, int32_t *index) {
 8005726:	b430      	push	{r4, r5}
	buffer[(*index)++] = number >> 8;
 8005728:	1c5d      	adds	r5, r3, #1
 800572a:	0a0c      	lsrs	r4, r1, #8
 800572c:	6015      	str	r5, [r2, #0]
 800572e:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number;
 8005730:	6813      	ldr	r3, [r2, #0]
 8005732:	1c5c      	adds	r4, r3, #1
 8005734:	6014      	str	r4, [r2, #0]
 8005736:	54c1      	strb	r1, [r0, r3]
}
 8005738:	bc30      	pop	{r4, r5}
 800573a:	4770      	bx	lr

0800573c <buffer_append_int32>:

void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
	buffer[(*index)++] = number >> 24;
 800573c:	6813      	ldr	r3, [r2, #0]
void buffer_append_int32(uint8_t* buffer, int32_t number, int32_t *index) {
 800573e:	b430      	push	{r4, r5}
	buffer[(*index)++] = number >> 24;
 8005740:	1c5d      	adds	r5, r3, #1
 8005742:	160c      	asrs	r4, r1, #24
 8005744:	6015      	str	r5, [r2, #0]
 8005746:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 16;
 8005748:	6813      	ldr	r3, [r2, #0]
 800574a:	140c      	asrs	r4, r1, #16
 800574c:	1c5d      	adds	r5, r3, #1
 800574e:	6015      	str	r5, [r2, #0]
 8005750:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 8;
 8005752:	6813      	ldr	r3, [r2, #0]
 8005754:	120c      	asrs	r4, r1, #8
 8005756:	1c5d      	adds	r5, r3, #1
 8005758:	6015      	str	r5, [r2, #0]
 800575a:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number;
 800575c:	6813      	ldr	r3, [r2, #0]
 800575e:	1c5c      	adds	r4, r3, #1
 8005760:	6014      	str	r4, [r2, #0]
 8005762:	54c1      	strb	r1, [r0, r3]
}
 8005764:	bc30      	pop	{r4, r5}
 8005766:	4770      	bx	lr

08005768 <buffer_append_uint32>:

void buffer_append_uint32(uint8_t* buffer, uint32_t number, int32_t *index) {
	buffer[(*index)++] = number >> 24;
 8005768:	6813      	ldr	r3, [r2, #0]
void buffer_append_uint32(uint8_t* buffer, uint32_t number, int32_t *index) {
 800576a:	b430      	push	{r4, r5}
	buffer[(*index)++] = number >> 24;
 800576c:	1c5d      	adds	r5, r3, #1
 800576e:	0e0c      	lsrs	r4, r1, #24
 8005770:	6015      	str	r5, [r2, #0]
 8005772:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 16;
 8005774:	6813      	ldr	r3, [r2, #0]
 8005776:	0c0c      	lsrs	r4, r1, #16
 8005778:	1c5d      	adds	r5, r3, #1
 800577a:	6015      	str	r5, [r2, #0]
 800577c:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number >> 8;
 800577e:	6813      	ldr	r3, [r2, #0]
 8005780:	0a0c      	lsrs	r4, r1, #8
 8005782:	1c5d      	adds	r5, r3, #1
 8005784:	6015      	str	r5, [r2, #0]
 8005786:	54c4      	strb	r4, [r0, r3]
	buffer[(*index)++] = number;
 8005788:	6813      	ldr	r3, [r2, #0]
 800578a:	1c5c      	adds	r4, r3, #1
 800578c:	6014      	str	r4, [r2, #0]
 800578e:	54c1      	strb	r1, [r0, r3]
}
 8005790:	bc30      	pop	{r4, r5}
 8005792:	4770      	bx	lr

08005794 <buffer_append_float16>:

void buffer_append_float16(uint8_t* buffer, float number, float scale, int32_t *index) {
 8005794:	b570      	push	{r4, r5, r6, lr}
 8005796:	460e      	mov	r6, r1
 8005798:	461c      	mov	r4, r3
    buffer_append_int16(buffer, (int16_t)(number * scale), index);
 800579a:	4611      	mov	r1, r2
void buffer_append_float16(uint8_t* buffer, float number, float scale, int32_t *index) {
 800579c:	4605      	mov	r5, r0
    buffer_append_int16(buffer, (int16_t)(number * scale), index);
 800579e:	4630      	mov	r0, r6
 80057a0:	f7fb fadc 	bl	8000d5c <__aeabi_fmul>
 80057a4:	f7fb fcb6 	bl	8001114 <__aeabi_f2iz>
	buffer[(*index)++] = number >> 8;
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	f340 2207 	sbfx	r2, r0, #8, #8
 80057ae:	1c59      	adds	r1, r3, #1
 80057b0:	6021      	str	r1, [r4, #0]
 80057b2:	54ea      	strb	r2, [r5, r3]
	buffer[(*index)++] = number;
 80057b4:	6823      	ldr	r3, [r4, #0]
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	6022      	str	r2, [r4, #0]
 80057ba:	54e8      	strb	r0, [r5, r3]
}
 80057bc:	bd70      	pop	{r4, r5, r6, pc}
 80057be:	bf00      	nop

080057c0 <buffer_append_float32>:

void buffer_append_float32(uint8_t* buffer, float number, float scale, int32_t *index) {
 80057c0:	b538      	push	{r3, r4, r5, lr}
 80057c2:	460c      	mov	r4, r1
 80057c4:	4605      	mov	r5, r0
    buffer_append_int32(buffer, (int32_t)(number * scale), index);
 80057c6:	4611      	mov	r1, r2
 80057c8:	4620      	mov	r0, r4
void buffer_append_float32(uint8_t* buffer, float number, float scale, int32_t *index) {
 80057ca:	461c      	mov	r4, r3
    buffer_append_int32(buffer, (int32_t)(number * scale), index);
 80057cc:	f7fb fac6 	bl	8000d5c <__aeabi_fmul>
 80057d0:	f7fb fca0 	bl	8001114 <__aeabi_f2iz>
	buffer[(*index)++] = number >> 24;
 80057d4:	6823      	ldr	r3, [r4, #0]
 80057d6:	1602      	asrs	r2, r0, #24
 80057d8:	1c59      	adds	r1, r3, #1
 80057da:	6021      	str	r1, [r4, #0]
 80057dc:	54ea      	strb	r2, [r5, r3]
	buffer[(*index)++] = number >> 16;
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	1402      	asrs	r2, r0, #16
 80057e2:	1c59      	adds	r1, r3, #1
 80057e4:	6021      	str	r1, [r4, #0]
 80057e6:	54ea      	strb	r2, [r5, r3]
	buffer[(*index)++] = number >> 8;
 80057e8:	6823      	ldr	r3, [r4, #0]
 80057ea:	1202      	asrs	r2, r0, #8
 80057ec:	1c59      	adds	r1, r3, #1
 80057ee:	6021      	str	r1, [r4, #0]
 80057f0:	54ea      	strb	r2, [r5, r3]
	buffer[(*index)++] = number;
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	1c5a      	adds	r2, r3, #1
 80057f6:	6022      	str	r2, [r4, #0]
 80057f8:	54e8      	strb	r0, [r5, r3]
}
 80057fa:	bd38      	pop	{r3, r4, r5, pc}

080057fc <buffer_append_float32_auto>:
 *
 * This should be a relatively fast and efficient way to serialize
 * floating point numbers in a fully defined manner.
 */
void buffer_append_float32_auto(uint8_t* buffer, float number, int32_t *index) {
	int e = 0;
 80057fc:	2300      	movs	r3, #0
void buffer_append_float32_auto(uint8_t* buffer, float number, int32_t *index) {
 80057fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005802:	b083      	sub	sp, #12
 8005804:	4607      	mov	r7, r0
	float sig = frexpf(number, &e);
 8005806:	4608      	mov	r0, r1
 8005808:	a901      	add	r1, sp, #4
void buffer_append_float32_auto(uint8_t* buffer, float number, int32_t *index) {
 800580a:	4616      	mov	r6, r2
	int e = 0;
 800580c:	9301      	str	r3, [sp, #4]
	float sig = frexpf(number, &e);
 800580e:	f008 fef3 	bl	800e5f8 <frexpf>
	float sig_abs = fabsf(sig);
 8005812:	f020 4900 	bic.w	r9, r0, #2147483648	; 0x80000000
	float sig = frexpf(number, &e);
 8005816:	4680      	mov	r8, r0
	uint32_t sig_i = 0;

	if (sig_abs >= 0.5) {
 8005818:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800581c:	4648      	mov	r0, r9
 800581e:	f7fb fc4f 	bl	80010c0 <__aeabi_fcmpge>
 8005822:	bb10      	cbnz	r0, 800586a <buffer_append_float32_auto+0x6e>
 8005824:	4604      	mov	r4, r0
 8005826:	9d01      	ldr	r5, [sp, #4]
		sig_i = (uint32_t)((sig_abs - 0.5f) * 2.0f * 8388608.0f);
		e += 126;
	}

	uint32_t res = ((e & 0xFF) << 23) | (sig_i & 0x7FFFFF);
 8005828:	05ed      	lsls	r5, r5, #23
 800582a:	f005 45ff 	and.w	r5, r5, #2139095040	; 0x7f800000
	if (sig < 0) {
 800582e:	4640      	mov	r0, r8
 8005830:	2100      	movs	r1, #0
	uint32_t res = ((e & 0xFF) << 23) | (sig_i & 0x7FFFFF);
 8005832:	432c      	orrs	r4, r5
	if (sig < 0) {
 8005834:	f7fb fc30 	bl	8001098 <__aeabi_fcmplt>
 8005838:	b108      	cbz	r0, 800583e <buffer_append_float32_auto+0x42>
		res |= 1U << 31;
 800583a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
	buffer[(*index)++] = number >> 24;
 800583e:	6833      	ldr	r3, [r6, #0]
 8005840:	0e22      	lsrs	r2, r4, #24
 8005842:	1c59      	adds	r1, r3, #1
 8005844:	6031      	str	r1, [r6, #0]
 8005846:	54fa      	strb	r2, [r7, r3]
	buffer[(*index)++] = number >> 16;
 8005848:	6833      	ldr	r3, [r6, #0]
 800584a:	0c22      	lsrs	r2, r4, #16
 800584c:	1c59      	adds	r1, r3, #1
 800584e:	6031      	str	r1, [r6, #0]
 8005850:	54fa      	strb	r2, [r7, r3]
	buffer[(*index)++] = number >> 8;
 8005852:	6833      	ldr	r3, [r6, #0]
 8005854:	0a22      	lsrs	r2, r4, #8
 8005856:	1c59      	adds	r1, r3, #1
 8005858:	6031      	str	r1, [r6, #0]
 800585a:	54fa      	strb	r2, [r7, r3]
	buffer[(*index)++] = number;
 800585c:	6833      	ldr	r3, [r6, #0]
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	6032      	str	r2, [r6, #0]
 8005862:	54fc      	strb	r4, [r7, r3]
	}

	buffer_append_uint32(buffer, res, index);
}
 8005864:	b003      	add	sp, #12
 8005866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		sig_i = (uint32_t)((sig_abs - 0.5f) * 2.0f * 8388608.0f);
 800586a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800586e:	4648      	mov	r0, r9
 8005870:	f7fb f96a 	bl	8000b48 <__aeabi_fsub>
 8005874:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 8005878:	f7fb fa70 	bl	8000d5c <__aeabi_fmul>
 800587c:	f7fb fc70 	bl	8001160 <__aeabi_f2uiz>
		e += 126;
 8005880:	9d01      	ldr	r5, [sp, #4]
 8005882:	f3c0 0416 	ubfx	r4, r0, #0, #23
 8005886:	357e      	adds	r5, #126	; 0x7e
 8005888:	e7ce      	b.n	8005828 <buffer_append_float32_auto+0x2c>
 800588a:	bf00      	nop

0800588c <buffer_get_int16>:

int16_t buffer_get_int16(const uint8_t *buffer, int32_t *index) {
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800588c:	680b      	ldr	r3, [r1, #0]
					((uint16_t) buffer[*index + 1]);
 800588e:	18c2      	adds	r2, r0, r3
 8005890:	7852      	ldrb	r2, [r2, #1]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8005892:	5cc0      	ldrb	r0, [r0, r3]
	*index += 2;
 8005894:	3302      	adds	r3, #2
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8005896:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
	*index += 2;
 800589a:	600b      	str	r3, [r1, #0]
	return res;
}
 800589c:	b200      	sxth	r0, r0
 800589e:	4770      	bx	lr

080058a0 <buffer_get_uint16>:

uint16_t buffer_get_uint16(const uint8_t *buffer, int32_t *index) {
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 80058a0:	680b      	ldr	r3, [r1, #0]
					((uint16_t) buffer[*index + 1]);
 80058a2:	18c2      	adds	r2, r0, r3
 80058a4:	7852      	ldrb	r2, [r2, #1]
	uint16_t res = 	((uint16_t) buffer[*index]) << 8 |
 80058a6:	5cc0      	ldrb	r0, [r0, r3]
	*index += 2;
 80058a8:	3302      	adds	r3, #2
 80058aa:	600b      	str	r3, [r1, #0]
	return res;
}
 80058ac:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 80058b0:	4770      	bx	lr
 80058b2:	bf00      	nop

080058b4 <buffer_get_int32>:

int32_t buffer_get_int32(const uint8_t *buffer, int32_t *index) {
 80058b4:	b430      	push	{r4, r5}
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 80058b6:	680a      	ldr	r2, [r1, #0]
					((uint32_t) buffer[*index + 1]) << 16 |
					((uint32_t) buffer[*index + 2]) << 8 |
					((uint32_t) buffer[*index + 3]);
 80058b8:	1884      	adds	r4, r0, r2
 80058ba:	78e3      	ldrb	r3, [r4, #3]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 80058bc:	5c80      	ldrb	r0, [r0, r2]
					((uint32_t) buffer[*index + 1]) << 16 |
 80058be:	7865      	ldrb	r5, [r4, #1]
					((uint32_t) buffer[*index + 2]) << 8 |
 80058c0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80058c4:	78a0      	ldrb	r0, [r4, #2]
 80058c6:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
	*index += 4;
 80058ca:	3204      	adds	r2, #4
	return res;
}
 80058cc:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	*index += 4;
 80058d0:	600a      	str	r2, [r1, #0]
}
 80058d2:	bc30      	pop	{r4, r5}
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop

080058d8 <buffer_get_uint32>:

uint32_t buffer_get_uint32(const uint8_t *buffer, int32_t *index) {
 80058d8:	b430      	push	{r4, r5}
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 80058da:	680a      	ldr	r2, [r1, #0]
					((uint32_t) buffer[*index + 1]) << 16 |
					((uint32_t) buffer[*index + 2]) << 8 |
					((uint32_t) buffer[*index + 3]);
 80058dc:	1884      	adds	r4, r0, r2
 80058de:	78e3      	ldrb	r3, [r4, #3]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 80058e0:	5c80      	ldrb	r0, [r0, r2]
					((uint32_t) buffer[*index + 1]) << 16 |
 80058e2:	7865      	ldrb	r5, [r4, #1]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 80058e4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
					((uint32_t) buffer[*index + 2]) << 8 |
 80058e8:	78a0      	ldrb	r0, [r4, #2]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 80058ea:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
	*index += 4;
 80058ee:	3204      	adds	r2, #4
	return res;
}
 80058f0:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
	*index += 4;
 80058f4:	600a      	str	r2, [r1, #0]
}
 80058f6:	bc30      	pop	{r4, r5}
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop

080058fc <buffer_get_float16>:

float buffer_get_float16(const uint8_t *buffer, float scale, int32_t *index) {
 80058fc:	b510      	push	{r4, lr}
 80058fe:	460c      	mov	r4, r1
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8005900:	6813      	ldr	r3, [r2, #0]
					((uint16_t) buffer[*index + 1]);
 8005902:	18c1      	adds	r1, r0, r3
 8005904:	7849      	ldrb	r1, [r1, #1]
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 8005906:	5cc0      	ldrb	r0, [r0, r3]
	*index += 2;
 8005908:	3302      	adds	r3, #2
	int16_t res =	((uint16_t) buffer[*index]) << 8 |
 800590a:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
	*index += 2;
 800590e:	6013      	str	r3, [r2, #0]
    return (float)buffer_get_int16(buffer, index) / scale;
 8005910:	b200      	sxth	r0, r0
 8005912:	f7fb f9cf 	bl	8000cb4 <__aeabi_i2f>
 8005916:	4621      	mov	r1, r4
 8005918:	f7fb fad4 	bl	8000ec4 <__aeabi_fdiv>
}
 800591c:	bd10      	pop	{r4, pc}
 800591e:	bf00      	nop

08005920 <buffer_get_float32>:

float buffer_get_float32(const uint8_t *buffer, float scale, int32_t *index) {
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	460d      	mov	r5, r1
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 8005924:	6814      	ldr	r4, [r2, #0]
					((uint32_t) buffer[*index + 3]);
 8005926:	1901      	adds	r1, r0, r4
 8005928:	78cb      	ldrb	r3, [r1, #3]
	int32_t res =	((uint32_t) buffer[*index]) << 24 |
 800592a:	5d00      	ldrb	r0, [r0, r4]
					((uint32_t) buffer[*index + 1]) << 16 |
 800592c:	784e      	ldrb	r6, [r1, #1]
					((uint32_t) buffer[*index + 2]) << 8 |
 800592e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005932:	7888      	ldrb	r0, [r1, #2]
 8005934:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
	*index += 4;
 8005938:	3404      	adds	r4, #4
 800593a:	6014      	str	r4, [r2, #0]
    return (float)buffer_get_int32(buffer, index) / scale;
 800593c:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 8005940:	f7fb f9b8 	bl	8000cb4 <__aeabi_i2f>
 8005944:	4629      	mov	r1, r5
 8005946:	f7fb fabd 	bl	8000ec4 <__aeabi_fdiv>
}
 800594a:	bd70      	pop	{r4, r5, r6, pc}

0800594c <buffer_get_float32_auto>:

float buffer_get_float32_auto(const uint8_t *buffer, int32_t *index) {
 800594c:	b538      	push	{r3, r4, r5, lr}
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800594e:	680b      	ldr	r3, [r1, #0]
					((uint32_t) buffer[*index + 3]);
 8005950:	18c2      	adds	r2, r0, r3
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8005952:	5cc5      	ldrb	r5, [r0, r3]
					((uint32_t) buffer[*index + 3]);
 8005954:	78d4      	ldrb	r4, [r2, #3]
					((uint32_t) buffer[*index + 1]) << 16 |
 8005956:	7850      	ldrb	r0, [r2, #1]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 8005958:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
					((uint32_t) buffer[*index + 2]) << 8 |
 800595c:	7895      	ldrb	r5, [r2, #2]
	uint32_t res =	((uint32_t) buffer[*index]) << 24 |
 800595e:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8005962:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
	*index += 4;
 8005966:	3304      	adds	r3, #4
	uint32_t res = buffer_get_uint32(buffer, index);

	int e = (res >> 23) & 0xFF;
 8005968:	f3c4 54c7 	ubfx	r4, r4, #23, #8
	uint32_t sig_i = res & 0x7FFFFF;
 800596c:	f3c5 0016 	ubfx	r0, r5, #0, #23
	*index += 4;
 8005970:	600b      	str	r3, [r1, #0]
	bool neg = res & (1U << 31);

	float sig = 0.0;
	if (e != 0 || sig_i != 0) {
 8005972:	ea54 0100 	orrs.w	r1, r4, r0
 8005976:	d108      	bne.n	800598a <buffer_get_float32_auto+0x3e>
	float sig = 0.0;
 8005978:	2000      	movs	r0, #0
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
		e -= 126;
	}

	if (neg) {
 800597a:	2d00      	cmp	r5, #0
		sig = -sig;
 800597c:	bfb8      	it	lt
 800597e:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
	}

	return ldexpf(sig, e);
}
 8005982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return ldexpf(sig, e);
 8005986:	f008 be5b 	b.w	800e640 <ldexpf>
		sig = (float)sig_i / (8388608.0 * 2.0) + 0.5;
 800598a:	f7fb f98f 	bl	8000cac <__aeabi_ui2f>
 800598e:	f7fa fd4d 	bl	800042c <__aeabi_f2d>
 8005992:	2200      	movs	r2, #0
 8005994:	4b09      	ldr	r3, [pc, #36]	; (80059bc <buffer_get_float32_auto+0x70>)
 8005996:	f7fa fda1 	bl	80004dc <__aeabi_dmul>
 800599a:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <buffer_get_float32_auto+0x74>)
 800599c:	2200      	movs	r2, #0
 800599e:	f7fa fbe7 	bl	8000170 <__adddf3>
 80059a2:	f7fb f87d 	bl	8000aa0 <__aeabi_d2f>
	if (neg) {
 80059a6:	2d00      	cmp	r5, #0
		e -= 126;
 80059a8:	f1a4 017e 	sub.w	r1, r4, #126	; 0x7e
		sig = -sig;
 80059ac:	bfb8      	it	lt
 80059ae:	f100 4000 	addlt.w	r0, r0, #2147483648	; 0x80000000
}
 80059b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return ldexpf(sig, e);
 80059b6:	f008 be43 	b.w	800e640 <ldexpf>
 80059ba:	bf00      	nop
 80059bc:	3e700000 	.word	0x3e700000
 80059c0:	3fe00000 	.word	0x3fe00000

080059c4 <conf_general_store_mc_configuration>:
 * Write mc_configuration to EEPROM.
 *
 * @param conf
 * A pointer to the configuration that should be stored.
 */
bool conf_general_store_mc_configuration(mc_configuration *conf, bool is_motor_2) {
 80059c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059c6:	4605      	mov	r5, r0
	conf->crc = 0;
 80059c8:	2700      	movs	r7, #0
bool conf_general_store_mc_configuration(mc_configuration *conf, bool is_motor_2) {
 80059ca:	b087      	sub	sp, #28
	VescToSTM_stop_motor();
 80059cc:	f7ff fb98 	bl	8005100 <VescToSTM_stop_motor>
	vTaskDelay(300);
 80059d0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80059d4:	f008 f836 	bl	800da44 <vTaskDelay>
	unsigned crc_old = conf->crc;
 80059d8:	f8b5 4188 	ldrh.w	r4, [r5, #392]	; 0x188
	unsigned crc_new = crc16((uint8_t*)conf, sizeof(mc_configuration));
 80059dc:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80059e0:	4628      	mov	r0, r5
	conf->crc = 0;
 80059e2:	f8a5 7188 	strh.w	r7, [r5, #392]	; 0x188
	unsigned crc_new = crc16((uint8_t*)conf, sizeof(mc_configuration));
 80059e6:	f001 f87d 	bl	8006ae4 <crc16>
	unsigned crc_old = conf->crc;
 80059ea:	b2a4      	uxth	r4, r4
	conf->crc = crc_old;
 80059ec:	f8a5 4188 	strh.w	r4, [r5, #392]	; 0x188
	uint32_t flash_incr=0;
	uint8_t byte=0;
	uint32_t word;
	uint8_t * word_ptr = (uint8_t*)&word;

	conf->crc = conf_calc_crc(conf);
 80059f0:	f8a5 0188 	strh.w	r0, [r5, #392]	; 0x188

	HAL_FLASH_Unlock();
 80059f4:	f004 fdf4 	bl	800a5e0 <HAL_FLASH_Unlock>

	uint32_t page_error = 0;
	FLASH_EraseInitTypeDef s_eraseinit;
	s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
	s_eraseinit.PageAddress = ADDR_FLASH_PAGE_63;
 80059f8:	2301      	movs	r3, #1
 80059fa:	4a24      	ldr	r2, [pc, #144]	; (8005a8c <conf_general_store_mc_configuration+0xc8>)
	s_eraseinit.NbPages     = 1;
	HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80059fc:	a901      	add	r1, sp, #4
 80059fe:	a802      	add	r0, sp, #8
	s_eraseinit.PageAddress = ADDR_FLASH_PAGE_63;
 8005a00:	e9cd 2304 	strd	r2, r3, [sp, #16]
	s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 8005a04:	e9cd 7701 	strd	r7, r7, [sp, #4]
	uint32_t flash_incr=0;
 8005a08:	463e      	mov	r6, r7
	HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 8005a0a:	f004 fe5d 	bl	800a6c8 <HAL_FLASHEx_Erase>

	for (unsigned int i = 0;i < sizeof(mc_configuration);i++) {

		word_ptr[byte] = conf_addr[i];
		byte++;
 8005a0e:	2301      	movs	r3, #1
		word_ptr[byte] = conf_addr[i];
 8005a10:	782a      	ldrb	r2, [r5, #0]
 8005a12:	462c      	mov	r4, r5
 8005a14:	f88d 2000 	strb.w	r2, [sp]
	for (unsigned int i = 0;i < sizeof(mc_configuration);i++) {
 8005a18:	f205 158b 	addw	r5, r5, #395	; 0x18b
		byte++;
 8005a1c:	1c58      	adds	r0, r3, #1
		word_ptr[byte] = conf_addr[i];
 8005a1e:	aa06      	add	r2, sp, #24
 8005a20:	441a      	add	r2, r3
 8005a22:	f814 1f01 	ldrb.w	r1, [r4, #1]!
		byte++;
 8005a26:	b2c3      	uxtb	r3, r0
		if(byte==4){
 8005a28:	2b04      	cmp	r3, #4
		word_ptr[byte] = conf_addr[i];
 8005a2a:	f802 1c18 	strb.w	r1, [r2, #-24]
		if(byte==4){
 8005a2e:	d010      	beq.n	8005a52 <conf_general_store_mc_configuration+0x8e>
	for (unsigned int i = 0;i < sizeof(mc_configuration);i++) {
 8005a30:	42a5      	cmp	r5, r4
 8005a32:	d1f3      	bne.n	8005a1c <conf_general_store_mc_configuration+0x58>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ADDR_FLASH_PAGE_63+(flash_incr*4), *((uint32_t*)word_ptr));
			word=0;
			flash_incr++;
		}
	}
	if(byte!=0){
 8005a34:	b9f3      	cbnz	r3, 8005a74 <conf_general_store_mc_configuration+0xb0>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ADDR_FLASH_PAGE_63+(flash_incr*4), *((uint32_t*)word_ptr));
	}

	HAL_FLASH_Lock();
 8005a36:	f004 fde7 	bl	800a608 <HAL_FLASH_Lock>
	vTaskDelay(500);
 8005a3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005a3e:	f008 f801 	bl	800da44 <vTaskDelay>
	VescToSTM_start_motor();
 8005a42:	f7ff fb63 	bl	800510c <VescToSTM_start_motor>
	VescToSTM_set_torque(0);
 8005a46:	2000      	movs	r0, #0
 8005a48:	f7ff f8a6 	bl	8004b98 <VescToSTM_set_torque>

	return is_ok;
}
 8005a4c:	2001      	movs	r0, #1
 8005a4e:	b007      	add	sp, #28
 8005a50:	bdf0      	pop	{r4, r5, r6, r7, pc}
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ADDR_FLASH_PAGE_63+(flash_incr*4), *((uint32_t*)word_ptr));
 8005a52:	f106 7100 	add.w	r1, r6, #33554432	; 0x2000000
 8005a56:	f501 41fe 	add.w	r1, r1, #32512	; 0x7f00
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2002      	movs	r0, #2
 8005a5e:	9a00      	ldr	r2, [sp, #0]
 8005a60:	0089      	lsls	r1, r1, #2
 8005a62:	f004 fcdf 	bl	800a424 <HAL_FLASH_Program>
	for (unsigned int i = 0;i < sizeof(mc_configuration);i++) {
 8005a66:	42a5      	cmp	r5, r4
			flash_incr++;
 8005a68:	f106 0601 	add.w	r6, r6, #1
			word=0;
 8005a6c:	9700      	str	r7, [sp, #0]
	for (unsigned int i = 0;i < sizeof(mc_configuration);i++) {
 8005a6e:	d0e2      	beq.n	8005a36 <conf_general_store_mc_configuration+0x72>
			byte=0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	e7d3      	b.n	8005a1c <conf_general_store_mc_configuration+0x58>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ADDR_FLASH_PAGE_63+(flash_incr*4), *((uint32_t*)word_ptr));
 8005a74:	f106 7100 	add.w	r1, r6, #33554432	; 0x2000000
 8005a78:	f501 41fe 	add.w	r1, r1, #32512	; 0x7f00
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	9a00      	ldr	r2, [sp, #0]
 8005a80:	0089      	lsls	r1, r1, #2
 8005a82:	2002      	movs	r0, #2
 8005a84:	f004 fcce 	bl	800a424 <HAL_FLASH_Program>
 8005a88:	e7d5      	b.n	8005a36 <conf_general_store_mc_configuration+0x72>
 8005a8a:	bf00      	nop
 8005a8c:	0801fc00 	.word	0x0801fc00

08005a90 <mc_interface_get_configuration>:
	PIDIdHandle_M1.hDefKiGain = PIDIdHandle_M1.hKiGain;
}

mc_configuration* mc_interface_get_configuration(void){
	return &mc_conf;
}
 8005a90:	4800      	ldr	r0, [pc, #0]	; (8005a94 <mc_interface_get_configuration+0x4>)
 8005a92:	4770      	bx	lr
 8005a94:	20003dc4 	.word	0x20003dc4

08005a98 <conf_general_setup_mc>:

void conf_general_setup_mc(mc_configuration *mcconf) {
 8005a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a9c:	4604      	mov	r4, r0
 8005a9e:	b085      	sub	sp, #20

	// Limits
		SpeednTorqCtrlM1.MaxPositiveTorque = mcconf->l_current_max * CURRENT_FACTOR;
 8005aa0:	6800      	ldr	r0, [r0, #0]
 8005aa2:	f7fa fcc3 	bl	800042c <__aeabi_f2d>
 8005aa6:	a37a      	add	r3, pc, #488	; (adr r3, 8005c90 <conf_general_setup_mc+0x1f8>)
 8005aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aac:	f7fa fd16 	bl	80004dc <__aeabi_dmul>
 8005ab0:	f7fa ffd6 	bl	8000a60 <__aeabi_d2uiz>
 8005ab4:	f8df b218 	ldr.w	fp, [pc, #536]	; 8005cd0 <conf_general_setup_mc+0x238>
 8005ab8:	fa1f f880 	uxth.w	r8, r0
		SpeednTorqCtrlM1.MinNegativeTorque = mcconf->l_current_min * CURRENT_FACTOR;
 8005abc:	6860      	ldr	r0, [r4, #4]
		SpeednTorqCtrlM1.MaxPositiveTorque = mcconf->l_current_max * CURRENT_FACTOR;
 8005abe:	f8ab 8026 	strh.w	r8, [fp, #38]	; 0x26
		SpeednTorqCtrlM1.MinNegativeTorque = mcconf->l_current_min * CURRENT_FACTOR;
 8005ac2:	f7fa fcb3 	bl	800042c <__aeabi_f2d>
 8005ac6:	a372      	add	r3, pc, #456	; (adr r3, 8005c90 <conf_general_setup_mc+0x1f8>)
 8005ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005acc:	f7fa fd06 	bl	80004dc <__aeabi_dmul>
 8005ad0:	f7fa ff9e 	bl	8000a10 <__aeabi_d2iz>
//		float l_in_current_max;
//		float l_in_current_min;
		mcconf->l_abs_current_max = 60;
 8005ad4:	4b76      	ldr	r3, [pc, #472]	; (8005cb0 <conf_general_setup_mc+0x218>)
		SpeednTorqCtrlM1.MinNegativeTorque = mcconf->l_current_min * CURRENT_FACTOR;
 8005ad6:	b207      	sxth	r7, r0
 8005ad8:	f8ab 7028 	strh.w	r7, [fp, #40]	; 0x28
		//HALL_M1._Super.hMaxReliableMecSpeedUnit = (mcconf->l_max_erpm * 1.15 / (float)HALL_M1._Super.bElToMecRatio);

//		float l_erpm_start;
//		float l_max_erpm_fbrake;
//		float l_max_erpm_fbrake_cc;
		RealBusVoltageSensorParamsM1.UnderVoltageThreshold = mcconf->l_min_vin * VOLT_SCALING;
 8005adc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		mcconf->l_abs_current_max = 60;
 8005ade:	6123      	str	r3, [r4, #16]
		RealBusVoltageSensorParamsM1.UnderVoltageThreshold = mcconf->l_min_vin * VOLT_SCALING;
 8005ae0:	f7fa fca4 	bl	800042c <__aeabi_f2d>
 8005ae4:	a36c      	add	r3, pc, #432	; (adr r3, 8005c98 <conf_general_setup_mc+0x200>)
 8005ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aea:	f7fa fcf7 	bl	80004dc <__aeabi_dmul>
 8005aee:	f7fa ffb7 	bl	8000a60 <__aeabi_d2uiz>
 8005af2:	4603      	mov	r3, r0
 8005af4:	4d6f      	ldr	r5, [pc, #444]	; (8005cb4 <conf_general_setup_mc+0x21c>)
		RealBusVoltageSensorParamsM1.OverVoltageThreshold = mcconf->l_max_vin * VOLT_SCALING;
 8005af6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
		RealBusVoltageSensorParamsM1.UnderVoltageThreshold = mcconf->l_min_vin * VOLT_SCALING;
 8005af8:	83ab      	strh	r3, [r5, #28]
		RealBusVoltageSensorParamsM1.OverVoltageThreshold = mcconf->l_max_vin * VOLT_SCALING;
 8005afa:	f7fa fc97 	bl	800042c <__aeabi_f2d>
 8005afe:	a366      	add	r3, pc, #408	; (adr r3, 8005c98 <conf_general_setup_mc+0x200>)
 8005b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b04:	f7fa fcea 	bl	80004dc <__aeabi_dmul>
 8005b08:	f7fa ffaa 	bl	8000a60 <__aeabi_d2uiz>
	//}

	// BLDC switching and drive
	mcconf->motor_type = MOTOR_TYPE_FOC;
	mcconf->sensor_mode = SENSOR_MODE_SENSORED;
	mcconf->pwm_mode = PWM_MODE_SYNCHRONOUS;
 8005b0c:	2201      	movs	r2, #1
		RealBusVoltageSensorParamsM1.OverVoltageThreshold = mcconf->l_max_vin * VOLT_SCALING;
 8005b0e:	4603      	mov	r3, r0
	mcconf->motor_type = MOTOR_TYPE_FOC;
 8005b10:	f44f 7181 	mov.w	r1, #258	; 0x102
	mcconf->pwm_mode = PWM_MODE_SYNCHRONOUS;
 8005b14:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
		RealBusVoltageSensorParamsM1.OverVoltageThreshold = mcconf->l_max_vin * VOLT_SCALING;
 8005b18:	836b      	strh	r3, [r5, #26]
	mcconf->motor_type = MOTOR_TYPE_FOC;
 8005b1a:	f8a4 1086 	strh.w	r1, [r4, #134]	; 0x86

	// FOC
	float kp = mcconf->foc_current_kp * (float)TF_KPDIV;
	float ki = mcconf->foc_current_ki * (float)TF_KIDIV / (float)PWM_FREQUENCY;
 8005b1e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8005b22:	4965      	ldr	r1, [pc, #404]	; (8005cb8 <conf_general_setup_mc+0x220>)
 8005b24:	f7fb f91a 	bl	8000d5c <__aeabi_fmul>
	float kp = mcconf->foc_current_kp * (float)TF_KPDIV;
 8005b28:	f04f 4189 	mov.w	r1, #1149239296	; 0x44800000
	float ki = mcconf->foc_current_ki * (float)TF_KIDIV / (float)PWM_FREQUENCY;
 8005b2c:	4605      	mov	r5, r0
	float kp = mcconf->foc_current_kp * (float)TF_KPDIV;
 8005b2e:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8005b32:	f7fb f913 	bl	8000d5c <__aeabi_fmul>
	PIDIqHandle_M1.hKpGain = kp;
 8005b36:	f7fb faed 	bl	8001114 <__aeabi_f2iz>
 8005b3a:	4682      	mov	sl, r0
 8005b3c:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8005cd4 <conf_general_setup_mc+0x23c>
 8005b40:	fa0f fa8a 	sxth.w	sl, sl
    PIDIqHandle_M1.hKiGain = ki;
 8005b44:	4628      	mov	r0, r5
	PIDIqHandle_M1.hKpGain = kp;
 8005b46:	f8a9 a004 	strh.w	sl, [r9, #4]
    PIDIqHandle_M1.hKiGain = ki;
 8005b4a:	f7fb fae3 	bl	8001114 <__aeabi_f2iz>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	b21b      	sxth	r3, r3
 8005b52:	f8a9 3006 	strh.w	r3, [r9, #6]
//	float foc_f_sw;
//	float foc_dt_us;
    HALL_M1.PhaseShift = DEG_TO_ANG(mcconf->foc_encoder_offset);
 8005b56:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    PIDIqHandle_M1.hKiGain = ki;
 8005b5a:	9301      	str	r3, [sp, #4]
    HALL_M1.PhaseShift = DEG_TO_ANG(mcconf->foc_encoder_offset);
 8005b5c:	f7fa fc66 	bl	800042c <__aeabi_f2d>
 8005b60:	a34f      	add	r3, pc, #316	; (adr r3, 8005ca0 <conf_general_setup_mc+0x208>)
 8005b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b66:	f7fa fcb9 	bl	80004dc <__aeabi_dmul>
 8005b6a:	f7fa ff51 	bl	8000a10 <__aeabi_d2iz>
//	float foc_d_gain_scale_max_mod;
//	float foc_sl_openloop_hyst;
//	float foc_sl_openloop_time;
//	float foc_sl_openloop_time_lock;
//	float foc_sl_openloop_time_ramp;
	mcconf->foc_sensor_mode = FOC_SENSOR_MODE_HALL;
 8005b6e:	2102      	movs	r1, #2
    HALL_M1.PhaseShift = DEG_TO_ANG(mcconf->foc_encoder_offset);
 8005b70:	4d52      	ldr	r5, [pc, #328]	; (8005cbc <conf_general_setup_mc+0x224>)
 8005b72:	f104 02e9 	add.w	r2, r4, #233	; 0xe9
 8005b76:	f105 03d2 	add.w	r3, r5, #210	; 0xd2
 8005b7a:	429a      	cmp	r2, r3
	mcconf->foc_sensor_mode = FOC_SENSOR_MODE_HALL;
 8005b7c:	f884 10e4 	strb.w	r1, [r4, #228]	; 0xe4
    HALL_M1.PhaseShift = DEG_TO_ANG(mcconf->foc_encoder_offset);
 8005b80:	8568      	strh	r0, [r5, #42]	; 0x2a
	for(int i=0;i<8;i++){
 8005b82:	d905      	bls.n	8005b90 <conf_general_setup_mc+0xf8>
 8005b84:	f104 03e5 	add.w	r3, r4, #229	; 0xe5
 8005b88:	f105 02d6 	add.w	r2, r5, #214	; 0xd6
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d374      	bcc.n	8005c7a <conf_general_setup_mc+0x1e2>
		 HALL_M1.lut[i] = mcconf->foc_hall_table[i];
 8005b90:	f8d4 20e5 	ldr.w	r2, [r4, #229]	; 0xe5
 8005b94:	f8d4 30e9 	ldr.w	r3, [r4, #233]	; 0xe9
 8005b98:	f8c5 20d2 	str.w	r2, [r5, #210]	; 0xd2
 8005b9c:	f8c5 30d6 	str.w	r3, [r5, #214]	; 0xd6
	}
	HALL_M1.SwitchSpeed = (float)mcconf->foc_hall_interp_erpm / (float)HALL_M1._Super.bElToMecRatio;
 8005ba0:	786a      	ldrb	r2, [r5, #1]
//	float gpd_current_ki;

	// Speed PID
	kp = mcconf->s_pid_kp * (float)SP_KPDIV;
	ki = mcconf->s_pid_ki * (float)SP_KIDIV / (float)SPEED_LOOP_FREQUENCY_HZ;
	PIDSpeedHandle_M1.hDefKpGain = kp;
 8005ba2:	4e47      	ldr	r6, [pc, #284]	; (8005cc0 <conf_general_setup_mc+0x228>)
	HALL_M1.SwitchSpeed = (float)mcconf->foc_hall_interp_erpm / (float)HALL_M1._Super.bElToMecRatio;
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	9203      	str	r2, [sp, #12]
 8005ba8:	f7fb f880 	bl	8000cac <__aeabi_ui2f>
 8005bac:	4601      	mov	r1, r0
 8005bae:	f8d4 00f0 	ldr.w	r0, [r4, #240]	; 0xf0
 8005bb2:	f7fb f987 	bl	8000ec4 <__aeabi_fdiv>
 8005bb6:	f7fb fad3 	bl	8001160 <__aeabi_f2uiz>
 8005bba:	4603      	mov	r3, r0
	ki = mcconf->s_pid_ki * (float)SP_KIDIV / (float)SPEED_LOOP_FREQUENCY_HZ;
 8005bbc:	4941      	ldr	r1, [pc, #260]	; (8005cc4 <conf_general_setup_mc+0x22c>)
	HALL_M1.SwitchSpeed = (float)mcconf->foc_hall_interp_erpm / (float)HALL_M1._Super.bElToMecRatio;
 8005bbe:	f8a5 30d0 	strh.w	r3, [r5, #208]	; 0xd0
	ki = mcconf->s_pid_ki * (float)SP_KIDIV / (float)SPEED_LOOP_FREQUENCY_HZ;
 8005bc2:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 8005bc6:	f7fb f8c9 	bl	8000d5c <__aeabi_fmul>
 8005bca:	4603      	mov	r3, r0
	kp = mcconf->s_pid_kp * (float)SP_KPDIV;
 8005bcc:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 8005bd0:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
	ki = mcconf->s_pid_ki * (float)SP_KIDIV / (float)SPEED_LOOP_FREQUENCY_HZ;
 8005bd4:	9302      	str	r3, [sp, #8]
	kp = mcconf->s_pid_kp * (float)SP_KPDIV;
 8005bd6:	f7fb f8c1 	bl	8000d5c <__aeabi_fmul>
	PIDSpeedHandle_M1.hDefKpGain = kp;
 8005bda:	f7fb fa9b 	bl	8001114 <__aeabi_f2iz>
 8005bde:	4601      	mov	r1, r0
	PIDSpeedHandle_M1.hDefKiGain = ki;
 8005be0:	9b02      	ldr	r3, [sp, #8]
	PIDSpeedHandle_M1.hDefKpGain = kp;
 8005be2:	8031      	strh	r1, [r6, #0]
	PIDSpeedHandle_M1.hDefKiGain = ki;
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7fb fa95 	bl	8001114 <__aeabi_f2iz>

	// Setup info
	mcconf->si_motor_poles = HALL_M1._Super.bElToMecRatio;
//	float si_gear_ratio;
//	float si_wheel_diameter;
	mcconf->si_battery_type = BATTERY_TYPE_LIION_3_0__4_2;
 8005bea:	f04f 0c00 	mov.w	ip, #0
	mcconf->si_motor_poles = HALL_M1._Super.bElToMecRatio;
 8005bee:	9a03      	ldr	r2, [sp, #12]
	if(SpeednTorqCtrlM1.MaxAppPositiveMecSpeedUnit>SpeednTorqCtrlM1.MinAppNegativeMecSpeedUnit){
 8005bf0:	f8bb 101e 	ldrh.w	r1, [fp, #30]
 8005bf4:	f9bb 3024 	ldrsh.w	r3, [fp, #36]	; 0x24
	mcconf->si_motor_poles = HALL_M1._Super.bElToMecRatio;
 8005bf8:	f884 2170 	strb.w	r2, [r4, #368]	; 0x170
	PIDSpeedHandle_M1.wUpperIntegralLimit = (uint32_t)SpeednTorqCtrlM1.MaxPositiveTorque * SP_KDDIV;
 8005bfc:	ea4f 1e08 	mov.w	lr, r8, lsl #4
	PIDSpeedHandle_M1.wLowerIntegralLimit = (uint32_t)SpeednTorqCtrlM1.MinNegativeTorque * SP_KDDIV;
 8005c00:	013a      	lsls	r2, r7, #4
	if(SpeednTorqCtrlM1.MaxAppPositiveMecSpeedUnit>SpeednTorqCtrlM1.MinAppNegativeMecSpeedUnit){
 8005c02:	4299      	cmp	r1, r3
	PIDSpeedHandle_M1.wLowerIntegralLimit = (uint32_t)SpeednTorqCtrlM1.MinNegativeTorque * SP_KDDIV;
 8005c04:	e9c6 e203 	strd	lr, r2, [r6, #12]
	PIDSpeedHandle_M1.hUpperOutputLimit = SpeednTorqCtrlM1.MaxPositiveTorque;
 8005c08:	f8a6 8014 	strh.w	r8, [r6, #20]
	PIDSpeedHandle_M1.hLowerOutputLimit = SpeednTorqCtrlM1.MinNegativeTorque;
 8005c0c:	82f7      	strh	r7, [r6, #22]
	PIDSpeedHandle_M1.hDefKiGain = ki;
 8005c0e:	8070      	strh	r0, [r6, #2]
	mcconf->si_battery_type = BATTERY_TYPE_LIION_3_0__4_2;
 8005c10:	f884 c17c 	strb.w	ip, [r4, #380]	; 0x17c
	if(SpeednTorqCtrlM1.MaxAppPositiveMecSpeedUnit>SpeednTorqCtrlM1.MinAppNegativeMecSpeedUnit){
 8005c14:	dd24      	ble.n	8005c60 <conf_general_setup_mc+0x1c8>
		HALL_M1._Super.hMaxReliableMecSpeedUnit = (uint16_t)(1.15*SpeednTorqCtrlM1.MaxAppPositiveMecSpeedUnit);
 8005c16:	4608      	mov	r0, r1
 8005c18:	f7fa fbf6 	bl	8000408 <__aeabi_i2d>
 8005c1c:	a322      	add	r3, pc, #136	; (adr r3, 8005ca8 <conf_general_setup_mc+0x210>)
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	f7fa fc5b 	bl	80004dc <__aeabi_dmul>
 8005c26:	f7fa ff1b 	bl	8000a60 <__aeabi_d2uiz>
 8005c2a:	b280      	uxth	r0, r0
	PIDIdHandle_M1.hDefKdGain = PIDIdHandle_M1.hKpGain;
 8005c2c:	4b26      	ldr	r3, [pc, #152]	; (8005cc8 <conf_general_setup_mc+0x230>)
 8005c2e:	82a8      	strh	r0, [r5, #20]
 8005c30:	8899      	ldrh	r1, [r3, #4]
	PIDIdHandle_M1.hDefKiGain = PIDIdHandle_M1.hKiGain;
 8005c32:	88da      	ldrh	r2, [r3, #6]
	PIDIqHandle_M1.hDefKiGain = PIDIqHandle_M1.hKiGain;
 8005c34:	9d01      	ldr	r5, [sp, #4]

	// BMS Configuration
//	bms_config bms;

	conf_general_recalc();
	HALL_Init(&HALL_M1);
 8005c36:	4821      	ldr	r0, [pc, #132]	; (8005cbc <conf_general_setup_mc+0x224>)
	PIDIdHandle_M1.hDefKdGain = PIDIdHandle_M1.hKpGain;
 8005c38:	8419      	strh	r1, [r3, #32]
	PIDIdHandle_M1.hDefKiGain = PIDIdHandle_M1.hKiGain;
 8005c3a:	805a      	strh	r2, [r3, #2]
	PIDIqHandle_M1.hDefKdGain = PIDIqHandle_M1.hKpGain;
 8005c3c:	f8a9 a020 	strh.w	sl, [r9, #32]
	PIDIqHandle_M1.hDefKiGain = PIDIqHandle_M1.hKiGain;
 8005c40:	f8a9 5002 	strh.w	r5, [r9, #2]
	HALL_Init(&HALL_M1);
 8005c44:	f7fb fae6 	bl	8001214 <HALL_Init>
	VescToSTM_init_odometer(mcconf);
 8005c48:	4620      	mov	r0, r4
 8005c4a:	f7fe fed1 	bl	80049f0 <VescToSTM_init_odometer>
	mc_conf = *mcconf;
 8005c4e:	4621      	mov	r1, r4
 8005c50:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8005c54:	481d      	ldr	r0, [pc, #116]	; (8005ccc <conf_general_setup_mc+0x234>)
 8005c56:	f008 fc9f 	bl	800e598 <memcpy>
}
 8005c5a:	b005      	add	sp, #20
 8005c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		HALL_M1._Super.hMaxReliableMecSpeedUnit = -(uint16_t)(1.15*SpeednTorqCtrlM1.MinAppNegativeMecSpeedUnit);
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fa fbd1 	bl	8000408 <__aeabi_i2d>
 8005c66:	a310      	add	r3, pc, #64	; (adr r3, 8005ca8 <conf_general_setup_mc+0x210>)
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f7fa fc36 	bl	80004dc <__aeabi_dmul>
 8005c70:	f7fa fef6 	bl	8000a60 <__aeabi_d2uiz>
 8005c74:	4240      	negs	r0, r0
 8005c76:	b280      	uxth	r0, r0
 8005c78:	e7d8      	b.n	8005c2c <conf_general_setup_mc+0x194>
		 HALL_M1.lut[i] = mcconf->foc_hall_table[i];
 8005c7a:	f8d4 20e9 	ldr.w	r2, [r4, #233]	; 0xe9
 8005c7e:	f8d4 30e5 	ldr.w	r3, [r4, #229]	; 0xe5
 8005c82:	f8c5 20d6 	str.w	r2, [r5, #214]	; 0xd6
 8005c86:	f8c5 30d2 	str.w	r3, [r5, #210]	; 0xd2
 8005c8a:	e789      	b.n	8005ba0 <conf_general_setup_mc+0x108>
 8005c8c:	f3af 8000 	nop.w
 8005c90:	147ae148 	.word	0x147ae148
 8005c94:	4073dbae 	.word	0x4073dbae
 8005c98:	6fb586fc 	.word	0x6fb586fc
 8005c9c:	409099d8 	.word	0x409099d8
 8005ca0:	16c16c17 	.word	0x16c16c17
 8005ca4:	4066c16c 	.word	0x4066c16c
 8005ca8:	66666666 	.word	0x66666666
 8005cac:	3ff26666 	.word	0x3ff26666
 8005cb0:	42700000 	.word	0x42700000
 8005cb4:	20000404 	.word	0x20000404
 8005cb8:	3f83126f 	.word	0x3f83126f
 8005cbc:	200000b4 	.word	0x200000b4
 8005cc0:	20000234 	.word	0x20000234
 8005cc4:	3e83126f 	.word	0x3e83126f
 8005cc8:	200001dc 	.word	0x200001dc
 8005ccc:	20003dc4 	.word	0x20003dc4
 8005cd0:	2000042c 	.word	0x2000042c
 8005cd4:	20000208 	.word	0x20000208

08005cd8 <conf_general_init>:
void conf_general_init(void) {
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	4b2c      	ldr	r3, [pc, #176]	; (8005d8c <conf_general_init+0xb4>)
 8005cdc:	b082      	sub	sp, #8
 8005cde:	1c5c      	adds	r4, r3, #1
 8005ce0:	f503 75c6 	add.w	r5, r3, #396	; 0x18c
 8005ce4:	4258      	negs	r0, r3
 8005ce6:	18c2      	adds	r2, r0, r3
	*(uint32_t*)data = (*(__IO uint32_t*)(ADDR_FLASH_PAGE_62+((x/4)*4)));
 8005ce8:	f022 0103 	bic.w	r1, r2, #3
 8005cec:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8005cf0:	f501 31fc 	add.w	r1, r1, #129024	; 0x1f800
 8005cf4:	6809      	ldr	r1, [r1, #0]
	return data[x%4];
 8005cf6:	f002 0203 	and.w	r2, r2, #3
	*(uint32_t*)data = (*(__IO uint32_t*)(ADDR_FLASH_PAGE_62+((x/4)*4)));
 8005cfa:	9101      	str	r1, [sp, #4]
	return data[x%4];
 8005cfc:	a902      	add	r1, sp, #8
 8005cfe:	440a      	add	r2, r1
 8005d00:	f812 2c04 	ldrb.w	r2, [r2, #-4]
		conf_addr[i] = Flash_ReadByte_APP(i);
 8005d04:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (unsigned int i = 0;i < (sizeof(mc_configuration));i++) {
 8005d08:	42ab      	cmp	r3, r5
 8005d0a:	d1ec      	bne.n	8005ce6 <conf_general_init+0xe>
	if(conf->crc != app_calc_crc(conf)) {
 8005d0c:	4820      	ldr	r0, [pc, #128]	; (8005d90 <conf_general_init+0xb8>)
 8005d0e:	f8b4 41e0 	ldrh.w	r4, [r4, #480]	; 0x1e0
 8005d12:	f7ff fc7b 	bl	800560c <app_calc_crc>
 8005d16:	4284      	cmp	r4, r0
 8005d18:	d002      	beq.n	8005d20 <conf_general_init+0x48>
		confgenerator_set_defaults_appconf(conf);
 8005d1a:	481d      	ldr	r0, [pc, #116]	; (8005d90 <conf_general_init+0xb8>)
 8005d1c:	f000 fed0 	bl	8006ac0 <confgenerator_set_defaults_appconf>
	app_set_configuration(&appconf);
 8005d20:	481b      	ldr	r0, [pc, #108]	; (8005d90 <conf_general_init+0xb8>)
 8005d22:	f7ff fc53 	bl	80055cc <app_set_configuration>
	for (unsigned int i = 0;i < (sizeof(mc_configuration));i++) {
 8005d26:	4b1b      	ldr	r3, [pc, #108]	; (8005d94 <conf_general_init+0xbc>)
 8005d28:	1c5c      	adds	r4, r3, #1
 8005d2a:	f503 75c6 	add.w	r5, r3, #396	; 0x18c
 8005d2e:	4258      	negs	r0, r3
 8005d30:	18c2      	adds	r2, r0, r3
	*(uint32_t*)data = (*(__IO uint32_t*)(ADDR_FLASH_PAGE_63+((x/4)*4)));
 8005d32:	f022 0103 	bic.w	r1, r2, #3
 8005d36:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8005d3a:	f501 31fe 	add.w	r1, r1, #130048	; 0x1fc00
 8005d3e:	6809      	ldr	r1, [r1, #0]
	return data[x%4];
 8005d40:	f002 0203 	and.w	r2, r2, #3
	*(uint32_t*)data = (*(__IO uint32_t*)(ADDR_FLASH_PAGE_63+((x/4)*4)));
 8005d44:	9101      	str	r1, [sp, #4]
	return data[x%4];
 8005d46:	a902      	add	r1, sp, #8
 8005d48:	440a      	add	r2, r1
 8005d4a:	f812 2c04 	ldrb.w	r2, [r2, #-4]
		conf_addr[i] = Flash_ReadByte_MC(i);
 8005d4e:	f803 2f01 	strb.w	r2, [r3, #1]!
	for (unsigned int i = 0;i < (sizeof(mc_configuration));i++) {
 8005d52:	42ab      	cmp	r3, r5
 8005d54:	d1ec      	bne.n	8005d30 <conf_general_init+0x58>
	conf->crc = 0;
 8005d56:	2300      	movs	r3, #0
	unsigned crc_old = conf->crc;
 8005d58:	f8b4 5188 	ldrh.w	r5, [r4, #392]	; 0x188
	if(conf->crc != conf_calc_crc(conf)) {
 8005d5c:	f8b4 6188 	ldrh.w	r6, [r4, #392]	; 0x188
	unsigned crc_new = crc16((uint8_t*)conf, sizeof(mc_configuration));
 8005d60:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8005d64:	480c      	ldr	r0, [pc, #48]	; (8005d98 <conf_general_init+0xc0>)
	conf->crc = 0;
 8005d66:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	unsigned crc_new = crc16((uint8_t*)conf, sizeof(mc_configuration));
 8005d6a:	f000 febb 	bl	8006ae4 <crc16>
	unsigned crc_old = conf->crc;
 8005d6e:	b2ad      	uxth	r5, r5
	if(conf->crc != conf_calc_crc(conf)) {
 8005d70:	4286      	cmp	r6, r0
	conf->crc = crc_old;
 8005d72:	f8a4 5188 	strh.w	r5, [r4, #392]	; 0x188
	if(conf->crc != conf_calc_crc(conf)) {
 8005d76:	d002      	beq.n	8005d7e <conf_general_init+0xa6>
		confgenerator_set_defaults_mcconf(conf);
 8005d78:	4807      	ldr	r0, [pc, #28]	; (8005d98 <conf_general_init+0xc0>)
 8005d7a:	f000 fe2f 	bl	80069dc <confgenerator_set_defaults_mcconf>
	conf_general_setup_mc(&mc_conf);
 8005d7e:	4806      	ldr	r0, [pc, #24]	; (8005d98 <conf_general_init+0xc0>)
}
 8005d80:	b002      	add	sp, #8
 8005d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	conf_general_setup_mc(&mc_conf);
 8005d86:	f7ff be87 	b.w	8005a98 <conf_general_setup_mc>
 8005d8a:	bf00      	nop
 8005d8c:	20003f4f 	.word	0x20003f4f
 8005d90:	20003f50 	.word	0x20003f50
 8005d94:	20003dc3 	.word	0x20003dc3
 8005d98:	20003dc4 	.word	0x20003dc4

08005d9c <confgenerator_serialize_mcconf>:
#include "tune.h"
#include <string.h>
#include "drive_parameters.h"
#include "mc_stm_types.h"

int32_t confgenerator_serialize_mcconf(uint8_t *buffer, const mc_configuration *conf) {
 8005d9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005da0:	460d      	mov	r5, r1
	int32_t ind = 0;
 8005da2:	f04f 0800 	mov.w	r8, #0
int32_t confgenerator_serialize_mcconf(uint8_t *buffer, const mc_configuration *conf) {
 8005da6:	4604      	mov	r4, r0
 8005da8:	b083      	sub	sp, #12

	buffer_append_uint32(buffer, MCCONF_SIGNATURE, &ind);
 8005daa:	aa01      	add	r2, sp, #4
 8005dac:	49c2      	ldr	r1, [pc, #776]	; (80060b8 <confgenerator_serialize_mcconf+0x31c>)
	int32_t ind = 0;
 8005dae:	f8cd 8004 	str.w	r8, [sp, #4]
	buffer_append_uint32(buffer, MCCONF_SIGNATURE, &ind);
 8005db2:	f7ff fcd9 	bl	8005768 <buffer_append_uint32>

	buffer[ind++] = conf->pwm_mode;
 8005db6:	f895 2084 	ldrb.w	r2, [r5, #132]	; 0x84
 8005dba:	9b01      	ldr	r3, [sp, #4]
	buffer[ind++] = conf->comm_mode;
	buffer[ind++] = conf->motor_type;
	buffer[ind++] = conf->sensor_mode;
	buffer_append_float32_auto(buffer, conf->l_current_max, &ind);
 8005dbc:	4620      	mov	r0, r4
	buffer[ind++] = conf->pwm_mode;
 8005dbe:	54e2      	strb	r2, [r4, r3]
	buffer[ind++] = conf->comm_mode;
 8005dc0:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
 8005dc4:	18e1      	adds	r1, r4, r3
 8005dc6:	704a      	strb	r2, [r1, #1]
	buffer[ind++] = conf->motor_type;
 8005dc8:	f895 2086 	ldrb.w	r2, [r5, #134]	; 0x86
	buffer[ind++] = conf->sensor_mode;
 8005dcc:	3304      	adds	r3, #4
	buffer[ind++] = conf->motor_type;
 8005dce:	708a      	strb	r2, [r1, #2]
	buffer[ind++] = conf->sensor_mode;
 8005dd0:	f895 6087 	ldrb.w	r6, [r5, #135]	; 0x87
	buffer_append_float32_auto(buffer, conf->l_current_max, &ind);
 8005dd4:	aa01      	add	r2, sp, #4
	buffer[ind++] = conf->sensor_mode;
 8005dd6:	70ce      	strb	r6, [r1, #3]
	buffer_append_float32_auto(buffer, conf->l_watt_min, &ind);
	buffer_append_float32_auto(buffer, conf->l_current_max_scale, &ind);
	buffer_append_float32_auto(buffer, conf->l_current_min_scale, &ind);
	buffer_append_float32_auto(buffer, conf->l_duty_start, &ind);
//	buffer_append_float32_auto(buffer, conf->sl_min_erpm, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8005dd8:	2600      	movs	r6, #0
	buffer_append_float32_auto(buffer, conf->l_current_max, &ind);
 8005dda:	6829      	ldr	r1, [r5, #0]
	buffer[ind++] = conf->sensor_mode;
 8005ddc:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(buffer, conf->l_current_max, &ind);
 8005dde:	f7ff fd0d 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_current_min, &ind);
 8005de2:	4620      	mov	r0, r4
 8005de4:	6869      	ldr	r1, [r5, #4]
 8005de6:	aa01      	add	r2, sp, #4
 8005de8:	f7ff fd08 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_in_current_max, &ind);
 8005dec:	4620      	mov	r0, r4
 8005dee:	68a9      	ldr	r1, [r5, #8]
 8005df0:	aa01      	add	r2, sp, #4
 8005df2:	f7ff fd03 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_in_current_min, &ind);
 8005df6:	4620      	mov	r0, r4
 8005df8:	68e9      	ldr	r1, [r5, #12]
 8005dfa:	aa01      	add	r2, sp, #4
 8005dfc:	f7ff fcfe 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_abs_current_max, &ind);
 8005e00:	4620      	mov	r0, r4
 8005e02:	6929      	ldr	r1, [r5, #16]
 8005e04:	aa01      	add	r2, sp, #4
 8005e06:	f7ff fcf9 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_min_erpm, &ind);
 8005e0a:	4620      	mov	r0, r4
 8005e0c:	6969      	ldr	r1, [r5, #20]
 8005e0e:	aa01      	add	r2, sp, #4
 8005e10:	f7ff fcf4 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_max_erpm, &ind);
 8005e14:	4620      	mov	r0, r4
 8005e16:	69a9      	ldr	r1, [r5, #24]
 8005e18:	aa01      	add	r2, sp, #4
 8005e1a:	f7ff fcef 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_erpm_start, &ind);
 8005e1e:	4620      	mov	r0, r4
 8005e20:	69e9      	ldr	r1, [r5, #28]
 8005e22:	aa01      	add	r2, sp, #4
 8005e24:	f7ff fcea 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_max_erpm_fbrake, &ind);
 8005e28:	4620      	mov	r0, r4
 8005e2a:	6a29      	ldr	r1, [r5, #32]
 8005e2c:	aa01      	add	r2, sp, #4
 8005e2e:	f7ff fce5 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_max_erpm_fbrake_cc, &ind);
 8005e32:	4620      	mov	r0, r4
 8005e34:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8005e36:	aa01      	add	r2, sp, #4
 8005e38:	f7ff fce0 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_min_vin, &ind);
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8005e40:	aa01      	add	r2, sp, #4
 8005e42:	f7ff fcdb 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_max_vin, &ind);
 8005e46:	4620      	mov	r0, r4
 8005e48:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005e4a:	aa01      	add	r2, sp, #4
 8005e4c:	f7ff fcd6 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_battery_cut_start, &ind);
 8005e50:	4620      	mov	r0, r4
 8005e52:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8005e54:	aa01      	add	r2, sp, #4
 8005e56:	f7ff fcd1 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_battery_cut_end, &ind);
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8005e5e:	aa01      	add	r2, sp, #4
 8005e60:	f7ff fccc 	bl	80057fc <buffer_append_float32_auto>
	buffer[ind++] = conf->l_slow_abs_current;
 8005e64:	9b01      	ldr	r3, [sp, #4]
 8005e66:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
	buffer_append_float32_auto(buffer, conf->l_temp_fet_start, &ind);
 8005e6a:	4620      	mov	r0, r4
	buffer[ind++] = conf->l_slow_abs_current;
 8005e6c:	54e2      	strb	r2, [r4, r3]
	buffer_append_float32_auto(buffer, conf->l_temp_fet_start, &ind);
 8005e6e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
	buffer[ind++] = conf->l_slow_abs_current;
 8005e70:	3301      	adds	r3, #1
	buffer_append_float32_auto(buffer, conf->l_temp_fet_start, &ind);
 8005e72:	aa01      	add	r2, sp, #4
	buffer[ind++] = conf->l_slow_abs_current;
 8005e74:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(buffer, conf->l_temp_fet_start, &ind);
 8005e76:	f7ff fcc1 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_temp_fet_end, &ind);
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8005e7e:	aa01      	add	r2, sp, #4
 8005e80:	f7ff fcbc 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_temp_motor_start, &ind);
 8005e84:	4620      	mov	r0, r4
 8005e86:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8005e88:	aa01      	add	r2, sp, #4
 8005e8a:	f7ff fcb7 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_temp_motor_end, &ind);
 8005e8e:	4620      	mov	r0, r4
 8005e90:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8005e92:	aa01      	add	r2, sp, #4
 8005e94:	f7ff fcb2 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_temp_accel_dec, &ind);
 8005e98:	4620      	mov	r0, r4
 8005e9a:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 8005e9c:	aa01      	add	r2, sp, #4
 8005e9e:	f7ff fcad 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_min_duty, &ind);
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	6d29      	ldr	r1, [r5, #80]	; 0x50
 8005ea6:	aa01      	add	r2, sp, #4
 8005ea8:	f7ff fca8 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_max_duty, &ind);
 8005eac:	4620      	mov	r0, r4
 8005eae:	6d69      	ldr	r1, [r5, #84]	; 0x54
 8005eb0:	aa01      	add	r2, sp, #4
 8005eb2:	f7ff fca3 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_watt_max, &ind);
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	6da9      	ldr	r1, [r5, #88]	; 0x58
 8005eba:	aa01      	add	r2, sp, #4
 8005ebc:	f7ff fc9e 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_watt_min, &ind);
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 8005ec4:	aa01      	add	r2, sp, #4
 8005ec6:	f7ff fc99 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_current_max_scale, &ind);
 8005eca:	4620      	mov	r0, r4
 8005ecc:	6e29      	ldr	r1, [r5, #96]	; 0x60
 8005ece:	aa01      	add	r2, sp, #4
 8005ed0:	f7ff fc94 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_current_min_scale, &ind);
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	6e69      	ldr	r1, [r5, #100]	; 0x64
 8005ed8:	aa01      	add	r2, sp, #4
 8005eda:	f7ff fc8f 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->l_duty_start, &ind);
 8005ede:	4620      	mov	r0, r4
 8005ee0:	6ea9      	ldr	r1, [r5, #104]	; 0x68
 8005ee2:	aa01      	add	r2, sp, #4
 8005ee4:	f7ff fc8a 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, 0, &ind);
 8005ee8:	4620      	mov	r0, r4
 8005eea:	4631      	mov	r1, r6
 8005eec:	aa01      	add	r2, sp, #4
 8005eee:	f7ff fc85 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->sl_min_erpm_cycle_int_limit, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8005ef2:	4631      	mov	r1, r6
 8005ef4:	4620      	mov	r0, r4
 8005ef6:	aa01      	add	r2, sp, #4
 8005ef8:	f7ff fc80 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->sl_max_fullbreak_current_dir_change, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8005efc:	4631      	mov	r1, r6
 8005efe:	4620      	mov	r0, r4
 8005f00:	aa01      	add	r2, sp, #4
 8005f02:	f7ff fc7b 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->sl_cycle_int_limit, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8005f06:	4631      	mov	r1, r6
 8005f08:	4620      	mov	r0, r4
 8005f0a:	aa01      	add	r2, sp, #4
 8005f0c:	f7ff fc76 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->sl_phase_advance_at_br, &ind);/
	buffer_append_float32_auto(buffer, 0, &ind);
 8005f10:	4631      	mov	r1, r6
 8005f12:	4620      	mov	r0, r4
 8005f14:	aa01      	add	r2, sp, #4
 8005f16:	f7ff fc71 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->sl_cycle_int_rpm_br, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8005f1a:	4631      	mov	r1, r6
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	aa01      	add	r2, sp, #4
 8005f20:	f7ff fc6c 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->sl_bemf_coupling_k, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8005f24:	4631      	mov	r1, r6
 8005f26:	4620      	mov	r0, r4
 8005f28:	aa01      	add	r2, sp, #4
 8005f2a:	f7ff fc67 	bl	80057fc <buffer_append_float32_auto>
//	buffer[ind++] = (uint8_t)conf->hall_table[3];
//	buffer[ind++] = (uint8_t)conf->hall_table[4];
//	buffer[ind++] = (uint8_t)conf->hall_table[5];
//	buffer[ind++] = (uint8_t)conf->hall_table[6];
//	buffer[ind++] = (uint8_t)conf->hall_table[7];
	ind+=8;
 8005f2e:	9b01      	ldr	r3, [sp, #4]
//	buffer_append_float32_auto(buffer, conf->hall_sl_erpm, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8005f30:	4620      	mov	r0, r4
	ind+=8;
 8005f32:	3308      	adds	r3, #8
	buffer_append_float32_auto(buffer, 0, &ind);
 8005f34:	4631      	mov	r1, r6
 8005f36:	aa01      	add	r2, sp, #4
	ind+=8;
 8005f38:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(buffer, 0, &ind);
 8005f3a:	f7ff fc5f 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_current_kp, &ind);
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f8d5 1088 	ldr.w	r1, [r5, #136]	; 0x88
 8005f44:	aa01      	add	r2, sp, #4
 8005f46:	f7ff fc59 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_current_ki, &ind);
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
 8005f50:	aa01      	add	r2, sp, #4
 8005f52:	f7ff fc53 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_f_sw, &ind);
 8005f56:	4620      	mov	r0, r4
 8005f58:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
 8005f5c:	aa01      	add	r2, sp, #4
 8005f5e:	f7ff fc4d 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_dt_us, &ind);
 8005f62:	4620      	mov	r0, r4
 8005f64:	f8d5 1094 	ldr.w	r1, [r5, #148]	; 0x94
 8005f68:	aa01      	add	r2, sp, #4
 8005f6a:	f7ff fc47 	bl	80057fc <buffer_append_float32_auto>
//	buffer[ind++] = conf->foc_encoder_inverted;
	buffer[ind++] = 0;
 8005f6e:	9b01      	ldr	r3, [sp, #4]
	buffer_append_float32_auto(buffer, conf->foc_encoder_offset, &ind);
 8005f70:	4620      	mov	r0, r4
	buffer[ind++] = 0;
 8005f72:	f804 8003 	strb.w	r8, [r4, r3]
	buffer_append_float32_auto(buffer, conf->foc_encoder_offset, &ind);
 8005f76:	f8d5 1098 	ldr.w	r1, [r5, #152]	; 0x98
	buffer[ind++] = 0;
 8005f7a:	3301      	adds	r3, #1
	buffer_append_float32_auto(buffer, conf->foc_encoder_offset, &ind);
 8005f7c:	aa01      	add	r2, sp, #4
	buffer[ind++] = 0;
 8005f7e:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(buffer, conf->foc_encoder_offset, &ind);
 8005f80:	f7ff fc3c 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->foc_encoder_ratio, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8005f84:	4631      	mov	r1, r6
 8005f86:	4620      	mov	r0, r4
 8005f88:	aa01      	add	r2, sp, #4
 8005f8a:	f7ff fc37 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->foc_encoder_sin_gain, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8005f8e:	4631      	mov	r1, r6
 8005f90:	4620      	mov	r0, r4
 8005f92:	aa01      	add	r2, sp, #4
 8005f94:	f7ff fc32 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->foc_encoder_cos_gain, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8005f98:	4631      	mov	r1, r6
 8005f9a:	4620      	mov	r0, r4
 8005f9c:	aa01      	add	r2, sp, #4
 8005f9e:	f7ff fc2d 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->foc_encoder_sin_offset, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	aa01      	add	r2, sp, #4
 8005fa8:	f7ff fc28 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->foc_encoder_cos_offset, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8005fac:	4631      	mov	r1, r6
 8005fae:	4620      	mov	r0, r4
 8005fb0:	aa01      	add	r2, sp, #4
 8005fb2:	f7ff fc23 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->foc_encoder_sincos_filter_constant, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8005fb6:	4631      	mov	r1, r6
 8005fb8:	4620      	mov	r0, r4
 8005fba:	aa01      	add	r2, sp, #4
 8005fbc:	f7ff fc1e 	bl	80057fc <buffer_append_float32_auto>
	buffer[ind++] = conf->foc_sensor_mode;
 8005fc0:	9b01      	ldr	r3, [sp, #4]
 8005fc2:	f895 20e4 	ldrb.w	r2, [r5, #228]	; 0xe4
	buffer_append_float32_auto(buffer, conf->foc_pll_kp, &ind);
 8005fc6:	4620      	mov	r0, r4
	buffer[ind++] = conf->foc_sensor_mode;
 8005fc8:	54e2      	strb	r2, [r4, r3]
	buffer_append_float32_auto(buffer, conf->foc_pll_kp, &ind);
 8005fca:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
	buffer[ind++] = conf->foc_sensor_mode;
 8005fce:	3301      	adds	r3, #1
	buffer_append_float32_auto(buffer, conf->foc_pll_kp, &ind);
 8005fd0:	aa01      	add	r2, sp, #4
	buffer[ind++] = conf->foc_sensor_mode;
 8005fd2:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(buffer, conf->foc_pll_kp, &ind);
 8005fd4:	f7ff fc12 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_pll_ki, &ind);
 8005fd8:	4620      	mov	r0, r4
 8005fda:	f8d5 10b8 	ldr.w	r1, [r5, #184]	; 0xb8
 8005fde:	aa01      	add	r2, sp, #4
 8005fe0:	f7ff fc0c 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_motor_l, &ind);
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
 8005fea:	aa01      	add	r2, sp, #4
 8005fec:	f7ff fc06 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_motor_ld_lq_diff, &ind);
 8005ff0:	4620      	mov	r0, r4
 8005ff2:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
 8005ff6:	aa01      	add	r2, sp, #4
 8005ff8:	f7ff fc00 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_motor_r, &ind);
 8005ffc:	4620      	mov	r0, r4
 8005ffe:	f8d5 10a4 	ldr.w	r1, [r5, #164]	; 0xa4
 8006002:	aa01      	add	r2, sp, #4
 8006004:	f7ff fbfa 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_motor_flux_linkage, &ind);
 8006008:	4620      	mov	r0, r4
 800600a:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
 800600e:	aa01      	add	r2, sp, #4
 8006010:	f7ff fbf4 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_observer_gain, &ind);
 8006014:	4620      	mov	r0, r4
 8006016:	f8d5 10ac 	ldr.w	r1, [r5, #172]	; 0xac
 800601a:	aa01      	add	r2, sp, #4
 800601c:	f7ff fbee 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_observer_gain_slow, &ind);
 8006020:	4620      	mov	r0, r4
 8006022:	f8d5 10b0 	ldr.w	r1, [r5, #176]	; 0xb0
 8006026:	aa01      	add	r2, sp, #4
 8006028:	f7ff fbe8 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_duty_dowmramp_kp, &ind);
 800602c:	4620      	mov	r0, r4
 800602e:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
 8006032:	aa01      	add	r2, sp, #4
 8006034:	f7ff fbe2 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_duty_dowmramp_ki, &ind);
	buffer_append_float32_auto(buffer, conf->foc_openloop_rpm, &ind);
	buffer_append_float16(buffer, conf->foc_openloop_rpm_low, 1000, &ind);
 8006038:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80060c0 <confgenerator_serialize_mcconf+0x324>
	buffer_append_float32_auto(buffer, conf->foc_duty_dowmramp_ki, &ind);
 800603c:	4620      	mov	r0, r4
 800603e:	f8d5 10c0 	ldr.w	r1, [r5, #192]	; 0xc0
 8006042:	aa01      	add	r2, sp, #4
 8006044:	f7ff fbda 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_openloop_rpm, &ind);
 8006048:	4620      	mov	r0, r4
 800604a:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
 800604e:	aa01      	add	r2, sp, #4
 8006050:	f7ff fbd4 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float16(buffer, conf->foc_openloop_rpm_low, 1000, &ind);
 8006054:	ab01      	add	r3, sp, #4
 8006056:	4620      	mov	r0, r4
 8006058:	464a      	mov	r2, r9
 800605a:	f8d5 10c8 	ldr.w	r1, [r5, #200]	; 0xc8
 800605e:	f7ff fb99 	bl	8005794 <buffer_append_float16>
	buffer_append_float32_auto(buffer, conf->foc_d_gain_scale_start, &ind);
	buffer_append_float32_auto(buffer, conf->foc_d_gain_scale_max_mod, &ind);
	buffer_append_float16(buffer, conf->foc_sl_openloop_hyst, 100, &ind);
 8006062:	4f16      	ldr	r7, [pc, #88]	; (80060bc <confgenerator_serialize_mcconf+0x320>)
	buffer_append_float32_auto(buffer, conf->foc_d_gain_scale_start, &ind);
 8006064:	4620      	mov	r0, r4
 8006066:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
 800606a:	aa01      	add	r2, sp, #4
 800606c:	f7ff fbc6 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_d_gain_scale_max_mod, &ind);
 8006070:	4620      	mov	r0, r4
 8006072:	f8d5 10d0 	ldr.w	r1, [r5, #208]	; 0xd0
 8006076:	aa01      	add	r2, sp, #4
 8006078:	f7ff fbc0 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float16(buffer, conf->foc_sl_openloop_hyst, 100, &ind);
 800607c:	4620      	mov	r0, r4
 800607e:	463a      	mov	r2, r7
 8006080:	f8d5 10d4 	ldr.w	r1, [r5, #212]	; 0xd4
 8006084:	ab01      	add	r3, sp, #4
 8006086:	f7ff fb85 	bl	8005794 <buffer_append_float16>
	buffer_append_float16(buffer, conf->foc_sl_openloop_time_lock, 100, &ind);
 800608a:	463a      	mov	r2, r7
 800608c:	4620      	mov	r0, r4
 800608e:	f8d5 10dc 	ldr.w	r1, [r5, #220]	; 0xdc
 8006092:	ab01      	add	r3, sp, #4
 8006094:	f7ff fb7e 	bl	8005794 <buffer_append_float16>
	buffer_append_float16(buffer, conf->foc_sl_openloop_time_ramp, 100, &ind);
 8006098:	463a      	mov	r2, r7
 800609a:	4620      	mov	r0, r4
 800609c:	f8d5 10e0 	ldr.w	r1, [r5, #224]	; 0xe0
 80060a0:	ab01      	add	r3, sp, #4
 80060a2:	f7ff fb77 	bl	8005794 <buffer_append_float16>
	buffer_append_float16(buffer, conf->foc_sl_openloop_time, 100, &ind);
 80060a6:	463a      	mov	r2, r7
 80060a8:	4620      	mov	r0, r4
 80060aa:	f8d5 10d8 	ldr.w	r1, [r5, #216]	; 0xd8
 80060ae:	ab01      	add	r3, sp, #4
 80060b0:	f7ff fb70 	bl	8005794 <buffer_append_float16>
 80060b4:	e006      	b.n	80060c4 <confgenerator_serialize_mcconf+0x328>
 80060b6:	bf00      	nop
 80060b8:	83d6207a 	.word	0x83d6207a
 80060bc:	42c80000 	.word	0x42c80000
 80060c0:	447a0000 	.word	0x447a0000
	buffer[ind++] = (uint8_t)conf->foc_hall_table[0];
 80060c4:	f895 30e5 	ldrb.w	r3, [r5, #229]	; 0xe5
 80060c8:	9a01      	ldr	r2, [sp, #4]
	buffer[ind++] = (uint8_t)conf->foc_hall_table[3];
	buffer[ind++] = (uint8_t)conf->foc_hall_table[4];
	buffer[ind++] = (uint8_t)conf->foc_hall_table[5];
	buffer[ind++] = (uint8_t)conf->foc_hall_table[6];
	buffer[ind++] = (uint8_t)conf->foc_hall_table[7];
	buffer_append_float32_auto(buffer, conf->foc_hall_interp_erpm, &ind);
 80060ca:	4620      	mov	r0, r4
	buffer[ind++] = (uint8_t)conf->foc_hall_table[0];
 80060cc:	54a3      	strb	r3, [r4, r2]
	buffer[ind++] = (uint8_t)conf->foc_hall_table[1];
 80060ce:	f895 10e6 	ldrb.w	r1, [r5, #230]	; 0xe6
 80060d2:	18a3      	adds	r3, r4, r2
 80060d4:	7059      	strb	r1, [r3, #1]
	buffer[ind++] = (uint8_t)conf->foc_hall_table[2];
 80060d6:	f895 10e7 	ldrb.w	r1, [r5, #231]	; 0xe7
	buffer[ind++] = (uint8_t)conf->foc_hall_table[7];
 80060da:	3208      	adds	r2, #8
	buffer[ind++] = (uint8_t)conf->foc_hall_table[2];
 80060dc:	7099      	strb	r1, [r3, #2]
	buffer[ind++] = (uint8_t)conf->foc_hall_table[3];
 80060de:	f895 10e8 	ldrb.w	r1, [r5, #232]	; 0xe8
	buffer[ind++] = (uint8_t)conf->foc_hall_table[7];
 80060e2:	9201      	str	r2, [sp, #4]
	buffer[ind++] = (uint8_t)conf->foc_hall_table[3];
 80060e4:	70d9      	strb	r1, [r3, #3]
	buffer[ind++] = (uint8_t)conf->foc_hall_table[4];
 80060e6:	f895 10e9 	ldrb.w	r1, [r5, #233]	; 0xe9
	buffer_append_float32_auto(buffer, conf->foc_hall_interp_erpm, &ind);
 80060ea:	aa01      	add	r2, sp, #4
	buffer[ind++] = (uint8_t)conf->foc_hall_table[4];
 80060ec:	7119      	strb	r1, [r3, #4]
	buffer[ind++] = (uint8_t)conf->foc_hall_table[5];
 80060ee:	f895 10ea 	ldrb.w	r1, [r5, #234]	; 0xea
 80060f2:	7159      	strb	r1, [r3, #5]
	buffer[ind++] = (uint8_t)conf->foc_hall_table[6];
 80060f4:	f895 10eb 	ldrb.w	r1, [r5, #235]	; 0xeb
 80060f8:	7199      	strb	r1, [r3, #6]
	buffer[ind++] = (uint8_t)conf->foc_hall_table[7];
 80060fa:	f895 10ec 	ldrb.w	r1, [r5, #236]	; 0xec
 80060fe:	71d9      	strb	r1, [r3, #7]
	buffer_append_float32_auto(buffer, conf->foc_hall_interp_erpm, &ind);
 8006100:	f8d5 10f0 	ldr.w	r1, [r5, #240]	; 0xf0
 8006104:	f7ff fb7a 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->foc_sl_erpm, &ind);
 8006108:	4620      	mov	r0, r4
 800610a:	f8d5 10f4 	ldr.w	r1, [r5, #244]	; 0xf4
 800610e:	aa01      	add	r2, sp, #4
 8006110:	f7ff fb74 	bl	80057fc <buffer_append_float32_auto>
	buffer[ind++] = conf->foc_sample_v0_v7;
 8006114:	9b01      	ldr	r3, [sp, #4]
 8006116:	f895 20f8 	ldrb.w	r2, [r5, #248]	; 0xf8
	buffer[ind++] = conf->foc_sample_high_current;
 800611a:	f103 0c02 	add.w	ip, r3, #2
	buffer[ind++] = conf->foc_sample_v0_v7;
 800611e:	54e2      	strb	r2, [r4, r3]
	buffer[ind++] = conf->foc_sample_high_current;
 8006120:	f895 10f9 	ldrb.w	r1, [r5, #249]	; 0xf9
 8006124:	18e2      	adds	r2, r4, r3
 8006126:	7051      	strb	r1, [r2, #1]
	buffer_append_float16(buffer, conf->foc_sat_comp, 1000, &ind);
 8006128:	4620      	mov	r0, r4
 800612a:	464a      	mov	r2, r9
 800612c:	f8d5 10fc 	ldr.w	r1, [r5, #252]	; 0xfc
 8006130:	ab01      	add	r3, sp, #4
	buffer[ind++] = conf->foc_sample_high_current;
 8006132:	f8cd c004 	str.w	ip, [sp, #4]
	buffer_append_float16(buffer, conf->foc_sat_comp, 1000, &ind);
 8006136:	f7ff fb2d 	bl	8005794 <buffer_append_float16>
	buffer[ind++] = conf->foc_temp_comp;
 800613a:	9b01      	ldr	r3, [sp, #4]
 800613c:	f895 2100 	ldrb.w	r2, [r5, #256]	; 0x100
 8006140:	f103 0c01 	add.w	ip, r3, #1
 8006144:	54e2      	strb	r2, [r4, r3]
	buffer_append_float16(buffer, conf->foc_temp_comp_base_temp, 100, &ind);
 8006146:	4620      	mov	r0, r4
 8006148:	ab01      	add	r3, sp, #4
 800614a:	463a      	mov	r2, r7
 800614c:	f8d5 1104 	ldr.w	r1, [r5, #260]	; 0x104
	buffer[ind++] = conf->foc_temp_comp;
 8006150:	f8cd c004 	str.w	ip, [sp, #4]
	buffer_append_float16(buffer, conf->foc_temp_comp_base_temp, 100, &ind);
 8006154:	f7ff fb1e 	bl	8005794 <buffer_append_float16>
	buffer_append_float32_auto(buffer, conf->foc_current_filter_const, &ind);
 8006158:	4620      	mov	r0, r4
 800615a:	f8d5 1108 	ldr.w	r1, [r5, #264]	; 0x108
 800615e:	aa01      	add	r2, sp, #4
 8006160:	f7ff fb4c 	bl	80057fc <buffer_append_float32_auto>
	buffer[ind++] = conf->foc_cc_decoupling;
 8006164:	9b01      	ldr	r3, [sp, #4]
 8006166:	f895 210c 	ldrb.w	r2, [r5, #268]	; 0x10c
	buffer[ind++] = conf->foc_observer_type;
	//buffer_append_float32_auto(buffer, conf->foc_hfi_voltage_start, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 800616a:	4620      	mov	r0, r4
	buffer[ind++] = conf->foc_cc_decoupling;
 800616c:	54e2      	strb	r2, [r4, r3]
	buffer[ind++] = conf->foc_observer_type;
 800616e:	f895 110d 	ldrb.w	r1, [r5, #269]	; 0x10d
 8006172:	18e2      	adds	r2, r4, r3
 8006174:	7051      	strb	r1, [r2, #1]
 8006176:	3302      	adds	r3, #2
	buffer_append_float32_auto(buffer, 0, &ind);
 8006178:	4631      	mov	r1, r6
 800617a:	aa01      	add	r2, sp, #4
	buffer[ind++] = conf->foc_observer_type;
 800617c:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(buffer, 0, &ind);
 800617e:	f7ff fb3d 	bl	80057fc <buffer_append_float32_auto>
	//buffer_append_float32_auto(buffer, conf->foc_hfi_voltage_run, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8006182:	4631      	mov	r1, r6
 8006184:	4620      	mov	r0, r4
 8006186:	aa01      	add	r2, sp, #4
 8006188:	f7ff fb38 	bl	80057fc <buffer_append_float32_auto>
	//buffer_append_float32_auto(buffer, conf->foc_hfi_voltage_max, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 800618c:	4631      	mov	r1, r6
 800618e:	4620      	mov	r0, r4
 8006190:	aa01      	add	r2, sp, #4
 8006192:	f7ff fb33 	bl	80057fc <buffer_append_float32_auto>
	//buffer_append_float32_auto(buffer, conf->foc_sl_erpm_hfi, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8006196:	4631      	mov	r1, r6
 8006198:	4620      	mov	r0, r4
 800619a:	aa01      	add	r2, sp, #4
 800619c:	f7ff fb2e 	bl	80057fc <buffer_append_float32_auto>
	//buffer_append_uint16(buffer, conf->foc_hfi_start_samples, &ind);
	buffer_append_uint16(buffer, 2, &ind);
 80061a0:	4620      	mov	r0, r4
 80061a2:	aa01      	add	r2, sp, #4
 80061a4:	2102      	movs	r1, #2
 80061a6:	f7ff fabd 	bl	8005724 <buffer_append_uint16>
	//buffer_append_float32_auto(buffer, conf->foc_hfi_obs_ovr_sec, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 80061aa:	4631      	mov	r1, r6
 80061ac:	4620      	mov	r0, r4
 80061ae:	aa01      	add	r2, sp, #4
 80061b0:	f7ff fb24 	bl	80057fc <buffer_append_float32_auto>
	//buffer[ind++] = conf->foc_hfi_samples;
	buffer[ind++] = 8;
 80061b4:	2208      	movs	r2, #8
 80061b6:	9b01      	ldr	r3, [sp, #4]

//	buffer_append_int16(buffer, conf->gpd_buffer_notify_left, &ind);
	buffer_append_int16(buffer, 0, &ind);
 80061b8:	4620      	mov	r0, r4
	buffer[ind++] = 8;
 80061ba:	54e2      	strb	r2, [r4, r3]
	buffer_append_int16(buffer, 0, &ind);
 80061bc:	4641      	mov	r1, r8
	buffer[ind++] = 8;
 80061be:	3301      	adds	r3, #1
	buffer_append_int16(buffer, 0, &ind);
 80061c0:	aa01      	add	r2, sp, #4
	buffer[ind++] = 8;
 80061c2:	9301      	str	r3, [sp, #4]
	buffer_append_int16(buffer, 0, &ind);
 80061c4:	f7ff faa2 	bl	800570c <buffer_append_int16>
//	buffer_append_int16(buffer, conf->gpd_buffer_interpol, &ind);
	buffer_append_int16(buffer, 0, &ind);
 80061c8:	4641      	mov	r1, r8
 80061ca:	4620      	mov	r0, r4
 80061cc:	aa01      	add	r2, sp, #4
 80061ce:	f7ff fa9d 	bl	800570c <buffer_append_int16>
//	buffer_append_float32_auto(buffer, conf->gpd_current_filter_const, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 80061d2:	4631      	mov	r1, r6
 80061d4:	4620      	mov	r0, r4
 80061d6:	aa01      	add	r2, sp, #4
 80061d8:	f7ff fb10 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->gpd_current_kp, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 80061dc:	4631      	mov	r1, r6
 80061de:	4620      	mov	r0, r4
 80061e0:	aa01      	add	r2, sp, #4
 80061e2:	f7ff fb0b 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->gpd_current_ki, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 80061e6:	4631      	mov	r1, r6
 80061e8:	4620      	mov	r0, r4
 80061ea:	aa01      	add	r2, sp, #4
 80061ec:	f7ff fb06 	bl	80057fc <buffer_append_float32_auto>

	buffer_append_float32_auto(buffer, conf->s_pid_kp, &ind);
 80061f0:	4620      	mov	r0, r4
 80061f2:	f8d5 1110 	ldr.w	r1, [r5, #272]	; 0x110
 80061f6:	aa01      	add	r2, sp, #4
 80061f8:	f7ff fb00 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->s_pid_ki, &ind);
 80061fc:	4620      	mov	r0, r4
 80061fe:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
 8006202:	aa01      	add	r2, sp, #4
 8006204:	f7ff fafa 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->s_pid_kd, &ind);
 8006208:	4620      	mov	r0, r4
 800620a:	f8d5 1118 	ldr.w	r1, [r5, #280]	; 0x118
 800620e:	aa01      	add	r2, sp, #4
 8006210:	f7ff faf4 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->s_pid_kd_filter, &ind);
 8006214:	4620      	mov	r0, r4
 8006216:	f8d5 111c 	ldr.w	r1, [r5, #284]	; 0x11c
 800621a:	aa01      	add	r2, sp, #4
 800621c:	f7ff faee 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->s_pid_min_erpm, &ind);
 8006220:	4620      	mov	r0, r4
 8006222:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
 8006226:	aa01      	add	r2, sp, #4
 8006228:	f7ff fae8 	bl	80057fc <buffer_append_float32_auto>
	buffer[ind++] = conf->s_pid_allow_braking;
 800622c:	9b01      	ldr	r3, [sp, #4]
 800622e:	f895 2124 	ldrb.w	r2, [r5, #292]	; 0x124
	buffer_append_float32_auto(buffer, conf->s_pid_ramp_erpms_s, &ind);
 8006232:	4620      	mov	r0, r4
	buffer[ind++] = conf->s_pid_allow_braking;
 8006234:	54e2      	strb	r2, [r4, r3]
	buffer_append_float32_auto(buffer, conf->s_pid_ramp_erpms_s, &ind);
 8006236:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	buffer[ind++] = conf->s_pid_allow_braking;
 800623a:	3301      	adds	r3, #1
	buffer_append_float32_auto(buffer, conf->s_pid_ramp_erpms_s, &ind);
 800623c:	aa01      	add	r2, sp, #4
	buffer[ind++] = conf->s_pid_allow_braking;
 800623e:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(buffer, conf->s_pid_ramp_erpms_s, &ind);
 8006240:	f7ff fadc 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->p_pid_kp, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8006244:	4631      	mov	r1, r6
 8006246:	4620      	mov	r0, r4
 8006248:	aa01      	add	r2, sp, #4
 800624a:	f7ff fad7 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->p_pid_ki, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 800624e:	4631      	mov	r1, r6
 8006250:	4620      	mov	r0, r4
 8006252:	aa01      	add	r2, sp, #4
 8006254:	f7ff fad2 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->p_pid_kd, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8006258:	4631      	mov	r1, r6
 800625a:	4620      	mov	r0, r4
 800625c:	aa01      	add	r2, sp, #4
 800625e:	f7ff facd 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->p_pid_kd_filter, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 8006262:	4631      	mov	r1, r6
 8006264:	4620      	mov	r0, r4
 8006266:	aa01      	add	r2, sp, #4
 8006268:	f7ff fac8 	bl	80057fc <buffer_append_float32_auto>
//	buffer_append_float32_auto(buffer, conf->p_pid_ang_div, &ind);
	buffer_append_float32_auto(buffer, 0, &ind);
 800626c:	4631      	mov	r1, r6
 800626e:	4620      	mov	r0, r4
 8006270:	aa01      	add	r2, sp, #4
 8006272:	f7ff fac3 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->cc_startup_boost_duty, &ind);
 8006276:	4620      	mov	r0, r4
 8006278:	f8d5 112c 	ldr.w	r1, [r5, #300]	; 0x12c
 800627c:	aa01      	add	r2, sp, #4
 800627e:	f7ff fabd 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->cc_min_current, &ind);
 8006282:	4620      	mov	r0, r4
 8006284:	f8d5 1130 	ldr.w	r1, [r5, #304]	; 0x130
 8006288:	aa01      	add	r2, sp, #4
 800628a:	f7ff fab7 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->cc_gain, &ind);
 800628e:	4620      	mov	r0, r4
 8006290:	f8d5 1134 	ldr.w	r1, [r5, #308]	; 0x134
 8006294:	aa01      	add	r2, sp, #4
 8006296:	f7ff fab1 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->cc_ramp_step_max, &ind);
 800629a:	4620      	mov	r0, r4
 800629c:	f8d5 1138 	ldr.w	r1, [r5, #312]	; 0x138
 80062a0:	aa01      	add	r2, sp, #4
 80062a2:	f7ff faab 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_int32(buffer, conf->m_fault_stop_time_ms, &ind);
 80062a6:	4620      	mov	r0, r4
 80062a8:	f8d5 113c 	ldr.w	r1, [r5, #316]	; 0x13c
 80062ac:	aa01      	add	r2, sp, #4
 80062ae:	f7ff fa45 	bl	800573c <buffer_append_int32>
	buffer_append_float32_auto(buffer, conf->m_duty_ramp_step, &ind);
 80062b2:	4620      	mov	r0, r4
 80062b4:	f8d5 1140 	ldr.w	r1, [r5, #320]	; 0x140
 80062b8:	aa01      	add	r2, sp, #4
 80062ba:	f7ff fa9f 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->m_current_backoff_gain, &ind);
 80062be:	4620      	mov	r0, r4
 80062c0:	f8d5 1144 	ldr.w	r1, [r5, #324]	; 0x144
 80062c4:	aa01      	add	r2, sp, #4
 80062c6:	f7ff fa99 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_uint32(buffer, conf->m_encoder_counts, &ind);
 80062ca:	4620      	mov	r0, r4
 80062cc:	f8d5 1148 	ldr.w	r1, [r5, #328]	; 0x148
 80062d0:	aa01      	add	r2, sp, #4
 80062d2:	f7ff fa49 	bl	8005768 <buffer_append_uint32>
	buffer[ind++] = conf->m_sensor_port_mode;
 80062d6:	f895 214c 	ldrb.w	r2, [r5, #332]	; 0x14c
 80062da:	9b01      	ldr	r3, [sp, #4]
	buffer[ind++] = conf->m_invert_direction;
	buffer[ind++] = conf->m_drv8301_oc_mode;
	buffer[ind++] = (uint8_t)conf->m_drv8301_oc_adj;
	buffer_append_float32_auto(buffer, conf->m_bldc_f_sw_min, &ind);
 80062dc:	4620      	mov	r0, r4
	buffer[ind++] = conf->m_sensor_port_mode;
 80062de:	54e2      	strb	r2, [r4, r3]
	buffer[ind++] = conf->m_invert_direction;
 80062e0:	f895 114d 	ldrb.w	r1, [r5, #333]	; 0x14d
 80062e4:	18e2      	adds	r2, r4, r3
 80062e6:	7051      	strb	r1, [r2, #1]
	buffer[ind++] = conf->m_drv8301_oc_mode;
 80062e8:	f895 114e 	ldrb.w	r1, [r5, #334]	; 0x14e
	buffer[ind++] = (uint8_t)conf->m_drv8301_oc_adj;
 80062ec:	3304      	adds	r3, #4
	buffer[ind++] = conf->m_drv8301_oc_mode;
 80062ee:	7091      	strb	r1, [r2, #2]
	buffer[ind++] = (uint8_t)conf->m_drv8301_oc_adj;
 80062f0:	f8d5 1150 	ldr.w	r1, [r5, #336]	; 0x150
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	70d1      	strb	r1, [r2, #3]
	buffer_append_float32_auto(buffer, conf->m_bldc_f_sw_min, &ind);
 80062f8:	f8d5 1154 	ldr.w	r1, [r5, #340]	; 0x154
 80062fc:	aa01      	add	r2, sp, #4
 80062fe:	f7ff fa7d 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->m_bldc_f_sw_max, &ind);
 8006302:	4620      	mov	r0, r4
 8006304:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
 8006308:	aa01      	add	r2, sp, #4
 800630a:	f7ff fa77 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->m_dc_f_sw, &ind);
 800630e:	4620      	mov	r0, r4
 8006310:	f8d5 115c 	ldr.w	r1, [r5, #348]	; 0x15c
 8006314:	aa01      	add	r2, sp, #4
 8006316:	f7ff fa71 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->m_ntc_motor_beta, &ind);
 800631a:	4620      	mov	r0, r4
 800631c:	f8d5 1160 	ldr.w	r1, [r5, #352]	; 0x160
 8006320:	aa01      	add	r2, sp, #4
 8006322:	f7ff fa6b 	bl	80057fc <buffer_append_float32_auto>
	buffer[ind++] = conf->m_out_aux_mode;
 8006326:	9b01      	ldr	r3, [sp, #4]
 8006328:	f895 2164 	ldrb.w	r2, [r5, #356]	; 0x164
	buffer[ind++] = conf->m_motor_temp_sens_type;
	buffer_append_float32_auto(buffer, conf->m_ptc_motor_coeff, &ind);
 800632c:	4620      	mov	r0, r4
	buffer[ind++] = conf->m_out_aux_mode;
 800632e:	54e2      	strb	r2, [r4, r3]
	buffer[ind++] = conf->m_motor_temp_sens_type;
 8006330:	f895 1165 	ldrb.w	r1, [r5, #357]	; 0x165
 8006334:	18e2      	adds	r2, r4, r3
 8006336:	7051      	strb	r1, [r2, #1]
	buffer_append_float32_auto(buffer, conf->m_ptc_motor_coeff, &ind);
 8006338:	f8d5 1168 	ldr.w	r1, [r5, #360]	; 0x168
	buffer[ind++] = conf->m_motor_temp_sens_type;
 800633c:	3302      	adds	r3, #2
	buffer_append_float32_auto(buffer, conf->m_ptc_motor_coeff, &ind);
 800633e:	aa01      	add	r2, sp, #4
	buffer[ind++] = conf->m_motor_temp_sens_type;
 8006340:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(buffer, conf->m_ptc_motor_coeff, &ind);
 8006342:	f7ff fa5b 	bl	80057fc <buffer_append_float32_auto>
	buffer[ind++] = (uint8_t)conf->m_hall_extra_samples;
 8006346:	9b01      	ldr	r3, [sp, #4]
 8006348:	f8d5 216c 	ldr.w	r2, [r5, #364]	; 0x16c
	buffer[ind++] = (uint8_t)conf->si_motor_poles;
	buffer_append_float32_auto(buffer, conf->si_gear_ratio, &ind);
 800634c:	4620      	mov	r0, r4
	buffer[ind++] = (uint8_t)conf->m_hall_extra_samples;
 800634e:	54e2      	strb	r2, [r4, r3]
	buffer[ind++] = (uint8_t)conf->si_motor_poles;
 8006350:	f895 1170 	ldrb.w	r1, [r5, #368]	; 0x170
 8006354:	18e2      	adds	r2, r4, r3
 8006356:	7051      	strb	r1, [r2, #1]
 8006358:	3302      	adds	r3, #2
	buffer_append_float32_auto(buffer, conf->si_gear_ratio, &ind);
 800635a:	f8d5 1174 	ldr.w	r1, [r5, #372]	; 0x174
 800635e:	aa01      	add	r2, sp, #4
	buffer[ind++] = (uint8_t)conf->si_motor_poles;
 8006360:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(buffer, conf->si_gear_ratio, &ind);
 8006362:	f7ff fa4b 	bl	80057fc <buffer_append_float32_auto>
	buffer_append_float32_auto(buffer, conf->si_wheel_diameter, &ind);
 8006366:	4620      	mov	r0, r4
 8006368:	f8d5 1178 	ldr.w	r1, [r5, #376]	; 0x178
 800636c:	aa01      	add	r2, sp, #4
 800636e:	f7ff fa45 	bl	80057fc <buffer_append_float32_auto>
	buffer[ind++] = conf->si_battery_type;
 8006372:	9b01      	ldr	r3, [sp, #4]
 8006374:	f895 217c 	ldrb.w	r2, [r5, #380]	; 0x17c
	buffer[ind++] = (uint8_t)conf->si_battery_cells;
	buffer_append_float32_auto(buffer, conf->si_battery_ah, &ind);
 8006378:	4620      	mov	r0, r4
	buffer[ind++] = conf->si_battery_type;
 800637a:	54e2      	strb	r2, [r4, r3]
	buffer[ind++] = (uint8_t)conf->si_battery_cells;
 800637c:	f8d5 1180 	ldr.w	r1, [r5, #384]	; 0x180
 8006380:	18e2      	adds	r2, r4, r3
 8006382:	7051      	strb	r1, [r2, #1]
	buffer_append_float32_auto(buffer, conf->si_battery_ah, &ind);
 8006384:	f8d5 1184 	ldr.w	r1, [r5, #388]	; 0x184
	buffer[ind++] = (uint8_t)conf->si_battery_cells;
 8006388:	3302      	adds	r3, #2
	buffer_append_float32_auto(buffer, conf->si_battery_ah, &ind);
 800638a:	aa01      	add	r2, sp, #4
	buffer[ind++] = (uint8_t)conf->si_battery_cells;
 800638c:	9301      	str	r3, [sp, #4]
	buffer_append_float32_auto(buffer, conf->si_battery_ah, &ind);
 800638e:	f7ff fa35 	bl	80057fc <buffer_append_float32_auto>
	//buffer[ind++] = conf->bms.type;
	buffer[ind++] = 0;
 8006392:	9d01      	ldr	r5, [sp, #4]
	//buffer_append_float16(buffer, conf->bms.t_limit_start, 100, &ind);
	buffer_append_float16(buffer, 0, 100, &ind);
 8006394:	4620      	mov	r0, r4
 8006396:	463a      	mov	r2, r7
 8006398:	4631      	mov	r1, r6
	buffer[ind++] = 0;
 800639a:	f804 8005 	strb.w	r8, [r4, r5]
	buffer_append_float16(buffer, 0, 100, &ind);
 800639e:	ab01      	add	r3, sp, #4
	buffer[ind++] = 0;
 80063a0:	3501      	adds	r5, #1
 80063a2:	9501      	str	r5, [sp, #4]
	buffer_append_float16(buffer, 0, 100, &ind);
 80063a4:	f7ff f9f6 	bl	8005794 <buffer_append_float16>
	//buffer_append_float16(buffer, conf->bms.t_limit_end, 100, &ind);
	buffer_append_float16(buffer, 0, 100, &ind);
 80063a8:	463a      	mov	r2, r7
 80063aa:	4631      	mov	r1, r6
 80063ac:	4620      	mov	r0, r4
 80063ae:	ab01      	add	r3, sp, #4
 80063b0:	f7ff f9f0 	bl	8005794 <buffer_append_float16>
	//buffer_append_float16(buffer, conf->bms.soc_limit_start, 1000, &ind);
	buffer_append_float16(buffer, 0, 1000, &ind);
 80063b4:	464a      	mov	r2, r9
 80063b6:	4631      	mov	r1, r6
 80063b8:	4620      	mov	r0, r4
 80063ba:	ab01      	add	r3, sp, #4
 80063bc:	f7ff f9ea 	bl	8005794 <buffer_append_float16>
	//buffer_append_float16(buffer, conf->bms.soc_limit_end, 1000, &ind);
	buffer_append_float16(buffer, 0, 1000, &ind);
 80063c0:	4620      	mov	r0, r4
 80063c2:	464a      	mov	r2, r9
 80063c4:	4631      	mov	r1, r6
 80063c6:	ab01      	add	r3, sp, #4
 80063c8:	f7ff f9e4 	bl	8005794 <buffer_append_float16>
	return ind;
}
 80063cc:	9801      	ldr	r0, [sp, #4]
 80063ce:	b003      	add	sp, #12
 80063d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080063d4 <confgenerator_deserialize_mcconf>:
	buffer_append_float32_auto(buffer, conf->imu_conf.gyro_offset_comp_clamp, &ind);

	return ind;
}

bool confgenerator_deserialize_mcconf(const uint8_t *buffer, mc_configuration *conf) {
 80063d4:	b570      	push	{r4, r5, r6, lr}
	int32_t ind = 0;
 80063d6:	2500      	movs	r5, #0
bool confgenerator_deserialize_mcconf(const uint8_t *buffer, mc_configuration *conf) {
 80063d8:	b082      	sub	sp, #8
 80063da:	460e      	mov	r6, r1

	uint32_t signature = buffer_get_uint32(buffer, &ind);
 80063dc:	a901      	add	r1, sp, #4
bool confgenerator_deserialize_mcconf(const uint8_t *buffer, mc_configuration *conf) {
 80063de:	4604      	mov	r4, r0
	int32_t ind = 0;
 80063e0:	9501      	str	r5, [sp, #4]
	uint32_t signature = buffer_get_uint32(buffer, &ind);
 80063e2:	f7ff fa79 	bl	80058d8 <buffer_get_uint32>
	if (signature != MCCONF_SIGNATURE) {
 80063e6:	4b03      	ldr	r3, [pc, #12]	; (80063f4 <confgenerator_deserialize_mcconf+0x20>)
 80063e8:	4298      	cmp	r0, r3
 80063ea:	d005      	beq.n	80063f8 <confgenerator_deserialize_mcconf+0x24>
		return false;
 80063ec:	4628      	mov	r0, r5
	buffer_get_float16(buffer, 1000, &ind);
	//conf->bms.soc_limit_end = buffer_get_float16(buffer, 1000, &ind);
	buffer_get_float16(buffer, 1000, &ind);

	return true;
}
 80063ee:	b002      	add	sp, #8
 80063f0:	bd70      	pop	{r4, r5, r6, pc}
 80063f2:	bf00      	nop
 80063f4:	83d6207a 	.word	0x83d6207a
	conf->pwm_mode = buffer[ind++];
 80063f8:	9b01      	ldr	r3, [sp, #4]
	conf->l_current_max = buffer_get_float32_auto(buffer, &ind);
 80063fa:	a901      	add	r1, sp, #4
	conf->pwm_mode = buffer[ind++];
 80063fc:	5ce0      	ldrb	r0, [r4, r3]
	conf->comm_mode = buffer[ind++];
 80063fe:	18e2      	adds	r2, r4, r3
	conf->pwm_mode = buffer[ind++];
 8006400:	f886 0084 	strb.w	r0, [r6, #132]	; 0x84
	conf->comm_mode = buffer[ind++];
 8006404:	7850      	ldrb	r0, [r2, #1]
	conf->sensor_mode = buffer[ind++];
 8006406:	3304      	adds	r3, #4
	conf->comm_mode = buffer[ind++];
 8006408:	f886 0085 	strb.w	r0, [r6, #133]	; 0x85
	conf->motor_type = buffer[ind++];
 800640c:	7890      	ldrb	r0, [r2, #2]
	conf->sensor_mode = buffer[ind++];
 800640e:	9301      	str	r3, [sp, #4]
	conf->motor_type = buffer[ind++];
 8006410:	f886 0086 	strb.w	r0, [r6, #134]	; 0x86
	conf->sensor_mode = buffer[ind++];
 8006414:	78d3      	ldrb	r3, [r2, #3]
	conf->l_current_max = buffer_get_float32_auto(buffer, &ind);
 8006416:	4620      	mov	r0, r4
	conf->sensor_mode = buffer[ind++];
 8006418:	f886 3087 	strb.w	r3, [r6, #135]	; 0x87
	conf->l_current_max = buffer_get_float32_auto(buffer, &ind);
 800641c:	f7ff fa96 	bl	800594c <buffer_get_float32_auto>
	conf->l_current_min = buffer_get_float32_auto(buffer, &ind);
 8006420:	a901      	add	r1, sp, #4
	conf->l_current_max = buffer_get_float32_auto(buffer, &ind);
 8006422:	6030      	str	r0, [r6, #0]
	conf->l_current_min = buffer_get_float32_auto(buffer, &ind);
 8006424:	4620      	mov	r0, r4
 8006426:	f7ff fa91 	bl	800594c <buffer_get_float32_auto>
	conf->l_in_current_max = buffer_get_float32_auto(buffer, &ind);
 800642a:	a901      	add	r1, sp, #4
	conf->l_current_min = buffer_get_float32_auto(buffer, &ind);
 800642c:	6070      	str	r0, [r6, #4]
	conf->l_in_current_max = buffer_get_float32_auto(buffer, &ind);
 800642e:	4620      	mov	r0, r4
 8006430:	f7ff fa8c 	bl	800594c <buffer_get_float32_auto>
	conf->l_in_current_min = buffer_get_float32_auto(buffer, &ind);
 8006434:	a901      	add	r1, sp, #4
	conf->l_in_current_max = buffer_get_float32_auto(buffer, &ind);
 8006436:	60b0      	str	r0, [r6, #8]
	conf->l_in_current_min = buffer_get_float32_auto(buffer, &ind);
 8006438:	4620      	mov	r0, r4
 800643a:	f7ff fa87 	bl	800594c <buffer_get_float32_auto>
	conf->l_abs_current_max = buffer_get_float32_auto(buffer, &ind);
 800643e:	a901      	add	r1, sp, #4
	conf->l_in_current_min = buffer_get_float32_auto(buffer, &ind);
 8006440:	60f0      	str	r0, [r6, #12]
	conf->l_abs_current_max = buffer_get_float32_auto(buffer, &ind);
 8006442:	4620      	mov	r0, r4
 8006444:	f7ff fa82 	bl	800594c <buffer_get_float32_auto>
	conf->l_min_erpm = buffer_get_float32_auto(buffer, &ind);
 8006448:	a901      	add	r1, sp, #4
	conf->l_abs_current_max = buffer_get_float32_auto(buffer, &ind);
 800644a:	6130      	str	r0, [r6, #16]
	conf->l_min_erpm = buffer_get_float32_auto(buffer, &ind);
 800644c:	4620      	mov	r0, r4
 800644e:	f7ff fa7d 	bl	800594c <buffer_get_float32_auto>
	conf->l_max_erpm = buffer_get_float32_auto(buffer, &ind);
 8006452:	a901      	add	r1, sp, #4
	conf->l_min_erpm = buffer_get_float32_auto(buffer, &ind);
 8006454:	6170      	str	r0, [r6, #20]
	conf->l_max_erpm = buffer_get_float32_auto(buffer, &ind);
 8006456:	4620      	mov	r0, r4
 8006458:	f7ff fa78 	bl	800594c <buffer_get_float32_auto>
	conf->l_erpm_start = buffer_get_float32_auto(buffer, &ind);
 800645c:	a901      	add	r1, sp, #4
	conf->l_max_erpm = buffer_get_float32_auto(buffer, &ind);
 800645e:	61b0      	str	r0, [r6, #24]
	conf->l_erpm_start = buffer_get_float32_auto(buffer, &ind);
 8006460:	4620      	mov	r0, r4
 8006462:	f7ff fa73 	bl	800594c <buffer_get_float32_auto>
	conf->l_max_erpm_fbrake = buffer_get_float32_auto(buffer, &ind);
 8006466:	a901      	add	r1, sp, #4
	conf->l_erpm_start = buffer_get_float32_auto(buffer, &ind);
 8006468:	61f0      	str	r0, [r6, #28]
	conf->l_max_erpm_fbrake = buffer_get_float32_auto(buffer, &ind);
 800646a:	4620      	mov	r0, r4
 800646c:	f7ff fa6e 	bl	800594c <buffer_get_float32_auto>
	conf->l_max_erpm_fbrake_cc = buffer_get_float32_auto(buffer, &ind);
 8006470:	a901      	add	r1, sp, #4
	conf->l_max_erpm_fbrake = buffer_get_float32_auto(buffer, &ind);
 8006472:	6230      	str	r0, [r6, #32]
	conf->l_max_erpm_fbrake_cc = buffer_get_float32_auto(buffer, &ind);
 8006474:	4620      	mov	r0, r4
 8006476:	f7ff fa69 	bl	800594c <buffer_get_float32_auto>
	conf->l_min_vin = buffer_get_float32_auto(buffer, &ind);
 800647a:	a901      	add	r1, sp, #4
	conf->l_max_erpm_fbrake_cc = buffer_get_float32_auto(buffer, &ind);
 800647c:	6270      	str	r0, [r6, #36]	; 0x24
	conf->l_min_vin = buffer_get_float32_auto(buffer, &ind);
 800647e:	4620      	mov	r0, r4
 8006480:	f7ff fa64 	bl	800594c <buffer_get_float32_auto>
	conf->l_max_vin = buffer_get_float32_auto(buffer, &ind);
 8006484:	a901      	add	r1, sp, #4
	conf->l_min_vin = buffer_get_float32_auto(buffer, &ind);
 8006486:	62b0      	str	r0, [r6, #40]	; 0x28
	conf->l_max_vin = buffer_get_float32_auto(buffer, &ind);
 8006488:	4620      	mov	r0, r4
 800648a:	f7ff fa5f 	bl	800594c <buffer_get_float32_auto>
	conf->l_battery_cut_start = buffer_get_float32_auto(buffer, &ind);
 800648e:	a901      	add	r1, sp, #4
	conf->l_max_vin = buffer_get_float32_auto(buffer, &ind);
 8006490:	62f0      	str	r0, [r6, #44]	; 0x2c
	conf->l_battery_cut_start = buffer_get_float32_auto(buffer, &ind);
 8006492:	4620      	mov	r0, r4
 8006494:	f7ff fa5a 	bl	800594c <buffer_get_float32_auto>
	conf->l_battery_cut_end = buffer_get_float32_auto(buffer, &ind);
 8006498:	a901      	add	r1, sp, #4
	conf->l_battery_cut_start = buffer_get_float32_auto(buffer, &ind);
 800649a:	6330      	str	r0, [r6, #48]	; 0x30
	conf->l_battery_cut_end = buffer_get_float32_auto(buffer, &ind);
 800649c:	4620      	mov	r0, r4
 800649e:	f7ff fa55 	bl	800594c <buffer_get_float32_auto>
	conf->l_slow_abs_current = buffer[ind++];
 80064a2:	9b01      	ldr	r3, [sp, #4]
	conf->l_battery_cut_end = buffer_get_float32_auto(buffer, &ind);
 80064a4:	6370      	str	r0, [r6, #52]	; 0x34
	conf->l_slow_abs_current = buffer[ind++];
 80064a6:	5ce2      	ldrb	r2, [r4, r3]
	conf->l_temp_fet_start = buffer_get_float32_auto(buffer, &ind);
 80064a8:	a901      	add	r1, sp, #4
	conf->l_slow_abs_current = buffer[ind++];
 80064aa:	1b52      	subs	r2, r2, r5
 80064ac:	bf18      	it	ne
 80064ae:	2201      	movne	r2, #1
 80064b0:	3301      	adds	r3, #1
 80064b2:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
	conf->l_temp_fet_start = buffer_get_float32_auto(buffer, &ind);
 80064b6:	4620      	mov	r0, r4
	conf->l_slow_abs_current = buffer[ind++];
 80064b8:	9301      	str	r3, [sp, #4]
	conf->l_temp_fet_start = buffer_get_float32_auto(buffer, &ind);
 80064ba:	f7ff fa47 	bl	800594c <buffer_get_float32_auto>
	conf->l_temp_fet_end = buffer_get_float32_auto(buffer, &ind);
 80064be:	a901      	add	r1, sp, #4
	conf->l_temp_fet_start = buffer_get_float32_auto(buffer, &ind);
 80064c0:	63f0      	str	r0, [r6, #60]	; 0x3c
	conf->l_temp_fet_end = buffer_get_float32_auto(buffer, &ind);
 80064c2:	4620      	mov	r0, r4
 80064c4:	f7ff fa42 	bl	800594c <buffer_get_float32_auto>
	conf->l_temp_motor_start = buffer_get_float32_auto(buffer, &ind);
 80064c8:	a901      	add	r1, sp, #4
	conf->l_temp_fet_end = buffer_get_float32_auto(buffer, &ind);
 80064ca:	6430      	str	r0, [r6, #64]	; 0x40
	conf->l_temp_motor_start = buffer_get_float32_auto(buffer, &ind);
 80064cc:	4620      	mov	r0, r4
 80064ce:	f7ff fa3d 	bl	800594c <buffer_get_float32_auto>
	conf->l_temp_motor_end = buffer_get_float32_auto(buffer, &ind);
 80064d2:	a901      	add	r1, sp, #4
	conf->l_temp_motor_start = buffer_get_float32_auto(buffer, &ind);
 80064d4:	6470      	str	r0, [r6, #68]	; 0x44
	conf->l_temp_motor_end = buffer_get_float32_auto(buffer, &ind);
 80064d6:	4620      	mov	r0, r4
 80064d8:	f7ff fa38 	bl	800594c <buffer_get_float32_auto>
	conf->l_temp_accel_dec = buffer_get_float32_auto(buffer, &ind);
 80064dc:	a901      	add	r1, sp, #4
	conf->l_temp_motor_end = buffer_get_float32_auto(buffer, &ind);
 80064de:	64b0      	str	r0, [r6, #72]	; 0x48
	conf->l_temp_accel_dec = buffer_get_float32_auto(buffer, &ind);
 80064e0:	4620      	mov	r0, r4
 80064e2:	f7ff fa33 	bl	800594c <buffer_get_float32_auto>
	conf->l_min_duty = buffer_get_float32_auto(buffer, &ind);
 80064e6:	a901      	add	r1, sp, #4
	conf->l_temp_accel_dec = buffer_get_float32_auto(buffer, &ind);
 80064e8:	64f0      	str	r0, [r6, #76]	; 0x4c
	conf->l_min_duty = buffer_get_float32_auto(buffer, &ind);
 80064ea:	4620      	mov	r0, r4
 80064ec:	f7ff fa2e 	bl	800594c <buffer_get_float32_auto>
	conf->l_max_duty = buffer_get_float32_auto(buffer, &ind);
 80064f0:	a901      	add	r1, sp, #4
	conf->l_min_duty = buffer_get_float32_auto(buffer, &ind);
 80064f2:	6530      	str	r0, [r6, #80]	; 0x50
	conf->l_max_duty = buffer_get_float32_auto(buffer, &ind);
 80064f4:	4620      	mov	r0, r4
 80064f6:	f7ff fa29 	bl	800594c <buffer_get_float32_auto>
	conf->l_watt_max = buffer_get_float32_auto(buffer, &ind);
 80064fa:	a901      	add	r1, sp, #4
	conf->l_max_duty = buffer_get_float32_auto(buffer, &ind);
 80064fc:	6570      	str	r0, [r6, #84]	; 0x54
	conf->l_watt_max = buffer_get_float32_auto(buffer, &ind);
 80064fe:	4620      	mov	r0, r4
 8006500:	f7ff fa24 	bl	800594c <buffer_get_float32_auto>
	conf->l_watt_min = buffer_get_float32_auto(buffer, &ind);
 8006504:	a901      	add	r1, sp, #4
	conf->l_watt_max = buffer_get_float32_auto(buffer, &ind);
 8006506:	65b0      	str	r0, [r6, #88]	; 0x58
	conf->l_watt_min = buffer_get_float32_auto(buffer, &ind);
 8006508:	4620      	mov	r0, r4
 800650a:	f7ff fa1f 	bl	800594c <buffer_get_float32_auto>
	conf->l_current_max_scale = buffer_get_float32_auto(buffer, &ind);
 800650e:	a901      	add	r1, sp, #4
	conf->l_watt_min = buffer_get_float32_auto(buffer, &ind);
 8006510:	65f0      	str	r0, [r6, #92]	; 0x5c
	conf->l_current_max_scale = buffer_get_float32_auto(buffer, &ind);
 8006512:	4620      	mov	r0, r4
 8006514:	f7ff fa1a 	bl	800594c <buffer_get_float32_auto>
	conf->l_current_min_scale = buffer_get_float32_auto(buffer, &ind);
 8006518:	a901      	add	r1, sp, #4
	conf->l_current_max_scale = buffer_get_float32_auto(buffer, &ind);
 800651a:	6630      	str	r0, [r6, #96]	; 0x60
	conf->l_current_min_scale = buffer_get_float32_auto(buffer, &ind);
 800651c:	4620      	mov	r0, r4
 800651e:	f7ff fa15 	bl	800594c <buffer_get_float32_auto>
	conf->l_duty_start = buffer_get_float32_auto(buffer, &ind);
 8006522:	a901      	add	r1, sp, #4
	conf->l_current_min_scale = buffer_get_float32_auto(buffer, &ind);
 8006524:	6670      	str	r0, [r6, #100]	; 0x64
	conf->l_duty_start = buffer_get_float32_auto(buffer, &ind);
 8006526:	4620      	mov	r0, r4
 8006528:	f7ff fa10 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 800652c:	a901      	add	r1, sp, #4
	conf->l_duty_start = buffer_get_float32_auto(buffer, &ind);
 800652e:	66b0      	str	r0, [r6, #104]	; 0x68
	buffer_get_float32_auto(buffer, &ind);
 8006530:	4620      	mov	r0, r4
 8006532:	f7ff fa0b 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 8006536:	a901      	add	r1, sp, #4
 8006538:	4620      	mov	r0, r4
 800653a:	f7ff fa07 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 800653e:	a901      	add	r1, sp, #4
 8006540:	4620      	mov	r0, r4
 8006542:	f7ff fa03 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 8006546:	a901      	add	r1, sp, #4
 8006548:	4620      	mov	r0, r4
 800654a:	f7ff f9ff 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 800654e:	a901      	add	r1, sp, #4
 8006550:	4620      	mov	r0, r4
 8006552:	f7ff f9fb 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 8006556:	a901      	add	r1, sp, #4
 8006558:	4620      	mov	r0, r4
 800655a:	f7ff f9f7 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 800655e:	a901      	add	r1, sp, #4
 8006560:	4620      	mov	r0, r4
 8006562:	f7ff f9f3 	bl	800594c <buffer_get_float32_auto>
	ind+=8;
 8006566:	9b01      	ldr	r3, [sp, #4]
	buffer_get_float32_auto(buffer, &ind);
 8006568:	a901      	add	r1, sp, #4
	ind+=8;
 800656a:	3308      	adds	r3, #8
	buffer_get_float32_auto(buffer, &ind);
 800656c:	4620      	mov	r0, r4
	ind+=8;
 800656e:	9301      	str	r3, [sp, #4]
	buffer_get_float32_auto(buffer, &ind);
 8006570:	f7ff f9ec 	bl	800594c <buffer_get_float32_auto>
	conf->foc_current_kp = buffer_get_float32_auto(buffer, &ind);
 8006574:	a901      	add	r1, sp, #4
 8006576:	4620      	mov	r0, r4
 8006578:	f7ff f9e8 	bl	800594c <buffer_get_float32_auto>
	conf->foc_current_ki = buffer_get_float32_auto(buffer, &ind);
 800657c:	a901      	add	r1, sp, #4
	conf->foc_current_kp = buffer_get_float32_auto(buffer, &ind);
 800657e:	f8c6 0088 	str.w	r0, [r6, #136]	; 0x88
	conf->foc_current_ki = buffer_get_float32_auto(buffer, &ind);
 8006582:	4620      	mov	r0, r4
 8006584:	f7ff f9e2 	bl	800594c <buffer_get_float32_auto>
	conf->foc_f_sw = buffer_get_float32_auto(buffer, &ind);
 8006588:	a901      	add	r1, sp, #4
	conf->foc_current_ki = buffer_get_float32_auto(buffer, &ind);
 800658a:	f8c6 008c 	str.w	r0, [r6, #140]	; 0x8c
	conf->foc_f_sw = buffer_get_float32_auto(buffer, &ind);
 800658e:	4620      	mov	r0, r4
 8006590:	f7ff f9dc 	bl	800594c <buffer_get_float32_auto>
	conf->foc_dt_us = buffer_get_float32_auto(buffer, &ind);
 8006594:	a901      	add	r1, sp, #4
	conf->foc_f_sw = buffer_get_float32_auto(buffer, &ind);
 8006596:	f8c6 0090 	str.w	r0, [r6, #144]	; 0x90
	conf->foc_dt_us = buffer_get_float32_auto(buffer, &ind);
 800659a:	4620      	mov	r0, r4
 800659c:	f7ff f9d6 	bl	800594c <buffer_get_float32_auto>
	ind++;
 80065a0:	9b01      	ldr	r3, [sp, #4]
	conf->foc_dt_us = buffer_get_float32_auto(buffer, &ind);
 80065a2:	f8c6 0094 	str.w	r0, [r6, #148]	; 0x94
	ind++;
 80065a6:	3301      	adds	r3, #1
	conf->foc_encoder_offset = buffer_get_float32_auto(buffer, &ind);
 80065a8:	a901      	add	r1, sp, #4
 80065aa:	4620      	mov	r0, r4
	ind++;
 80065ac:	9301      	str	r3, [sp, #4]
	conf->foc_encoder_offset = buffer_get_float32_auto(buffer, &ind);
 80065ae:	f7ff f9cd 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 80065b2:	a901      	add	r1, sp, #4
	conf->foc_encoder_offset = buffer_get_float32_auto(buffer, &ind);
 80065b4:	f8c6 0098 	str.w	r0, [r6, #152]	; 0x98
	buffer_get_float32_auto(buffer, &ind);
 80065b8:	4620      	mov	r0, r4
 80065ba:	f7ff f9c7 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 80065be:	a901      	add	r1, sp, #4
 80065c0:	4620      	mov	r0, r4
 80065c2:	f7ff f9c3 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 80065c6:	a901      	add	r1, sp, #4
 80065c8:	4620      	mov	r0, r4
 80065ca:	f7ff f9bf 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 80065ce:	a901      	add	r1, sp, #4
 80065d0:	4620      	mov	r0, r4
 80065d2:	f7ff f9bb 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 80065d6:	a901      	add	r1, sp, #4
 80065d8:	4620      	mov	r0, r4
 80065da:	f7ff f9b7 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 80065de:	a901      	add	r1, sp, #4
 80065e0:	4620      	mov	r0, r4
 80065e2:	f7ff f9b3 	bl	800594c <buffer_get_float32_auto>
	conf->foc_sensor_mode = buffer[ind++];
 80065e6:	9b01      	ldr	r3, [sp, #4]
	conf->foc_pll_kp = buffer_get_float32_auto(buffer, &ind);
 80065e8:	a901      	add	r1, sp, #4
	conf->foc_sensor_mode = buffer[ind++];
 80065ea:	5ce2      	ldrb	r2, [r4, r3]
	conf->foc_pll_kp = buffer_get_float32_auto(buffer, &ind);
 80065ec:	4620      	mov	r0, r4
	conf->foc_sensor_mode = buffer[ind++];
 80065ee:	3301      	adds	r3, #1
 80065f0:	f886 20e4 	strb.w	r2, [r6, #228]	; 0xe4
 80065f4:	9301      	str	r3, [sp, #4]
	conf->foc_pll_kp = buffer_get_float32_auto(buffer, &ind);
 80065f6:	f7ff f9a9 	bl	800594c <buffer_get_float32_auto>
	conf->foc_pll_ki = buffer_get_float32_auto(buffer, &ind);
 80065fa:	a901      	add	r1, sp, #4
	conf->foc_pll_kp = buffer_get_float32_auto(buffer, &ind);
 80065fc:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
	conf->foc_pll_ki = buffer_get_float32_auto(buffer, &ind);
 8006600:	4620      	mov	r0, r4
 8006602:	f7ff f9a3 	bl	800594c <buffer_get_float32_auto>
	conf->foc_motor_l = buffer_get_float32_auto(buffer, &ind);
 8006606:	a901      	add	r1, sp, #4
	conf->foc_pll_ki = buffer_get_float32_auto(buffer, &ind);
 8006608:	f8c6 00b8 	str.w	r0, [r6, #184]	; 0xb8
	conf->foc_motor_l = buffer_get_float32_auto(buffer, &ind);
 800660c:	4620      	mov	r0, r4
 800660e:	f7ff f99d 	bl	800594c <buffer_get_float32_auto>
	conf->foc_motor_ld_lq_diff = buffer_get_float32_auto(buffer, &ind);
 8006612:	a901      	add	r1, sp, #4
	conf->foc_motor_l = buffer_get_float32_auto(buffer, &ind);
 8006614:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
	conf->foc_motor_ld_lq_diff = buffer_get_float32_auto(buffer, &ind);
 8006618:	4620      	mov	r0, r4
 800661a:	f7ff f997 	bl	800594c <buffer_get_float32_auto>
	conf->foc_motor_r = buffer_get_float32_auto(buffer, &ind);
 800661e:	a901      	add	r1, sp, #4
	conf->foc_motor_ld_lq_diff = buffer_get_float32_auto(buffer, &ind);
 8006620:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
	conf->foc_motor_r = buffer_get_float32_auto(buffer, &ind);
 8006624:	4620      	mov	r0, r4
 8006626:	f7ff f991 	bl	800594c <buffer_get_float32_auto>
	conf->foc_motor_flux_linkage = buffer_get_float32_auto(buffer, &ind);
 800662a:	a901      	add	r1, sp, #4
	conf->foc_motor_r = buffer_get_float32_auto(buffer, &ind);
 800662c:	f8c6 00a4 	str.w	r0, [r6, #164]	; 0xa4
	conf->foc_motor_flux_linkage = buffer_get_float32_auto(buffer, &ind);
 8006630:	4620      	mov	r0, r4
 8006632:	f7ff f98b 	bl	800594c <buffer_get_float32_auto>
	conf->foc_observer_gain = buffer_get_float32_auto(buffer, &ind);
 8006636:	a901      	add	r1, sp, #4
	conf->foc_motor_flux_linkage = buffer_get_float32_auto(buffer, &ind);
 8006638:	f8c6 00a8 	str.w	r0, [r6, #168]	; 0xa8
	conf->foc_observer_gain = buffer_get_float32_auto(buffer, &ind);
 800663c:	4620      	mov	r0, r4
 800663e:	f7ff f985 	bl	800594c <buffer_get_float32_auto>
	conf->foc_observer_gain_slow = buffer_get_float32_auto(buffer, &ind);
 8006642:	a901      	add	r1, sp, #4
	conf->foc_observer_gain = buffer_get_float32_auto(buffer, &ind);
 8006644:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
	conf->foc_observer_gain_slow = buffer_get_float32_auto(buffer, &ind);
 8006648:	4620      	mov	r0, r4
 800664a:	f7ff f97f 	bl	800594c <buffer_get_float32_auto>
	conf->foc_duty_dowmramp_kp = buffer_get_float32_auto(buffer, &ind);
 800664e:	a901      	add	r1, sp, #4
	conf->foc_observer_gain_slow = buffer_get_float32_auto(buffer, &ind);
 8006650:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
	conf->foc_duty_dowmramp_kp = buffer_get_float32_auto(buffer, &ind);
 8006654:	4620      	mov	r0, r4
 8006656:	f7ff f979 	bl	800594c <buffer_get_float32_auto>
	conf->foc_duty_dowmramp_ki = buffer_get_float32_auto(buffer, &ind);
 800665a:	a901      	add	r1, sp, #4
	conf->foc_duty_dowmramp_kp = buffer_get_float32_auto(buffer, &ind);
 800665c:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
	conf->foc_duty_dowmramp_ki = buffer_get_float32_auto(buffer, &ind);
 8006660:	4620      	mov	r0, r4
 8006662:	f7ff f973 	bl	800594c <buffer_get_float32_auto>
	conf->foc_openloop_rpm = buffer_get_float32_auto(buffer, &ind);
 8006666:	a901      	add	r1, sp, #4
	conf->foc_duty_dowmramp_ki = buffer_get_float32_auto(buffer, &ind);
 8006668:	f8c6 00c0 	str.w	r0, [r6, #192]	; 0xc0
	conf->foc_openloop_rpm = buffer_get_float32_auto(buffer, &ind);
 800666c:	4620      	mov	r0, r4
 800666e:	f7ff f96d 	bl	800594c <buffer_get_float32_auto>
	conf->foc_openloop_rpm_low = buffer_get_float16(buffer, 1000, &ind);
 8006672:	aa01      	add	r2, sp, #4
	conf->foc_openloop_rpm = buffer_get_float32_auto(buffer, &ind);
 8006674:	f8c6 00c4 	str.w	r0, [r6, #196]	; 0xc4
	conf->foc_openloop_rpm_low = buffer_get_float16(buffer, 1000, &ind);
 8006678:	49c6      	ldr	r1, [pc, #792]	; (8006994 <confgenerator_deserialize_mcconf+0x5c0>)
 800667a:	4620      	mov	r0, r4
 800667c:	f7ff f93e 	bl	80058fc <buffer_get_float16>
	conf->foc_d_gain_scale_start = buffer_get_float32_auto(buffer, &ind);
 8006680:	a901      	add	r1, sp, #4
	conf->foc_openloop_rpm_low = buffer_get_float16(buffer, 1000, &ind);
 8006682:	f8c6 00c8 	str.w	r0, [r6, #200]	; 0xc8
	conf->foc_d_gain_scale_start = buffer_get_float32_auto(buffer, &ind);
 8006686:	4620      	mov	r0, r4
 8006688:	f7ff f960 	bl	800594c <buffer_get_float32_auto>
	conf->foc_d_gain_scale_max_mod = buffer_get_float32_auto(buffer, &ind);
 800668c:	a901      	add	r1, sp, #4
	conf->foc_d_gain_scale_start = buffer_get_float32_auto(buffer, &ind);
 800668e:	f8c6 00cc 	str.w	r0, [r6, #204]	; 0xcc
	conf->foc_d_gain_scale_max_mod = buffer_get_float32_auto(buffer, &ind);
 8006692:	4620      	mov	r0, r4
 8006694:	f7ff f95a 	bl	800594c <buffer_get_float32_auto>
	conf->foc_sl_openloop_hyst = buffer_get_float16(buffer, 100, &ind);
 8006698:	aa01      	add	r2, sp, #4
	conf->foc_d_gain_scale_max_mod = buffer_get_float32_auto(buffer, &ind);
 800669a:	f8c6 00d0 	str.w	r0, [r6, #208]	; 0xd0
	conf->foc_sl_openloop_hyst = buffer_get_float16(buffer, 100, &ind);
 800669e:	49be      	ldr	r1, [pc, #760]	; (8006998 <confgenerator_deserialize_mcconf+0x5c4>)
 80066a0:	4620      	mov	r0, r4
 80066a2:	f7ff f92b 	bl	80058fc <buffer_get_float16>
	conf->foc_sl_openloop_time_lock = buffer_get_float16(buffer, 100, &ind);
 80066a6:	aa01      	add	r2, sp, #4
	conf->foc_sl_openloop_hyst = buffer_get_float16(buffer, 100, &ind);
 80066a8:	f8c6 00d4 	str.w	r0, [r6, #212]	; 0xd4
	conf->foc_sl_openloop_time_lock = buffer_get_float16(buffer, 100, &ind);
 80066ac:	49ba      	ldr	r1, [pc, #744]	; (8006998 <confgenerator_deserialize_mcconf+0x5c4>)
 80066ae:	4620      	mov	r0, r4
 80066b0:	f7ff f924 	bl	80058fc <buffer_get_float16>
	conf->foc_sl_openloop_time_ramp = buffer_get_float16(buffer, 100, &ind);
 80066b4:	aa01      	add	r2, sp, #4
	conf->foc_sl_openloop_time_lock = buffer_get_float16(buffer, 100, &ind);
 80066b6:	f8c6 00dc 	str.w	r0, [r6, #220]	; 0xdc
	conf->foc_sl_openloop_time_ramp = buffer_get_float16(buffer, 100, &ind);
 80066ba:	49b7      	ldr	r1, [pc, #732]	; (8006998 <confgenerator_deserialize_mcconf+0x5c4>)
 80066bc:	4620      	mov	r0, r4
 80066be:	f7ff f91d 	bl	80058fc <buffer_get_float16>
	conf->foc_sl_openloop_time = buffer_get_float16(buffer, 100, &ind);
 80066c2:	aa01      	add	r2, sp, #4
	conf->foc_sl_openloop_time_ramp = buffer_get_float16(buffer, 100, &ind);
 80066c4:	f8c6 00e0 	str.w	r0, [r6, #224]	; 0xe0
	conf->foc_sl_openloop_time = buffer_get_float16(buffer, 100, &ind);
 80066c8:	49b3      	ldr	r1, [pc, #716]	; (8006998 <confgenerator_deserialize_mcconf+0x5c4>)
 80066ca:	4620      	mov	r0, r4
 80066cc:	f7ff f916 	bl	80058fc <buffer_get_float16>
	conf->foc_hall_table[0] = buffer[ind++];
 80066d0:	9a01      	ldr	r2, [sp, #4]
	conf->foc_sl_openloop_time = buffer_get_float16(buffer, 100, &ind);
 80066d2:	f8c6 00d8 	str.w	r0, [r6, #216]	; 0xd8
	conf->foc_hall_table[0] = buffer[ind++];
 80066d6:	5ca1      	ldrb	r1, [r4, r2]
	conf->foc_hall_table[1] = buffer[ind++];
 80066d8:	18a3      	adds	r3, r4, r2
	conf->foc_hall_table[0] = buffer[ind++];
 80066da:	f886 10e5 	strb.w	r1, [r6, #229]	; 0xe5
	conf->foc_hall_table[1] = buffer[ind++];
 80066de:	7859      	ldrb	r1, [r3, #1]
	conf->foc_hall_table[7] = buffer[ind++];
 80066e0:	3208      	adds	r2, #8
	conf->foc_hall_table[1] = buffer[ind++];
 80066e2:	f886 10e6 	strb.w	r1, [r6, #230]	; 0xe6
	conf->foc_hall_table[2] = buffer[ind++];
 80066e6:	7899      	ldrb	r1, [r3, #2]
	conf->foc_hall_table[7] = buffer[ind++];
 80066e8:	9201      	str	r2, [sp, #4]
	conf->foc_hall_table[2] = buffer[ind++];
 80066ea:	f886 10e7 	strb.w	r1, [r6, #231]	; 0xe7
	conf->foc_hall_table[3] = buffer[ind++];
 80066ee:	78da      	ldrb	r2, [r3, #3]
	conf->foc_hall_interp_erpm = buffer_get_float32_auto(buffer, &ind);
 80066f0:	a901      	add	r1, sp, #4
	conf->foc_hall_table[3] = buffer[ind++];
 80066f2:	f886 20e8 	strb.w	r2, [r6, #232]	; 0xe8
	conf->foc_hall_table[4] = buffer[ind++];
 80066f6:	791a      	ldrb	r2, [r3, #4]
	conf->foc_hall_interp_erpm = buffer_get_float32_auto(buffer, &ind);
 80066f8:	4620      	mov	r0, r4
	conf->foc_hall_table[4] = buffer[ind++];
 80066fa:	f886 20e9 	strb.w	r2, [r6, #233]	; 0xe9
	conf->foc_hall_table[5] = buffer[ind++];
 80066fe:	795a      	ldrb	r2, [r3, #5]
 8006700:	f886 20ea 	strb.w	r2, [r6, #234]	; 0xea
	conf->foc_hall_table[6] = buffer[ind++];
 8006704:	799a      	ldrb	r2, [r3, #6]
 8006706:	f886 20eb 	strb.w	r2, [r6, #235]	; 0xeb
	conf->foc_hall_table[7] = buffer[ind++];
 800670a:	79db      	ldrb	r3, [r3, #7]
 800670c:	f886 30ec 	strb.w	r3, [r6, #236]	; 0xec
	conf->foc_hall_interp_erpm = buffer_get_float32_auto(buffer, &ind);
 8006710:	f7ff f91c 	bl	800594c <buffer_get_float32_auto>
	conf->foc_sl_erpm = buffer_get_float32_auto(buffer, &ind);
 8006714:	a901      	add	r1, sp, #4
	conf->foc_hall_interp_erpm = buffer_get_float32_auto(buffer, &ind);
 8006716:	f8c6 00f0 	str.w	r0, [r6, #240]	; 0xf0
	conf->foc_sl_erpm = buffer_get_float32_auto(buffer, &ind);
 800671a:	4620      	mov	r0, r4
 800671c:	f7ff f916 	bl	800594c <buffer_get_float32_auto>
	conf->foc_sample_v0_v7 = buffer[ind++];
 8006720:	9b01      	ldr	r3, [sp, #4]
	conf->foc_sl_erpm = buffer_get_float32_auto(buffer, &ind);
 8006722:	f8c6 00f4 	str.w	r0, [r6, #244]	; 0xf4
	conf->foc_sample_v0_v7 = buffer[ind++];
 8006726:	5ce2      	ldrb	r2, [r4, r3]
	conf->foc_sample_high_current = buffer[ind++];
 8006728:	18e1      	adds	r1, r4, r3
	conf->foc_sample_v0_v7 = buffer[ind++];
 800672a:	1b52      	subs	r2, r2, r5
 800672c:	bf18      	it	ne
 800672e:	2201      	movne	r2, #1
 8006730:	f886 20f8 	strb.w	r2, [r6, #248]	; 0xf8
	conf->foc_sample_high_current = buffer[ind++];
 8006734:	7849      	ldrb	r1, [r1, #1]
 8006736:	3302      	adds	r3, #2
 8006738:	1b49      	subs	r1, r1, r5
 800673a:	bf18      	it	ne
 800673c:	2101      	movne	r1, #1
	conf->foc_sat_comp = buffer_get_float16(buffer, 1000, &ind);
 800673e:	aa01      	add	r2, sp, #4
	conf->foc_sample_high_current = buffer[ind++];
 8006740:	f886 10f9 	strb.w	r1, [r6, #249]	; 0xf9
	conf->foc_sat_comp = buffer_get_float16(buffer, 1000, &ind);
 8006744:	4620      	mov	r0, r4
 8006746:	4993      	ldr	r1, [pc, #588]	; (8006994 <confgenerator_deserialize_mcconf+0x5c0>)
	conf->foc_sample_high_current = buffer[ind++];
 8006748:	9301      	str	r3, [sp, #4]
	conf->foc_sat_comp = buffer_get_float16(buffer, 1000, &ind);
 800674a:	f7ff f8d7 	bl	80058fc <buffer_get_float16>
	conf->foc_temp_comp = buffer[ind++];
 800674e:	9b01      	ldr	r3, [sp, #4]
	conf->foc_sat_comp = buffer_get_float16(buffer, 1000, &ind);
 8006750:	f8c6 00fc 	str.w	r0, [r6, #252]	; 0xfc
	conf->foc_temp_comp = buffer[ind++];
 8006754:	5ce1      	ldrb	r1, [r4, r3]
	conf->foc_temp_comp_base_temp = buffer_get_float16(buffer, 100, &ind);
 8006756:	aa01      	add	r2, sp, #4
	conf->foc_temp_comp = buffer[ind++];
 8006758:	1b49      	subs	r1, r1, r5
 800675a:	bf18      	it	ne
 800675c:	2101      	movne	r1, #1
 800675e:	3301      	adds	r3, #1
 8006760:	f886 1100 	strb.w	r1, [r6, #256]	; 0x100
	conf->foc_temp_comp_base_temp = buffer_get_float16(buffer, 100, &ind);
 8006764:	4620      	mov	r0, r4
 8006766:	498c      	ldr	r1, [pc, #560]	; (8006998 <confgenerator_deserialize_mcconf+0x5c4>)
	conf->foc_temp_comp = buffer[ind++];
 8006768:	9301      	str	r3, [sp, #4]
	conf->foc_temp_comp_base_temp = buffer_get_float16(buffer, 100, &ind);
 800676a:	f7ff f8c7 	bl	80058fc <buffer_get_float16>
	conf->foc_current_filter_const = buffer_get_float32_auto(buffer, &ind);
 800676e:	a901      	add	r1, sp, #4
	conf->foc_temp_comp_base_temp = buffer_get_float16(buffer, 100, &ind);
 8006770:	f8c6 0104 	str.w	r0, [r6, #260]	; 0x104
	conf->foc_current_filter_const = buffer_get_float32_auto(buffer, &ind);
 8006774:	4620      	mov	r0, r4
 8006776:	f7ff f8e9 	bl	800594c <buffer_get_float32_auto>
	conf->foc_cc_decoupling = buffer[ind++];
 800677a:	9b01      	ldr	r3, [sp, #4]
	conf->foc_current_filter_const = buffer_get_float32_auto(buffer, &ind);
 800677c:	f8c6 0108 	str.w	r0, [r6, #264]	; 0x108
	conf->foc_cc_decoupling = buffer[ind++];
 8006780:	5ce1      	ldrb	r1, [r4, r3]
	conf->foc_observer_type = buffer[ind++];
 8006782:	18e2      	adds	r2, r4, r3
	conf->foc_cc_decoupling = buffer[ind++];
 8006784:	f886 110c 	strb.w	r1, [r6, #268]	; 0x10c
	conf->foc_observer_type = buffer[ind++];
 8006788:	7852      	ldrb	r2, [r2, #1]
 800678a:	3302      	adds	r3, #2
 800678c:	f886 210d 	strb.w	r2, [r6, #269]	; 0x10d
	buffer_get_float32_auto(buffer, &ind);
 8006790:	a901      	add	r1, sp, #4
 8006792:	4620      	mov	r0, r4
	conf->foc_observer_type = buffer[ind++];
 8006794:	9301      	str	r3, [sp, #4]
	buffer_get_float32_auto(buffer, &ind);
 8006796:	f7ff f8d9 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 800679a:	a901      	add	r1, sp, #4
 800679c:	4620      	mov	r0, r4
 800679e:	f7ff f8d5 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 80067a2:	a901      	add	r1, sp, #4
 80067a4:	4620      	mov	r0, r4
 80067a6:	f7ff f8d1 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 80067aa:	a901      	add	r1, sp, #4
 80067ac:	4620      	mov	r0, r4
 80067ae:	f7ff f8cd 	bl	800594c <buffer_get_float32_auto>
	buffer_get_uint16(buffer, &ind);
 80067b2:	a901      	add	r1, sp, #4
 80067b4:	4620      	mov	r0, r4
 80067b6:	f7ff f873 	bl	80058a0 <buffer_get_uint16>
	buffer_get_float32_auto(buffer, &ind);
 80067ba:	a901      	add	r1, sp, #4
 80067bc:	4620      	mov	r0, r4
 80067be:	f7ff f8c5 	bl	800594c <buffer_get_float32_auto>
	ind++;
 80067c2:	9b01      	ldr	r3, [sp, #4]
	buffer_get_int16(buffer, &ind);
 80067c4:	a901      	add	r1, sp, #4
	ind++;
 80067c6:	3301      	adds	r3, #1
	buffer_get_int16(buffer, &ind);
 80067c8:	4620      	mov	r0, r4
	ind++;
 80067ca:	9301      	str	r3, [sp, #4]
	buffer_get_int16(buffer, &ind);
 80067cc:	f7ff f85e 	bl	800588c <buffer_get_int16>
	buffer_get_int16(buffer, &ind);
 80067d0:	a901      	add	r1, sp, #4
 80067d2:	4620      	mov	r0, r4
 80067d4:	f7ff f85a 	bl	800588c <buffer_get_int16>
	buffer_get_float32_auto(buffer, &ind);
 80067d8:	a901      	add	r1, sp, #4
 80067da:	4620      	mov	r0, r4
 80067dc:	f7ff f8b6 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 80067e0:	a901      	add	r1, sp, #4
 80067e2:	4620      	mov	r0, r4
 80067e4:	f7ff f8b2 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 80067e8:	a901      	add	r1, sp, #4
 80067ea:	4620      	mov	r0, r4
 80067ec:	f7ff f8ae 	bl	800594c <buffer_get_float32_auto>
	conf->s_pid_kp = buffer_get_float32_auto(buffer, &ind);
 80067f0:	a901      	add	r1, sp, #4
 80067f2:	4620      	mov	r0, r4
 80067f4:	f7ff f8aa 	bl	800594c <buffer_get_float32_auto>
	conf->s_pid_ki = buffer_get_float32_auto(buffer, &ind);
 80067f8:	a901      	add	r1, sp, #4
	conf->s_pid_kp = buffer_get_float32_auto(buffer, &ind);
 80067fa:	f8c6 0110 	str.w	r0, [r6, #272]	; 0x110
	conf->s_pid_ki = buffer_get_float32_auto(buffer, &ind);
 80067fe:	4620      	mov	r0, r4
 8006800:	f7ff f8a4 	bl	800594c <buffer_get_float32_auto>
	conf->s_pid_kd = buffer_get_float32_auto(buffer, &ind);
 8006804:	a901      	add	r1, sp, #4
	conf->s_pid_ki = buffer_get_float32_auto(buffer, &ind);
 8006806:	f8c6 0114 	str.w	r0, [r6, #276]	; 0x114
	conf->s_pid_kd = buffer_get_float32_auto(buffer, &ind);
 800680a:	4620      	mov	r0, r4
 800680c:	f7ff f89e 	bl	800594c <buffer_get_float32_auto>
	conf->s_pid_kd_filter = buffer_get_float32_auto(buffer, &ind);
 8006810:	a901      	add	r1, sp, #4
	conf->s_pid_kd = buffer_get_float32_auto(buffer, &ind);
 8006812:	f8c6 0118 	str.w	r0, [r6, #280]	; 0x118
	conf->s_pid_kd_filter = buffer_get_float32_auto(buffer, &ind);
 8006816:	4620      	mov	r0, r4
 8006818:	f7ff f898 	bl	800594c <buffer_get_float32_auto>
	conf->s_pid_min_erpm = buffer_get_float32_auto(buffer, &ind);
 800681c:	a901      	add	r1, sp, #4
	conf->s_pid_kd_filter = buffer_get_float32_auto(buffer, &ind);
 800681e:	f8c6 011c 	str.w	r0, [r6, #284]	; 0x11c
	conf->s_pid_min_erpm = buffer_get_float32_auto(buffer, &ind);
 8006822:	4620      	mov	r0, r4
 8006824:	f7ff f892 	bl	800594c <buffer_get_float32_auto>
	conf->s_pid_allow_braking = buffer[ind++];
 8006828:	9b01      	ldr	r3, [sp, #4]
	conf->s_pid_min_erpm = buffer_get_float32_auto(buffer, &ind);
 800682a:	f8c6 0120 	str.w	r0, [r6, #288]	; 0x120
	conf->s_pid_allow_braking = buffer[ind++];
 800682e:	5ce2      	ldrb	r2, [r4, r3]
	conf->s_pid_ramp_erpms_s = buffer_get_float32_auto(buffer, &ind);
 8006830:	a901      	add	r1, sp, #4
	conf->s_pid_allow_braking = buffer[ind++];
 8006832:	1b52      	subs	r2, r2, r5
 8006834:	bf18      	it	ne
 8006836:	2201      	movne	r2, #1
 8006838:	3301      	adds	r3, #1
 800683a:	f886 2124 	strb.w	r2, [r6, #292]	; 0x124
	conf->s_pid_ramp_erpms_s = buffer_get_float32_auto(buffer, &ind);
 800683e:	4620      	mov	r0, r4
	conf->s_pid_allow_braking = buffer[ind++];
 8006840:	9301      	str	r3, [sp, #4]
	conf->s_pid_ramp_erpms_s = buffer_get_float32_auto(buffer, &ind);
 8006842:	f7ff f883 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 8006846:	a901      	add	r1, sp, #4
	conf->s_pid_ramp_erpms_s = buffer_get_float32_auto(buffer, &ind);
 8006848:	f8c6 0128 	str.w	r0, [r6, #296]	; 0x128
	buffer_get_float32_auto(buffer, &ind);
 800684c:	4620      	mov	r0, r4
 800684e:	f7ff f87d 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 8006852:	a901      	add	r1, sp, #4
 8006854:	4620      	mov	r0, r4
 8006856:	f7ff f879 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 800685a:	a901      	add	r1, sp, #4
 800685c:	4620      	mov	r0, r4
 800685e:	f7ff f875 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 8006862:	a901      	add	r1, sp, #4
 8006864:	4620      	mov	r0, r4
 8006866:	f7ff f871 	bl	800594c <buffer_get_float32_auto>
	buffer_get_float32_auto(buffer, &ind);
 800686a:	a901      	add	r1, sp, #4
 800686c:	4620      	mov	r0, r4
 800686e:	f7ff f86d 	bl	800594c <buffer_get_float32_auto>
	conf->cc_startup_boost_duty = buffer_get_float32_auto(buffer, &ind);
 8006872:	a901      	add	r1, sp, #4
 8006874:	4620      	mov	r0, r4
 8006876:	f7ff f869 	bl	800594c <buffer_get_float32_auto>
	conf->cc_min_current = buffer_get_float32_auto(buffer, &ind);
 800687a:	a901      	add	r1, sp, #4
	conf->cc_startup_boost_duty = buffer_get_float32_auto(buffer, &ind);
 800687c:	f8c6 012c 	str.w	r0, [r6, #300]	; 0x12c
	conf->cc_min_current = buffer_get_float32_auto(buffer, &ind);
 8006880:	4620      	mov	r0, r4
 8006882:	f7ff f863 	bl	800594c <buffer_get_float32_auto>
	conf->cc_gain = buffer_get_float32_auto(buffer, &ind);
 8006886:	a901      	add	r1, sp, #4
	conf->cc_min_current = buffer_get_float32_auto(buffer, &ind);
 8006888:	f8c6 0130 	str.w	r0, [r6, #304]	; 0x130
	conf->cc_gain = buffer_get_float32_auto(buffer, &ind);
 800688c:	4620      	mov	r0, r4
 800688e:	f7ff f85d 	bl	800594c <buffer_get_float32_auto>
	conf->cc_ramp_step_max = buffer_get_float32_auto(buffer, &ind);
 8006892:	a901      	add	r1, sp, #4
	conf->cc_gain = buffer_get_float32_auto(buffer, &ind);
 8006894:	f8c6 0134 	str.w	r0, [r6, #308]	; 0x134
	conf->cc_ramp_step_max = buffer_get_float32_auto(buffer, &ind);
 8006898:	4620      	mov	r0, r4
 800689a:	f7ff f857 	bl	800594c <buffer_get_float32_auto>
	conf->m_fault_stop_time_ms = buffer_get_int32(buffer, &ind);
 800689e:	a901      	add	r1, sp, #4
	conf->cc_ramp_step_max = buffer_get_float32_auto(buffer, &ind);
 80068a0:	f8c6 0138 	str.w	r0, [r6, #312]	; 0x138
	conf->m_fault_stop_time_ms = buffer_get_int32(buffer, &ind);
 80068a4:	4620      	mov	r0, r4
 80068a6:	f7ff f805 	bl	80058b4 <buffer_get_int32>
	conf->m_duty_ramp_step = buffer_get_float32_auto(buffer, &ind);
 80068aa:	a901      	add	r1, sp, #4
	conf->m_fault_stop_time_ms = buffer_get_int32(buffer, &ind);
 80068ac:	f8c6 013c 	str.w	r0, [r6, #316]	; 0x13c
	conf->m_duty_ramp_step = buffer_get_float32_auto(buffer, &ind);
 80068b0:	4620      	mov	r0, r4
 80068b2:	f7ff f84b 	bl	800594c <buffer_get_float32_auto>
	conf->m_current_backoff_gain = buffer_get_float32_auto(buffer, &ind);
 80068b6:	a901      	add	r1, sp, #4
	conf->m_duty_ramp_step = buffer_get_float32_auto(buffer, &ind);
 80068b8:	f8c6 0140 	str.w	r0, [r6, #320]	; 0x140
	conf->m_current_backoff_gain = buffer_get_float32_auto(buffer, &ind);
 80068bc:	4620      	mov	r0, r4
 80068be:	f7ff f845 	bl	800594c <buffer_get_float32_auto>
	conf->m_encoder_counts = buffer_get_uint32(buffer, &ind);
 80068c2:	a901      	add	r1, sp, #4
	conf->m_current_backoff_gain = buffer_get_float32_auto(buffer, &ind);
 80068c4:	f8c6 0144 	str.w	r0, [r6, #324]	; 0x144
	conf->m_encoder_counts = buffer_get_uint32(buffer, &ind);
 80068c8:	4620      	mov	r0, r4
 80068ca:	f7ff f805 	bl	80058d8 <buffer_get_uint32>
	conf->m_sensor_port_mode = buffer[ind++];
 80068ce:	9b01      	ldr	r3, [sp, #4]
	conf->m_encoder_counts = buffer_get_uint32(buffer, &ind);
 80068d0:	f8c6 0148 	str.w	r0, [r6, #328]	; 0x148
	conf->m_sensor_port_mode = buffer[ind++];
 80068d4:	5ce1      	ldrb	r1, [r4, r3]
	conf->m_invert_direction = buffer[ind++];
 80068d6:	18e2      	adds	r2, r4, r3
	conf->m_sensor_port_mode = buffer[ind++];
 80068d8:	f886 114c 	strb.w	r1, [r6, #332]	; 0x14c
	conf->m_invert_direction = buffer[ind++];
 80068dc:	7851      	ldrb	r1, [r2, #1]
	conf->m_drv8301_oc_adj = buffer[ind++];
 80068de:	3304      	adds	r3, #4
	conf->m_invert_direction = buffer[ind++];
 80068e0:	1b49      	subs	r1, r1, r5
 80068e2:	bf18      	it	ne
 80068e4:	2101      	movne	r1, #1
 80068e6:	f886 114d 	strb.w	r1, [r6, #333]	; 0x14d
	conf->m_drv8301_oc_mode = buffer[ind++];
 80068ea:	7891      	ldrb	r1, [r2, #2]
	conf->m_drv8301_oc_adj = buffer[ind++];
 80068ec:	9301      	str	r3, [sp, #4]
	conf->m_drv8301_oc_mode = buffer[ind++];
 80068ee:	f886 114e 	strb.w	r1, [r6, #334]	; 0x14e
	conf->m_drv8301_oc_adj = buffer[ind++];
 80068f2:	78d3      	ldrb	r3, [r2, #3]
	conf->m_bldc_f_sw_min = buffer_get_float32_auto(buffer, &ind);
 80068f4:	a901      	add	r1, sp, #4
	conf->m_drv8301_oc_adj = buffer[ind++];
 80068f6:	f8c6 3150 	str.w	r3, [r6, #336]	; 0x150
	conf->m_bldc_f_sw_min = buffer_get_float32_auto(buffer, &ind);
 80068fa:	4620      	mov	r0, r4
 80068fc:	f7ff f826 	bl	800594c <buffer_get_float32_auto>
	conf->m_bldc_f_sw_max = buffer_get_float32_auto(buffer, &ind);
 8006900:	a901      	add	r1, sp, #4
	conf->m_bldc_f_sw_min = buffer_get_float32_auto(buffer, &ind);
 8006902:	f8c6 0154 	str.w	r0, [r6, #340]	; 0x154
	conf->m_bldc_f_sw_max = buffer_get_float32_auto(buffer, &ind);
 8006906:	4620      	mov	r0, r4
 8006908:	f7ff f820 	bl	800594c <buffer_get_float32_auto>
	conf->m_dc_f_sw = buffer_get_float32_auto(buffer, &ind);
 800690c:	a901      	add	r1, sp, #4
	conf->m_bldc_f_sw_max = buffer_get_float32_auto(buffer, &ind);
 800690e:	f8c6 0158 	str.w	r0, [r6, #344]	; 0x158
	conf->m_dc_f_sw = buffer_get_float32_auto(buffer, &ind);
 8006912:	4620      	mov	r0, r4
 8006914:	f7ff f81a 	bl	800594c <buffer_get_float32_auto>
	conf->m_ntc_motor_beta = buffer_get_float32_auto(buffer, &ind);
 8006918:	a901      	add	r1, sp, #4
	conf->m_dc_f_sw = buffer_get_float32_auto(buffer, &ind);
 800691a:	f8c6 015c 	str.w	r0, [r6, #348]	; 0x15c
	conf->m_ntc_motor_beta = buffer_get_float32_auto(buffer, &ind);
 800691e:	4620      	mov	r0, r4
 8006920:	f7ff f814 	bl	800594c <buffer_get_float32_auto>
	conf->m_out_aux_mode = buffer[ind++];
 8006924:	9b01      	ldr	r3, [sp, #4]
	conf->m_ntc_motor_beta = buffer_get_float32_auto(buffer, &ind);
 8006926:	f8c6 0160 	str.w	r0, [r6, #352]	; 0x160
	conf->m_out_aux_mode = buffer[ind++];
 800692a:	5ce1      	ldrb	r1, [r4, r3]
	conf->m_motor_temp_sens_type = buffer[ind++];
 800692c:	18e2      	adds	r2, r4, r3
	conf->m_out_aux_mode = buffer[ind++];
 800692e:	f886 1164 	strb.w	r1, [r6, #356]	; 0x164
	conf->m_motor_temp_sens_type = buffer[ind++];
 8006932:	7852      	ldrb	r2, [r2, #1]
 8006934:	3302      	adds	r3, #2
 8006936:	f886 2165 	strb.w	r2, [r6, #357]	; 0x165
	conf->m_ptc_motor_coeff = buffer_get_float32_auto(buffer, &ind);
 800693a:	a901      	add	r1, sp, #4
 800693c:	4620      	mov	r0, r4
	conf->m_motor_temp_sens_type = buffer[ind++];
 800693e:	9301      	str	r3, [sp, #4]
	conf->m_ptc_motor_coeff = buffer_get_float32_auto(buffer, &ind);
 8006940:	f7ff f804 	bl	800594c <buffer_get_float32_auto>
	conf->m_hall_extra_samples = buffer[ind++];
 8006944:	9b01      	ldr	r3, [sp, #4]
	conf->m_ptc_motor_coeff = buffer_get_float32_auto(buffer, &ind);
 8006946:	f8c6 0168 	str.w	r0, [r6, #360]	; 0x168
	conf->m_hall_extra_samples = buffer[ind++];
 800694a:	5ce1      	ldrb	r1, [r4, r3]
	conf->si_motor_poles = buffer[ind++];
 800694c:	18e2      	adds	r2, r4, r3
	conf->m_hall_extra_samples = buffer[ind++];
 800694e:	f8c6 116c 	str.w	r1, [r6, #364]	; 0x16c
	conf->si_motor_poles = buffer[ind++];
 8006952:	7852      	ldrb	r2, [r2, #1]
 8006954:	3302      	adds	r3, #2
 8006956:	f886 2170 	strb.w	r2, [r6, #368]	; 0x170
	conf->si_gear_ratio = buffer_get_float32_auto(buffer, &ind);
 800695a:	a901      	add	r1, sp, #4
 800695c:	4620      	mov	r0, r4
	conf->si_motor_poles = buffer[ind++];
 800695e:	9301      	str	r3, [sp, #4]
	conf->si_gear_ratio = buffer_get_float32_auto(buffer, &ind);
 8006960:	f7fe fff4 	bl	800594c <buffer_get_float32_auto>
	conf->si_wheel_diameter = buffer_get_float32_auto(buffer, &ind);
 8006964:	a901      	add	r1, sp, #4
	conf->si_gear_ratio = buffer_get_float32_auto(buffer, &ind);
 8006966:	f8c6 0174 	str.w	r0, [r6, #372]	; 0x174
	conf->si_wheel_diameter = buffer_get_float32_auto(buffer, &ind);
 800696a:	4620      	mov	r0, r4
 800696c:	f7fe ffee 	bl	800594c <buffer_get_float32_auto>
	conf->si_battery_type = buffer[ind++];
 8006970:	9b01      	ldr	r3, [sp, #4]
	conf->si_wheel_diameter = buffer_get_float32_auto(buffer, &ind);
 8006972:	f8c6 0178 	str.w	r0, [r6, #376]	; 0x178
	conf->si_battery_type = buffer[ind++];
 8006976:	5ce1      	ldrb	r1, [r4, r3]
	conf->si_battery_cells = buffer[ind++];
 8006978:	18e2      	adds	r2, r4, r3
	conf->si_battery_type = buffer[ind++];
 800697a:	f886 117c 	strb.w	r1, [r6, #380]	; 0x17c
	conf->si_battery_cells = buffer[ind++];
 800697e:	7852      	ldrb	r2, [r2, #1]
 8006980:	3302      	adds	r3, #2
 8006982:	f8c6 2180 	str.w	r2, [r6, #384]	; 0x180
	conf->si_battery_ah = buffer_get_float32_auto(buffer, &ind);
 8006986:	a901      	add	r1, sp, #4
 8006988:	4620      	mov	r0, r4
	conf->si_battery_cells = buffer[ind++];
 800698a:	9301      	str	r3, [sp, #4]
	conf->si_battery_ah = buffer_get_float32_auto(buffer, &ind);
 800698c:	f7fe ffde 	bl	800594c <buffer_get_float32_auto>
	ind++;
 8006990:	9b01      	ldr	r3, [sp, #4]
 8006992:	e003      	b.n	800699c <confgenerator_deserialize_mcconf+0x5c8>
 8006994:	447a0000 	.word	0x447a0000
 8006998:	42c80000 	.word	0x42c80000
	conf->si_battery_ah = buffer_get_float32_auto(buffer, &ind);
 800699c:	f8c6 0184 	str.w	r0, [r6, #388]	; 0x184
	ind++;
 80069a0:	3301      	adds	r3, #1
	buffer_get_float16(buffer, 100, &ind);
 80069a2:	aa01      	add	r2, sp, #4
 80069a4:	4620      	mov	r0, r4
 80069a6:	490b      	ldr	r1, [pc, #44]	; (80069d4 <confgenerator_deserialize_mcconf+0x600>)
	ind++;
 80069a8:	9301      	str	r3, [sp, #4]
	buffer_get_float16(buffer, 100, &ind);
 80069aa:	f7fe ffa7 	bl	80058fc <buffer_get_float16>
	buffer_get_float16(buffer, 100, &ind);
 80069ae:	aa01      	add	r2, sp, #4
 80069b0:	4620      	mov	r0, r4
 80069b2:	4908      	ldr	r1, [pc, #32]	; (80069d4 <confgenerator_deserialize_mcconf+0x600>)
 80069b4:	f7fe ffa2 	bl	80058fc <buffer_get_float16>
	buffer_get_float16(buffer, 1000, &ind);
 80069b8:	aa01      	add	r2, sp, #4
 80069ba:	4620      	mov	r0, r4
 80069bc:	4906      	ldr	r1, [pc, #24]	; (80069d8 <confgenerator_deserialize_mcconf+0x604>)
 80069be:	f7fe ff9d 	bl	80058fc <buffer_get_float16>
	buffer_get_float16(buffer, 1000, &ind);
 80069c2:	4620      	mov	r0, r4
 80069c4:	4904      	ldr	r1, [pc, #16]	; (80069d8 <confgenerator_deserialize_mcconf+0x604>)
 80069c6:	aa01      	add	r2, sp, #4
 80069c8:	f7fe ff98 	bl	80058fc <buffer_get_float16>
	return true;
 80069cc:	2001      	movs	r0, #1
}
 80069ce:	b002      	add	sp, #8
 80069d0:	bd70      	pop	{r4, r5, r6, pc}
 80069d2:	bf00      	nop
 80069d4:	42c80000 	.word	0x42c80000
 80069d8:	447a0000 	.word	0x447a0000

080069dc <confgenerator_set_defaults_mcconf>:
	return true;
}

const uint8_t hall_def[8] = {255, 214, 40, 253, 123, 167, 85, 255};

void confgenerator_set_defaults_mcconf(mc_configuration *mcconf) {
 80069dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069de:	4604      	mov	r4, r0
//	float foc_sl_openloop_time_lock;
//	float foc_sl_openloop_time_ramp;
	mcconf->foc_sensor_mode = FOC_SENSOR_MODE_HALL;

	for(int i=0;i<8;i++){
		mcconf->foc_hall_table[i] = hall_def[i];
 80069e0:	25ff      	movs	r5, #255	; 0xff
	memset(mcconf,0,sizeof(mc_configuration));
 80069e2:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 80069e6:	2100      	movs	r1, #0
 80069e8:	f007 fdfe 	bl	800e5e8 <memset>
//	temp_sensor_type m_motor_temp_sens_type;
//	float m_ptc_motor_coeff;
//	int m_hall_extra_samples;

	// Setup info
	mcconf->si_motor_poles = 15;
 80069ec:	210f      	movs	r1, #15
		mcconf->foc_hall_table[i] = hall_def[i];
 80069ee:	f884 50ec 	strb.w	r5, [r4, #236]	; 0xec
		mcconf->l_max_erpm = 5000;
 80069f2:	4d23      	ldr	r5, [pc, #140]	; (8006a80 <confgenerator_set_defaults_mcconf+0xa4>)
	mcconf->s_pid_allow_braking = false;
 80069f4:	2200      	movs	r2, #0
		mcconf->l_max_erpm = 5000;
 80069f6:	61a5      	str	r5, [r4, #24]
		mcconf->l_battery_cut_end = 31;
 80069f8:	4d22      	ldr	r5, [pc, #136]	; (8006a84 <confgenerator_set_defaults_mcconf+0xa8>)
	mcconf->pwm_mode = PWM_MODE_SYNCHRONOUS;
 80069fa:	2701      	movs	r7, #1
		mcconf->l_battery_cut_end = 31;
 80069fc:	6365      	str	r5, [r4, #52]	; 0x34
	mcconf->foc_current_kp = 0.3;
 80069fe:	4d22      	ldr	r5, [pc, #136]	; (8006a88 <confgenerator_set_defaults_mcconf+0xac>)
	mcconf->motor_type = MOTOR_TYPE_FOC;
 8006a00:	f44f 7681 	mov.w	r6, #258	; 0x102
	mcconf->foc_current_kp = 0.3;
 8006a04:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    mcconf->foc_f_sw = 16000;
 8006a08:	4d20      	ldr	r5, [pc, #128]	; (8006a8c <confgenerator_set_defaults_mcconf+0xb0>)

	mcconf->si_gear_ratio = 1;
	mcconf->si_wheel_diameter = 0.250;
	mcconf->si_battery_type = BATTERY_TYPE_LIION_3_0__4_2;
	mcconf->si_battery_cells = 10;
 8006a0a:	200a      	movs	r0, #10
    mcconf->foc_f_sw = 16000;
 8006a0c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
	mcconf->foc_sensor_mode = FOC_SENSOR_MODE_HALL;
 8006a10:	4d1f      	ldr	r5, [pc, #124]	; (8006a90 <confgenerator_set_defaults_mcconf+0xb4>)
	mcconf->si_motor_poles = 15;
 8006a12:	f884 1170 	strb.w	r1, [r4, #368]	; 0x170
	mcconf->foc_sensor_mode = FOC_SENSOR_MODE_HALL;
 8006a16:	f8c4 50e4 	str.w	r5, [r4, #228]	; 0xe4
	mcconf->foc_hall_interp_erpm = 100;
 8006a1a:	4d1e      	ldr	r5, [pc, #120]	; (8006a94 <confgenerator_set_defaults_mcconf+0xb8>)
	mcconf->s_pid_kp = 0.25;
 8006a1c:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
	mcconf->foc_hall_interp_erpm = 100;
 8006a20:	f8c4 50f0 	str.w	r5, [r4, #240]	; 0xf0
	mcconf->si_gear_ratio = 1;
 8006a24:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
		mcconf->l_current_min  = -10;
 8006a28:	4b1b      	ldr	r3, [pc, #108]	; (8006a98 <confgenerator_set_defaults_mcconf+0xbc>)
	mcconf->pwm_mode = PWM_MODE_SYNCHRONOUS;
 8006a2a:	f884 7084 	strb.w	r7, [r4, #132]	; 0x84
		mcconf->l_current_min  = -10;
 8006a2e:	6063      	str	r3, [r4, #4]
		mcconf->l_abs_current_max = 60;
 8006a30:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <confgenerator_set_defaults_mcconf+0xc0>)
	mcconf->motor_type = MOTOR_TYPE_FOC;
 8006a32:	f8a4 6086 	strh.w	r6, [r4, #134]	; 0x86
		mcconf->l_abs_current_max = 60;
 8006a36:	6123      	str	r3, [r4, #16]
		mcconf->l_min_erpm = -5000;
 8006a38:	4b19      	ldr	r3, [pc, #100]	; (8006aa0 <confgenerator_set_defaults_mcconf+0xc4>)
	mcconf->si_battery_type = BATTERY_TYPE_LIION_3_0__4_2;
 8006a3a:	f884 217c 	strb.w	r2, [r4, #380]	; 0x17c
		mcconf->l_min_erpm = -5000;
 8006a3e:	6163      	str	r3, [r4, #20]
		mcconf->l_max_vin = 56;
 8006a40:	4b18      	ldr	r3, [pc, #96]	; (8006aa4 <confgenerator_set_defaults_mcconf+0xc8>)
	mcconf->si_gear_ratio = 1;
 8006a42:	f8c4 5174 	str.w	r5, [r4, #372]	; 0x174
		mcconf->l_max_vin = 56;
 8006a46:	62e3      	str	r3, [r4, #44]	; 0x2c
		mcconf->l_battery_cut_start = 34;
 8006a48:	4b17      	ldr	r3, [pc, #92]	; (8006aa8 <confgenerator_set_defaults_mcconf+0xcc>)
	mcconf->si_battery_cells = 10;
 8006a4a:	f8c4 0180 	str.w	r0, [r4, #384]	; 0x180
		mcconf->l_battery_cut_start = 34;
 8006a4e:	6323      	str	r3, [r4, #48]	; 0x30
    mcconf->foc_current_ki = 152.0;
 8006a50:	4b16      	ldr	r3, [pc, #88]	; (8006aac <confgenerator_set_defaults_mcconf+0xd0>)
	mcconf->s_pid_kp = 0.25;
 8006a52:	f8c4 1110 	str.w	r1, [r4, #272]	; 0x110
    mcconf->foc_current_ki = 152.0;
 8006a56:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    mcconf->foc_encoder_offset = 90;
 8006a5a:	4b15      	ldr	r3, [pc, #84]	; (8006ab0 <confgenerator_set_defaults_mcconf+0xd4>)
	mcconf->si_wheel_diameter = 0.250;
 8006a5c:	f8c4 1178 	str.w	r1, [r4, #376]	; 0x178
    mcconf->foc_encoder_offset = 90;
 8006a60:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	mcconf->foc_sensor_mode = FOC_SENSOR_MODE_HALL;
 8006a64:	4b13      	ldr	r3, [pc, #76]	; (8006ab4 <confgenerator_set_defaults_mcconf+0xd8>)
	mcconf->s_pid_allow_braking = false;
 8006a66:	f884 2124 	strb.w	r2, [r4, #292]	; 0x124
	mcconf->foc_sensor_mode = FOC_SENSOR_MODE_HALL;
 8006a6a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	mcconf->s_pid_ki = 0.0002;
 8006a6e:	4b12      	ldr	r3, [pc, #72]	; (8006ab8 <confgenerator_set_defaults_mcconf+0xdc>)
 8006a70:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
		mcconf->l_current_max = 10;
 8006a74:	4b11      	ldr	r3, [pc, #68]	; (8006abc <confgenerator_set_defaults_mcconf+0xe0>)
 8006a76:	6023      	str	r3, [r4, #0]
		mcconf->l_min_vin = 10;
 8006a78:	62a3      	str	r3, [r4, #40]	; 0x28
	mcconf->si_battery_ah = 10;
 8006a7a:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184

	// BMS Configuration
//	bms_config bms;

}
 8006a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a80:	459c4000 	.word	0x459c4000
 8006a84:	41f80000 	.word	0x41f80000
 8006a88:	3e99999a 	.word	0x3e99999a
 8006a8c:	467a0000 	.word	0x467a0000
 8006a90:	28d6ff02 	.word	0x28d6ff02
 8006a94:	42c80000 	.word	0x42c80000
 8006a98:	c1200000 	.word	0xc1200000
 8006a9c:	42700000 	.word	0x42700000
 8006aa0:	c59c4000 	.word	0xc59c4000
 8006aa4:	42600000 	.word	0x42600000
 8006aa8:	42080000 	.word	0x42080000
 8006aac:	43180000 	.word	0x43180000
 8006ab0:	42b40000 	.word	0x42b40000
 8006ab4:	55a77bfd 	.word	0x55a77bfd
 8006ab8:	3951b717 	.word	0x3951b717
 8006abc:	41200000 	.word	0x41200000

08006ac0 <confgenerator_set_defaults_appconf>:

void confgenerator_set_defaults_appconf(app_configuration *conf) {
	memset(conf,0,sizeof(app_configuration));
 8006ac0:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8006ac4:	2100      	movs	r1, #0
void confgenerator_set_defaults_appconf(app_configuration *conf) {
 8006ac6:	b510      	push	{r4, lr}
 8006ac8:	4604      	mov	r4, r0
	memset(conf,0,sizeof(app_configuration));
 8006aca:	f007 fd8d 	bl	800e5e8 <memset>
	conf->controller_id = 167;
 8006ace:	20a7      	movs	r0, #167	; 0xa7
	conf->permanent_uart_enabled = true;
	//conf->shutdown_mode = APPCONF_SHUTDOWN_MODE;
	//conf->can_mode = APPCONF_CAN_MODE;
	//conf->uavcan_esc_index = APPCONF_UAVCAN_ESC_INDEX;
	//conf->uavcan_raw_mode = APPCONF_UAVCAN_RAW_MODE;
	conf->app_to_use = APP_UART;
 8006ad0:	2203      	movs	r2, #3
	conf->permanent_uart_enabled = true;
 8006ad2:	2101      	movs	r1, #1
	//conf->app_adc_conf.ramp_time_neg = APPCONF_ADC_RAMP_TIME_NEG;
	//conf->app_adc_conf.multi_esc = APPCONF_ADC_MULTI_ESC;
	//conf->app_adc_conf.tc = APPCONF_ADC_TC;
	//conf->app_adc_conf.tc_max_diff = APPCONF_ADC_TC_MAX_DIFF;
	//conf->app_adc_conf.update_rate_hz = APPCONF_ADC_UPDATE_RATE_HZ;
	conf->app_uart_baudrate = 115200;
 8006ad4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	conf->controller_id = 167;
 8006ad8:	7020      	strb	r0, [r4, #0]
	conf->app_to_use = APP_UART;
 8006ada:	76e2      	strb	r2, [r4, #27]
	conf->permanent_uart_enabled = true;
 8006adc:	75a1      	strb	r1, [r4, #22]
	conf->app_uart_baudrate = 115200;
 8006ade:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	//conf->imu_conf.gyro_offsets[2] = APPCONF_IMU_G_OFFSET_2;
	//conf->imu_conf.gyro_offset_comp_fact[0] = APPCONF_IMU_G_OFFSET_COMP_FACT_0;
	//conf->imu_conf.gyro_offset_comp_fact[1] = APPCONF_IMU_G_OFFSET_COMP_FACT_1;
	//conf->imu_conf.gyro_offset_comp_fact[2] = APPCONF_IMU_G_OFFSET_COMP_FACT_2;
	//conf->imu_conf.gyro_offset_comp_clamp = APPCONF_IMU_G_OFFSET_COMP_CLAMP;
}
 8006ae2:	bd10      	pop	{r4, pc}

08006ae4 <crc16>:
		0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0 };

unsigned short crc16(unsigned char *buf, unsigned int len) {
	unsigned int i;
	unsigned short cksum = 0;
	for (i = 0; i < len; i++) {
 8006ae4:	b189      	cbz	r1, 8006b0a <crc16+0x26>
 8006ae6:	4602      	mov	r2, r0
	unsigned short cksum = 0;
 8006ae8:	2000      	movs	r0, #0
unsigned short crc16(unsigned char *buf, unsigned int len) {
 8006aea:	b410      	push	{r4}
 8006aec:	4c08      	ldr	r4, [pc, #32]	; (8006b10 <crc16+0x2c>)
 8006aee:	4411      	add	r1, r2
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 8006af0:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006af4:	ea83 2310 	eor.w	r3, r3, r0, lsr #8
 8006af8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
	for (i = 0; i < len; i++) {
 8006afc:	428a      	cmp	r2, r1
		cksum = crc16_tab[(((cksum >> 8) ^ *buf++) & 0xFF)] ^ (cksum << 8);
 8006afe:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
 8006b02:	b280      	uxth	r0, r0
	for (i = 0; i < len; i++) {
 8006b04:	d1f4      	bne.n	8006af0 <crc16+0xc>
	}
	return cksum;
}
 8006b06:	bc10      	pop	{r4}
 8006b08:	4770      	bx	lr
	unsigned short cksum = 0;
 8006b0a:	4608      	mov	r0, r1
}
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	08010b38 	.word	0x08010b38

08006b14 <packet_init>:
// Private functions
static int try_decode_packet(unsigned char *buffer, unsigned int in_len,
		void(*process_func)(unsigned char *data, unsigned int len), int *bytes_left);

void packet_init(void (*s_func)(unsigned char *data, unsigned int len),
		void (*p_func)(unsigned char *data, unsigned int len), int handler_num) {
 8006b14:	b538      	push	{r3, r4, r5, lr}
 8006b16:	4613      	mov	r3, r2
	memset(&m_handler_states[handler_num], 0, sizeof(PACKET_STATE_t));
 8006b18:	f44f 6285 	mov.w	r2, #1064	; 0x428
		void (*p_func)(unsigned char *data, unsigned int len), int handler_num) {
 8006b1c:	460c      	mov	r4, r1
	memset(&m_handler_states[handler_num], 0, sizeof(PACKET_STATE_t));
 8006b1e:	4905      	ldr	r1, [pc, #20]	; (8006b34 <packet_init+0x20>)
		void (*p_func)(unsigned char *data, unsigned int len), int handler_num) {
 8006b20:	4605      	mov	r5, r0
	memset(&m_handler_states[handler_num], 0, sizeof(PACKET_STATE_t));
 8006b22:	fb02 1303 	mla	r3, r2, r3, r1
 8006b26:	2100      	movs	r1, #0
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f007 fd5d 	bl	800e5e8 <memset>
	m_handler_states[handler_num].send_func = s_func;
	m_handler_states[handler_num].process_func = p_func;
 8006b2e:	e9c0 5401 	strd	r5, r4, [r0, #4]
}
 8006b32:	bd38      	pop	{r3, r4, r5, pc}
 8006b34:	20000968 	.word	0x20000968

08006b38 <packet_send_packet>:
	m_handler_states[handler_num].rx_write_ptr = 0;
	m_handler_states[handler_num].bytes_left = 0;
}

void packet_send_packet(unsigned char *data, unsigned int len, int handler_num) {
	if (len == 0 || len > PACKET_MAX_PL_LEN) {
 8006b38:	1e4b      	subs	r3, r1, #1
 8006b3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b3e:	d241      	bcs.n	8006bc4 <packet_send_packet+0x8c>
	}

	int b_ind = 0;
	PACKET_STATE_t *handler = &m_handler_states[handler_num];

	if (len <= 255) {
 8006b40:	29ff      	cmp	r1, #255	; 0xff
void packet_send_packet(unsigned char *data, unsigned int len, int handler_num) {
 8006b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b46:	460c      	mov	r4, r1
 8006b48:	4606      	mov	r6, r0
	if (len <= 255) {
 8006b4a:	d933      	bls.n	8006bb4 <packet_send_packet+0x7c>
		handler->tx_buffer[b_ind++] = 2;
		handler->tx_buffer[b_ind++] = len;
	} else if (len <= 65535) {
		handler->tx_buffer[b_ind++] = 3;
		handler->tx_buffer[b_ind++] = len >> 8;
 8006b4c:	f04f 0803 	mov.w	r8, #3
		handler->tx_buffer[b_ind++] = len & 0xFF;
 8006b50:	f44f 6085 	mov.w	r0, #1064	; 0x428
		handler->tx_buffer[b_ind++] = 3;
 8006b54:	46c4      	mov	ip, r8
		handler->tx_buffer[b_ind++] = len & 0xFF;
 8006b56:	4b1c      	ldr	r3, [pc, #112]	; (8006bc8 <packet_send_packet+0x90>)
		handler->tx_buffer[b_ind++] = len >> 8;
 8006b58:	f3c1 2107 	ubfx	r1, r1, #8, #8
		handler->tx_buffer[b_ind++] = len & 0xFF;
 8006b5c:	fb00 3002 	mla	r0, r0, r2, r3
 8006b60:	f880 4222 	strb.w	r4, [r0, #546]	; 0x222
 8006b64:	f44f 6585 	mov.w	r5, #1064	; 0x428
 8006b68:	fb05 f202 	mul.w	r2, r5, r2
		handler->tx_buffer[b_ind++] = len >> 16;
		handler->tx_buffer[b_ind++] = (len >> 8) & 0x0F;
		handler->tx_buffer[b_ind++] = len & 0xFF;
	}

	memcpy(handler->tx_buffer + b_ind, data, len);
 8006b6c:	f502 7708 	add.w	r7, r2, #544	; 0x220
 8006b70:	189d      	adds	r5, r3, r2
 8006b72:	441f      	add	r7, r3
 8006b74:	4622      	mov	r2, r4
 8006b76:	f885 1221 	strb.w	r1, [r5, #545]	; 0x221
 8006b7a:	f885 c220 	strb.w	ip, [r5, #544]	; 0x220
 8006b7e:	4631      	mov	r1, r6
 8006b80:	eb07 0008 	add.w	r0, r7, r8
 8006b84:	f007 fd08 	bl	800e598 <memcpy>
	b_ind += len;

	unsigned short crc = crc16(data, len);
 8006b88:	4621      	mov	r1, r4
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f7ff ffaa 	bl	8006ae4 <crc16>
	handler->tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
	handler->tx_buffer[b_ind++] = (uint8_t)(crc & 0xFF);
	handler->tx_buffer[b_ind++] = 3;
 8006b90:	2203      	movs	r2, #3
	b_ind += len;
 8006b92:	44a0      	add	r8, r4

	if (handler->send_func) {
 8006b94:	686b      	ldr	r3, [r5, #4]
	handler->tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
 8006b96:	0a04      	lsrs	r4, r0, #8
 8006b98:	4445      	add	r5, r8
	handler->tx_buffer[b_ind++] = (uint8_t)(crc & 0xFF);
 8006b9a:	f885 0221 	strb.w	r0, [r5, #545]	; 0x221
	handler->tx_buffer[b_ind++] = (uint8_t)(crc >> 8);
 8006b9e:	f885 4220 	strb.w	r4, [r5, #544]	; 0x220
	handler->tx_buffer[b_ind++] = 3;
 8006ba2:	f885 2222 	strb.w	r2, [r5, #546]	; 0x222
	if (handler->send_func) {
 8006ba6:	b15b      	cbz	r3, 8006bc0 <packet_send_packet+0x88>
		handler->send_func(handler->tx_buffer, b_ind);
 8006ba8:	4638      	mov	r0, r7
 8006baa:	eb08 0102 	add.w	r1, r8, r2
	}
}
 8006bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		handler->send_func(handler->tx_buffer, b_ind);
 8006bb2:	4718      	bx	r3
		handler->tx_buffer[b_ind++] = len;
 8006bb4:	f04f 0802 	mov.w	r8, #2
 8006bb8:	4b03      	ldr	r3, [pc, #12]	; (8006bc8 <packet_send_packet+0x90>)
		handler->tx_buffer[b_ind++] = 2;
 8006bba:	46c4      	mov	ip, r8
		handler->tx_buffer[b_ind++] = len;
 8006bbc:	b2c9      	uxtb	r1, r1
 8006bbe:	e7d1      	b.n	8006b64 <packet_send_packet+0x2c>
}
 8006bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	20000968 	.word	0x20000968

08006bcc <packet_process_byte>:
}

void packet_process_byte(uint8_t rx_data, int handler_num) {
	PACKET_STATE_t *handler = &m_handler_states[handler_num];

	handler->rx_timeout = PACKET_RX_TIMEOUT;
 8006bcc:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8006bd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
void packet_process_byte(uint8_t rx_data, int handler_num) {
 8006bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	handler->rx_timeout = PACKET_RX_TIMEOUT;
 8006bd8:	fb03 f301 	mul.w	r3, r3, r1
void packet_process_byte(uint8_t rx_data, int handler_num) {
 8006bdc:	4605      	mov	r5, r0
	handler->rx_timeout = PACKET_RX_TIMEOUT;
 8006bde:	4856      	ldr	r0, [pc, #344]	; (8006d38 <packet_process_byte+0x16c>)
void packet_process_byte(uint8_t rx_data, int handler_num) {
 8006be0:	b085      	sub	sp, #20
	handler->rx_timeout = PACKET_RX_TIMEOUT;
 8006be2:	18c6      	adds	r6, r0, r3
void packet_process_byte(uint8_t rx_data, int handler_num) {
 8006be4:	9103      	str	r1, [sp, #12]

	unsigned int data_len = handler->rx_write_ptr - handler->rx_read_ptr;
 8006be6:	e9d6 1403 	ldrd	r1, r4, [r6, #12]
 8006bea:	eba4 0801 	sub.w	r8, r4, r1

	// Out of space (should not happen)
	if (data_len >= BUFFER_LEN) {
 8006bee:	f5b8 7f02 	cmp.w	r8, #520	; 0x208
	handler->rx_timeout = PACKET_RX_TIMEOUT;
 8006bf2:	52c2      	strh	r2, [r0, r3]
	if (data_len >= BUFFER_LEN) {
 8006bf4:	d276      	bcs.n	8006ce4 <packet_process_byte+0x118>
		return;
	}

	// Everything has to be aligned, so shift buffer if we are out of space.
	// (as opposed to using a circular buffer)
	if (handler->rx_write_ptr >= BUFFER_LEN) {
 8006bf6:	f5b4 7f02 	cmp.w	r4, #520	; 0x208
 8006bfa:	d268      	bcs.n	8006cce <packet_process_byte+0x102>

		handler->rx_read_ptr = 0;
		handler->rx_write_ptr = data_len;
	}

	handler->rx_buffer[handler->rx_write_ptr++] = rx_data;
 8006bfc:	f44f 6a85 	mov.w	sl, #1064	; 0x428
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	494d      	ldr	r1, [pc, #308]	; (8006d38 <packet_process_byte+0x16c>)
 8006c04:	fb0a fa03 	mul.w	sl, sl, r3
 8006c08:	eb01 070a 	add.w	r7, r1, sl
	data_len++;

	if (handler->bytes_left > 1) {
 8006c0c:	697b      	ldr	r3, [r7, #20]
	handler->rx_buffer[handler->rx_write_ptr++] = rx_data;
 8006c0e:	1c62      	adds	r2, r4, #1
	if (handler->bytes_left > 1) {
 8006c10:	2b01      	cmp	r3, #1
	handler->rx_buffer[handler->rx_write_ptr++] = rx_data;
 8006c12:	443c      	add	r4, r7
 8006c14:	613a      	str	r2, [r7, #16]
 8006c16:	7625      	strb	r5, [r4, #24]
	if (handler->bytes_left > 1) {
 8006c18:	dc54      	bgt.n	8006cc4 <packet_process_byte+0xf8>
 * -1: Invalid structure
 * -2: OK so far, but not enough data
 */
static int try_decode_packet(unsigned char *buffer, unsigned int in_len,
		void(*process_func)(unsigned char *data, unsigned int len), int *bytes_left) {
	*bytes_left = 0;
 8006c1a:	2300      	movs	r3, #0
		int res = try_decode_packet(handler->rx_buffer + handler->rx_read_ptr,
 8006c1c:	68fc      	ldr	r4, [r7, #12]
 8006c1e:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8006c22:	f10a 0a18 	add.w	sl, sl, #24
 8006c26:	eb01 020a 	add.w	r2, r1, sl
	data_len++;
 8006c2a:	f108 0801 	add.w	r8, r8, #1
		int res = try_decode_packet(handler->rx_buffer + handler->rx_read_ptr,
 8006c2e:	46d9      	mov	r9, fp
 8006c30:	4645      	mov	r5, r8
 8006c32:	9202      	str	r2, [sp, #8]
 8006c34:	4414      	add	r4, r2
	*bytes_left = 0;
 8006c36:	617b      	str	r3, [r7, #20]
 8006c38:	e037      	b.n	8006caa <packet_process_byte+0xde>
#else
#define is_len_24b false
#endif

	// No valid start byte
	if (!is_len_8b && !is_len_16b && !is_len_24b) {
 8006c3a:	2803      	cmp	r0, #3
 8006c3c:	d13d      	bne.n	8006cba <packet_process_byte+0xee>
		return -1;
	}

	// Not enough data to determine length
	if (in_len < data_start) {
 8006c3e:	2d02      	cmp	r5, #2
 8006c40:	d960      	bls.n	8006d04 <packet_process_byte+0x138>
		// No support for zero length packets
		if (len < 1) {
			return -1;
		}
	} else if (is_len_16b) {
		len = (unsigned int)buffer[1] << 8 | (unsigned int)buffer[2];
 8006c42:	f8b4 1001 	ldrh.w	r1, [r4, #1]
 8006c46:	ba49      	rev16	r1, r1
 8006c48:	b289      	uxth	r1, r1

		// A shorter packet should use less length bytes
		if (len < 255) {
 8006c4a:	f1a1 03ff 	sub.w	r3, r1, #255	; 0xff
 8006c4e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8006c52:	d232      	bcs.n	8006cba <packet_process_byte+0xee>
	if (len > PACKET_MAX_PL_LEN) {
		return -1;
	}

	// Need more data to determine rest of packet
	if (in_len < (len + data_start + 3)) {
 8006c54:	eb00 0801 	add.w	r8, r0, r1
 8006c58:	f108 0a03 	add.w	sl, r8, #3
 8006c5c:	45aa      	cmp	sl, r5
 8006c5e:	d85f      	bhi.n	8006d20 <packet_process_byte+0x154>
		*bytes_left = (len + data_start + 3) - in_len;
		return -2;
	}

	// Invalid stop byte
	if (buffer[data_start + len + 2] != 3) {
 8006c60:	eb04 0b08 	add.w	fp, r4, r8
 8006c64:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8006c68:	2b03      	cmp	r3, #3
 8006c6a:	d126      	bne.n	8006cba <packet_process_byte+0xee>
		return -1;
	}

	unsigned short crc_calc = crc16(buffer + data_start, len);
 8006c6c:	1826      	adds	r6, r4, r0
 8006c6e:	4630      	mov	r0, r6
 8006c70:	9101      	str	r1, [sp, #4]
 8006c72:	f7ff ff37 	bl	8006ae4 <crc16>
	unsigned short crc_rx = (unsigned short)buffer[data_start + len] << 8
 8006c76:	f814 4008 	ldrb.w	r4, [r4, r8]
							| (unsigned short)buffer[data_start + len + 1];
 8006c7a:	f89b 3001 	ldrb.w	r3, [fp, #1]

	if (crc_calc == crc_rx) {
 8006c7e:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8006c82:	4298      	cmp	r0, r3
 8006c84:	d119      	bne.n	8006cba <packet_process_byte+0xee>
		if (process_func) {
 8006c86:	f1b9 0f00 	cmp.w	r9, #0
 8006c8a:	d002      	beq.n	8006c92 <packet_process_byte+0xc6>
			process_func(buffer + data_start, len);
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	9901      	ldr	r1, [sp, #4]
 8006c90:	47c8      	blx	r9
			handler->rx_read_ptr += res;
 8006c92:	68fc      	ldr	r4, [r7, #12]
			data_len -= res;
 8006c94:	eba5 050a 	sub.w	r5, r5, sl
			handler->rx_read_ptr += res;
 8006c98:	4454      	add	r4, sl
 8006c9a:	60fc      	str	r4, [r7, #12]
	*bytes_left = 0;
 8006c9c:	2300      	movs	r3, #0
		int res = try_decode_packet(handler->rx_buffer + handler->rx_read_ptr,
 8006c9e:	9a02      	ldr	r2, [sp, #8]
 8006ca0:	f8d7 9008 	ldr.w	r9, [r7, #8]
 8006ca4:	4414      	add	r4, r2
	*bytes_left = 0;
 8006ca6:	617b      	str	r3, [r7, #20]
	if (in_len == 0) {
 8006ca8:	b32d      	cbz	r5, 8006cf6 <packet_process_byte+0x12a>
	bool is_len_8b = buffer[0] == 2;
 8006caa:	7820      	ldrb	r0, [r4, #0]
	if (!is_len_8b && !is_len_16b && !is_len_24b) {
 8006cac:	2802      	cmp	r0, #2
 8006cae:	d1c4      	bne.n	8006c3a <packet_process_byte+0x6e>
	if (in_len < data_start) {
 8006cb0:	2d01      	cmp	r5, #1
 8006cb2:	d927      	bls.n	8006d04 <packet_process_byte+0x138>
		len = (unsigned int)buffer[1];
 8006cb4:	7861      	ldrb	r1, [r4, #1]
		if (len < 1) {
 8006cb6:	2900      	cmp	r1, #0
 8006cb8:	d1cc      	bne.n	8006c54 <packet_process_byte+0x88>
			handler->rx_read_ptr++;
 8006cba:	68fc      	ldr	r4, [r7, #12]
			data_len--;
 8006cbc:	3d01      	subs	r5, #1
			handler->rx_read_ptr++;
 8006cbe:	3401      	adds	r4, #1
 8006cc0:	60fc      	str	r4, [r7, #12]
			data_len--;
 8006cc2:	e7eb      	b.n	8006c9c <packet_process_byte+0xd0>
		handler->bytes_left--;
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	617b      	str	r3, [r7, #20]
}
 8006cc8:	b005      	add	sp, #20
 8006cca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memmove(handler->rx_buffer,
 8006cce:	4a1a      	ldr	r2, [pc, #104]	; (8006d38 <packet_process_byte+0x16c>)
 8006cd0:	3318      	adds	r3, #24
 8006cd2:	18d0      	adds	r0, r2, r3
 8006cd4:	4401      	add	r1, r0
 8006cd6:	4642      	mov	r2, r8
 8006cd8:	f007 fc6c 	bl	800e5b4 <memmove>
		handler->rx_read_ptr = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	4644      	mov	r4, r8
 8006ce0:	60f3      	str	r3, [r6, #12]
		handler->rx_write_ptr = data_len;
 8006ce2:	e78b      	b.n	8006bfc <packet_process_byte+0x30>
		handler->rx_read_ptr = 0;
 8006ce4:	2300      	movs	r3, #0
		handler->rx_buffer[handler->rx_write_ptr++] = rx_data;
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	7635      	strb	r5, [r6, #24]
 8006cea:	e9c6 2304 	strd	r2, r3, [r6, #16]
		handler->rx_read_ptr = 0;
 8006cee:	60f3      	str	r3, [r6, #12]
}
 8006cf0:	b005      	add	sp, #20
 8006cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*bytes_left = 1;
 8006cf6:	2201      	movs	r2, #1
		handler->rx_write_ptr = 0;
 8006cf8:	e9c7 5503 	strd	r5, r5, [r7, #12]
		*bytes_left = 1;
 8006cfc:	617a      	str	r2, [r7, #20]
}
 8006cfe:	b005      	add	sp, #20
 8006d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*bytes_left = data_start - in_len;
 8006d04:	9a03      	ldr	r2, [sp, #12]
 8006d06:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8006d0a:	4611      	mov	r1, r2
 8006d0c:	46a8      	mov	r8, r5
 8006d0e:	4606      	mov	r6, r0
 8006d10:	4a09      	ldr	r2, [pc, #36]	; (8006d38 <packet_process_byte+0x16c>)
 8006d12:	eba6 0608 	sub.w	r6, r6, r8
 8006d16:	fb03 2b01 	mla	fp, r3, r1, r2
 8006d1a:	f8cb 6014 	str.w	r6, [fp, #20]
		if (res == -2) {
 8006d1e:	e7d3      	b.n	8006cc8 <packet_process_byte+0xfc>
		*bytes_left = (len + data_start + 3) - in_len;
 8006d20:	9a03      	ldr	r2, [sp, #12]
 8006d22:	f44f 6385 	mov.w	r3, #1064	; 0x428
 8006d26:	4611      	mov	r1, r2
 8006d28:	4a03      	ldr	r2, [pc, #12]	; (8006d38 <packet_process_byte+0x16c>)
 8006d2a:	ebaa 0505 	sub.w	r5, sl, r5
 8006d2e:	fb03 2b01 	mla	fp, r3, r1, r2
 8006d32:	f8cb 5014 	str.w	r5, [fp, #20]
		if (res == -2) {
 8006d36:	e7c7      	b.n	8006cc8 <packet_process_byte+0xfc>
 8006d38:	20000968 	.word	0x20000968

08006d3c <terminal_process_string>:
#include "VescDatatypes.h"
#include "VescCommand.h"



void terminal_process_string(char *str) {
 8006d3c:	b570      	push	{r4, r5, r6, lr}
	enum { kMaxArgs = 16 };
	int argc = 0;
	char *argv[kMaxArgs];

	char *p2 = strtok(str, " ");
 8006d3e:	4913      	ldr	r1, [pc, #76]	; (8006d8c <terminal_process_string+0x50>)
void terminal_process_string(char *str) {
 8006d40:	b090      	sub	sp, #64	; 0x40
	char *p2 = strtok(str, " ");
 8006d42:	f007 fce7 	bl	800e714 <strtok>
	while (p2 && argc < kMaxArgs) {
 8006d46:	b1d0      	cbz	r0, 8006d7e <terminal_process_string+0x42>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	466c      	mov	r4, sp
		argv[argc++] = p2;
		p2 = strtok(0, " ");
 8006d4c:	4d0f      	ldr	r5, [pc, #60]	; (8006d8c <terminal_process_string+0x50>)
 8006d4e:	ae10      	add	r6, sp, #64	; 0x40
 8006d50:	4629      	mov	r1, r5
 8006d52:	2000      	movs	r0, #0
		argv[argc++] = p2;
 8006d54:	f844 3b04 	str.w	r3, [r4], #4
		p2 = strtok(0, " ");
 8006d58:	f007 fcdc 	bl	800e714 <strtok>
	while (p2 && argc < kMaxArgs) {
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	b108      	cbz	r0, 8006d64 <terminal_process_string+0x28>
 8006d60:	42a6      	cmp	r6, r4
 8006d62:	d1f5      	bne.n	8006d50 <terminal_process_string+0x14>
	if (argc == 0) {
		commands_printf("No command received\n");
		return;
	}

	if (strcmp(argv[0], "ping") == 0) {
 8006d64:	490a      	ldr	r1, [pc, #40]	; (8006d90 <terminal_process_string+0x54>)
 8006d66:	9800      	ldr	r0, [sp, #0]
 8006d68:	f7f9 f9f2 	bl	8000150 <strcmp>
 8006d6c:	b108      	cbz	r0, 8006d72 <terminal_process_string+0x36>
		commands_printf("pong\n");
	}
}
 8006d6e:	b010      	add	sp, #64	; 0x40
 8006d70:	bd70      	pop	{r4, r5, r6, pc}
		commands_printf("pong\n");
 8006d72:	4808      	ldr	r0, [pc, #32]	; (8006d94 <terminal_process_string+0x58>)
}
 8006d74:	b010      	add	sp, #64	; 0x40
 8006d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		commands_printf("pong\n");
 8006d7a:	f7fc bd6b 	b.w	8003854 <commands_printf>
		commands_printf("No command received\n");
 8006d7e:	4806      	ldr	r0, [pc, #24]	; (8006d98 <terminal_process_string+0x5c>)
}
 8006d80:	b010      	add	sp, #64	; 0x40
 8006d82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		commands_printf("pong\n");
 8006d86:	f7fc bd65 	b.w	8003854 <commands_printf>
 8006d8a:	bf00      	nop
 8006d8c:	08010d38 	.word	0x08010d38
 8006d90:	08010d54 	.word	0x08010d54
 8006d94:	08010d5c 	.word	0x08010d5c
 8006d98:	08010d3c 	.word	0x08010d3c
 8006d9c:	00000000 	.word	0x00000000

08006da0 <tune_mcpwm_foc_hall_detect>:
 *
 * @return
 * true: Success
 * false: Something went wrong
 */
bool tune_mcpwm_foc_hall_detect(float current, uint8_t *hall_table) {
 8006da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int old_phase_shift = HALL_M1.PhaseShift;
	HALL_M1.PhaseShift = 0;


	for (int i = 0;i < 1000;i++) {
		currComp.q = current_to_torque((float)i * current / 1000.0);
 8006da4:	f20f 29d8 	addw	r9, pc, #728	; 0x2d8
 8006da8:	e9d9 8900 	ldrd	r8, r9, [r9]
	float ret = curr_ma * CURRENT_FACTOR_mA;
 8006dac:	a7b6      	add	r7, pc, #728	; (adr r7, 8007088 <tune_mcpwm_foc_hall_detect+0x2e8>)
 8006dae:	e9d7 6700 	ldrd	r6, r7, [r7]
bool tune_mcpwm_foc_hall_detect(float current, uint8_t *hall_table) {
 8006db2:	b09f      	sub	sp, #124	; 0x7c
 8006db4:	4683      	mov	fp, r0
	VescToSTM_enable_timeout(false);
 8006db6:	2000      	movs	r0, #0
bool tune_mcpwm_foc_hall_detect(float current, uint8_t *hall_table) {
 8006db8:	9102      	str	r1, [sp, #8]
	VescToSTM_enable_timeout(false);
 8006dba:	f7fd fee7 	bl	8004b8c <VescToSTM_enable_timeout>
	MCI_ExecTorqueRamp(pMCI[M1], 0, 0);
 8006dbe:	2200      	movs	r2, #0
	for (int i = 0;i < 1000;i++) {
 8006dc0:	4614      	mov	r4, r2
	MCI_ExecTorqueRamp(pMCI[M1], 0, 0);
 8006dc2:	4db7      	ldr	r5, [pc, #732]	; (80070a0 <tune_mcpwm_foc_hall_detect+0x300>)
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	6828      	ldr	r0, [r5, #0]
 8006dc8:	f7fb fdb6 	bl	8002938 <MCI_ExecTorqueRamp>
	int old_phase_shift = HALL_M1.PhaseShift;
 8006dcc:	f8df a2d4 	ldr.w	sl, [pc, #724]	; 80070a4 <tune_mcpwm_foc_hall_detect+0x304>
	MCI_StartMotor( pMCI[M1] );
 8006dd0:	6828      	ldr	r0, [r5, #0]
 8006dd2:	f7fb fdc5 	bl	8002960 <MCI_StartMotor>
	VescToSTM_set_open_loop(true, 0, 0);
 8006dd6:	4622      	mov	r2, r4
 8006dd8:	4621      	mov	r1, r4
 8006dda:	2001      	movs	r0, #1
	currComp.d = 0;
 8006ddc:	f8ad 4012 	strh.w	r4, [sp, #18]
	VescToSTM_set_open_loop(true, 0, 0);
 8006de0:	f7fd fe38 	bl	8004a54 <VescToSTM_set_open_loop>
	int old_phase_shift = HALL_M1.PhaseShift;
 8006de4:	f9ba 302a 	ldrsh.w	r3, [sl, #42]	; 0x2a
	HALL_M1.PhaseShift = 0;
 8006de8:	f8aa 402a 	strh.w	r4, [sl, #42]	; 0x2a
	int old_phase_shift = HALL_M1.PhaseShift;
 8006dec:	9303      	str	r3, [sp, #12]
		currComp.q = current_to_torque((float)i * current / 1000.0);
 8006dee:	4620      	mov	r0, r4
 8006df0:	f7f9 ff60 	bl	8000cb4 <__aeabi_i2f>
 8006df4:	4659      	mov	r1, fp
 8006df6:	f7f9 ffb1 	bl	8000d5c <__aeabi_fmul>
 8006dfa:	f7f9 fb17 	bl	800042c <__aeabi_f2d>
 8006dfe:	4642      	mov	r2, r8
 8006e00:	464b      	mov	r3, r9
 8006e02:	f7f9 fb6b 	bl	80004dc <__aeabi_dmul>
 8006e06:	f7f9 fe03 	bl	8000a10 <__aeabi_d2iz>
	float ret = curr_ma * CURRENT_FACTOR_mA;
 8006e0a:	f7f9 fafd 	bl	8000408 <__aeabi_i2d>
 8006e0e:	4632      	mov	r2, r6
 8006e10:	463b      	mov	r3, r7
 8006e12:	f7f9 fb63 	bl	80004dc <__aeabi_dmul>
 8006e16:	f7f9 fe43 	bl	8000aa0 <__aeabi_d2f>
	return ret;
 8006e1a:	f7fa f97b 	bl	8001114 <__aeabi_f2iz>
 8006e1e:	f8ad 0010 	strh.w	r0, [sp, #16]
		MCI_SetCurrentReferences(pMCI[M1],currComp);
 8006e22:	9904      	ldr	r1, [sp, #16]
 8006e24:	6828      	ldr	r0, [r5, #0]
 8006e26:	f7fb fd91 	bl	800294c <MCI_SetCurrentReferences>
	for (int i = 0;i < 1000;i++) {
 8006e2a:	3401      	adds	r4, #1
		vTaskDelay(pdMS_TO_TICKS(1));
 8006e2c:	2001      	movs	r0, #1
 8006e2e:	f006 fe09 	bl	800da44 <vTaskDelay>
	for (int i = 0;i < 1000;i++) {
 8006e32:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8006e36:	d1da      	bne.n	8006dee <tune_mcpwm_foc_hall_detect+0x4e>
	}

	float sin_hall[8];
	float cos_hall[8];
	int hall_iterations[8];
	memset(sin_hall, 0, sizeof(sin_hall));
 8006e38:	2220      	movs	r2, #32
	memset(hall_iterations, 0, sizeof(hall_iterations));

	// Forwards
	for (int i = 0;i < 3;i++) {
		for (int j = 0;j < 360;j++) {
			float m_phase_now_override = (float)j * M_PI / 180.0;
 8006e3a:	a795      	add	r7, pc, #596	; (adr r7, 8007090 <tune_mcpwm_foc_hall_detect+0x2f0>)
 8006e3c:	e9d7 6700 	ldrd	r6, r7, [r7]
	memset(sin_hall, 0, sizeof(sin_hall));
 8006e40:	2100      	movs	r1, #0
 8006e42:	a806      	add	r0, sp, #24
 8006e44:	f007 fbd0 	bl	800e5e8 <memset>
	memset(cos_hall, 0, sizeof(cos_hall));
 8006e48:	2220      	movs	r2, #32
 8006e4a:	2100      	movs	r1, #0
 8006e4c:	a80e      	add	r0, sp, #56	; 0x38
 8006e4e:	f007 fbcb 	bl	800e5e8 <memset>
	memset(hall_iterations, 0, sizeof(hall_iterations));
 8006e52:	2220      	movs	r2, #32
 8006e54:	2100      	movs	r1, #0
 8006e56:	a816      	add	r0, sp, #88	; 0x58
 8006e58:	f007 fbc6 	bl	800e5e8 <memset>
 8006e5c:	2303      	movs	r3, #3
 8006e5e:	9301      	str	r3, [sp, #4]
	for (int i = 0;i < 1000;i++) {
 8006e60:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
 8006e64:	f04f 0b00 	mov.w	fp, #0
		for (int j = 0;j < 360;j++) {
 8006e68:	f04f 0800 	mov.w	r8, #0
 8006e6c:	e012      	b.n	8006e94 <tune_mcpwm_foc_hall_detect+0xf4>
 8006e6e:	4640      	mov	r0, r8
 8006e70:	f7f9 ff20 	bl	8000cb4 <__aeabi_i2f>
 8006e74:	f7f9 fada 	bl	800042c <__aeabi_f2d>
 8006e78:	4632      	mov	r2, r6
 8006e7a:	463b      	mov	r3, r7
 8006e7c:	f7f9 fb2e 	bl	80004dc <__aeabi_dmul>
 8006e80:	f7f9 fe0e 	bl	8000aa0 <__aeabi_d2f>
 8006e84:	4604      	mov	r4, r0
 8006e86:	f008 fca9 	bl	800f7dc <sinf>
 8006e8a:	4683      	mov	fp, r0
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f008 fc71 	bl	800f774 <cosf>
 8006e92:	4681      	mov	r9, r0
			pMCI[M1]->pSTC->SPD->open_angle = 65536.0 / (2 *M_PI) * m_phase_now_override;
 8006e94:	682b      	ldr	r3, [r5, #0]
			float m_phase_now_override = (float)j * M_PI / 180.0;
 8006e96:	4640      	mov	r0, r8
			pMCI[M1]->pSTC->SPD->open_angle = 65536.0 / (2 *M_PI) * m_phase_now_override;
 8006e98:	685b      	ldr	r3, [r3, #4]
		for (int j = 0;j < 360;j++) {
 8006e9a:	f108 0801 	add.w	r8, r8, #1
			pMCI[M1]->pSTC->SPD->open_angle = 65536.0 / (2 *M_PI) * m_phase_now_override;
 8006e9e:	695c      	ldr	r4, [r3, #20]
			float m_phase_now_override = (float)j * M_PI / 180.0;
 8006ea0:	f7f9 ff08 	bl	8000cb4 <__aeabi_i2f>
 8006ea4:	f7f9 fac2 	bl	800042c <__aeabi_f2d>
 8006ea8:	4632      	mov	r2, r6
 8006eaa:	463b      	mov	r3, r7
 8006eac:	f7f9 fb16 	bl	80004dc <__aeabi_dmul>
 8006eb0:	f7f9 fdf6 	bl	8000aa0 <__aeabi_d2f>
			pMCI[M1]->pSTC->SPD->open_angle = 65536.0 / (2 *M_PI) * m_phase_now_override;
 8006eb4:	f7f9 faba 	bl	800042c <__aeabi_f2d>
 8006eb8:	a377      	add	r3, pc, #476	; (adr r3, 8007098 <tune_mcpwm_foc_hall_detect+0x2f8>)
 8006eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebe:	f7f9 fb0d 	bl	80004dc <__aeabi_dmul>
 8006ec2:	f7f9 fda5 	bl	8000a10 <__aeabi_d2iz>
 8006ec6:	4603      	mov	r3, r0
			vTaskDelay(pdMS_TO_TICKS(5));
 8006ec8:	2005      	movs	r0, #5
			pMCI[M1]->pSTC->SPD->open_angle = 65536.0 / (2 *M_PI) * m_phase_now_override;
 8006eca:	8463      	strh	r3, [r4, #34]	; 0x22
			vTaskDelay(pdMS_TO_TICKS(5));
 8006ecc:	f006 fdba 	bl	800da44 <vTaskDelay>
			int hall = HALL_M1.HallState;
 8006ed0:	f89a 40ae 	ldrb.w	r4, [sl, #174]	; 0xae
			sin_hall[hall] += sinf(m_phase_now_override);
 8006ed4:	ab1e      	add	r3, sp, #120	; 0x78
 8006ed6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006eda:	4659      	mov	r1, fp
 8006edc:	f854 0c60 	ldr.w	r0, [r4, #-96]
 8006ee0:	f7f9 fe34 	bl	8000b4c <__addsf3>
 8006ee4:	4603      	mov	r3, r0
			cos_hall[hall] += cosf(m_phase_now_override);
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	f854 0c40 	ldr.w	r0, [r4, #-64]
			sin_hall[hall] += sinf(m_phase_now_override);
 8006eec:	f844 3c60 	str.w	r3, [r4, #-96]
			cos_hall[hall] += cosf(m_phase_now_override);
 8006ef0:	f7f9 fe2c 	bl	8000b4c <__addsf3>
			hall_iterations[hall]++;
 8006ef4:	f854 3c20 	ldr.w	r3, [r4, #-32]
		for (int j = 0;j < 360;j++) {
 8006ef8:	f5b8 7fb4 	cmp.w	r8, #360	; 0x168
			hall_iterations[hall]++;
 8006efc:	f103 0301 	add.w	r3, r3, #1
			cos_hall[hall] += cosf(m_phase_now_override);
 8006f00:	f844 0c40 	str.w	r0, [r4, #-64]
			hall_iterations[hall]++;
 8006f04:	f844 3c20 	str.w	r3, [r4, #-32]
		for (int j = 0;j < 360;j++) {
 8006f08:	d1b1      	bne.n	8006e6e <tune_mcpwm_foc_hall_detect+0xce>
	for (int i = 0;i < 3;i++) {
 8006f0a:	9b01      	ldr	r3, [sp, #4]
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	9301      	str	r3, [sp, #4]
 8006f10:	d1a6      	bne.n	8006e60 <tune_mcpwm_foc_hall_detect+0xc0>
	}

	// Reverse
	for (int i = 0;i < 3;i++) {
		for (int j = 360;j >= 0;j--) {
			float m_phase_now_override = (float)j * M_PI / 180.0;
 8006f12:	a75f      	add	r7, pc, #380	; (adr r7, 8007090 <tune_mcpwm_foc_hall_detect+0x2f0>)
 8006f14:	e9d7 6700 	ldrd	r6, r7, [r7]
 8006f18:	2303      	movs	r3, #3
 8006f1a:	9301      	str	r3, [sp, #4]
		for (int j = 360;j >= 0;j--) {
 8006f1c:	f44f 74b4 	mov.w	r4, #360	; 0x168
 8006f20:	f04f 597e 	mov.w	r9, #1065353216	; 0x3f800000
 8006f24:	f8df b180 	ldr.w	fp, [pc, #384]	; 80070a8 <tune_mcpwm_foc_hall_detect+0x308>
 8006f28:	e012      	b.n	8006f50 <tune_mcpwm_foc_hall_detect+0x1b0>
 8006f2a:	4620      	mov	r0, r4
 8006f2c:	f7f9 fec2 	bl	8000cb4 <__aeabi_i2f>
 8006f30:	f7f9 fa7c 	bl	800042c <__aeabi_f2d>
 8006f34:	4632      	mov	r2, r6
 8006f36:	463b      	mov	r3, r7
 8006f38:	f7f9 fad0 	bl	80004dc <__aeabi_dmul>
 8006f3c:	f7f9 fdb0 	bl	8000aa0 <__aeabi_d2f>
 8006f40:	4680      	mov	r8, r0
 8006f42:	f008 fc4b 	bl	800f7dc <sinf>
 8006f46:	4683      	mov	fp, r0
 8006f48:	4640      	mov	r0, r8
 8006f4a:	f008 fc13 	bl	800f774 <cosf>
 8006f4e:	4681      	mov	r9, r0
			pMCI[M1]->pSTC->SPD->open_angle =65536.0 / (2 *M_PI) * m_phase_now_override;
 8006f50:	682b      	ldr	r3, [r5, #0]
			float m_phase_now_override = (float)j * M_PI / 180.0;
 8006f52:	4620      	mov	r0, r4
			pMCI[M1]->pSTC->SPD->open_angle =65536.0 / (2 *M_PI) * m_phase_now_override;
 8006f54:	685b      	ldr	r3, [r3, #4]
		for (int j = 360;j >= 0;j--) {
 8006f56:	3c01      	subs	r4, #1
			pMCI[M1]->pSTC->SPD->open_angle =65536.0 / (2 *M_PI) * m_phase_now_override;
 8006f58:	f8d3 8014 	ldr.w	r8, [r3, #20]
			float m_phase_now_override = (float)j * M_PI / 180.0;
 8006f5c:	f7f9 feaa 	bl	8000cb4 <__aeabi_i2f>
 8006f60:	f7f9 fa64 	bl	800042c <__aeabi_f2d>
 8006f64:	4632      	mov	r2, r6
 8006f66:	463b      	mov	r3, r7
 8006f68:	f7f9 fab8 	bl	80004dc <__aeabi_dmul>
 8006f6c:	f7f9 fd98 	bl	8000aa0 <__aeabi_d2f>
			pMCI[M1]->pSTC->SPD->open_angle =65536.0 / (2 *M_PI) * m_phase_now_override;
 8006f70:	f7f9 fa5c 	bl	800042c <__aeabi_f2d>
 8006f74:	a348      	add	r3, pc, #288	; (adr r3, 8007098 <tune_mcpwm_foc_hall_detect+0x2f8>)
 8006f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7a:	f7f9 faaf 	bl	80004dc <__aeabi_dmul>
 8006f7e:	f7f9 fd47 	bl	8000a10 <__aeabi_d2iz>
 8006f82:	4603      	mov	r3, r0
			vTaskDelay(pdMS_TO_TICKS(5));
 8006f84:	2005      	movs	r0, #5
			pMCI[M1]->pSTC->SPD->open_angle =65536.0 / (2 *M_PI) * m_phase_now_override;
 8006f86:	f8a8 3022 	strh.w	r3, [r8, #34]	; 0x22
			vTaskDelay(pdMS_TO_TICKS(5));
 8006f8a:	f006 fd5b 	bl	800da44 <vTaskDelay>
			int hall = HALL_M1.HallState;
 8006f8e:	f89a 80ae 	ldrb.w	r8, [sl, #174]	; 0xae
			sin_hall[hall] += sinf(m_phase_now_override);
 8006f92:	ab1e      	add	r3, sp, #120	; 0x78
 8006f94:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 8006f98:	4659      	mov	r1, fp
 8006f9a:	f858 0c60 	ldr.w	r0, [r8, #-96]
 8006f9e:	f7f9 fdd5 	bl	8000b4c <__addsf3>
 8006fa2:	4603      	mov	r3, r0
			cos_hall[hall] += cosf(m_phase_now_override);
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	f858 0c40 	ldr.w	r0, [r8, #-64]
			sin_hall[hall] += sinf(m_phase_now_override);
 8006faa:	f848 3c60 	str.w	r3, [r8, #-96]
			cos_hall[hall] += cosf(m_phase_now_override);
 8006fae:	f7f9 fdcd 	bl	8000b4c <__addsf3>
			hall_iterations[hall]++;
 8006fb2:	f858 3c20 	ldr.w	r3, [r8, #-32]
			cos_hall[hall] += cosf(m_phase_now_override);
 8006fb6:	f848 0c40 	str.w	r0, [r8, #-64]
			hall_iterations[hall]++;
 8006fba:	3301      	adds	r3, #1
 8006fbc:	f848 3c20 	str.w	r3, [r8, #-32]
		for (int j = 360;j >= 0;j--) {
 8006fc0:	1c63      	adds	r3, r4, #1
 8006fc2:	d1b2      	bne.n	8006f2a <tune_mcpwm_foc_hall_detect+0x18a>
	for (int i = 0;i < 3;i++) {
 8006fc4:	9b01      	ldr	r3, [sp, #4]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	9301      	str	r3, [sp, #4]
 8006fca:	d1a7      	bne.n	8006f1c <tune_mcpwm_foc_hall_detect+0x17c>
		}
	}


	currComp.q = 0;
 8006fcc:	461e      	mov	r6, r3
 8006fce:	f8ad 3010 	strh.w	r3, [sp, #16]
	MCI_SetCurrentReferences(pMCI[M1],currComp);
 8006fd2:	6828      	ldr	r0, [r5, #0]
 8006fd4:	9904      	ldr	r1, [sp, #16]
 8006fd6:	f7fb fcb9 	bl	800294c <MCI_SetCurrentReferences>
	VescToSTM_set_open_loop(false, 0, 0);
 8006fda:	4632      	mov	r2, r6
 8006fdc:	4631      	mov	r1, r6
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f7fd fd38 	bl	8004a54 <VescToSTM_set_open_loop>

	int fails = 0;
	for(int i = 0;i < 8;i++) {
		if (hall_iterations[i] > 30) {
 8006fe4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006fe6:	2b1e      	cmp	r3, #30
 8006fe8:	dc60      	bgt.n	80070ac <tune_mcpwm_foc_hall_detect+0x30c>
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
			utils_norm_angle(&ang);
			hall_table[i] = (uint8_t)(ang * 255.0 / 360.0);
		} else {
			hall_table[i] = 255;
 8006fea:	9b02      	ldr	r3, [sp, #8]
 8006fec:	701c      	strb	r4, [r3, #0]
		if (hall_iterations[i] > 30) {
 8006fee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
			fails++;
 8006ff0:	2401      	movs	r4, #1
		if (hall_iterations[i] > 30) {
 8006ff2:	2b1e      	cmp	r3, #30
 8006ff4:	dc7c      	bgt.n	80070f0 <tune_mcpwm_foc_hall_detect+0x350>
			hall_table[i] = 255;
 8006ff6:	23ff      	movs	r3, #255	; 0xff
 8006ff8:	9a02      	ldr	r2, [sp, #8]
			fails++;
 8006ffa:	3401      	adds	r4, #1
			hall_table[i] = 255;
 8006ffc:	7053      	strb	r3, [r2, #1]
		if (hall_iterations[i] > 30) {
 8006ffe:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007000:	2b1e      	cmp	r3, #30
 8007002:	f300 8097 	bgt.w	8007134 <tune_mcpwm_foc_hall_detect+0x394>
			hall_table[i] = 255;
 8007006:	23ff      	movs	r3, #255	; 0xff
 8007008:	9a02      	ldr	r2, [sp, #8]
			fails++;
 800700a:	3401      	adds	r4, #1
			hall_table[i] = 255;
 800700c:	7093      	strb	r3, [r2, #2]
		if (hall_iterations[i] > 30) {
 800700e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007010:	2b1e      	cmp	r3, #30
 8007012:	f300 80b1 	bgt.w	8007178 <tune_mcpwm_foc_hall_detect+0x3d8>
			hall_table[i] = 255;
 8007016:	23ff      	movs	r3, #255	; 0xff
 8007018:	9a02      	ldr	r2, [sp, #8]
			fails++;
 800701a:	3401      	adds	r4, #1
			hall_table[i] = 255;
 800701c:	70d3      	strb	r3, [r2, #3]
		if (hall_iterations[i] > 30) {
 800701e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007020:	2b1e      	cmp	r3, #30
 8007022:	f300 80cb 	bgt.w	80071bc <tune_mcpwm_foc_hall_detect+0x41c>
			hall_table[i] = 255;
 8007026:	23ff      	movs	r3, #255	; 0xff
 8007028:	9a02      	ldr	r2, [sp, #8]
			fails++;
 800702a:	3401      	adds	r4, #1
			hall_table[i] = 255;
 800702c:	7113      	strb	r3, [r2, #4]
		if (hall_iterations[i] > 30) {
 800702e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007030:	2b1e      	cmp	r3, #30
 8007032:	f300 80e5 	bgt.w	8007200 <tune_mcpwm_foc_hall_detect+0x460>
			hall_table[i] = 255;
 8007036:	23ff      	movs	r3, #255	; 0xff
 8007038:	9a02      	ldr	r2, [sp, #8]
			fails++;
 800703a:	3401      	adds	r4, #1
			hall_table[i] = 255;
 800703c:	7153      	strb	r3, [r2, #5]
		if (hall_iterations[i] > 30) {
 800703e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007040:	2b1e      	cmp	r3, #30
 8007042:	f300 80ff 	bgt.w	8007244 <tune_mcpwm_foc_hall_detect+0x4a4>
			hall_table[i] = 255;
 8007046:	23ff      	movs	r3, #255	; 0xff
 8007048:	9a02      	ldr	r2, [sp, #8]
			fails++;
 800704a:	3401      	adds	r4, #1
			hall_table[i] = 255;
 800704c:	7193      	strb	r3, [r2, #6]
		if (hall_iterations[i] > 30) {
 800704e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007050:	2b1e      	cmp	r3, #30
 8007052:	f300 8119 	bgt.w	8007288 <tune_mcpwm_foc_hall_detect+0x4e8>
			hall_table[i] = 255;
 8007056:	23ff      	movs	r3, #255	; 0xff
 8007058:	9a02      	ldr	r2, [sp, #8]
			fails++;
 800705a:	3401      	adds	r4, #1
			hall_table[i] = 255;
 800705c:	71d3      	strb	r3, [r2, #7]
		}
	}
	HALL_M1.PhaseShift = old_phase_shift;
 800705e:	9b03      	ldr	r3, [sp, #12]
	VescToSTM_enable_timeout(true);
 8007060:	2001      	movs	r0, #1
	HALL_M1.PhaseShift = old_phase_shift;
 8007062:	f8aa 302a 	strh.w	r3, [sl, #42]	; 0x2a
	VescToSTM_enable_timeout(true);
 8007066:	f7fd fd91 	bl	8004b8c <VescToSTM_enable_timeout>
	return fails == 2;
}
 800706a:	f1a4 0002 	sub.w	r0, r4, #2
 800706e:	fab0 f080 	clz	r0, r0
 8007072:	0940      	lsrs	r0, r0, #5
 8007074:	b01f      	add	sp, #124	; 0x7c
 8007076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707a:	bf00      	nop
 800707c:	f3af 8000 	nop.w
 8007080:	d2f1a9fc 	.word	0xd2f1a9fc
 8007084:	3f50624d 	.word	0x3f50624d
 8007088:	35bd512f 	.word	0x35bd512f
 800708c:	3fd455b0 	.word	0x3fd455b0
 8007090:	a2529d39 	.word	0xa2529d39
 8007094:	3f91df46 	.word	0x3f91df46
 8007098:	6dc9c883 	.word	0x6dc9c883
 800709c:	40c45f30 	.word	0x40c45f30
 80070a0:	200033ac 	.word	0x200033ac
 80070a4:	200000b4 	.word	0x200000b4
 80070a8:	343bbd2e 	.word	0x343bbd2e
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 80070ac:	990e      	ldr	r1, [sp, #56]	; 0x38
 80070ae:	9806      	ldr	r0, [sp, #24]
 80070b0:	f008 fbca 	bl	800f848 <atan2f>
 80070b4:	f7f9 f9ba 	bl	800042c <__aeabi_f2d>
 80070b8:	a383      	add	r3, pc, #524	; (adr r3, 80072c8 <tune_mcpwm_foc_hall_detect+0x528>)
 80070ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070be:	f7f9 fa0d 	bl	80004dc <__aeabi_dmul>
 80070c2:	f7f9 fced 	bl	8000aa0 <__aeabi_d2f>
 80070c6:	4603      	mov	r3, r0
			utils_norm_angle(&ang);
 80070c8:	a805      	add	r0, sp, #20
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 80070ca:	9305      	str	r3, [sp, #20]
			utils_norm_angle(&ang);
 80070cc:	f000 fec0 	bl	8007e50 <utils_norm_angle>
			hall_table[i] = (uint8_t)(ang * 255.0 / 360.0);
 80070d0:	9805      	ldr	r0, [sp, #20]
 80070d2:	f7f9 f9ab 	bl	800042c <__aeabi_f2d>
 80070d6:	a37e      	add	r3, pc, #504	; (adr r3, 80072d0 <tune_mcpwm_foc_hall_detect+0x530>)
 80070d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070dc:	f7f9 f9fe 	bl	80004dc <__aeabi_dmul>
 80070e0:	f7f9 fcbe 	bl	8000a60 <__aeabi_d2uiz>
 80070e4:	e9dd 4301 	ldrd	r4, r3, [sp, #4]
 80070e8:	7018      	strb	r0, [r3, #0]
		if (hall_iterations[i] > 30) {
 80070ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80070ec:	2b1e      	cmp	r3, #30
 80070ee:	dd82      	ble.n	8006ff6 <tune_mcpwm_foc_hall_detect+0x256>
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 80070f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80070f2:	9807      	ldr	r0, [sp, #28]
 80070f4:	f008 fba8 	bl	800f848 <atan2f>
 80070f8:	f7f9 f998 	bl	800042c <__aeabi_f2d>
 80070fc:	a372      	add	r3, pc, #456	; (adr r3, 80072c8 <tune_mcpwm_foc_hall_detect+0x528>)
 80070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007102:	f7f9 f9eb 	bl	80004dc <__aeabi_dmul>
 8007106:	f7f9 fccb 	bl	8000aa0 <__aeabi_d2f>
 800710a:	4603      	mov	r3, r0
			utils_norm_angle(&ang);
 800710c:	a805      	add	r0, sp, #20
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 800710e:	9305      	str	r3, [sp, #20]
			utils_norm_angle(&ang);
 8007110:	f000 fe9e 	bl	8007e50 <utils_norm_angle>
			hall_table[i] = (uint8_t)(ang * 255.0 / 360.0);
 8007114:	9805      	ldr	r0, [sp, #20]
 8007116:	f7f9 f989 	bl	800042c <__aeabi_f2d>
 800711a:	a36d      	add	r3, pc, #436	; (adr r3, 80072d0 <tune_mcpwm_foc_hall_detect+0x530>)
 800711c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007120:	f7f9 f9dc 	bl	80004dc <__aeabi_dmul>
 8007124:	f7f9 fc9c 	bl	8000a60 <__aeabi_d2uiz>
 8007128:	9b02      	ldr	r3, [sp, #8]
 800712a:	7058      	strb	r0, [r3, #1]
		if (hall_iterations[i] > 30) {
 800712c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800712e:	2b1e      	cmp	r3, #30
 8007130:	f77f af69 	ble.w	8007006 <tune_mcpwm_foc_hall_detect+0x266>
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 8007134:	9910      	ldr	r1, [sp, #64]	; 0x40
 8007136:	9808      	ldr	r0, [sp, #32]
 8007138:	f008 fb86 	bl	800f848 <atan2f>
 800713c:	f7f9 f976 	bl	800042c <__aeabi_f2d>
 8007140:	a361      	add	r3, pc, #388	; (adr r3, 80072c8 <tune_mcpwm_foc_hall_detect+0x528>)
 8007142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007146:	f7f9 f9c9 	bl	80004dc <__aeabi_dmul>
 800714a:	f7f9 fca9 	bl	8000aa0 <__aeabi_d2f>
 800714e:	4603      	mov	r3, r0
			utils_norm_angle(&ang);
 8007150:	a805      	add	r0, sp, #20
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 8007152:	9305      	str	r3, [sp, #20]
			utils_norm_angle(&ang);
 8007154:	f000 fe7c 	bl	8007e50 <utils_norm_angle>
			hall_table[i] = (uint8_t)(ang * 255.0 / 360.0);
 8007158:	9805      	ldr	r0, [sp, #20]
 800715a:	f7f9 f967 	bl	800042c <__aeabi_f2d>
 800715e:	a35c      	add	r3, pc, #368	; (adr r3, 80072d0 <tune_mcpwm_foc_hall_detect+0x530>)
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f7f9 f9ba 	bl	80004dc <__aeabi_dmul>
 8007168:	f7f9 fc7a 	bl	8000a60 <__aeabi_d2uiz>
 800716c:	9b02      	ldr	r3, [sp, #8]
 800716e:	7098      	strb	r0, [r3, #2]
		if (hall_iterations[i] > 30) {
 8007170:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007172:	2b1e      	cmp	r3, #30
 8007174:	f77f af4f 	ble.w	8007016 <tune_mcpwm_foc_hall_detect+0x276>
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 8007178:	9911      	ldr	r1, [sp, #68]	; 0x44
 800717a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800717c:	f008 fb64 	bl	800f848 <atan2f>
 8007180:	f7f9 f954 	bl	800042c <__aeabi_f2d>
 8007184:	a350      	add	r3, pc, #320	; (adr r3, 80072c8 <tune_mcpwm_foc_hall_detect+0x528>)
 8007186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718a:	f7f9 f9a7 	bl	80004dc <__aeabi_dmul>
 800718e:	f7f9 fc87 	bl	8000aa0 <__aeabi_d2f>
 8007192:	4603      	mov	r3, r0
			utils_norm_angle(&ang);
 8007194:	a805      	add	r0, sp, #20
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 8007196:	9305      	str	r3, [sp, #20]
			utils_norm_angle(&ang);
 8007198:	f000 fe5a 	bl	8007e50 <utils_norm_angle>
			hall_table[i] = (uint8_t)(ang * 255.0 / 360.0);
 800719c:	9805      	ldr	r0, [sp, #20]
 800719e:	f7f9 f945 	bl	800042c <__aeabi_f2d>
 80071a2:	a34b      	add	r3, pc, #300	; (adr r3, 80072d0 <tune_mcpwm_foc_hall_detect+0x530>)
 80071a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a8:	f7f9 f998 	bl	80004dc <__aeabi_dmul>
 80071ac:	f7f9 fc58 	bl	8000a60 <__aeabi_d2uiz>
 80071b0:	9b02      	ldr	r3, [sp, #8]
 80071b2:	70d8      	strb	r0, [r3, #3]
		if (hall_iterations[i] > 30) {
 80071b4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80071b6:	2b1e      	cmp	r3, #30
 80071b8:	f77f af35 	ble.w	8007026 <tune_mcpwm_foc_hall_detect+0x286>
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 80071bc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80071be:	980a      	ldr	r0, [sp, #40]	; 0x28
 80071c0:	f008 fb42 	bl	800f848 <atan2f>
 80071c4:	f7f9 f932 	bl	800042c <__aeabi_f2d>
 80071c8:	a33f      	add	r3, pc, #252	; (adr r3, 80072c8 <tune_mcpwm_foc_hall_detect+0x528>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f7f9 f985 	bl	80004dc <__aeabi_dmul>
 80071d2:	f7f9 fc65 	bl	8000aa0 <__aeabi_d2f>
 80071d6:	4603      	mov	r3, r0
			utils_norm_angle(&ang);
 80071d8:	a805      	add	r0, sp, #20
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 80071da:	9305      	str	r3, [sp, #20]
			utils_norm_angle(&ang);
 80071dc:	f000 fe38 	bl	8007e50 <utils_norm_angle>
			hall_table[i] = (uint8_t)(ang * 255.0 / 360.0);
 80071e0:	9805      	ldr	r0, [sp, #20]
 80071e2:	f7f9 f923 	bl	800042c <__aeabi_f2d>
 80071e6:	a33a      	add	r3, pc, #232	; (adr r3, 80072d0 <tune_mcpwm_foc_hall_detect+0x530>)
 80071e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ec:	f7f9 f976 	bl	80004dc <__aeabi_dmul>
 80071f0:	f7f9 fc36 	bl	8000a60 <__aeabi_d2uiz>
 80071f4:	9b02      	ldr	r3, [sp, #8]
 80071f6:	7118      	strb	r0, [r3, #4]
		if (hall_iterations[i] > 30) {
 80071f8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071fa:	2b1e      	cmp	r3, #30
 80071fc:	f77f af1b 	ble.w	8007036 <tune_mcpwm_foc_hall_detect+0x296>
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 8007200:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007202:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007204:	f008 fb20 	bl	800f848 <atan2f>
 8007208:	f7f9 f910 	bl	800042c <__aeabi_f2d>
 800720c:	a32e      	add	r3, pc, #184	; (adr r3, 80072c8 <tune_mcpwm_foc_hall_detect+0x528>)
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f7f9 f963 	bl	80004dc <__aeabi_dmul>
 8007216:	f7f9 fc43 	bl	8000aa0 <__aeabi_d2f>
 800721a:	4603      	mov	r3, r0
			utils_norm_angle(&ang);
 800721c:	a805      	add	r0, sp, #20
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 800721e:	9305      	str	r3, [sp, #20]
			utils_norm_angle(&ang);
 8007220:	f000 fe16 	bl	8007e50 <utils_norm_angle>
			hall_table[i] = (uint8_t)(ang * 255.0 / 360.0);
 8007224:	9805      	ldr	r0, [sp, #20]
 8007226:	f7f9 f901 	bl	800042c <__aeabi_f2d>
 800722a:	a329      	add	r3, pc, #164	; (adr r3, 80072d0 <tune_mcpwm_foc_hall_detect+0x530>)
 800722c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007230:	f7f9 f954 	bl	80004dc <__aeabi_dmul>
 8007234:	f7f9 fc14 	bl	8000a60 <__aeabi_d2uiz>
 8007238:	9b02      	ldr	r3, [sp, #8]
 800723a:	7158      	strb	r0, [r3, #5]
		if (hall_iterations[i] > 30) {
 800723c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800723e:	2b1e      	cmp	r3, #30
 8007240:	f77f af01 	ble.w	8007046 <tune_mcpwm_foc_hall_detect+0x2a6>
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 8007244:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007246:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007248:	f008 fafe 	bl	800f848 <atan2f>
 800724c:	f7f9 f8ee 	bl	800042c <__aeabi_f2d>
 8007250:	a31d      	add	r3, pc, #116	; (adr r3, 80072c8 <tune_mcpwm_foc_hall_detect+0x528>)
 8007252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007256:	f7f9 f941 	bl	80004dc <__aeabi_dmul>
 800725a:	f7f9 fc21 	bl	8000aa0 <__aeabi_d2f>
 800725e:	4603      	mov	r3, r0
			utils_norm_angle(&ang);
 8007260:	a805      	add	r0, sp, #20
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 8007262:	9305      	str	r3, [sp, #20]
			utils_norm_angle(&ang);
 8007264:	f000 fdf4 	bl	8007e50 <utils_norm_angle>
			hall_table[i] = (uint8_t)(ang * 255.0 / 360.0);
 8007268:	9805      	ldr	r0, [sp, #20]
 800726a:	f7f9 f8df 	bl	800042c <__aeabi_f2d>
 800726e:	a318      	add	r3, pc, #96	; (adr r3, 80072d0 <tune_mcpwm_foc_hall_detect+0x530>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f7f9 f932 	bl	80004dc <__aeabi_dmul>
 8007278:	f7f9 fbf2 	bl	8000a60 <__aeabi_d2uiz>
 800727c:	9b02      	ldr	r3, [sp, #8]
 800727e:	7198      	strb	r0, [r3, #6]
		if (hall_iterations[i] > 30) {
 8007280:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007282:	2b1e      	cmp	r3, #30
 8007284:	f77f aee7 	ble.w	8007056 <tune_mcpwm_foc_hall_detect+0x2b6>
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 8007288:	9915      	ldr	r1, [sp, #84]	; 0x54
 800728a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800728c:	f008 fadc 	bl	800f848 <atan2f>
 8007290:	f7f9 f8cc 	bl	800042c <__aeabi_f2d>
 8007294:	a30c      	add	r3, pc, #48	; (adr r3, 80072c8 <tune_mcpwm_foc_hall_detect+0x528>)
 8007296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729a:	f7f9 f91f 	bl	80004dc <__aeabi_dmul>
 800729e:	f7f9 fbff 	bl	8000aa0 <__aeabi_d2f>
 80072a2:	4603      	mov	r3, r0
			utils_norm_angle(&ang);
 80072a4:	a805      	add	r0, sp, #20
			float ang = atan2f(sin_hall[i], cos_hall[i]) * 180.0 / M_PI;
 80072a6:	9305      	str	r3, [sp, #20]
			utils_norm_angle(&ang);
 80072a8:	f000 fdd2 	bl	8007e50 <utils_norm_angle>
			hall_table[i] = (uint8_t)(ang * 255.0 / 360.0);
 80072ac:	9805      	ldr	r0, [sp, #20]
 80072ae:	f7f9 f8bd 	bl	800042c <__aeabi_f2d>
 80072b2:	a307      	add	r3, pc, #28	; (adr r3, 80072d0 <tune_mcpwm_foc_hall_detect+0x530>)
 80072b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b8:	f7f9 f910 	bl	80004dc <__aeabi_dmul>
 80072bc:	f7f9 fbd0 	bl	8000a60 <__aeabi_d2uiz>
 80072c0:	9b02      	ldr	r3, [sp, #8]
 80072c2:	71d8      	strb	r0, [r3, #7]
 80072c4:	e6cb      	b.n	800705e <tune_mcpwm_foc_hall_detect+0x2be>
 80072c6:	bf00      	nop
 80072c8:	1a63c1f8 	.word	0x1a63c1f8
 80072cc:	404ca5dc 	.word	0x404ca5dc
 80072d0:	aaaaaaab 	.word	0xaaaaaaab
 80072d4:	3fe6aaaa 	.word	0x3fe6aaaa

080072d8 <tune_foc_measure_resistance>:
 * to run this function again right away, without stopping the motor in between.
 *
 * @return
 * The calculated motor resistance.
 */
float tune_foc_measure_resistance(float current, int samples) {
 80072d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int old_phase_shift = HALL_M1.PhaseShift;
	HALL_M1.PhaseShift = 0;


	for (int i = 0;i < 1000;i++) {
		currComp.q = current_to_torque((float)i * current / 1000.0);
 80072dc:	f20f 19e0 	addw	r9, pc, #480	; 0x1e0
 80072e0:	e9d9 8900 	ldrd	r8, r9, [r9]
	float ret = curr_ma * CURRENT_FACTOR_mA;
 80072e4:	a778      	add	r7, pc, #480	; (adr r7, 80074c8 <tune_foc_measure_resistance+0x1f0>)
 80072e6:	e9d7 6700 	ldrd	r6, r7, [r7]
float tune_foc_measure_resistance(float current, int samples) {
 80072ea:	b085      	sub	sp, #20
 80072ec:	468b      	mov	fp, r1
	current *= 1000; //A to mA
 80072ee:	497c      	ldr	r1, [pc, #496]	; (80074e0 <tune_foc_measure_resistance+0x208>)
 80072f0:	f7f9 fd34 	bl	8000d5c <__aeabi_fmul>
 80072f4:	4682      	mov	sl, r0
	VescToSTM_enable_timeout(false);
 80072f6:	2000      	movs	r0, #0
 80072f8:	f7fd fc48 	bl	8004b8c <VescToSTM_enable_timeout>
	MCI_ExecTorqueRamp(pMCI[M1], 0, 0);
 80072fc:	2200      	movs	r2, #0
	for (int i = 0;i < 1000;i++) {
 80072fe:	4614      	mov	r4, r2
	MCI_ExecTorqueRamp(pMCI[M1], 0, 0);
 8007300:	4d78      	ldr	r5, [pc, #480]	; (80074e4 <tune_foc_measure_resistance+0x20c>)
 8007302:	4611      	mov	r1, r2
 8007304:	6828      	ldr	r0, [r5, #0]
 8007306:	f7fb fb17 	bl	8002938 <MCI_ExecTorqueRamp>
	MCI_StartMotor( pMCI[M1] );
 800730a:	6828      	ldr	r0, [r5, #0]
 800730c:	f7fb fb28 	bl	8002960 <MCI_StartMotor>
	VescToSTM_set_open_loop(true, 0, 0);
 8007310:	4622      	mov	r2, r4
 8007312:	4621      	mov	r1, r4
 8007314:	2001      	movs	r0, #1
	currComp.d = 0;
 8007316:	f8ad 400e 	strh.w	r4, [sp, #14]
	VescToSTM_set_open_loop(true, 0, 0);
 800731a:	f7fd fb9b 	bl	8004a54 <VescToSTM_set_open_loop>
	int old_phase_shift = HALL_M1.PhaseShift;
 800731e:	4b72      	ldr	r3, [pc, #456]	; (80074e8 <tune_foc_measure_resistance+0x210>)
 8007320:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
	HALL_M1.PhaseShift = 0;
 8007324:	855c      	strh	r4, [r3, #42]	; 0x2a
	int old_phase_shift = HALL_M1.PhaseShift;
 8007326:	9201      	str	r2, [sp, #4]
		currComp.q = current_to_torque((float)i * current / 1000.0);
 8007328:	4620      	mov	r0, r4
 800732a:	f7f9 fcc3 	bl	8000cb4 <__aeabi_i2f>
 800732e:	4651      	mov	r1, sl
 8007330:	f7f9 fd14 	bl	8000d5c <__aeabi_fmul>
 8007334:	f7f9 f87a 	bl	800042c <__aeabi_f2d>
 8007338:	4642      	mov	r2, r8
 800733a:	464b      	mov	r3, r9
 800733c:	f7f9 f8ce 	bl	80004dc <__aeabi_dmul>
 8007340:	f7f9 fb66 	bl	8000a10 <__aeabi_d2iz>
	float ret = curr_ma * CURRENT_FACTOR_mA;
 8007344:	f7f9 f860 	bl	8000408 <__aeabi_i2d>
 8007348:	4632      	mov	r2, r6
 800734a:	463b      	mov	r3, r7
 800734c:	f7f9 f8c6 	bl	80004dc <__aeabi_dmul>
 8007350:	f7f9 fba6 	bl	8000aa0 <__aeabi_d2f>
	return ret;
 8007354:	f7f9 fede 	bl	8001114 <__aeabi_f2iz>
 8007358:	f8ad 000c 	strh.w	r0, [sp, #12]
		MCI_SetCurrentReferences(pMCI[M1],currComp);
 800735c:	9903      	ldr	r1, [sp, #12]
 800735e:	6828      	ldr	r0, [r5, #0]
 8007360:	f7fb faf4 	bl	800294c <MCI_SetCurrentReferences>
	for (int i = 0;i < 1000;i++) {
 8007364:	3401      	adds	r4, #1
		vTaskDelay(pdMS_TO_TICKS(1));
 8007366:	2001      	movs	r0, #1
 8007368:	f006 fb6c 	bl	800da44 <vTaskDelay>
	for (int i = 0;i < 1000;i++) {
 800736c:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8007370:	d1da      	bne.n	8007328 <tune_foc_measure_resistance+0x50>
	}

	// Wait for the current to rise and the motor to lock.
	vTaskDelay(pdMS_TO_TICKS(200));
 8007372:	20c8      	movs	r0, #200	; 0xc8
 8007374:	f006 fb66 	bl	800da44 <vTaskDelay>

	// Sample
	pMCI[M1]->pFOCVars->Vq_sum = 0;
 8007378:	2100      	movs	r1, #0
 800737a:	682a      	ldr	r2, [r5, #0]
	pMCI[M1]->pFOCVars->Iq_samples = 0;
	pMCI[M1]->pFOCVars->Id_sum = 0;
	pMCI[M1]->pFOCVars->Id_samples = 0;

	int cnt = 0;
	while (pMCI[M1]->pFOCVars->Vq_samples < samples) {
 800737c:	460b      	mov	r3, r1
	pMCI[M1]->pFOCVars->Vq_sum = 0;
 800737e:	6892      	ldr	r2, [r2, #8]
	while (pMCI[M1]->pFOCVars->Vq_samples < samples) {
 8007380:	f242 7411 	movw	r4, #10001	; 0x2711
	pMCI[M1]->pFOCVars->Vq_sum = 0;
 8007384:	6391      	str	r1, [r2, #56]	; 0x38
	pMCI[M1]->pFOCVars->Vq_samples = 0;
 8007386:	8791      	strh	r1, [r2, #60]	; 0x3c
	pMCI[M1]->pFOCVars->Vd_sum = 0;
 8007388:	6411      	str	r1, [r2, #64]	; 0x40
	pMCI[M1]->pFOCVars->Vd_samples = 0;
 800738a:	f8a2 1044 	strh.w	r1, [r2, #68]	; 0x44
	pMCI[M1]->pFOCVars->Iq_sum = 0;
 800738e:	6291      	str	r1, [r2, #40]	; 0x28
	pMCI[M1]->pFOCVars->Iq_samples = 0;
 8007390:	8591      	strh	r1, [r2, #44]	; 0x2c
	pMCI[M1]->pFOCVars->Id_sum = 0;
 8007392:	6311      	str	r1, [r2, #48]	; 0x30
	pMCI[M1]->pFOCVars->Id_samples = 0;
 8007394:	8691      	strh	r1, [r2, #52]	; 0x34
	while (pMCI[M1]->pFOCVars->Vq_samples < samples) {
 8007396:	e007      	b.n	80073a8 <tune_foc_measure_resistance+0xd0>
		vTaskDelay(1);
 8007398:	2001      	movs	r0, #1
 800739a:	f006 fb53 	bl	800da44 <vTaskDelay>
		cnt++;
		// Timeout
		if (cnt > 10000) {
 800739e:	682b      	ldr	r3, [r5, #0]
 80073a0:	3c01      	subs	r4, #1
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
 80073a6:	d001      	beq.n	80073ac <tune_foc_measure_resistance+0xd4>
	while (pMCI[M1]->pFOCVars->Vq_samples < samples) {
 80073a8:	455b      	cmp	r3, fp
 80073aa:	dbf5      	blt.n	8007398 <tune_foc_measure_resistance+0xc0>
			break;
		}
	}
	int32_t Vq = pMCI[M1]->pFOCVars->Vq_sum / pMCI[M1]->pFOCVars->Vq_samples;
	int32_t Vd = pMCI[M1]->pFOCVars->Vd_sum / pMCI[M1]->pFOCVars->Vd_samples;
 80073ac:	f8b2 4044 	ldrh.w	r4, [r2, #68]	; 0x44
 80073b0:	6c16      	ldr	r6, [r2, #64]	; 0x40
	int32_t Iq = pMCI[M1]->pFOCVars->Iq_sum / pMCI[M1]->pFOCVars->Iq_samples;
	int32_t Id = pMCI[M1]->pFOCVars->Id_sum / pMCI[M1]->pFOCVars->Id_samples;
 80073b2:	8e91      	ldrh	r1, [r2, #52]	; 0x34
	int32_t Vq = pMCI[M1]->pFOCVars->Vq_sum / pMCI[M1]->pFOCVars->Vq_samples;
 80073b4:	6b95      	ldr	r5, [r2, #56]	; 0x38
	int32_t Iq = pMCI[M1]->pFOCVars->Iq_sum / pMCI[M1]->pFOCVars->Iq_samples;
 80073b6:	8d90      	ldrh	r0, [r2, #44]	; 0x2c
 80073b8:	6a97      	ldr	r7, [r2, #40]	; 0x28
	int32_t Id = pMCI[M1]->pFOCVars->Id_sum / pMCI[M1]->pFOCVars->Id_samples;
 80073ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
	int32_t Vq = pMCI[M1]->pFOCVars->Vq_sum / pMCI[M1]->pFOCVars->Vq_samples;
 80073bc:	fb95 f5f3 	sdiv	r5, r5, r3
	int32_t Id = pMCI[M1]->pFOCVars->Id_sum / pMCI[M1]->pFOCVars->Id_samples;
 80073c0:	fb92 f8f1 	sdiv	r8, r2, r1
	int32_t Iq = pMCI[M1]->pFOCVars->Iq_sum / pMCI[M1]->pFOCVars->Iq_samples;
 80073c4:	fb97 f7f0 	sdiv	r7, r7, r0

	float Vin = VescToSTM_get_bus_voltage();
 80073c8:	f7fd fe62 	bl	8005090 <VescToSTM_get_bus_voltage>
	float fVq = Vin / 32768.0 * (float)Vq;
 80073cc:	f7f9 f82e 	bl	800042c <__aeabi_f2d>
 80073d0:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80073d4:	2200      	movs	r2, #0
 80073d6:	f7f9 f881 	bl	80004dc <__aeabi_dmul>
 80073da:	4602      	mov	r2, r0
	int32_t Vd = pMCI[M1]->pFOCVars->Vd_sum / pMCI[M1]->pFOCVars->Vd_samples;
 80073dc:	fb96 f9f4 	sdiv	r9, r6, r4
	float fVq = Vin / 32768.0 * (float)Vq;
 80073e0:	4628      	mov	r0, r5
 80073e2:	4614      	mov	r4, r2
 80073e4:	460d      	mov	r5, r1
 80073e6:	f7f9 fc65 	bl	8000cb4 <__aeabi_i2f>
 80073ea:	f7f9 f81f 	bl	800042c <__aeabi_f2d>
 80073ee:	4622      	mov	r2, r4
 80073f0:	462b      	mov	r3, r5
 80073f2:	f7f9 f873 	bl	80004dc <__aeabi_dmul>
 80073f6:	f7f9 fb53 	bl	8000aa0 <__aeabi_d2f>
 80073fa:	4606      	mov	r6, r0
	float fVd = Vin / 32768.0 * (float)Vd;
 80073fc:	4648      	mov	r0, r9
 80073fe:	f7f9 fc59 	bl	8000cb4 <__aeabi_i2f>
 8007402:	f7f9 f813 	bl	800042c <__aeabi_f2d>
 8007406:	4622      	mov	r2, r4
 8007408:	462b      	mov	r3, r5
 800740a:	f7f9 f867 	bl	80004dc <__aeabi_dmul>
 800740e:	f7f9 fb47 	bl	8000aa0 <__aeabi_d2f>
 8007412:	4604      	mov	r4, r0
	float fIq = (float)Iq / CURRENT_FACTOR_A;
 8007414:	4638      	mov	r0, r7
 8007416:	f7f9 fc4d 	bl	8000cb4 <__aeabi_i2f>
 800741a:	f7f9 f807 	bl	800042c <__aeabi_f2d>
 800741e:	a32c      	add	r3, pc, #176	; (adr r3, 80074d0 <tune_foc_measure_resistance+0x1f8>)
 8007420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007424:	f7f9 f85a 	bl	80004dc <__aeabi_dmul>
 8007428:	f7f9 fb3a 	bl	8000aa0 <__aeabi_d2f>
 800742c:	4607      	mov	r7, r0
	float fId = (float)Id / CURRENT_FACTOR_A;
 800742e:	4640      	mov	r0, r8
 8007430:	f7f9 fc40 	bl	8000cb4 <__aeabi_i2f>
 8007434:	f7f8 fffa 	bl	800042c <__aeabi_f2d>
 8007438:	a325      	add	r3, pc, #148	; (adr r3, 80074d0 <tune_foc_measure_resistance+0x1f8>)
 800743a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743e:	f7f9 f84d 	bl	80004dc <__aeabi_dmul>
 8007442:	f7f9 fb2d 	bl	8000aa0 <__aeabi_d2f>
 8007446:	4605      	mov	r5, r0

	float current_avg = sqrtf(SQ(fIq) + SQ(fId));
 8007448:	4639      	mov	r1, r7
 800744a:	4638      	mov	r0, r7
 800744c:	f7f9 fc86 	bl	8000d5c <__aeabi_fmul>
 8007450:	4629      	mov	r1, r5
 8007452:	4605      	mov	r5, r0
 8007454:	4608      	mov	r0, r1
 8007456:	f7f9 fc81 	bl	8000d5c <__aeabi_fmul>
 800745a:	4601      	mov	r1, r0
 800745c:	4628      	mov	r0, r5
 800745e:	f7f9 fb75 	bl	8000b4c <__addsf3>
 8007462:	f008 fa1b 	bl	800f89c <sqrtf>
	float voltage_avg = sqrtf(SQ(fVq) + SQ(fVd));
 8007466:	4631      	mov	r1, r6
	float current_avg = sqrtf(SQ(fIq) + SQ(fId));
 8007468:	4605      	mov	r5, r0
	float voltage_avg = sqrtf(SQ(fVq) + SQ(fVd));
 800746a:	4630      	mov	r0, r6
 800746c:	f7f9 fc76 	bl	8000d5c <__aeabi_fmul>
 8007470:	4621      	mov	r1, r4
 8007472:	4604      	mov	r4, r0
 8007474:	4608      	mov	r0, r1
 8007476:	f7f9 fc71 	bl	8000d5c <__aeabi_fmul>
 800747a:	4601      	mov	r1, r0
 800747c:	4620      	mov	r0, r4
 800747e:	f7f9 fb65 	bl	8000b4c <__addsf3>
 8007482:	f008 fa0b 	bl	800f89c <sqrtf>

	// UnLock the motor
	VescToSTM_set_open_loop(false, 0, 0);
 8007486:	2200      	movs	r2, #0
	float voltage_avg = sqrtf(SQ(fVq) + SQ(fVd));
 8007488:	4604      	mov	r4, r0
	VescToSTM_set_open_loop(false, 0, 0);
 800748a:	4611      	mov	r1, r2
 800748c:	4610      	mov	r0, r2
 800748e:	f7fd fae1 	bl	8004a54 <VescToSTM_set_open_loop>
	HALL_M1.PhaseShift = old_phase_shift;
 8007492:	9a01      	ldr	r2, [sp, #4]
 8007494:	4b14      	ldr	r3, [pc, #80]	; (80074e8 <tune_foc_measure_resistance+0x210>)

	// Enable timeout
	VescToSTM_enable_timeout(true);
 8007496:	2001      	movs	r0, #1
	HALL_M1.PhaseShift = old_phase_shift;
 8007498:	855a      	strh	r2, [r3, #42]	; 0x2a
	VescToSTM_enable_timeout(true);
 800749a:	f7fd fb77 	bl	8004b8c <VescToSTM_enable_timeout>

	return (voltage_avg / current_avg) / (SQRT_3) / 2.0;
 800749e:	4629      	mov	r1, r5
 80074a0:	4620      	mov	r0, r4
 80074a2:	f7f9 fd0f 	bl	8000ec4 <__aeabi_fdiv>
 80074a6:	f7f8 ffc1 	bl	800042c <__aeabi_f2d>
 80074aa:	a30b      	add	r3, pc, #44	; (adr r3, 80074d8 <tune_foc_measure_resistance+0x200>)
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f7f9 f814 	bl	80004dc <__aeabi_dmul>
 80074b4:	f7f9 faf4 	bl	8000aa0 <__aeabi_d2f>
}
 80074b8:	b005      	add	sp, #20
 80074ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074be:	bf00      	nop
 80074c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80074c4:	3f50624d 	.word	0x3f50624d
 80074c8:	35bd512f 	.word	0x35bd512f
 80074cc:	3fd455b0 	.word	0x3fd455b0
 80074d0:	f7441b6d 	.word	0xf7441b6d
 80074d4:	3f69c86b 	.word	0x3f69c86b
 80074d8:	ca32d863 	.word	0xca32d863
 80074dc:	3fd279ca 	.word	0x3fd279ca
 80074e0:	447a0000 	.word	0x447a0000
 80074e4:	200033ac 	.word	0x200033ac
 80074e8:	200000b4 	.word	0x200000b4
 80074ec:	00000000 	.word	0x00000000

080074f0 <tune_foc_measure_inductance>:
 * @return
 * The calculated motor resistance.
 */
extern PID_Handle_t *pPIDIq[NBR_OF_MOTORS];
extern PID_Handle_t *pPIDId[NBR_OF_MOTORS];
float tune_foc_measure_inductance(float voltage, float * used_current, uint32_t samples) {
 80074f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f4:	b089      	sub	sp, #36	; 0x24
 80074f6:	4605      	mov	r5, r0
 80074f8:	4691      	mov	r9, r2
 80074fa:	9105      	str	r1, [sp, #20]

	float voltage_calc = 32768.0 / VescToSTM_get_bus_voltage() * voltage;
 80074fc:	f7fd fdc8 	bl	8005090 <VescToSTM_get_bus_voltage>
 8007500:	4604      	mov	r4, r0
 8007502:	4628      	mov	r0, r5
 8007504:	f7f8 ff92 	bl	800042c <__aeabi_f2d>
 8007508:	4602      	mov	r2, r0
 800750a:	460d      	mov	r5, r1
 800750c:	4620      	mov	r0, r4
 800750e:	4614      	mov	r4, r2
 8007510:	e9cd 4500 	strd	r4, r5, [sp]
 8007514:	f7f8 ff8a 	bl	800042c <__aeabi_f2d>
 8007518:	4602      	mov	r2, r0
 800751a:	460b      	mov	r3, r1
 800751c:	2000      	movs	r0, #0
 800751e:	496c      	ldr	r1, [pc, #432]	; (80076d0 <tune_foc_measure_inductance+0x1e0>)
 8007520:	f7f9 f906 	bl	8000730 <__aeabi_ddiv>
 8007524:	462b      	mov	r3, r5
 8007526:	4622      	mov	r2, r4
 8007528:	f7f8 ffd8 	bl	80004dc <__aeabi_dmul>
 800752c:	f7f9 fab8 	bl	8000aa0 <__aeabi_d2f>

	int32_t volt_int = voltage_calc;
 8007530:	f7f9 fdf0 	bl	8001114 <__aeabi_f2iz>
 8007534:	4605      	mov	r5, r0

	// Disable timeout
	VescToSTM_enable_timeout(false);
 8007536:	2000      	movs	r0, #0
 8007538:	f7fd fb28 	bl	8004b8c <VescToSTM_enable_timeout>

	MCI_ExecTorqueRamp(pMCI[M1], 0, 0);
 800753c:	2200      	movs	r2, #0
 800753e:	f8df a1a4 	ldr.w	sl, [pc, #420]	; 80076e4 <tune_foc_measure_inductance+0x1f4>
 8007542:	4611      	mov	r1, r2
 8007544:	f8da 0000 	ldr.w	r0, [sl]
 8007548:	f7fb f9f6 	bl	8002938 <MCI_ExecTorqueRamp>
	MCI_StartMotor( pMCI[M1] );
 800754c:	f8da 0000 	ldr.w	r0, [sl]
 8007550:	f7fb fa06 	bl	8002960 <MCI_StartMotor>


	// Lock the motor
	pMCI[M1]->pSTC->SPD->open_loop = true;
	pMCI[M1]->pSTC->SPD->open_angle =0;
 8007554:	2400      	movs	r4, #0
	pMCI[M1]->pSTC->SPD->open_loop = true;
 8007556:	2301      	movs	r3, #1
 8007558:	f8da 2000 	ldr.w	r2, [sl]
	int old_phase_shift = HALL_M1.PhaseShift;
	HALL_M1.PhaseShift = 0;


	int16_t IqUpperLim = pPIDIq[M1]->hUpperOutputLimit;
 800755c:	4e5d      	ldr	r6, [pc, #372]	; (80076d4 <tune_foc_measure_inductance+0x1e4>)
	pMCI[M1]->pSTC->SPD->open_loop = true;
 800755e:	6852      	ldr	r2, [r2, #4]
	int16_t IqLowerLim = pPIDIq[M1]->hLowerOutputLimit;
	int16_t IdUpperLim = pPIDId[M1]->hUpperOutputLimit;
 8007560:	495d      	ldr	r1, [pc, #372]	; (80076d8 <tune_foc_measure_inductance+0x1e8>)
	pMCI[M1]->pSTC->SPD->open_loop = true;
 8007562:	6952      	ldr	r2, [r2, #20]
	int16_t IdUpperLim = pPIDId[M1]->hUpperOutputLimit;
 8007564:	6809      	ldr	r1, [r1, #0]
	pMCI[M1]->pSTC->SPD->open_loop = true;
 8007566:	f882 3020 	strb.w	r3, [r2, #32]
	pMCI[M1]->pSTC->SPD->open_angle =0;
 800756a:	8454      	strh	r4, [r2, #34]	; 0x22
	int old_phase_shift = HALL_M1.PhaseShift;
 800756c:	4a5b      	ldr	r2, [pc, #364]	; (80076dc <tune_foc_measure_inductance+0x1ec>)
	int16_t IqUpperLim = pPIDIq[M1]->hUpperOutputLimit;
 800756e:	6833      	ldr	r3, [r6, #0]
	int old_phase_shift = HALL_M1.PhaseShift;
 8007570:	f9b2 002a 	ldrsh.w	r0, [r2, #42]	; 0x2a
	HALL_M1.PhaseShift = 0;
 8007574:	8554      	strh	r4, [r2, #42]	; 0x2a
	int16_t IqUpperLim = pPIDIq[M1]->hUpperOutputLimit;
 8007576:	695a      	ldr	r2, [r3, #20]
	int old_phase_shift = HALL_M1.PhaseShift;
 8007578:	9002      	str	r0, [sp, #8]
	int16_t IqUpperLim = pPIDIq[M1]->hUpperOutputLimit;
 800757a:	9203      	str	r2, [sp, #12]
	int16_t IdUpperLim = pPIDId[M1]->hUpperOutputLimit;
 800757c:	694a      	ldr	r2, [r1, #20]
	int16_t IdLowerLim = pPIDId[M1]->hLowerOutputLimit;

	pPIDIq[M1]->hUpperOutputLimit = 0;
	pPIDIq[M1]->hLowerOutputLimit = 0;

	vTaskDelay(pdMS_TO_TICKS(50));
 800757e:	2032      	movs	r0, #50	; 0x32
	pPIDIq[M1]->hUpperOutputLimit = 0;
 8007580:	615c      	str	r4, [r3, #20]
	int16_t IdUpperLim = pPIDId[M1]->hUpperOutputLimit;
 8007582:	9204      	str	r2, [sp, #16]
	vTaskDelay(pdMS_TO_TICKS(50));
 8007584:	f006 fa5e 	bl	800da44 <vTaskDelay>

	int32_t Iq = 0;
	int32_t Id = 0;
	volatile float current_avg=0.0;
 8007588:	2000      	movs	r0, #0
 800758a:	9007      	str	r0, [sp, #28]

	for(uint32_t i=0;i<samples;i++){
 800758c:	f1b9 0f00 	cmp.w	r9, #0
 8007590:	d053      	beq.n	800763a <tune_foc_measure_inductance+0x14a>
	int32_t Id = 0;
 8007592:	4627      	mov	r7, r4
	int32_t Iq = 0;
 8007594:	46a0      	mov	r8, r4
		pPIDIq[M1]->hUpperOutputLimit = volt_int;
		pPIDIq[M1]->hLowerOutputLimit = volt_int;
		vTaskDelay(1);
		Iq += abs(pMCI[M1]->pFOCVars->Iqd.q);
		Id += abs(pMCI[M1]->pFOCVars->Iqd.d);
		pPIDIq[M1]->hUpperOutputLimit = 0;
 8007596:	46a3      	mov	fp, r4
 8007598:	b22d      	sxth	r5, r5
		pPIDIq[M1]->hUpperOutputLimit = volt_int;
 800759a:	2300      	movs	r3, #0
 800759c:	6832      	ldr	r2, [r6, #0]
 800759e:	f365 030f 	bfi	r3, r5, #0, #16
 80075a2:	f365 431f 	bfi	r3, r5, #16, #16
 80075a6:	6153      	str	r3, [r2, #20]
		vTaskDelay(1);
 80075a8:	2001      	movs	r0, #1
 80075aa:	f006 fa4b 	bl	800da44 <vTaskDelay>
		Iq += abs(pMCI[M1]->pFOCVars->Iqd.q);
 80075ae:	f8da 3000 	ldr.w	r3, [sl]
		pPIDIq[M1]->hUpperOutputLimit = 0;
 80075b2:	6832      	ldr	r2, [r6, #0]
		Iq += abs(pMCI[M1]->pFOCVars->Iqd.q);
 80075b4:	689b      	ldr	r3, [r3, #8]
		pPIDIq[M1]->hLowerOutputLimit = 0;
		vTaskDelay(pdMS_TO_TICKS(10));
 80075b6:	200a      	movs	r0, #10
		Iq += abs(pMCI[M1]->pFOCVars->Iqd.q);
 80075b8:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
		Id += abs(pMCI[M1]->pFOCVars->Iqd.d);
 80075bc:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
		Iq += abs(pMCI[M1]->pFOCVars->Iqd.q);
 80075c0:	2900      	cmp	r1, #0
 80075c2:	bfb8      	it	lt
 80075c4:	4249      	neglt	r1, r1
		Id += abs(pMCI[M1]->pFOCVars->Iqd.d);
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	bfb8      	it	lt
 80075ca:	425b      	neglt	r3, r3
		Iq += abs(pMCI[M1]->pFOCVars->Iqd.q);
 80075cc:	b289      	uxth	r1, r1
		Id += abs(pMCI[M1]->pFOCVars->Iqd.d);
 80075ce:	b29b      	uxth	r3, r3
	for(uint32_t i=0;i<samples;i++){
 80075d0:	3401      	adds	r4, #1
		pPIDIq[M1]->hUpperOutputLimit = 0;
 80075d2:	f8c2 b014 	str.w	fp, [r2, #20]
		Iq += abs(pMCI[M1]->pFOCVars->Iqd.q);
 80075d6:	4488      	add	r8, r1
		Id += abs(pMCI[M1]->pFOCVars->Iqd.d);
 80075d8:	441f      	add	r7, r3
		vTaskDelay(pdMS_TO_TICKS(10));
 80075da:	f006 fa33 	bl	800da44 <vTaskDelay>
	for(uint32_t i=0;i<samples;i++){
 80075de:	45a1      	cmp	r9, r4
 80075e0:	d1db      	bne.n	800759a <tune_foc_measure_inductance+0xaa>
 80075e2:	fbb8 f0f9 	udiv	r0, r8, r9
 80075e6:	f7f9 fb65 	bl	8000cb4 <__aeabi_i2f>
 80075ea:	f7f8 ff1f 	bl	800042c <__aeabi_f2d>
 80075ee:	a334      	add	r3, pc, #208	; (adr r3, 80076c0 <tune_foc_measure_inductance+0x1d0>)
 80075f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f4:	f7f8 ff72 	bl	80004dc <__aeabi_dmul>
 80075f8:	f7f9 fa52 	bl	8000aa0 <__aeabi_d2f>
 80075fc:	4604      	mov	r4, r0
 80075fe:	fbb7 f0f9 	udiv	r0, r7, r9
 8007602:	f7f9 fb57 	bl	8000cb4 <__aeabi_i2f>
 8007606:	f7f8 ff11 	bl	800042c <__aeabi_f2d>
 800760a:	a32d      	add	r3, pc, #180	; (adr r3, 80076c0 <tune_foc_measure_inductance+0x1d0>)
 800760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007610:	f7f8 ff64 	bl	80004dc <__aeabi_dmul>
 8007614:	f7f9 fa44 	bl	8000aa0 <__aeabi_d2f>
 8007618:	4603      	mov	r3, r0
 800761a:	4621      	mov	r1, r4
 800761c:	4620      	mov	r0, r4
 800761e:	461c      	mov	r4, r3
 8007620:	f7f9 fb9c 	bl	8000d5c <__aeabi_fmul>
 8007624:	4621      	mov	r1, r4
 8007626:	4604      	mov	r4, r0
 8007628:	4608      	mov	r0, r1
 800762a:	f7f9 fb97 	bl	8000d5c <__aeabi_fmul>
 800762e:	4601      	mov	r1, r0
 8007630:	4620      	mov	r0, r4
 8007632:	f7f9 fa8b 	bl	8000b4c <__addsf3>
 8007636:	f008 f931 	bl	800f89c <sqrtf>
	Iq /= samples;
	Id /= samples;
	float fIq = (float)Iq / CURRENT_FACTOR_A;
	float fId = (float)Id / CURRENT_FACTOR_A;
	current_avg = sqrtf(SQ(fIq) + SQ(fId));
	if(used_current!=NULL){
 800763a:	9a05      	ldr	r2, [sp, #20]
	current_avg = sqrtf(SQ(fIq) + SQ(fId));
 800763c:	9007      	str	r0, [sp, #28]
	if(used_current!=NULL){
 800763e:	b10a      	cbz	r2, 8007644 <tune_foc_measure_inductance+0x154>
		*used_current = current_avg;
 8007640:	9b07      	ldr	r3, [sp, #28]
 8007642:	6013      	str	r3, [r2, #0]
	}

	float inductance = voltage * (0.5e3) / current_avg;
	vTaskDelay(200);
 8007644:	20c8      	movs	r0, #200	; 0xc8
	float inductance = voltage * (0.5e3) / current_avg;
 8007646:	9c07      	ldr	r4, [sp, #28]
	vTaskDelay(200);
 8007648:	f006 f9fc 	bl	800da44 <vTaskDelay>
	// UnLock the motor
	pPIDIq[M1]->hUpperOutputLimit = IqUpperLim;
	pPIDIq[M1]->hLowerOutputLimit = IqLowerLim;
	pPIDId[M1]->hUpperOutputLimit = IdUpperLim;
	pPIDId[M1]->hLowerOutputLimit = IdLowerLim;
	pPIDIq[M1]->wIntegralTerm = 0;
 800764c:	2300      	movs	r3, #0
	pPIDIq[M1]->wPrevProcessVarError = 0;
	pPIDId[M1]->wIntegralTerm = 0;
	pPIDId[M1]->wPrevProcessVarError = 0;
	pMCI[M1]->pSTC->SPD->open_loop = false;
 800764e:	f8da 2000 	ldr.w	r2, [sl]
	pPIDIq[M1]->hUpperOutputLimit = IqUpperLim;
 8007652:	6831      	ldr	r1, [r6, #0]
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8007654:	6850      	ldr	r0, [r2, #4]
	pPIDId[M1]->hUpperOutputLimit = IdUpperLim;
 8007656:	4a20      	ldr	r2, [pc, #128]	; (80076d8 <tune_foc_measure_inductance+0x1e8>)
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8007658:	6945      	ldr	r5, [r0, #20]
	pPIDId[M1]->hUpperOutputLimit = IdUpperLim;
 800765a:	6812      	ldr	r2, [r2, #0]
	pPIDIq[M1]->hUpperOutputLimit = IqUpperLim;
 800765c:	9803      	ldr	r0, [sp, #12]
	pPIDId[M1]->hUpperOutputLimit = IdUpperLim;
 800765e:	9e04      	ldr	r6, [sp, #16]
	pPIDIq[M1]->hUpperOutputLimit = IqUpperLim;
 8007660:	6148      	str	r0, [r1, #20]
	pPIDId[M1]->hUpperOutputLimit = IdUpperLim;
 8007662:	6156      	str	r6, [r2, #20]
	pPIDIq[M1]->wIntegralTerm = 0;
 8007664:	608b      	str	r3, [r1, #8]
	pPIDIq[M1]->wPrevProcessVarError = 0;
 8007666:	628b      	str	r3, [r1, #40]	; 0x28
	pPIDId[M1]->wIntegralTerm = 0;
 8007668:	6093      	str	r3, [r2, #8]
	pPIDId[M1]->wPrevProcessVarError = 0;
 800766a:	6293      	str	r3, [r2, #40]	; 0x28
	pMCI[M1]->pSTC->SPD->open_angle =0;
	HALL_M1.PhaseShift = old_phase_shift;
 800766c:	9a02      	ldr	r2, [sp, #8]
	pMCI[M1]->pSTC->SPD->open_loop = false;
 800766e:	f885 3020 	strb.w	r3, [r5, #32]
	pMCI[M1]->pSTC->SPD->open_angle =0;
 8007672:	846b      	strh	r3, [r5, #34]	; 0x22
	HALL_M1.PhaseShift = old_phase_shift;
 8007674:	4b19      	ldr	r3, [pc, #100]	; (80076dc <tune_foc_measure_inductance+0x1ec>)

	// Enable timeout
	VescToSTM_enable_timeout(true);
 8007676:	2001      	movs	r0, #1
	HALL_M1.PhaseShift = old_phase_shift;
 8007678:	855a      	strh	r2, [r3, #42]	; 0x2a
	VescToSTM_enable_timeout(true);
 800767a:	f7fd fa87 	bl	8004b8c <VescToSTM_enable_timeout>
	float inductance = voltage * (0.5e3) / current_avg;
 800767e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007682:	4b17      	ldr	r3, [pc, #92]	; (80076e0 <tune_foc_measure_inductance+0x1f0>)
 8007684:	2200      	movs	r2, #0
 8007686:	f7f8 ff29 	bl	80004dc <__aeabi_dmul>
 800768a:	4602      	mov	r2, r0
 800768c:	4620      	mov	r0, r4
 800768e:	460d      	mov	r5, r1
 8007690:	4614      	mov	r4, r2
 8007692:	f7f8 fecb 	bl	800042c <__aeabi_f2d>
 8007696:	4602      	mov	r2, r0
 8007698:	460b      	mov	r3, r1
 800769a:	4620      	mov	r0, r4
 800769c:	4629      	mov	r1, r5
 800769e:	f7f9 f847 	bl	8000730 <__aeabi_ddiv>
 80076a2:	f7f9 f9fd 	bl	8000aa0 <__aeabi_d2f>

	return inductance / SQRT_3 / 2.0;
 80076a6:	f7f8 fec1 	bl	800042c <__aeabi_f2d>
 80076aa:	a307      	add	r3, pc, #28	; (adr r3, 80076c8 <tune_foc_measure_inductance+0x1d8>)
 80076ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b0:	f7f8 ff14 	bl	80004dc <__aeabi_dmul>
 80076b4:	f7f9 f9f4 	bl	8000aa0 <__aeabi_d2f>
}
 80076b8:	b009      	add	sp, #36	; 0x24
 80076ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076be:	bf00      	nop
 80076c0:	f7441b6d 	.word	0xf7441b6d
 80076c4:	3f69c86b 	.word	0x3f69c86b
 80076c8:	ca32d863 	.word	0xca32d863
 80076cc:	3fd279ca 	.word	0x3fd279ca
 80076d0:	40e00000 	.word	0x40e00000
 80076d4:	200032c8 	.word	0x200032c8
 80076d8:	200033a4 	.word	0x200033a4
 80076dc:	200000b4 	.word	0x200000b4
 80076e0:	407f4000 	.word	0x407f4000
 80076e4:	200033ac 	.word	0x200033ac

080076e8 <tune_foc_measure_inductance_current>:
 * The current that was used for this measurement.
 *
 * @return
 * The average d and q axis inductance in uH.
 */
float tune_foc_measure_inductance_current(float curr_goal, int samples) {
 80076e8:	230a      	movs	r3, #10
 80076ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	VescToSTM_enable_timeout(false);
 80076ee:	2700      	movs	r7, #0
float tune_foc_measure_inductance_current(float curr_goal, int samples) {
 80076f0:	b08b      	sub	sp, #44	; 0x2c
	float duty_last = 0.0;
	for (float i = 0.2;i < 10.0;i *= 1.5) {
 80076f2:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 80078dc <tune_foc_measure_inductance_current+0x1f4>
 80076f6:	4d74      	ldr	r5, [pc, #464]	; (80078c8 <tune_foc_measure_inductance_current+0x1e0>)
 80076f8:	4e74      	ldr	r6, [pc, #464]	; (80078cc <tune_foc_measure_inductance_current+0x1e4>)
 80076fa:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 80078e0 <tune_foc_measure_inductance_current+0x1f8>
float tune_foc_measure_inductance_current(float curr_goal, int samples) {
 80076fe:	9006      	str	r0, [sp, #24]
 8007700:	9107      	str	r1, [sp, #28]
 8007702:	9301      	str	r3, [sp, #4]
	float voltage_calc = 32768.0 / VescToSTM_get_bus_voltage() * voltage;
 8007704:	f7fd fcc4 	bl	8005090 <VescToSTM_get_bus_voltage>
 8007708:	4604      	mov	r4, r0
	VescToSTM_enable_timeout(false);
 800770a:	2000      	movs	r0, #0
 800770c:	f7fd fa3e 	bl	8004b8c <VescToSTM_enable_timeout>
	MCI_ExecTorqueRamp(pMCI[M1], 0, 0);
 8007710:	2200      	movs	r2, #0
 8007712:	6828      	ldr	r0, [r5, #0]
 8007714:	4611      	mov	r1, r2
 8007716:	f7fb f90f 	bl	8002938 <MCI_ExecTorqueRamp>
	MCI_StartMotor( pMCI[M1] );
 800771a:	6828      	ldr	r0, [r5, #0]
 800771c:	f7fb f920 	bl	8002960 <MCI_StartMotor>
	pMCI[M1]->pSTC->SPD->open_loop = true;
 8007720:	682a      	ldr	r2, [r5, #0]
	int16_t IqUpperLim = pPIDIq[M1]->hUpperOutputLimit;
 8007722:	6833      	ldr	r3, [r6, #0]
	pMCI[M1]->pSTC->SPD->open_loop = true;
 8007724:	6851      	ldr	r1, [r2, #4]
	int16_t IdUpperLim = pPIDId[M1]->hUpperOutputLimit;
 8007726:	f8db 2000 	ldr.w	r2, [fp]
	pMCI[M1]->pSTC->SPD->open_loop = true;
 800772a:	6949      	ldr	r1, [r1, #20]
	int16_t IdUpperLim = pPIDId[M1]->hUpperOutputLimit;
 800772c:	9204      	str	r2, [sp, #16]
	pMCI[M1]->pSTC->SPD->open_loop = true;
 800772e:	f04f 0201 	mov.w	r2, #1
	pMCI[M1]->pSTC->SPD->open_angle =0;
 8007732:	844f      	strh	r7, [r1, #34]	; 0x22
	pMCI[M1]->pSTC->SPD->open_loop = true;
 8007734:	f881 2020 	strb.w	r2, [r1, #32]
	int old_phase_shift = HALL_M1.PhaseShift;
 8007738:	4965      	ldr	r1, [pc, #404]	; (80078d0 <tune_foc_measure_inductance_current+0x1e8>)
	vTaskDelay(pdMS_TO_TICKS(50));
 800773a:	2032      	movs	r0, #50	; 0x32
	int old_phase_shift = HALL_M1.PhaseShift;
 800773c:	f9b1 202a 	ldrsh.w	r2, [r1, #42]	; 0x2a
	HALL_M1.PhaseShift = 0;
 8007740:	854f      	strh	r7, [r1, #42]	; 0x2a
	int old_phase_shift = HALL_M1.PhaseShift;
 8007742:	9202      	str	r2, [sp, #8]
	int16_t IqUpperLim = pPIDIq[M1]->hUpperOutputLimit;
 8007744:	695a      	ldr	r2, [r3, #20]
 8007746:	9203      	str	r2, [sp, #12]
	int16_t IdUpperLim = pPIDId[M1]->hUpperOutputLimit;
 8007748:	9a04      	ldr	r2, [sp, #16]
 800774a:	6952      	ldr	r2, [r2, #20]
	pPIDIq[M1]->hUpperOutputLimit = 0;
 800774c:	615f      	str	r7, [r3, #20]
	int16_t IdUpperLim = pPIDId[M1]->hUpperOutputLimit;
 800774e:	9204      	str	r2, [sp, #16]
	vTaskDelay(pdMS_TO_TICKS(50));
 8007750:	f006 f978 	bl	800da44 <vTaskDelay>
	volatile float current_avg=0.0;
 8007754:	2300      	movs	r3, #0
	float voltage_calc = 32768.0 / VescToSTM_get_bus_voltage() * voltage;
 8007756:	4620      	mov	r0, r4
	volatile float current_avg=0.0;
 8007758:	9309      	str	r3, [sp, #36]	; 0x24
	float voltage_calc = 32768.0 / VescToSTM_get_bus_voltage() * voltage;
 800775a:	f7f8 fe67 	bl	800042c <__aeabi_f2d>
 800775e:	4602      	mov	r2, r0
 8007760:	460b      	mov	r3, r1
 8007762:	2000      	movs	r0, #0
 8007764:	495b      	ldr	r1, [pc, #364]	; (80078d4 <tune_foc_measure_inductance_current+0x1ec>)
 8007766:	f7f8 ffe3 	bl	8000730 <__aeabi_ddiv>
 800776a:	4680      	mov	r8, r0
 800776c:	4650      	mov	r0, sl
 800776e:	4689      	mov	r9, r1
 8007770:	f7f8 fe5c 	bl	800042c <__aeabi_f2d>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4640      	mov	r0, r8
 800777a:	4649      	mov	r1, r9
 800777c:	f7f8 feae 	bl	80004dc <__aeabi_dmul>
 8007780:	f7f9 f98e 	bl	8000aa0 <__aeabi_d2f>
	int32_t volt_int = voltage_calc;
 8007784:	f7f9 fcc6 	bl	8001114 <__aeabi_f2iz>
	int32_t Id = 0;
 8007788:	2400      	movs	r4, #0
 800778a:	b202      	sxth	r2, r0
 800778c:	f8cd a014 	str.w	sl, [sp, #20]
	int32_t Iq = 0;
 8007790:	46a1      	mov	r9, r4
	volatile float current_avg=0.0;
 8007792:	f04f 080a 	mov.w	r8, #10
 8007796:	4692      	mov	sl, r2
		pPIDIq[M1]->hUpperOutputLimit = volt_int;
 8007798:	2300      	movs	r3, #0
 800779a:	6831      	ldr	r1, [r6, #0]
 800779c:	f36a 030f 	bfi	r3, sl, #0, #16
 80077a0:	f36a 431f 	bfi	r3, sl, #16, #16
 80077a4:	614b      	str	r3, [r1, #20]
		vTaskDelay(1);
 80077a6:	2001      	movs	r0, #1
 80077a8:	f006 f94c 	bl	800da44 <vTaskDelay>
		Iq += abs(pMCI[M1]->pFOCVars->Iqd.q);
 80077ac:	682b      	ldr	r3, [r5, #0]
		pPIDIq[M1]->hUpperOutputLimit = 0;
 80077ae:	6831      	ldr	r1, [r6, #0]
		Iq += abs(pMCI[M1]->pFOCVars->Iqd.q);
 80077b0:	689b      	ldr	r3, [r3, #8]
		vTaskDelay(pdMS_TO_TICKS(10));
 80077b2:	200a      	movs	r0, #10
		Iq += abs(pMCI[M1]->pFOCVars->Iqd.q);
 80077b4:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
		Id += abs(pMCI[M1]->pFOCVars->Iqd.d);
 80077b8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
		Iq += abs(pMCI[M1]->pFOCVars->Iqd.q);
 80077bc:	f1bc 0f00 	cmp.w	ip, #0
 80077c0:	bfb8      	it	lt
 80077c2:	f1cc 0c00 	rsblt	ip, ip, #0
		Id += abs(pMCI[M1]->pFOCVars->Iqd.d);
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	bfb8      	it	lt
 80077ca:	425b      	neglt	r3, r3
		Iq += abs(pMCI[M1]->pFOCVars->Iqd.q);
 80077cc:	fa1f fc8c 	uxth.w	ip, ip
		Id += abs(pMCI[M1]->pFOCVars->Iqd.d);
 80077d0:	b29b      	uxth	r3, r3
		pPIDIq[M1]->hUpperOutputLimit = 0;
 80077d2:	614f      	str	r7, [r1, #20]
		Iq += abs(pMCI[M1]->pFOCVars->Iqd.q);
 80077d4:	44e1      	add	r9, ip
		Id += abs(pMCI[M1]->pFOCVars->Iqd.d);
 80077d6:	441c      	add	r4, r3
		vTaskDelay(pdMS_TO_TICKS(10));
 80077d8:	f006 f934 	bl	800da44 <vTaskDelay>
	for(uint32_t i=0;i<samples;i++){
 80077dc:	f1b8 0801 	subs.w	r8, r8, #1
 80077e0:	d1da      	bne.n	8007798 <tune_foc_measure_inductance_current+0xb0>
	Iq /= samples;
 80077e2:	4b3d      	ldr	r3, [pc, #244]	; (80078d8 <tune_foc_measure_inductance_current+0x1f0>)
 80077e4:	f8dd a014 	ldr.w	sl, [sp, #20]
 80077e8:	fba3 2009 	umull	r2, r0, r3, r9
	float fIq = (float)Iq / CURRENT_FACTOR_A;
 80077ec:	08c0      	lsrs	r0, r0, #3
	Id /= samples;
 80077ee:	fba3 3404 	umull	r3, r4, r3, r4
	float fIq = (float)Iq / CURRENT_FACTOR_A;
 80077f2:	f7f9 fa5f 	bl	8000cb4 <__aeabi_i2f>
 80077f6:	f7f8 fe19 	bl	800042c <__aeabi_f2d>
 80077fa:	a331      	add	r3, pc, #196	; (adr r3, 80078c0 <tune_foc_measure_inductance_current+0x1d8>)
 80077fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007800:	f7f8 fe6c 	bl	80004dc <__aeabi_dmul>
 8007804:	f7f9 f94c 	bl	8000aa0 <__aeabi_d2f>
 8007808:	4603      	mov	r3, r0
	Id /= samples;
 800780a:	08e4      	lsrs	r4, r4, #3
	float fId = (float)Id / CURRENT_FACTOR_A;
 800780c:	4620      	mov	r0, r4
	float fIq = (float)Iq / CURRENT_FACTOR_A;
 800780e:	461c      	mov	r4, r3
	float fId = (float)Id / CURRENT_FACTOR_A;
 8007810:	f7f9 fa50 	bl	8000cb4 <__aeabi_i2f>
 8007814:	f7f8 fe0a 	bl	800042c <__aeabi_f2d>
 8007818:	a329      	add	r3, pc, #164	; (adr r3, 80078c0 <tune_foc_measure_inductance_current+0x1d8>)
 800781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781e:	f7f8 fe5d 	bl	80004dc <__aeabi_dmul>
 8007822:	f7f9 f93d 	bl	8000aa0 <__aeabi_d2f>
 8007826:	4603      	mov	r3, r0
	current_avg = sqrtf(SQ(fIq) + SQ(fId));
 8007828:	4621      	mov	r1, r4
 800782a:	4620      	mov	r0, r4
	float fId = (float)Id / CURRENT_FACTOR_A;
 800782c:	461c      	mov	r4, r3
	current_avg = sqrtf(SQ(fIq) + SQ(fId));
 800782e:	f7f9 fa95 	bl	8000d5c <__aeabi_fmul>
 8007832:	4621      	mov	r1, r4
 8007834:	4604      	mov	r4, r0
 8007836:	4608      	mov	r0, r1
 8007838:	f7f9 fa90 	bl	8000d5c <__aeabi_fmul>
 800783c:	4601      	mov	r1, r0
 800783e:	4620      	mov	r0, r4
 8007840:	f7f9 f984 	bl	8000b4c <__addsf3>
 8007844:	f008 f82a 	bl	800f89c <sqrtf>
 8007848:	4603      	mov	r3, r0
	vTaskDelay(200);
 800784a:	20c8      	movs	r0, #200	; 0xc8
	current_avg = sqrtf(SQ(fIq) + SQ(fId));
 800784c:	9309      	str	r3, [sp, #36]	; 0x24
		*used_current = current_avg;
 800784e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
	float inductance = voltage * (0.5e3) / current_avg;
 8007852:	9b09      	ldr	r3, [sp, #36]	; 0x24
	vTaskDelay(200);
 8007854:	f006 f8f6 	bl	800da44 <vTaskDelay>
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8007858:	682b      	ldr	r3, [r5, #0]
	pPIDIq[M1]->hUpperOutputLimit = IqUpperLim;
 800785a:	6832      	ldr	r2, [r6, #0]
	pMCI[M1]->pSTC->SPD->open_loop = false;
 800785c:	6859      	ldr	r1, [r3, #4]
	pPIDIq[M1]->hUpperOutputLimit = IqUpperLim;
 800785e:	9803      	ldr	r0, [sp, #12]
	pPIDId[M1]->hUpperOutputLimit = IdUpperLim;
 8007860:	f8db 3000 	ldr.w	r3, [fp]
 8007864:	9c04      	ldr	r4, [sp, #16]
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8007866:	6949      	ldr	r1, [r1, #20]
	pPIDIq[M1]->hUpperOutputLimit = IqUpperLim;
 8007868:	6150      	str	r0, [r2, #20]
	pPIDId[M1]->hUpperOutputLimit = IdUpperLim;
 800786a:	615c      	str	r4, [r3, #20]
	pPIDIq[M1]->wIntegralTerm = 0;
 800786c:	f8c2 8008 	str.w	r8, [r2, #8]
	pPIDIq[M1]->wPrevProcessVarError = 0;
 8007870:	f8c2 8028 	str.w	r8, [r2, #40]	; 0x28
	pPIDId[M1]->wPrevProcessVarError = 0;
 8007874:	f8c3 8028 	str.w	r8, [r3, #40]	; 0x28
	pPIDId[M1]->wIntegralTerm = 0;
 8007878:	f8c3 8008 	str.w	r8, [r3, #8]
	HALL_M1.PhaseShift = old_phase_shift;
 800787c:	9a02      	ldr	r2, [sp, #8]
 800787e:	4b14      	ldr	r3, [pc, #80]	; (80078d0 <tune_foc_measure_inductance_current+0x1e8>)
	pMCI[M1]->pSTC->SPD->open_loop = false;
 8007880:	f881 8020 	strb.w	r8, [r1, #32]
	pMCI[M1]->pSTC->SPD->open_angle =0;
 8007884:	f8a1 8022 	strh.w	r8, [r1, #34]	; 0x22
	VescToSTM_enable_timeout(true);
 8007888:	2001      	movs	r0, #1
	HALL_M1.PhaseShift = old_phase_shift;
 800788a:	855a      	strh	r2, [r3, #42]	; 0x2a
	VescToSTM_enable_timeout(true);
 800788c:	f7fd f97e 	bl	8004b8c <VescToSTM_enable_timeout>
		float i_tmp;
		tune_foc_measure_inductance(i, &i_tmp, 10);

		duty_last = i;
		if (i_tmp >= curr_goal) {
 8007890:	4649      	mov	r1, r9
 8007892:	9806      	ldr	r0, [sp, #24]
 8007894:	f7f9 fc0a 	bl	80010ac <__aeabi_fcmple>
 8007898:	b950      	cbnz	r0, 80078b0 <tune_foc_measure_inductance_current+0x1c8>
	for (float i = 0.2;i < 10.0;i *= 1.5) {
 800789a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800789e:	4650      	mov	r0, sl
 80078a0:	f7f9 fa5c 	bl	8000d5c <__aeabi_fmul>
 80078a4:	9b01      	ldr	r3, [sp, #4]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	d001      	beq.n	80078b0 <tune_foc_measure_inductance_current+0x1c8>
 80078ac:	4682      	mov	sl, r0
 80078ae:	e729      	b.n	8007704 <tune_foc_measure_inductance_current+0x1c>
			break;
		}
	}

	float ind = tune_foc_measure_inductance(duty_last, NULL, samples);
 80078b0:	4650      	mov	r0, sl
 80078b2:	2100      	movs	r1, #0
 80078b4:	9a07      	ldr	r2, [sp, #28]
	return ind;
}
 80078b6:	b00b      	add	sp, #44	; 0x2c
 80078b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float ind = tune_foc_measure_inductance(duty_last, NULL, samples);
 80078bc:	f7ff be18 	b.w	80074f0 <tune_foc_measure_inductance>
 80078c0:	f7441b6d 	.word	0xf7441b6d
 80078c4:	3f69c86b 	.word	0x3f69c86b
 80078c8:	200033ac 	.word	0x200033ac
 80078cc:	200032c8 	.word	0x200032c8
 80078d0:	200000b4 	.word	0x200000b4
 80078d4:	40e00000 	.word	0x40e00000
 80078d8:	cccccccd 	.word	0xcccccccd
 80078dc:	3e4ccccd 	.word	0x3e4ccccd
 80078e0:	200033a4 	.word	0x200033a4

080078e4 <tune_foc_measure_res_ind>:
 *
 * @return
 * True if the measurement succeeded, false otherwise.
 */
bool tune_foc_measure_res_ind(float *res, float *ind) {
	float current = mc_conf.l_current_max / 2.0;
 80078e4:	4b0b      	ldr	r3, [pc, #44]	; (8007914 <tune_foc_measure_res_ind+0x30>)
bool tune_foc_measure_res_ind(float *res, float *ind) {
 80078e6:	b570      	push	{r4, r5, r6, lr}
 80078e8:	4606      	mov	r6, r0
 80078ea:	460c      	mov	r4, r1
	float current = mc_conf.l_current_max / 2.0;
 80078ec:	6818      	ldr	r0, [r3, #0]
 80078ee:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80078f2:	f7f9 fa33 	bl	8000d5c <__aeabi_fmul>

	*res = tune_foc_measure_resistance(current, 3000);
 80078f6:	f640 31b8 	movw	r1, #3000	; 0xbb8
	float current = mc_conf.l_current_max / 2.0;
 80078fa:	4605      	mov	r5, r0
	*res = tune_foc_measure_resistance(current, 3000);
 80078fc:	f7ff fcec 	bl	80072d8 <tune_foc_measure_resistance>
	*ind = tune_foc_measure_inductance_current(current, 100);
 8007900:	2164      	movs	r1, #100	; 0x64
	*res = tune_foc_measure_resistance(current, 3000);
 8007902:	6030      	str	r0, [r6, #0]
	*ind = tune_foc_measure_inductance_current(current, 100);
 8007904:	4628      	mov	r0, r5
 8007906:	f7ff feef 	bl	80076e8 <tune_foc_measure_inductance_current>
 800790a:	4603      	mov	r3, r0

	return true;
}
 800790c:	2001      	movs	r0, #1
	*ind = tune_foc_measure_inductance_current(current, 100);
 800790e:	6023      	str	r3, [r4, #0]
}
 8007910:	bd70      	pop	{r4, r5, r6, pc}
 8007912:	bf00      	nop
 8007914:	20003dc4 	.word	0x20003dc4

08007918 <tune_foc_measure_flux_linkage_openloop>:
 * @return
 * True for success, false otherwise.
 */
bool tune_foc_measure_flux_linkage_openloop(float current, float duty,
		float erpm_per_sec, float res, float ind, float *linkage,
		float *linkage_undriven, float *undriven_samples) {
 8007918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float rpm_now = 0;

	VescToSTM_set_open_loop(true, 0, 0);
	// Start by locking the motor
	for (int i = 0;i < 1000;i++) {
		currComp.q = current_to_torque((float)i * current / 1000.0);
 800791c:	a748      	add	r7, pc, #288	; (adr r7, 8007a40 <tune_foc_measure_flux_linkage_openloop+0x128>)
 800791e:	e9d7 6700 	ldrd	r6, r7, [r7]
		float *linkage_undriven, float *undriven_samples) {
 8007922:	b087      	sub	sp, #28
 8007924:	4689      	mov	r9, r1
	current *= 1000; //A to mA
 8007926:	494c      	ldr	r1, [pc, #304]	; (8007a58 <tune_foc_measure_flux_linkage_openloop+0x140>)
		float *linkage_undriven, float *undriven_samples) {
 8007928:	9303      	str	r3, [sp, #12]
 800792a:	9200      	str	r2, [sp, #0]
	current *= 1000; //A to mA
 800792c:	f7f9 fa16 	bl	8000d5c <__aeabi_fmul>
 8007930:	4683      	mov	fp, r0
	VescToSTM_enable_timeout(false);
 8007932:	2000      	movs	r0, #0
 8007934:	f7fd f92a 	bl	8004b8c <VescToSTM_enable_timeout>
	MCI_ExecTorqueRamp(pMCI[M1], 0, 0);
 8007938:	2200      	movs	r2, #0
	currComp.d = 0;
 800793a:	4614      	mov	r4, r2
	MCI_ExecTorqueRamp(pMCI[M1], 0, 0);
 800793c:	f8df a120 	ldr.w	sl, [pc, #288]	; 8007a60 <tune_foc_measure_flux_linkage_openloop+0x148>
 8007940:	4611      	mov	r1, r2
 8007942:	f8da 0000 	ldr.w	r0, [sl]
 8007946:	f7fa fff7 	bl	8002938 <MCI_ExecTorqueRamp>
	MCI_StartMotor( pMCI[M1] );
 800794a:	f8da 0000 	ldr.w	r0, [sl]
 800794e:	f7fb f807 	bl	8002960 <MCI_StartMotor>
	VescToSTM_set_open_loop(true, 0, 0);
 8007952:	4622      	mov	r2, r4
 8007954:	4621      	mov	r1, r4
 8007956:	2001      	movs	r0, #1
	currComp.d = 0;
 8007958:	f8ad 4016 	strh.w	r4, [sp, #22]
	VescToSTM_set_open_loop(true, 0, 0);
 800795c:	f7fd f87a 	bl	8004a54 <VescToSTM_set_open_loop>
	for (int i = 0;i < 1000;i++) {
 8007960:	46a0      	mov	r8, r4
	float ret = curr_ma * CURRENT_FACTOR_mA;
 8007962:	a539      	add	r5, pc, #228	; (adr r5, 8007a48 <tune_foc_measure_flux_linkage_openloop+0x130>)
 8007964:	e9d5 4500 	ldrd	r4, r5, [r5]
		currComp.q = current_to_torque((float)i * current / 1000.0);
 8007968:	4640      	mov	r0, r8
 800796a:	f7f9 f9a3 	bl	8000cb4 <__aeabi_i2f>
 800796e:	4659      	mov	r1, fp
 8007970:	f7f9 f9f4 	bl	8000d5c <__aeabi_fmul>
 8007974:	f7f8 fd5a 	bl	800042c <__aeabi_f2d>
 8007978:	4632      	mov	r2, r6
 800797a:	463b      	mov	r3, r7
 800797c:	f7f8 fdae 	bl	80004dc <__aeabi_dmul>
 8007980:	f7f9 f846 	bl	8000a10 <__aeabi_d2iz>
	float ret = curr_ma * CURRENT_FACTOR_mA;
 8007984:	f7f8 fd40 	bl	8000408 <__aeabi_i2d>
 8007988:	4622      	mov	r2, r4
 800798a:	462b      	mov	r3, r5
 800798c:	f7f8 fda6 	bl	80004dc <__aeabi_dmul>
 8007990:	f7f9 f886 	bl	8000aa0 <__aeabi_d2f>
	return ret;
 8007994:	f7f9 fbbe 	bl	8001114 <__aeabi_f2iz>
 8007998:	f8ad 0014 	strh.w	r0, [sp, #20]
		MCI_SetCurrentReferences(pMCI[M1],currComp);
 800799c:	9905      	ldr	r1, [sp, #20]
 800799e:	f8da 0000 	ldr.w	r0, [sl]
 80079a2:	f7fa ffd3 	bl	800294c <MCI_SetCurrentReferences>
	for (int i = 0;i < 1000;i++) {
 80079a6:	f108 0801 	add.w	r8, r8, #1
		vTaskDelay(2);
 80079aa:	2002      	movs	r0, #2
 80079ac:	f006 f84a 	bl	800da44 <vTaskDelay>
	for (int i = 0;i < 1000;i++) {
 80079b0:	f5b8 7f7a 	cmp.w	r8, #1000	; 0x3e8
 80079b4:	d1d8      	bne.n	8007968 <tune_foc_measure_flux_linkage_openloop+0x50>
	}

	float duty_still = 0;
	float samples = 0;
 80079b6:	2500      	movs	r5, #0
	for (int i = 0;i < 1000;i++) {
		duty_still += fabsf(VescToSTM_get_duty_cycle_now());
		samples += 1.0;
 80079b8:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
	float duty_still = 0;
 80079bc:	462e      	mov	r6, r5
		duty_still += fabsf(VescToSTM_get_duty_cycle_now());
 80079be:	f7fd fd83 	bl	80054c8 <VescToSTM_get_duty_cycle_now>
 80079c2:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 80079c6:	4630      	mov	r0, r6
 80079c8:	f7f9 f8c0 	bl	8000b4c <__addsf3>
		samples += 1.0;
 80079cc:	4621      	mov	r1, r4
		duty_still += fabsf(VescToSTM_get_duty_cycle_now());
 80079ce:	4606      	mov	r6, r0
		samples += 1.0;
 80079d0:	4628      	mov	r0, r5
 80079d2:	f7f9 f8bb 	bl	8000b4c <__addsf3>
 80079d6:	4605      	mov	r5, r0
		vTaskDelay(2);
 80079d8:	2002      	movs	r0, #2
 80079da:	f006 f833 	bl	800da44 <vTaskDelay>
	for (int i = 0;i < 1000;i++) {
 80079de:	f1b8 0801 	subs.w	r8, r8, #1
 80079e2:	d1ec      	bne.n	80079be <tune_foc_measure_flux_linkage_openloop+0xa6>
	duty_still /= samples;
	float duty_max = 0.0;
	const int max_time = 15000;

	while (fabsf(VescToSTM_get_duty_cycle_now()) < duty) {
		rpm_now += erpm_per_sec / 1000.0;
 80079e4:	9800      	ldr	r0, [sp, #0]
 80079e6:	f7f8 fd21 	bl	800042c <__aeabi_f2d>
 80079ea:	a315      	add	r3, pc, #84	; (adr r3, 8007a40 <tune_foc_measure_flux_linkage_openloop+0x128>)
 80079ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f0:	f7f8 fd74 	bl	80004dc <__aeabi_dmul>
 80079f4:	4602      	mov	r2, r0
 80079f6:	460b      	mov	r3, r1
			cnt = max_time;
			*linkage = -2.0;
			break;
		}

		if (cnt > 4000 && duty < duty_still * 1.1) {
 80079f8:	4648      	mov	r0, r9
		rpm_now += erpm_per_sec / 1000.0;
 80079fa:	e9cd 2300 	strd	r2, r3, [sp]
		if (cnt > 4000 && duty < duty_still * 1.1) {
 80079fe:	f7f8 fd15 	bl	800042c <__aeabi_f2d>
 8007a02:	4602      	mov	r2, r0
 8007a04:	460b      	mov	r3, r1
	duty_still /= samples;
 8007a06:	4630      	mov	r0, r6
 8007a08:	4629      	mov	r1, r5
		if (cnt > 4000 && duty < duty_still * 1.1) {
 8007a0a:	4614      	mov	r4, r2
 8007a0c:	461d      	mov	r5, r3
	duty_still /= samples;
 8007a0e:	f7f9 fa59 	bl	8000ec4 <__aeabi_fdiv>
		if (cnt > 4000 && duty < duty_still * 1.1) {
 8007a12:	f7f8 fd0b 	bl	800042c <__aeabi_f2d>
 8007a16:	a30e      	add	r3, pc, #56	; (adr r3, 8007a50 <tune_foc_measure_flux_linkage_openloop+0x138>)
 8007a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1c:	f7f8 fd5e 	bl	80004dc <__aeabi_dmul>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4620      	mov	r0, r4
 8007a26:	4629      	mov	r1, r5
 8007a28:	f7f8 ffca 	bl	80009c0 <__aeabi_dcmplt>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	f040 81b5 	bne.w	8007d9c <tune_foc_measure_flux_linkage_openloop+0x484>
	float duty_max = 0.0;
 8007a32:	2600      	movs	r6, #0
			cnt = max_time;
			*linkage = -3.0;
			break;
		}

		if (rpm_now >= 12000) {
 8007a34:	4f09      	ldr	r7, [pc, #36]	; (8007a5c <tune_foc_measure_flux_linkage_openloop+0x144>)
	float rpm_now = 0;
 8007a36:	4634      	mov	r4, r6
		if (rpm_now >= 12000) {
 8007a38:	46b3      	mov	fp, r6
 8007a3a:	e055      	b.n	8007ae8 <tune_foc_measure_flux_linkage_openloop+0x1d0>
 8007a3c:	f3af 8000 	nop.w
 8007a40:	d2f1a9fc 	.word	0xd2f1a9fc
 8007a44:	3f50624d 	.word	0x3f50624d
 8007a48:	35bd512f 	.word	0x35bd512f
 8007a4c:	3fd455b0 	.word	0x3fd455b0
 8007a50:	9999999a 	.word	0x9999999a
 8007a54:	3ff19999 	.word	0x3ff19999
 8007a58:	447a0000 	.word	0x447a0000
 8007a5c:	463b8000 	.word	0x463b8000
 8007a60:	200033ac 	.word	0x200033ac
		rpm_now += erpm_per_sec / 1000.0;
 8007a64:	4620      	mov	r0, r4
 8007a66:	f7f8 fce1 	bl	800042c <__aeabi_f2d>
 8007a6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a6e:	f7f8 fb7f 	bl	8000170 <__adddf3>
 8007a72:	f7f9 f815 	bl	8000aa0 <__aeabi_d2f>
 8007a76:	4604      	mov	r4, r0
		VescToSTM_set_open_loop_rpm(rpm_now);
 8007a78:	f7f9 fb4c 	bl	8001114 <__aeabi_f2iz>
 8007a7c:	b200      	sxth	r0, r0
 8007a7e:	f7fd f80d 	bl	8004a9c <VescToSTM_set_open_loop_rpm>
		vTaskDelay(2);
 8007a82:	2002      	movs	r0, #2
 8007a84:	f005 ffde 	bl	800da44 <vTaskDelay>
		float duty_now = fabsf(VescToSTM_get_duty_cycle_now());
 8007a88:	f7fd fd1e 	bl	80054c8 <VescToSTM_get_duty_cycle_now>
 8007a8c:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8007a90:	4631      	mov	r1, r6
 8007a92:	4658      	mov	r0, fp
 8007a94:	f7f9 fb14 	bl	80010c0 <__aeabi_fcmpge>
		cnt++;
 8007a98:	f108 0801 	add.w	r8, r8, #1
		if (cnt >= max_time) {
 8007a9c:	f643 2398 	movw	r3, #15000	; 0x3a98
 8007aa0:	b900      	cbnz	r0, 8007aa4 <tune_foc_measure_flux_linkage_openloop+0x18c>
 8007aa2:	46b3      	mov	fp, r6
 8007aa4:	4598      	cmp	r8, r3
 8007aa6:	f000 815e 	beq.w	8007d66 <tune_foc_measure_flux_linkage_openloop+0x44e>
		if (cnt > 4000 && duty_now < (duty_max * 0.7)) {
 8007aaa:	f5b8 6f7a 	cmp.w	r8, #4000	; 0xfa0
 8007aae:	dd16      	ble.n	8007ade <tune_foc_measure_flux_linkage_openloop+0x1c6>
 8007ab0:	4658      	mov	r0, fp
 8007ab2:	f7f8 fcbb 	bl	800042c <__aeabi_f2d>
 8007ab6:	a3ae      	add	r3, pc, #696	; (adr r3, 8007d70 <tune_foc_measure_flux_linkage_openloop+0x458>)
 8007ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007abc:	f7f8 fd0e 	bl	80004dc <__aeabi_dmul>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	4630      	mov	r0, r6
 8007ac4:	4615      	mov	r5, r2
 8007ac6:	460e      	mov	r6, r1
 8007ac8:	f7f8 fcb0 	bl	800042c <__aeabi_f2d>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	f7f8 ff92 	bl	80009fc <__aeabi_dcmpgt>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	f040 813a 	bne.w	8007d52 <tune_foc_measure_flux_linkage_openloop+0x43a>
		if (rpm_now >= 12000) {
 8007ade:	4639      	mov	r1, r7
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f7f9 faed 	bl	80010c0 <__aeabi_fcmpge>
 8007ae6:	b940      	cbnz	r0, 8007afa <tune_foc_measure_flux_linkage_openloop+0x1e2>
	while (fabsf(VescToSTM_get_duty_cycle_now()) < duty) {
 8007ae8:	f7fd fcee 	bl	80054c8 <VescToSTM_get_duty_cycle_now>
 8007aec:	4649      	mov	r1, r9
 8007aee:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007af2:	f7f9 fad1 	bl	8001098 <__aeabi_fcmplt>
 8007af6:	2800      	cmp	r0, #0
 8007af8:	d1b4      	bne.n	8007a64 <tune_foc_measure_flux_linkage_openloop+0x14c>
 8007afa:	9400      	str	r4, [sp, #0]
			break;
		}
	}

	vTaskDelay(2000);
 8007afc:	2400      	movs	r4, #0
 8007afe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8007b02:	46a0      	mov	r8, r4
 8007b04:	4627      	mov	r7, r4
 8007b06:	4626      	mov	r6, r4
 8007b08:	4625      	mov	r5, r4
 8007b0a:	f005 ff9b 	bl	800da44 <vTaskDelay>
 8007b0e:	f242 7910 	movw	r9, #10000	; 0x2710
		for (int i = 0;i < 10000;i++) {
			vq_avg += VescToSTM_get_Vq();
			vd_avg += VescToSTM_get_Vd();
			iq_avg += VescToSTM_get_iq();
			id_avg += VescToSTM_get_id();
			samples2 += 1.0;
 8007b12:	f04f 5b7e 	mov.w	fp, #1065353216	; 0x3f800000
			vq_avg += VescToSTM_get_Vq();
 8007b16:	f7fd fa77 	bl	8005008 <VescToSTM_get_Vq>
 8007b1a:	4601      	mov	r1, r0
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	f7f9 f815 	bl	8000b4c <__addsf3>
 8007b22:	4605      	mov	r5, r0
			vd_avg += VescToSTM_get_Vd();
 8007b24:	f7fd fa28 	bl	8004f78 <VescToSTM_get_Vd>
 8007b28:	4601      	mov	r1, r0
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7f9 f80e 	bl	8000b4c <__addsf3>
 8007b30:	4606      	mov	r6, r0
			iq_avg += VescToSTM_get_iq();
 8007b32:	f7fd fa01 	bl	8004f38 <VescToSTM_get_iq>
 8007b36:	4601      	mov	r1, r0
 8007b38:	4638      	mov	r0, r7
 8007b3a:	f7f9 f807 	bl	8000b4c <__addsf3>
 8007b3e:	4607      	mov	r7, r0
			id_avg += VescToSTM_get_id();
 8007b40:	f7fd f9da 	bl	8004ef8 <VescToSTM_get_id>
 8007b44:	4601      	mov	r1, r0
 8007b46:	4640      	mov	r0, r8
 8007b48:	f7f9 f800 	bl	8000b4c <__addsf3>
			samples2 += 1.0;
 8007b4c:	4659      	mov	r1, fp
			id_avg += VescToSTM_get_id();
 8007b4e:	4680      	mov	r8, r0
			samples2 += 1.0;
 8007b50:	4620      	mov	r0, r4
 8007b52:	f7f8 fffb 	bl	8000b4c <__addsf3>
 8007b56:	4604      	mov	r4, r0
			vTaskDelay(1);
 8007b58:	2001      	movs	r0, #1
 8007b5a:	f005 ff73 	bl	800da44 <vTaskDelay>
		for (int i = 0;i < 10000;i++) {
 8007b5e:	f1b9 0901 	subs.w	r9, r9, #1
 8007b62:	d1d8      	bne.n	8007b16 <tune_foc_measure_flux_linkage_openloop+0x1fe>
		}

		vq_avg /= samples2;
 8007b64:	4621      	mov	r1, r4
 8007b66:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007b6a:	f7f9 f9ab 	bl	8000ec4 <__aeabi_fdiv>
 8007b6e:	4604      	mov	r4, r0
 8007b70:	4628      	mov	r0, r5
 8007b72:	4621      	mov	r1, r4
 8007b74:	f7f9 f8f2 	bl	8000d5c <__aeabi_fmul>
		vd_avg /= samples2;
 8007b78:	4621      	mov	r1, r4
		vq_avg /= samples2;
 8007b7a:	4683      	mov	fp, r0
		vd_avg /= samples2;
 8007b7c:	4630      	mov	r0, r6
 8007b7e:	f7f9 f8ed 	bl	8000d5c <__aeabi_fmul>
		iq_avg /= samples2;
 8007b82:	4621      	mov	r1, r4
		vd_avg /= samples2;
 8007b84:	4605      	mov	r5, r0
		iq_avg /= samples2;
 8007b86:	4638      	mov	r0, r7
 8007b88:	f7f9 f8e8 	bl	8000d5c <__aeabi_fmul>
		id_avg /= samples2;
 8007b8c:	4621      	mov	r1, r4
		iq_avg /= samples2;
 8007b8e:	4606      	mov	r6, r0
		id_avg /= samples2;
 8007b90:	4640      	mov	r0, r8
 8007b92:	f7f9 f8e3 	bl	8000d5c <__aeabi_fmul>

		float rad_s = rpm_now * ((2.0 * M_PI) / 60.0);
		float v_mag = sqrtf(SQ(vq_avg) + SQ(vd_avg));
 8007b96:	4659      	mov	r1, fp
		id_avg /= samples2;
 8007b98:	4604      	mov	r4, r0
		float v_mag = sqrtf(SQ(vq_avg) + SQ(vd_avg));
 8007b9a:	4658      	mov	r0, fp
 8007b9c:	f7f9 f8de 	bl	8000d5c <__aeabi_fmul>
 8007ba0:	4629      	mov	r1, r5
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	4608      	mov	r0, r1
 8007ba6:	f7f9 f8d9 	bl	8000d5c <__aeabi_fmul>
 8007baa:	4601      	mov	r1, r0
 8007bac:	4628      	mov	r0, r5
 8007bae:	f7f8 ffcd 	bl	8000b4c <__addsf3>
 8007bb2:	f007 fe73 	bl	800f89c <sqrtf>
		float i_mag = sqrtf(SQ(iq_avg) + SQ(id_avg));
 8007bb6:	4631      	mov	r1, r6
		float v_mag = sqrtf(SQ(vq_avg) + SQ(vd_avg));
 8007bb8:	4605      	mov	r5, r0
		float i_mag = sqrtf(SQ(iq_avg) + SQ(id_avg));
 8007bba:	4630      	mov	r0, r6
 8007bbc:	f7f9 f8ce 	bl	8000d5c <__aeabi_fmul>
 8007bc0:	4621      	mov	r1, r4
 8007bc2:	4604      	mov	r4, r0
 8007bc4:	4608      	mov	r0, r1
 8007bc6:	f7f9 f8c9 	bl	8000d5c <__aeabi_fmul>
 8007bca:	4601      	mov	r1, r0
 8007bcc:	4620      	mov	r0, r4
 8007bce:	f7f8 ffbd 	bl	8000b4c <__addsf3>
 8007bd2:	f007 fe63 	bl	800f89c <sqrtf>
		*linkage = (v_mag - (2.0 / 3.0) * res * i_mag) / rad_s - (2.0 / 3.0) * i_mag * ind;
 8007bd6:	f7f8 fc29 	bl	800042c <__aeabi_f2d>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	4628      	mov	r0, r5
 8007bde:	4614      	mov	r4, r2
 8007be0:	460d      	mov	r5, r1
 8007be2:	f7f8 fc23 	bl	800042c <__aeabi_f2d>
 8007be6:	4606      	mov	r6, r0
 8007be8:	9803      	ldr	r0, [sp, #12]
 8007bea:	460f      	mov	r7, r1
 8007bec:	f7f8 fc1e 	bl	800042c <__aeabi_f2d>
 8007bf0:	a361      	add	r3, pc, #388	; (adr r3, 8007d78 <tune_foc_measure_flux_linkage_openloop+0x460>)
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	f7f8 fc71 	bl	80004dc <__aeabi_dmul>
 8007bfa:	4622      	mov	r2, r4
 8007bfc:	462b      	mov	r3, r5
 8007bfe:	f7f8 fc6d 	bl	80004dc <__aeabi_dmul>
 8007c02:	4602      	mov	r2, r0
 8007c04:	460b      	mov	r3, r1
 8007c06:	4630      	mov	r0, r6
 8007c08:	4639      	mov	r1, r7
 8007c0a:	f7f8 faaf 	bl	800016c <__aeabi_dsub>
 8007c0e:	4606      	mov	r6, r0
		float rad_s = rpm_now * ((2.0 * M_PI) / 60.0);
 8007c10:	9800      	ldr	r0, [sp, #0]
		*linkage = (v_mag - (2.0 / 3.0) * res * i_mag) / rad_s - (2.0 / 3.0) * i_mag * ind;
 8007c12:	460f      	mov	r7, r1
		float rad_s = rpm_now * ((2.0 * M_PI) / 60.0);
 8007c14:	f7f8 fc0a 	bl	800042c <__aeabi_f2d>
 8007c18:	a359      	add	r3, pc, #356	; (adr r3, 8007d80 <tune_foc_measure_flux_linkage_openloop+0x468>)
 8007c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1e:	f7f8 fc5d 	bl	80004dc <__aeabi_dmul>
 8007c22:	f7f8 ff3d 	bl	8000aa0 <__aeabi_d2f>
		*linkage = (v_mag - (2.0 / 3.0) * res * i_mag) / rad_s - (2.0 / 3.0) * i_mag * ind;
 8007c26:	f7f8 fc01 	bl	800042c <__aeabi_f2d>
 8007c2a:	4602      	mov	r2, r0
 8007c2c:	460b      	mov	r3, r1
 8007c2e:	4630      	mov	r0, r6
 8007c30:	4639      	mov	r1, r7
 8007c32:	f7f8 fd7d 	bl	8000730 <__aeabi_ddiv>
 8007c36:	4606      	mov	r6, r0
 8007c38:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007c3a:	460f      	mov	r7, r1
 8007c3c:	f7f8 fbf6 	bl	800042c <__aeabi_f2d>
 8007c40:	a34d      	add	r3, pc, #308	; (adr r3, 8007d78 <tune_foc_measure_flux_linkage_openloop+0x460>)
 8007c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c46:	f7f8 fc49 	bl	80004dc <__aeabi_dmul>
 8007c4a:	4622      	mov	r2, r4
 8007c4c:	462b      	mov	r3, r5
 8007c4e:	f7f8 fc45 	bl	80004dc <__aeabi_dmul>
 8007c52:	4602      	mov	r2, r0
 8007c54:	460b      	mov	r3, r1
 8007c56:	4630      	mov	r0, r6
 8007c58:	4639      	mov	r1, r7
 8007c5a:	f7f8 fa87 	bl	800016c <__aeabi_dsub>
 8007c5e:	f7f8 ff1f 	bl	8000aa0 <__aeabi_d2f>
 8007c62:	4603      	mov	r3, r0
		currComp.q = 0;
		MCI_SetCurrentReferences(pMCI[M1],currComp);
		vTaskDelay(10);

		float linkage_sum = 0.0;
		float linkage_samples = 0.0;
 8007c64:	2400      	movs	r4, #0
		*linkage = (v_mag - (2.0 / 3.0) * res * i_mag) / rad_s - (2.0 / 3.0) * i_mag * ind;
 8007c66:	9a11      	ldr	r2, [sp, #68]	; 0x44
		vTaskDelay(1000);
 8007c68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		*linkage = (v_mag - (2.0 / 3.0) * res * i_mag) / rad_s - (2.0 / 3.0) * i_mag * ind;
 8007c6c:	6013      	str	r3, [r2, #0]
		vTaskDelay(1000);
 8007c6e:	f005 fee9 	bl	800da44 <vTaskDelay>
		currComp.q = 0;
 8007c72:	f8ad 9014 	strh.w	r9, [sp, #20]
		MCI_SetCurrentReferences(pMCI[M1],currComp);
 8007c76:	f8da 0000 	ldr.w	r0, [sl]
 8007c7a:	9905      	ldr	r1, [sp, #20]
 8007c7c:	f7fa fe66 	bl	800294c <MCI_SetCurrentReferences>
		vTaskDelay(10);
 8007c80:	200a      	movs	r0, #10
		float linkage_sum = 0.0;
 8007c82:	46a1      	mov	r9, r4
		vTaskDelay(10);
 8007c84:	f005 fede 	bl	800da44 <vTaskDelay>
 8007c88:	f644 6520 	movw	r5, #20000	; 0x4e20
			if (fabsf(VescToSTM_get_duty_cycle_now()) < 0.01) {
				break;
			}

			linkage_sum += VescToSTM_get_Vq() / SQRT_3 / rad_s_now;
			linkage_samples += 1.0;
 8007c8c:	f04f 587e 	mov.w	r8, #1065353216	; 0x3f800000
 8007c90:	e02c      	b.n	8007cec <tune_foc_measure_flux_linkage_openloop+0x3d4>
			linkage_sum += VescToSTM_get_Vq() / SQRT_3 / rad_s_now;
 8007c92:	f7fd f9b9 	bl	8005008 <VescToSTM_get_Vq>
 8007c96:	f7f8 fbc9 	bl	800042c <__aeabi_f2d>
 8007c9a:	a33b      	add	r3, pc, #236	; (adr r3, 8007d88 <tune_foc_measure_flux_linkage_openloop+0x470>)
 8007c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca0:	f7f8 fc1c 	bl	80004dc <__aeabi_dmul>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	4616      	mov	r6, r2
 8007caa:	460f      	mov	r7, r1
 8007cac:	f7f8 fbbe 	bl	800042c <__aeabi_f2d>
 8007cb0:	4602      	mov	r2, r0
 8007cb2:	460b      	mov	r3, r1
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	4639      	mov	r1, r7
 8007cb8:	f7f8 fd3a 	bl	8000730 <__aeabi_ddiv>
 8007cbc:	4606      	mov	r6, r0
 8007cbe:	4648      	mov	r0, r9
 8007cc0:	460f      	mov	r7, r1
 8007cc2:	f7f8 fbb3 	bl	800042c <__aeabi_f2d>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	460b      	mov	r3, r1
 8007cca:	4630      	mov	r0, r6
 8007ccc:	4639      	mov	r1, r7
 8007cce:	f7f8 fa4f 	bl	8000170 <__adddf3>
 8007cd2:	f7f8 fee5 	bl	8000aa0 <__aeabi_d2f>
			linkage_samples += 1.0;
 8007cd6:	4641      	mov	r1, r8
			linkage_sum += VescToSTM_get_Vq() / SQRT_3 / rad_s_now;
 8007cd8:	4681      	mov	r9, r0
			linkage_samples += 1.0;
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f7f8 ff36 	bl	8000b4c <__addsf3>
 8007ce0:	4604      	mov	r4, r0
			vTaskDelay(2);
 8007ce2:	2002      	movs	r0, #2
 8007ce4:	f005 feae 	bl	800da44 <vTaskDelay>
		for (int i = 0;i < 20000;i++) {
 8007ce8:	3d01      	subs	r5, #1
 8007cea:	d018      	beq.n	8007d1e <tune_foc_measure_flux_linkage_openloop+0x406>
			float rad_s_now = VescToSTM_get_erpm_fast() * ((2.0 * M_PI) / 60.0); //Faster
 8007cec:	f7fd f9f8 	bl	80050e0 <VescToSTM_get_erpm_fast>
 8007cf0:	f7f8 fb8a 	bl	8000408 <__aeabi_i2d>
 8007cf4:	a322      	add	r3, pc, #136	; (adr r3, 8007d80 <tune_foc_measure_flux_linkage_openloop+0x468>)
 8007cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cfa:	f7f8 fbef 	bl	80004dc <__aeabi_dmul>
 8007cfe:	f7f8 fecf 	bl	8000aa0 <__aeabi_d2f>
 8007d02:	4607      	mov	r7, r0
			if (fabsf(VescToSTM_get_duty_cycle_now()) < 0.01) {
 8007d04:	f7fd fbe0 	bl	80054c8 <VescToSTM_get_duty_cycle_now>
 8007d08:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007d0c:	f7f8 fb8e 	bl	800042c <__aeabi_f2d>
 8007d10:	a31f      	add	r3, pc, #124	; (adr r3, 8007d90 <tune_foc_measure_flux_linkage_openloop+0x478>)
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f7f8 fe53 	bl	80009c0 <__aeabi_dcmplt>
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	d0b9      	beq.n	8007c92 <tune_foc_measure_flux_linkage_openloop+0x37a>
		}

		*undriven_samples = linkage_samples;

		if (linkage_samples > 0) {
 8007d1e:	2500      	movs	r5, #0
		*undriven_samples = linkage_samples;
 8007d20:	9b13      	ldr	r3, [sp, #76]	; 0x4c
		if (linkage_samples > 0) {
 8007d22:	4629      	mov	r1, r5
 8007d24:	4620      	mov	r0, r4
		*undriven_samples = linkage_samples;
 8007d26:	601c      	str	r4, [r3, #0]
		if (linkage_samples > 0) {
 8007d28:	f7f9 f9d4 	bl	80010d4 <__aeabi_fcmpgt>
 8007d2c:	b168      	cbz	r0, 8007d4a <tune_foc_measure_flux_linkage_openloop+0x432>
			*linkage_undriven = linkage_sum / linkage_samples;
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4648      	mov	r0, r9
 8007d32:	f7f9 f8c7 	bl	8000ec4 <__aeabi_fdiv>
		} else {
			*linkage_undriven = 0.0;
		}

		result = true;
 8007d36:	2401      	movs	r4, #1
			*linkage_undriven = linkage_sum / linkage_samples;
 8007d38:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007d3a:	6018      	str	r0, [r3, #0]
	}

	VescToSTM_enable_timeout(true);
 8007d3c:	2001      	movs	r0, #1
 8007d3e:	f7fc ff25 	bl	8004b8c <VescToSTM_enable_timeout>
	return result;
}
 8007d42:	4620      	mov	r0, r4
 8007d44:	b007      	add	sp, #28
 8007d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*linkage_undriven = 0.0;
 8007d4a:	9b12      	ldr	r3, [sp, #72]	; 0x48
		result = true;
 8007d4c:	2401      	movs	r4, #1
			*linkage_undriven = 0.0;
 8007d4e:	601d      	str	r5, [r3, #0]
 8007d50:	e7f4      	b.n	8007d3c <tune_foc_measure_flux_linkage_openloop+0x424>
			*linkage = -2.0;
 8007d52:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8007d56:	9a11      	ldr	r2, [sp, #68]	; 0x44
	vTaskDelay(2000);
 8007d58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
			*linkage = -2.0;
 8007d5c:	6013      	str	r3, [r2, #0]
	vTaskDelay(2000);
 8007d5e:	f005 fe71 	bl	800da44 <vTaskDelay>
	bool result = false;
 8007d62:	2400      	movs	r4, #0
 8007d64:	e7ea      	b.n	8007d3c <tune_foc_measure_flux_linkage_openloop+0x424>
			*linkage = -1.0;
 8007d66:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <tune_foc_measure_flux_linkage_openloop+0x480>)
 8007d68:	e7f5      	b.n	8007d56 <tune_foc_measure_flux_linkage_openloop+0x43e>
 8007d6a:	bf00      	nop
 8007d6c:	f3af 8000 	nop.w
 8007d70:	66666666 	.word	0x66666666
 8007d74:	3fe66666 	.word	0x3fe66666
 8007d78:	55555555 	.word	0x55555555
 8007d7c:	3fe55555 	.word	0x3fe55555
 8007d80:	f37bebd5 	.word	0xf37bebd5
 8007d84:	3fbacee9 	.word	0x3fbacee9
 8007d88:	ca32d863 	.word	0xca32d863
 8007d8c:	3fe279ca 	.word	0x3fe279ca
 8007d90:	47ae147b 	.word	0x47ae147b
 8007d94:	3f847ae1 	.word	0x3f847ae1
 8007d98:	bf800000 	.word	0xbf800000
	float duty_max = 0.0;
 8007d9c:	2500      	movs	r5, #0
		if (cnt > 4000 && duty < duty_still * 1.1) {
 8007d9e:	f640 74a1 	movw	r4, #4001	; 0xfa1
	float rpm_now = 0;
 8007da2:	46a8      	mov	r8, r5
		if (rpm_now >= 12000) {
 8007da4:	4e28      	ldr	r6, [pc, #160]	; (8007e48 <tune_foc_measure_flux_linkage_openloop+0x530>)
	while (fabsf(VescToSTM_get_duty_cycle_now()) < duty) {
 8007da6:	f7fd fb8f 	bl	80054c8 <VescToSTM_get_duty_cycle_now>
 8007daa:	4649      	mov	r1, r9
 8007dac:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007db0:	f7f9 f972 	bl	8001098 <__aeabi_fcmplt>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d040      	beq.n	8007e3a <tune_foc_measure_flux_linkage_openloop+0x522>
		rpm_now += erpm_per_sec / 1000.0;
 8007db8:	4640      	mov	r0, r8
 8007dba:	f7f8 fb37 	bl	800042c <__aeabi_f2d>
 8007dbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dc2:	f7f8 f9d5 	bl	8000170 <__adddf3>
 8007dc6:	f7f8 fe6b 	bl	8000aa0 <__aeabi_d2f>
 8007dca:	4680      	mov	r8, r0
		VescToSTM_set_open_loop_rpm(rpm_now);
 8007dcc:	f7f9 f9a2 	bl	8001114 <__aeabi_f2iz>
 8007dd0:	b200      	sxth	r0, r0
 8007dd2:	f7fc fe63 	bl	8004a9c <VescToSTM_set_open_loop_rpm>
		vTaskDelay(2);
 8007dd6:	2002      	movs	r0, #2
 8007dd8:	f005 fe34 	bl	800da44 <vTaskDelay>
		float duty_now = fabsf(VescToSTM_get_duty_cycle_now());
 8007ddc:	f7fd fb74 	bl	80054c8 <VescToSTM_get_duty_cycle_now>
 8007de0:	f020 4700 	bic.w	r7, r0, #2147483648	; 0x80000000
		if (duty_now > duty_max) {
 8007de4:	4639      	mov	r1, r7
 8007de6:	4628      	mov	r0, r5
 8007de8:	f7f9 f96a 	bl	80010c0 <__aeabi_fcmpge>
 8007dec:	b900      	cbnz	r0, 8007df0 <tune_foc_measure_flux_linkage_openloop+0x4d8>
 8007dee:	463d      	mov	r5, r7
		if (cnt > 4000 && duty_now < (duty_max * 0.7)) {
 8007df0:	3c01      	subs	r4, #1
 8007df2:	d11c      	bne.n	8007e2e <tune_foc_measure_flux_linkage_openloop+0x516>
 8007df4:	4638      	mov	r0, r7
 8007df6:	f7f8 fb19 	bl	800042c <__aeabi_f2d>
 8007dfa:	4606      	mov	r6, r0
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	460f      	mov	r7, r1
 8007e00:	f7f8 fb14 	bl	800042c <__aeabi_f2d>
 8007e04:	a30e      	add	r3, pc, #56	; (adr r3, 8007e40 <tune_foc_measure_flux_linkage_openloop+0x528>)
 8007e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0a:	f7f8 fb67 	bl	80004dc <__aeabi_dmul>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	4630      	mov	r0, r6
 8007e14:	4639      	mov	r1, r7
 8007e16:	f7f8 fdd3 	bl	80009c0 <__aeabi_dcmplt>
 8007e1a:	2800      	cmp	r0, #0
 8007e1c:	d199      	bne.n	8007d52 <tune_foc_measure_flux_linkage_openloop+0x43a>
			*linkage = -3.0;
 8007e1e:	4b0b      	ldr	r3, [pc, #44]	; (8007e4c <tune_foc_measure_flux_linkage_openloop+0x534>)
 8007e20:	9a11      	ldr	r2, [sp, #68]	; 0x44
	vTaskDelay(2000);
 8007e22:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
			*linkage = -3.0;
 8007e26:	6013      	str	r3, [r2, #0]
	vTaskDelay(2000);
 8007e28:	f005 fe0c 	bl	800da44 <vTaskDelay>
	if (cnt < max_time) {
 8007e2c:	e786      	b.n	8007d3c <tune_foc_measure_flux_linkage_openloop+0x424>
		if (rpm_now >= 12000) {
 8007e2e:	4631      	mov	r1, r6
 8007e30:	4640      	mov	r0, r8
 8007e32:	f7f9 f945 	bl	80010c0 <__aeabi_fcmpge>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d0b5      	beq.n	8007da6 <tune_foc_measure_flux_linkage_openloop+0x48e>
 8007e3a:	f8cd 8000 	str.w	r8, [sp]
 8007e3e:	e65d      	b.n	8007afc <tune_foc_measure_flux_linkage_openloop+0x1e4>
 8007e40:	66666666 	.word	0x66666666
 8007e44:	3fe66666 	.word	0x3fe66666
 8007e48:	463b8000 	.word	0x463b8000
 8007e4c:	c0400000 	.word	0xc0400000

08007e50 <utils_norm_angle>:
 * Make sure that 0 <= angle < 360
 *
 * @param angle
 * The angle to normalize.
 */
void utils_norm_angle(float *angle) {
 8007e50:	b538      	push	{r3, r4, r5, lr}
	*angle = fmodf(*angle, 360.0);
 8007e52:	4909      	ldr	r1, [pc, #36]	; (8007e78 <utils_norm_angle+0x28>)
void utils_norm_angle(float *angle) {
 8007e54:	4604      	mov	r4, r0
	*angle = fmodf(*angle, 360.0);
 8007e56:	6800      	ldr	r0, [r0, #0]
 8007e58:	f007 fcf8 	bl	800f84c <fmodf>

	if (*angle < 0.0) {
 8007e5c:	2100      	movs	r1, #0
	*angle = fmodf(*angle, 360.0);
 8007e5e:	4605      	mov	r5, r0
	if (*angle < 0.0) {
 8007e60:	f7f9 f91a 	bl	8001098 <__aeabi_fcmplt>
 8007e64:	b908      	cbnz	r0, 8007e6a <utils_norm_angle+0x1a>
	*angle = fmodf(*angle, 360.0);
 8007e66:	6025      	str	r5, [r4, #0]
		*angle += 360.0;
	}
}
 8007e68:	bd38      	pop	{r3, r4, r5, pc}
		*angle += 360.0;
 8007e6a:	4628      	mov	r0, r5
 8007e6c:	4902      	ldr	r1, [pc, #8]	; (8007e78 <utils_norm_angle+0x28>)
 8007e6e:	f7f8 fe6d 	bl	8000b4c <__addsf3>
 8007e72:	6020      	str	r0, [r4, #0]
}
 8007e74:	bd38      	pop	{r3, r4, r5, pc}
 8007e76:	bf00      	nop
 8007e78:	43b40000 	.word	0x43b40000

08007e7c <utils_truncate_number>:
	while (*angle >  M_PI) {
		*angle -= 2.0 * M_PI;
	}
}

int utils_truncate_number(float *number, float min, float max) {
 8007e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int did_trunc = 0;

	if (*number > max) {
 8007e7e:	6807      	ldr	r7, [r0, #0]
int utils_truncate_number(float *number, float min, float max) {
 8007e80:	4604      	mov	r4, r0
 8007e82:	460e      	mov	r6, r1
	if (*number > max) {
 8007e84:	4638      	mov	r0, r7
 8007e86:	4611      	mov	r1, r2
int utils_truncate_number(float *number, float min, float max) {
 8007e88:	4615      	mov	r5, r2
	if (*number > max) {
 8007e8a:	f7f9 f923 	bl	80010d4 <__aeabi_fcmpgt>
 8007e8e:	b110      	cbz	r0, 8007e96 <utils_truncate_number+0x1a>
		*number = max;
		did_trunc = 1;
 8007e90:	2001      	movs	r0, #1
		*number = max;
 8007e92:	6025      	str	r5, [r4, #0]
		*number = min;
		did_trunc = 1;
	}

	return did_trunc;
}
 8007e94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else if (*number < min) {
 8007e96:	4638      	mov	r0, r7
 8007e98:	4631      	mov	r1, r6
 8007e9a:	f7f9 f8fd 	bl	8001098 <__aeabi_fcmplt>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d0f8      	beq.n	8007e94 <utils_truncate_number+0x18>
		did_trunc = 1;
 8007ea2:	2001      	movs	r0, #1
		*number = min;
 8007ea4:	6026      	str	r6, [r4, #0]
}
 8007ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ea8 <utils_map>:
	}

	return did_trunc;
}

float utils_map(float x, float in_min, float in_max, float out_min, float out_max) {
 8007ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eaa:	461c      	mov	r4, r3
 8007eac:	4616      	mov	r6, r2
 8007eae:	460f      	mov	r7, r1
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007eb0:	f7f8 fe4a 	bl	8000b48 <__aeabi_fsub>
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	9806      	ldr	r0, [sp, #24]
 8007eba:	f7f8 fe45 	bl	8000b48 <__aeabi_fsub>
 8007ebe:	4601      	mov	r1, r0
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f7f8 ff4b 	bl	8000d5c <__aeabi_fmul>
 8007ec6:	4639      	mov	r1, r7
 8007ec8:	4605      	mov	r5, r0
 8007eca:	4630      	mov	r0, r6
 8007ecc:	f7f8 fe3c 	bl	8000b48 <__aeabi_fsub>
 8007ed0:	4601      	mov	r1, r0
 8007ed2:	4628      	mov	r0, r5
 8007ed4:	f7f8 fff6 	bl	8000ec4 <__aeabi_fdiv>
 8007ed8:	4621      	mov	r1, r4
 8007eda:	f7f8 fe37 	bl	8000b4c <__addsf3>
}
 8007ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ee0 <utils_batt_liion_norm_v_to_capacity>:
}


// A mapping of a samsung 30q cell for % remaining capacity vs. voltage from
// 4.2 to 3.2, note that the you lose 15% of the 3Ah rated capacity in this range
float utils_batt_liion_norm_v_to_capacity(float norm_v) {
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	4604      	mov	r4, r0
 8007ee6:	f7f9 f8eb 	bl	80010c0 <__aeabi_fcmpge>
 8007eea:	b900      	cbnz	r0, 8007eee <utils_batt_liion_norm_v_to_capacity+0xe>
 8007eec:	2400      	movs	r4, #0
 8007eee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f7f9 f8da 	bl	80010ac <__aeabi_fcmple>
 8007ef8:	b908      	cbnz	r0, 8007efe <utils_batt_liion_norm_v_to_capacity+0x1e>
 8007efa:	f04f 547e 	mov.w	r4, #1065353216	; 0x3f800000
	// constants for polynomial fit of lithium ion battery
	const float li_p[] = {
						  -2.979767, 5.487810, -3.501286, 1.675683, 0.317147};
	utils_truncate_number(&norm_v,0.0,1.0);
	float v2 = norm_v*norm_v;
 8007efe:	4621      	mov	r1, r4
 8007f00:	4620      	mov	r0, r4
 8007f02:	f7f8 ff2b 	bl	8000d5c <__aeabi_fmul>
	float v3 = v2*norm_v;
 8007f06:	4621      	mov	r1, r4
	float v2 = norm_v*norm_v;
 8007f08:	4606      	mov	r6, r0
	float v3 = v2*norm_v;
 8007f0a:	f7f8 ff27 	bl	8000d5c <__aeabi_fmul>
 8007f0e:	4605      	mov	r5, r0
	float v4 = v3*norm_v;
	float v5 = v4*norm_v;
	float capacity = li_p[0] * v5 + li_p[1] * v4 + li_p[2] * v3 +
 8007f10:	4911      	ldr	r1, [pc, #68]	; (8007f58 <utils_batt_liion_norm_v_to_capacity+0x78>)
 8007f12:	4620      	mov	r0, r4
 8007f14:	f7f8 ff22 	bl	8000d5c <__aeabi_fmul>
 8007f18:	4910      	ldr	r1, [pc, #64]	; (8007f5c <utils_batt_liion_norm_v_to_capacity+0x7c>)
 8007f1a:	f7f8 fe17 	bl	8000b4c <__addsf3>
 8007f1e:	4629      	mov	r1, r5
 8007f20:	f7f8 ff1c 	bl	8000d5c <__aeabi_fmul>
 8007f24:	490e      	ldr	r1, [pc, #56]	; (8007f60 <utils_batt_liion_norm_v_to_capacity+0x80>)
 8007f26:	f7f8 fe11 	bl	8000b4c <__addsf3>
 8007f2a:	4621      	mov	r1, r4
 8007f2c:	f7f8 ff16 	bl	8000d5c <__aeabi_fmul>
 8007f30:	490c      	ldr	r1, [pc, #48]	; (8007f64 <utils_batt_liion_norm_v_to_capacity+0x84>)
 8007f32:	4604      	mov	r4, r0
 8007f34:	4628      	mov	r0, r5
 8007f36:	f7f8 ff11 	bl	8000d5c <__aeabi_fmul>
			li_p[3] * v2 + li_p[4] * norm_v;
 8007f3a:	490b      	ldr	r1, [pc, #44]	; (8007f68 <utils_batt_liion_norm_v_to_capacity+0x88>)
	float capacity = li_p[0] * v5 + li_p[1] * v4 + li_p[2] * v3 +
 8007f3c:	4605      	mov	r5, r0
			li_p[3] * v2 + li_p[4] * norm_v;
 8007f3e:	4630      	mov	r0, r6
 8007f40:	f7f8 ff0c 	bl	8000d5c <__aeabi_fmul>
 8007f44:	4601      	mov	r1, r0
	float capacity = li_p[0] * v5 + li_p[1] * v4 + li_p[2] * v3 +
 8007f46:	4628      	mov	r0, r5
 8007f48:	f7f8 fe00 	bl	8000b4c <__addsf3>
 8007f4c:	4601      	mov	r1, r0
 8007f4e:	4620      	mov	r0, r4
 8007f50:	f7f8 fdfc 	bl	8000b4c <__addsf3>
	return capacity;
}
 8007f54:	bd70      	pop	{r4, r5, r6, pc}
 8007f56:	bf00      	nop
 8007f58:	c03eb481 	.word	0xc03eb481
 8007f5c:	40af9c24 	.word	0x40af9c24
 8007f60:	3ea26117 	.word	0x3ea26117
 8007f64:	c0601512 	.word	0xc0601512
 8007f68:	3fd67cc8 	.word	0x3fd67cc8

08007f6c <SystemClock_Config>:

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007f6c:	2001      	movs	r0, #1
 8007f6e:	2110      	movs	r1, #16
{
 8007f70:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f74:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007f76:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8007f78:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
{
 8007f7c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007f7e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007f82:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f84:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f88:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8007f8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f90:	e9cd 3301 	strd	r3, r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f94:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007f96:	9304      	str	r3, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f98:	9300      	str	r3, [sp, #0]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8007f9a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007f9c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f9e:	9303      	str	r3, [sp, #12]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007fa0:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007fa2:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8007fa4:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007fa6:	f002 fd07 	bl	800a9b8 <HAL_RCC_OscConfig>
 8007faa:	b108      	cbz	r0, 8007fb0 <SystemClock_Config+0x44>
  __ASM volatile ("cpsid i" : : : "memory");
 8007fac:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8007fae:	e7fe      	b.n	8007fae <SystemClock_Config+0x42>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007fb0:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007fb2:	f04f 080f 	mov.w	r8, #15
 8007fb6:	f04f 0902 	mov.w	r9, #2
 8007fba:	2600      	movs	r6, #0
 8007fbc:	f44f 6780 	mov.w	r7, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007fc0:	4621      	mov	r1, r4
 8007fc2:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007fc4:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8007fc8:	e9cd 6706 	strd	r6, r7, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007fcc:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007fce:	f002 fef3 	bl	800adb8 <HAL_RCC_ClockConfig>
 8007fd2:	b108      	cbz	r0, 8007fd8 <SystemClock_Config+0x6c>
 8007fd4:	b672      	cpsid	i
  while (1)
 8007fd6:	e7fe      	b.n	8007fd6 <SystemClock_Config+0x6a>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8007fd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007fdc:	4668      	mov	r0, sp
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8007fde:	9400      	str	r4, [sp, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8007fe0:	9302      	str	r3, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007fe2:	f003 f803 	bl	800afec <HAL_RCCEx_PeriphCLKConfig>
 8007fe6:	b108      	cbz	r0, 8007fec <SystemClock_Config+0x80>
 8007fe8:	b672      	cpsid	i
  while (1)
 8007fea:	e7fe      	b.n	8007fea <SystemClock_Config+0x7e>
  HAL_RCC_EnableCSS();
 8007fec:	f002 ffb2 	bl	800af54 <HAL_RCC_EnableCSS>
}
 8007ff0:	b014      	add	sp, #80	; 0x50
 8007ff2:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
 8007ff6:	bf00      	nop

08007ff8 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ff8:	2400      	movs	r4, #0
{
 8007ffa:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8007ffe:	b09d      	sub	sp, #116	; 0x74
  HAL_Init();
 8008000:	f001 fdea 	bl	8009bd8 <HAL_Init>
  SystemClock_Config();
 8008004:	f7ff ffb2 	bl	8007f6c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008008:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 800800c:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008010:	4da9      	ldr	r5, [pc, #676]	; (80082b8 <main+0x2c0>)
  HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, GPIO_PIN_SET);
 8008012:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008014:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, GPIO_PIN_SET);
 8008016:	f44f 6100 	mov.w	r1, #2048	; 0x800
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800801a:	f043 0310 	orr.w	r3, r3, #16
 800801e:	61ab      	str	r3, [r5, #24]
 8008020:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, GPIO_PIN_SET);
 8008022:	48a6      	ldr	r0, [pc, #664]	; (80082bc <main+0x2c4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008024:	f003 0310 	and.w	r3, r3, #16
 8008028:	9301      	str	r3, [sp, #4]
 800802a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800802c:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = TPS_ENA_Pin|LED_Pin;
 800802e:	f04f 0800 	mov.w	r8, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008032:	f043 0304 	orr.w	r3, r3, #4
 8008036:	61ab      	str	r3, [r5, #24]
 8008038:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Pin = TPS_ENA_Pin|LED_Pin;
 800803a:	f04f 0902 	mov.w	r9, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800803e:	f003 0304 	and.w	r3, r3, #4
 8008042:	9302      	str	r3, [sp, #8]
 8008044:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008046:	69ab      	ldr	r3, [r5, #24]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008048:	f44f 7a80 	mov.w	sl, #256	; 0x100
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800804c:	f043 0308 	orr.w	r3, r3, #8
 8008050:	61ab      	str	r3, [r5, #24]
 8008052:	69ab      	ldr	r3, [r5, #24]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008054:	f44f 2760 	mov.w	r7, #917504	; 0xe0000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008058:	f003 0308 	and.w	r3, r3, #8
 800805c:	9303      	str	r3, [sp, #12]
 800805e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, GPIO_PIN_SET);
 8008060:	f002 fca6 	bl	800a9b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8008064:	4622      	mov	r2, r4
 8008066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800806a:	4894      	ldr	r0, [pc, #592]	; (80082bc <main+0x2c4>)
 800806c:	f002 fca0 	bl	800a9b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = PWR_BTN_Pin;
 8008070:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008074:	2300      	movs	r3, #0
  HAL_GPIO_Init(PWR_BTN_GPIO_Port, &GPIO_InitStruct);
 8008076:	4892      	ldr	r0, [pc, #584]	; (80082c0 <main+0x2c8>)
 8008078:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = PWR_BTN_Pin;
 800807a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800807e:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(PWR_BTN_GPIO_Port, &GPIO_InitStruct);
 8008080:	f002 fb84 	bl	800a78c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TPS_ENA_Pin|LED_Pin;
 8008084:	f44f 4208 	mov.w	r2, #34816	; 0x8800
 8008088:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800808a:	488c      	ldr	r0, [pc, #560]	; (80082bc <main+0x2c4>)
 800808c:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = TPS_ENA_Pin|LED_Pin;
 800808e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008092:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008096:	f002 fb79 	bl	800a78c <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800809a:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800809c:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 800809e:	f043 0301 	orr.w	r3, r3, #1
 80080a2:	616b      	str	r3, [r5, #20]
 80080a4:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80080a6:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80080a8:	f003 0301 	and.w	r3, r3, #1
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80080ac:	200c      	movs	r0, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80080b2:	f002 f82b 	bl	800a10c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80080b6:	200c      	movs	r0, #12
 80080b8:	f002 f860 	bl	800a17c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80080bc:	4622      	mov	r2, r4
 80080be:	2105      	movs	r1, #5
 80080c0:	200d      	movs	r0, #13
 80080c2:	f002 f823 	bl	800a10c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80080c6:	200d      	movs	r0, #13
 80080c8:	f002 f858 	bl	800a17c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80080cc:	4622      	mov	r2, r4
 80080ce:	2105      	movs	r1, #5
 80080d0:	2010      	movs	r0, #16
 80080d2:	f002 f81b 	bl	800a10c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80080d6:	2010      	movs	r0, #16
 80080d8:	f002 f850 	bl	800a17c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80080dc:	4622      	mov	r2, r4
 80080de:	2105      	movs	r1, #5
 80080e0:	2011      	movs	r0, #17
 80080e2:	f002 f813 	bl	800a10c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80080e6:	2011      	movs	r0, #17
 80080e8:	f002 f848 	bl	800a17c <HAL_NVIC_EnableIRQ>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80080ec:	f44f 6600 	mov.w	r6, #2048	; 0x800
  hadc1.Init.NbrOfConversion = 2;
 80080f0:	2102      	movs	r1, #2
  hadc1.Instance = ADC1;
 80080f2:	4d74      	ldr	r5, [pc, #464]	; (80082c4 <main+0x2cc>)
 80080f4:	4a74      	ldr	r2, [pc, #464]	; (80082c8 <main+0x2d0>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80080f6:	4628      	mov	r0, r5
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80080f8:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 80080fc:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
 8008100:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
  ADC_ChannelConfTypeDef sConfig = {0};
 8008104:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8008108:	941a      	str	r4, [sp, #104]	; 0x68
  ADC_ChannelConfTypeDef sConfig = {0};
 800810a:	940e      	str	r4, [sp, #56]	; 0x38
  hadc1.Init.ContinuousConvMode = DISABLE;
 800810c:	732c      	strb	r4, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800810e:	752c      	strb	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 2;
 8008110:	6129      	str	r1, [r5, #16]
  hadc1.Instance = ADC1;
 8008112:	602a      	str	r2, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8008114:	f8c5 a008 	str.w	sl, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008118:	61ef      	str	r7, [r5, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800811a:	606e      	str	r6, [r5, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800811c:	f001 fd92 	bl	8009c44 <HAL_ADC_Init>
 8008120:	b108      	cbz	r0, 8008126 <main+0x12e>
 8008122:	b672      	cpsid	i
  while (1)
 8008124:	e7fe      	b.n	8008124 <main+0x12c>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8008126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800812a:	2203      	movs	r2, #3
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800812c:	931a      	str	r3, [sp, #104]	; 0x68
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800812e:	2301      	movs	r3, #1
  sConfigInjected.InjectedNbrOfConversion = 3;
 8008130:	f04f 0b03 	mov.w	fp, #3
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8008134:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 8008138:	2401      	movs	r4, #1
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800813a:	2200      	movs	r2, #0
 800813c:	2300      	movs	r3, #0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800813e:	4628      	mov	r0, r5
 8008140:	a914      	add	r1, sp, #80	; 0x50
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8008142:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 3;
 8008146:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 800814a:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800814e:	f001 febb 	bl	8009ec8 <HAL_ADCEx_InjectedConfigChannel>
 8008152:	b108      	cbz	r0, 8008158 <main+0x160>
 8008154:	b672      	cpsid	i
  while (1)
 8008156:	e7fe      	b.n	8008156 <main+0x15e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8008158:	2204      	movs	r2, #4
 800815a:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800815c:	4628      	mov	r0, r5
 800815e:	a914      	add	r1, sp, #80	; 0x50
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8008160:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8008164:	f001 feb0 	bl	8009ec8 <HAL_ADCEx_InjectedConfigChannel>
 8008168:	b108      	cbz	r0, 800816e <main+0x176>
 800816a:	b672      	cpsid	i
  while (1)
 800816c:	e7fe      	b.n	800816c <main+0x174>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 800816e:	2205      	movs	r2, #5
 8008170:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8008172:	4628      	mov	r0, r5
 8008174:	a914      	add	r1, sp, #80	; 0x50
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8008176:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800817a:	f001 fea5 	bl	8009ec8 <HAL_ADCEx_InjectedConfigChannel>
 800817e:	b108      	cbz	r0, 8008184 <main+0x18c>
 8008180:	b672      	cpsid	i
  while (1)
 8008182:	e7fe      	b.n	8008182 <main+0x18a>
  sConfig.Channel = ADC_CHANNEL_1;
 8008184:	2201      	movs	r2, #1
 8008186:	2301      	movs	r3, #1
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8008188:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800818a:	a90c      	add	r1, sp, #48	; 0x30
 800818c:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 800818e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008192:	f001 fe0d 	bl	8009db0 <HAL_ADC_ConfigChannel>
 8008196:	b108      	cbz	r0, 800819c <main+0x1a4>
 8008198:	b672      	cpsid	i
  while (1)
 800819a:	e7fe      	b.n	800819a <main+0x1a2>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800819c:	4628      	mov	r0, r5
 800819e:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_0;
 80081a0:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80081a4:	f001 fe04 	bl	8009db0 <HAL_ADC_ConfigChannel>
 80081a8:	4603      	mov	r3, r0
 80081aa:	b108      	cbz	r0, 80081b0 <main+0x1b8>
 80081ac:	b672      	cpsid	i
  while (1)
 80081ae:	e7fe      	b.n	80081ae <main+0x1b6>
  hadc2.Instance = ADC2;
 80081b0:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80082d8 <main+0x2e0>
 80081b4:	4a45      	ldr	r2, [pc, #276]	; (80082cc <main+0x2d4>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80081b6:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
 80081ba:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
 80081be:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
 80081c2:	901a      	str	r0, [sp, #104]	; 0x68
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80081c4:	4640      	mov	r0, r8
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80081c6:	f8c8 a008 	str.w	sl, [r8, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80081ca:	f888 300c 	strb.w	r3, [r8, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80081ce:	f888 3014 	strb.w	r3, [r8, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80081d2:	f8c8 701c 	str.w	r7, [r8, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80081d6:	f8c8 6004 	str.w	r6, [r8, #4]
  hadc2.Init.NbrOfConversion = 1;
 80081da:	f8c8 4010 	str.w	r4, [r8, #16]
  hadc2.Instance = ADC2;
 80081de:	f8c8 2000 	str.w	r2, [r8]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80081e2:	f001 fd2f 	bl	8009c44 <HAL_ADC_Init>
 80081e6:	b108      	cbz	r0, 80081ec <main+0x1f4>
 80081e8:	b672      	cpsid	i
  while (1)
 80081ea:	e7fe      	b.n	80081ea <main+0x1f2>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80081ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80081f0:	2203      	movs	r2, #3
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80081f2:	931a      	str	r3, [sp, #104]	; 0x68
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80081f4:	2301      	movs	r3, #1
 80081f6:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80081fa:	2200      	movs	r2, #0
 80081fc:	2300      	movs	r3, #0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80081fe:	4640      	mov	r0, r8
 8008200:	a914      	add	r1, sp, #80	; 0x50
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8008202:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  sConfigInjected.InjectedNbrOfConversion = 3;
 8008206:	f8cd b060 	str.w	fp, [sp, #96]	; 0x60
  sConfigInjected.InjectedDiscontinuousConvMode = ENABLE;
 800820a:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800820e:	f001 fe5b 	bl	8009ec8 <HAL_ADCEx_InjectedConfigChannel>
 8008212:	b108      	cbz	r0, 8008218 <main+0x220>
 8008214:	b672      	cpsid	i
  while (1)
 8008216:	e7fe      	b.n	8008216 <main+0x21e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8008218:	2304      	movs	r3, #4
 800821a:	2402      	movs	r4, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800821c:	4640      	mov	r0, r8
 800821e:	a914      	add	r1, sp, #80	; 0x50
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 8008220:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8008224:	f001 fe50 	bl	8009ec8 <HAL_ADCEx_InjectedConfigChannel>
 8008228:	b108      	cbz	r0, 800822e <main+0x236>
 800822a:	b672      	cpsid	i
  while (1)
 800822c:	e7fe      	b.n	800822c <main+0x234>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 800822e:	2305      	movs	r3, #5
 8008230:	2403      	movs	r4, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8008232:	4640      	mov	r0, r8
 8008234:	a914      	add	r1, sp, #80	; 0x50
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8008236:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800823a:	f001 fe45 	bl	8009ec8 <HAL_ADCEx_InjectedConfigChannel>
 800823e:	b108      	cbz	r0, 8008244 <main+0x24c>
 8008240:	b672      	cpsid	i
  while (1)
 8008242:	e7fe      	b.n	8008242 <main+0x24a>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8008244:	2400      	movs	r4, #0
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008246:	2620      	movs	r6, #32
 8008248:	4621      	mov	r1, r4
 800824a:	4632      	mov	r2, r6
 800824c:	a814      	add	r0, sp, #80	; 0x50
  TIM_OC_InitTypeDef sConfigOC = {0};
 800824e:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8008252:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8008256:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800825a:	e9cd 4407 	strd	r4, r4, [sp, #28]
 800825e:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8008262:	9406      	str	r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008264:	9404      	str	r4, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008266:	9412      	str	r4, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008268:	9405      	str	r4, [sp, #20]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800826a:	f006 f9bd 	bl	800e5e8 <memset>
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800826e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8008272:	f44f 7280 	mov.w	r2, #256	; 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8008276:	2301      	movs	r3, #1
  htim1.Instance = TIM1;
 8008278:	4d15      	ldr	r5, [pc, #84]	; (80082d0 <main+0x2d8>)
 800827a:	4f16      	ldr	r7, [pc, #88]	; (80082d4 <main+0x2dc>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800827c:	4628      	mov	r0, r5
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800827e:	e9c5 4601 	strd	r4, r6, [r5, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8008282:	e9c5 1203 	strd	r1, r2, [r5, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008286:	61ac      	str	r4, [r5, #24]
  htim1.Instance = TIM1;
 8008288:	602f      	str	r7, [r5, #0]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800828a:	616b      	str	r3, [r5, #20]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800828c:	f002 ff2e 	bl	800b0ec <HAL_TIM_Base_Init>
 8008290:	b108      	cbz	r0, 8008296 <main+0x29e>
 8008292:	b672      	cpsid	i
  while (1)
 8008294:	e7fe      	b.n	8008294 <main+0x29c>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008296:	4628      	mov	r0, r5
 8008298:	f002 ffba 	bl	800b210 <HAL_TIM_PWM_Init>
 800829c:	b108      	cbz	r0, 80082a2 <main+0x2aa>
 800829e:	b672      	cpsid	i
  while (1)
 80082a0:	e7fe      	b.n	80082a0 <main+0x2a8>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80082a2:	2206      	movs	r2, #6
 80082a4:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80082a6:	4628      	mov	r0, r5
 80082a8:	a906      	add	r1, sp, #24
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80082aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80082ae:	f003 f9bd 	bl	800b62c <HAL_TIM_SlaveConfigSynchro>
 80082b2:	b198      	cbz	r0, 80082dc <main+0x2e4>
 80082b4:	b672      	cpsid	i
  while (1)
 80082b6:	e7fe      	b.n	80082b6 <main+0x2be>
 80082b8:	40021000 	.word	0x40021000
 80082bc:	40010800 	.word	0x40010800
 80082c0:	40011000 	.word	0x40011000
 80082c4:	200042c0 	.word	0x200042c0
 80082c8:	40012400 	.word	0x40012400
 80082cc:	40012800 	.word	0x40012800
 80082d0:	200043c0 	.word	0x200043c0
 80082d4:	40012c00 	.word	0x40012c00
 80082d8:	20004200 	.word	0x20004200
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082dc:	2600      	movs	r6, #0
 80082de:	2700      	movs	r7, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80082e0:	4628      	mov	r0, r5
 80082e2:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082e4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80082e8:	f003 fbcc 	bl	800ba84 <HAL_TIMEx_MasterConfigSynchronization>
 80082ec:	4602      	mov	r2, r0
 80082ee:	b108      	cbz	r0, 80082f4 <main+0x2fc>
 80082f0:	b672      	cpsid	i
  while (1)
 80082f2:	e7fe      	b.n	80082f2 <main+0x2fa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80082f4:	f04f 0860 	mov.w	r8, #96	; 0x60
 80082f8:	f04f 0900 	mov.w	r9, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80082fc:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80082fe:	a90c      	add	r1, sp, #48	; 0x30
 8008300:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008302:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
 8008306:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800830a:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800830e:	f002 ffe3 	bl	800b2d8 <HAL_TIM_PWM_ConfigChannel>
 8008312:	b108      	cbz	r0, 8008318 <main+0x320>
 8008314:	b672      	cpsid	i
  while (1)
 8008316:	e7fe      	b.n	8008316 <main+0x31e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008318:	2204      	movs	r2, #4
 800831a:	4628      	mov	r0, r5
 800831c:	a90c      	add	r1, sp, #48	; 0x30
 800831e:	f002 ffdb 	bl	800b2d8 <HAL_TIM_PWM_ConfigChannel>
 8008322:	b108      	cbz	r0, 8008328 <main+0x330>
 8008324:	b672      	cpsid	i
  while (1)
 8008326:	e7fe      	b.n	8008326 <main+0x32e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8008328:	2208      	movs	r2, #8
 800832a:	4628      	mov	r0, r5
 800832c:	a90c      	add	r1, sp, #48	; 0x30
 800832e:	f002 ffd3 	bl	800b2d8 <HAL_TIM_PWM_ConfigChannel>
 8008332:	b108      	cbz	r0, 8008338 <main+0x340>
 8008334:	b672      	cpsid	i
  while (1)
 8008336:	e7fe      	b.n	8008336 <main+0x33e>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8008338:	f04f 0870 	mov.w	r8, #112	; 0x70
 800833c:	f240 79cf 	movw	r9, #1999	; 0x7cf
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008340:	220c      	movs	r2, #12
 8008342:	4628      	mov	r0, r5
 8008344:	a90c      	add	r1, sp, #48	; 0x30
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8008346:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800834a:	f002 ffc5 	bl	800b2d8 <HAL_TIM_PWM_ConfigChannel>
 800834e:	4603      	mov	r3, r0
 8008350:	b108      	cbz	r0, 8008356 <main+0x35e>
 8008352:	b672      	cpsid	i
  while (1)
 8008354:	e7fe      	b.n	8008354 <main+0x35c>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8008356:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800835a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800835e:	f44f 7880 	mov.w	r8, #256	; 0x100
 8008362:	f04f 0919 	mov.w	r9, #25
 8008366:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800836a:	4628      	mov	r0, r5
 800836c:	a914      	add	r1, sp, #80	; 0x50
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800836e:	e9cd 6718 	strd	r6, r7, [sp, #96]	; 0x60
 8008372:	e9cd 8916 	strd	r8, r9, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008376:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008378:	f003 fbb6 	bl	800bae8 <HAL_TIMEx_ConfigBreakDeadTime>
 800837c:	4604      	mov	r4, r0
 800837e:	b108      	cbz	r0, 8008384 <main+0x38c>
 8008380:	b672      	cpsid	i
  while (1)
 8008382:	e7fe      	b.n	8008382 <main+0x38a>
  HAL_TIM_MspPostInit(&htim1);
 8008384:	4628      	mov	r0, r5
 8008386:	f001 f92b 	bl	80095e0 <HAL_TIM_MspPostInit>
  htim3.Init.Period = M1_HALL_TIM_PERIOD;
 800838a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim3.Instance = TIM3;
 800838e:	4865      	ldr	r0, [pc, #404]	; (8008524 <main+0x52c>)
 8008390:	4b65      	ldr	r3, [pc, #404]	; (8008528 <main+0x530>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008392:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8008396:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  TIM_HallSensor_InitTypeDef sConfig = {0};
 800839a:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 800839e:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80083a2:	e9cd 4406 	strd	r4, r4, [sp, #24]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80083a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
  htim3.Init.Period = M1_HALL_TIM_PERIOD;
 80083aa:	60c2      	str	r2, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80083ac:	6104      	str	r4, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80083ae:	6184      	str	r4, [r0, #24]
  htim3.Instance = TIM3;
 80083b0:	6003      	str	r3, [r0, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80083b2:	f002 fe9b 	bl	800b0ec <HAL_TIM_Base_Init>
 80083b6:	b108      	cbz	r0, 80083bc <main+0x3c4>
 80083b8:	b672      	cpsid	i
  while (1)
 80083ba:	e7fe      	b.n	80083ba <main+0x3c2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80083bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80083c0:	4858      	ldr	r0, [pc, #352]	; (8008524 <main+0x52c>)
 80083c2:	a914      	add	r1, sp, #80	; 0x50
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80083c4:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80083c6:	f003 f88d 	bl	800b4e4 <HAL_TIM_ConfigClockSource>
 80083ca:	b108      	cbz	r0, 80083d0 <main+0x3d8>
 80083cc:	b672      	cpsid	i
  while (1)
 80083ce:	e7fe      	b.n	80083ce <main+0x3d6>
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80083d0:	2400      	movs	r4, #0
 80083d2:	2500      	movs	r5, #0
 80083d4:	220a      	movs	r2, #10
 80083d6:	2300      	movs	r3, #0
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80083d8:	4852      	ldr	r0, [pc, #328]	; (8008524 <main+0x52c>)
 80083da:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80083dc:	e9cd 450c 	strd	r4, r5, [sp, #48]	; 0x30
 80083e0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 80083e4:	f003 fae8 	bl	800b9b8 <HAL_TIMEx_HallSensor_Init>
 80083e8:	b108      	cbz	r0, 80083ee <main+0x3f6>
 80083ea:	b672      	cpsid	i
  while (1)
 80083ec:	e7fe      	b.n	80083ec <main+0x3f4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80083ee:	2300      	movs	r3, #0
 80083f0:	2250      	movs	r2, #80	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80083f2:	484c      	ldr	r0, [pc, #304]	; (8008524 <main+0x52c>)
 80083f4:	a906      	add	r1, sp, #24
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 80083f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80083fa:	f003 fb43 	bl	800ba84 <HAL_TIMEx_MasterConfigSynchronization>
 80083fe:	4603      	mov	r3, r0
 8008400:	b108      	cbz	r0, 8008406 <main+0x40e>
 8008402:	b672      	cpsid	i
  while (1)
 8008404:	e7fe      	b.n	8008404 <main+0x40c>
  huart3.Init.BaudRate = 115200;
 8008406:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart3.Init.Mode = UART_MODE_TX_RX;
 800840a:	240c      	movs	r4, #12
  huart3.Instance = USART3;
 800840c:	4847      	ldr	r0, [pc, #284]	; (800852c <main+0x534>)
 800840e:	4a48      	ldr	r2, [pc, #288]	; (8008530 <main+0x538>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8008410:	e9c0 5301 	strd	r5, r3, [r0, #4]
  huart3.Init.Parity = UART_PARITY_NONE;
 8008414:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8008418:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.Instance = USART3;
 800841c:	6002      	str	r2, [r0, #0]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800841e:	6144      	str	r4, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8008420:	f003 fb90 	bl	800bb44 <HAL_UART_Init>
 8008424:	4603      	mov	r3, r0
 8008426:	b108      	cbz	r0, 800842c <main+0x434>
 8008428:	b672      	cpsid	i
  while (1)
 800842a:	e7fe      	b.n	800842a <main+0x432>
  huart1.Instance = USART1;
 800842c:	4841      	ldr	r0, [pc, #260]	; (8008534 <main+0x53c>)
 800842e:	4a42      	ldr	r2, [pc, #264]	; (8008538 <main+0x540>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008430:	e9c0 5301 	strd	r5, r3, [r0, #4]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008434:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008438:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800843c:	61c3      	str	r3, [r0, #28]
  huart1.Instance = USART1;
 800843e:	6002      	str	r2, [r0, #0]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008440:	f003 fb80 	bl	800bb44 <HAL_UART_Init>
 8008444:	4603      	mov	r3, r0
 8008446:	b108      	cbz	r0, 800844c <main+0x454>
 8008448:	b672      	cpsid	i
  while (1)
 800844a:	e7fe      	b.n	800844a <main+0x452>
  huart2.Instance = USART2;
 800844c:	483b      	ldr	r0, [pc, #236]	; (800853c <main+0x544>)
 800844e:	4a3c      	ldr	r2, [pc, #240]	; (8008540 <main+0x548>)
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008450:	e9c0 4305 	strd	r4, r3, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008454:	e9c0 5301 	strd	r5, r3, [r0, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008458:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800845c:	61c3      	str	r3, [r0, #28]
  huart2.Instance = USART2;
 800845e:	6002      	str	r2, [r0, #0]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8008460:	f003 fbda 	bl	800bc18 <HAL_HalfDuplex_Init>
 8008464:	4604      	mov	r4, r0
 8008466:	b108      	cbz	r0, 800846c <main+0x474>
 8008468:	b672      	cpsid	i
  while (1)
 800846a:	e7fe      	b.n	800846a <main+0x472>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 800846c:	4602      	mov	r2, r0
 800846e:	2102      	movs	r1, #2
 8008470:	2012      	movs	r0, #18
 8008472:	f001 fe4b 	bl	800a10c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8008476:	2012      	movs	r0, #18
 8008478:	f001 fe80 	bl	800a17c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800847c:	4622      	mov	r2, r4
 800847e:	4621      	mov	r1, r4
 8008480:	2019      	movs	r0, #25
 8008482:	f001 fe43 	bl	800a10c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008486:	2019      	movs	r0, #25
 8008488:	f001 fe78 	bl	800a17c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 4, 0);
 800848c:	4622      	mov	r2, r4
 800848e:	2104      	movs	r1, #4
 8008490:	2018      	movs	r0, #24
 8008492:	f001 fe3b 	bl	800a10c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8008496:	2018      	movs	r0, #24
 8008498:	f001 fe70 	bl	800a17c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800849c:	4622      	mov	r2, r4
 800849e:	4621      	mov	r1, r4
 80084a0:	200b      	movs	r0, #11
 80084a2:	f001 fe33 	bl	800a10c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80084a6:	200b      	movs	r0, #11
 80084a8:	f001 fe68 	bl	800a17c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 80084ac:	4622      	mov	r2, r4
 80084ae:	2103      	movs	r1, #3
 80084b0:	201d      	movs	r0, #29
 80084b2:	f001 fe2b 	bl	800a10c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80084b6:	201d      	movs	r0, #29
 80084b8:	f001 fe60 	bl	800a17c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80084bc:	4622      	mov	r2, r4
 80084be:	2105      	movs	r1, #5
 80084c0:	2025      	movs	r0, #37	; 0x25
 80084c2:	f001 fe23 	bl	800a10c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80084c6:	2025      	movs	r0, #37	; 0x25
 80084c8:	f001 fe58 	bl	800a17c <HAL_NVIC_EnableIRQ>
  MX_MotorControl_Init();
 80084cc:	f7fb f846 	bl	800355c <MX_MotorControl_Init>
  HAL_Delay(100);
 80084d0:	2064      	movs	r0, #100	; 0x64
 80084d2:	f001 fba5 	bl	8009c20 <HAL_Delay>
  conf_general_init();
 80084d6:	f7fd fbff 	bl	8005cd8 <conf_general_init>
  osKernelInitialize();
 80084da:	f003 fced 	bl	800beb8 <osKernelInitialize>
  HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, GPIO_PIN_SET);
 80084de:	2201      	movs	r2, #1
 80084e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80084e4:	4817      	ldr	r0, [pc, #92]	; (8008544 <main+0x54c>)
 80084e6:	f002 fa63 	bl	800a9b0 <HAL_GPIO_WritePin>
  mediumFrequencyHandle = osThreadNew(startMediumFrequencyTask, NULL, &mediumFrequency_attributes);
 80084ea:	4621      	mov	r1, r4
 80084ec:	4a16      	ldr	r2, [pc, #88]	; (8008548 <main+0x550>)
 80084ee:	4817      	ldr	r0, [pc, #92]	; (800854c <main+0x554>)
 80084f0:	f003 fd1e 	bl	800bf30 <osThreadNew>
 80084f4:	4605      	mov	r5, r0
 80084f6:	4b16      	ldr	r3, [pc, #88]	; (8008550 <main+0x558>)
  safetyHandle = osThreadNew(StartSafetyTask, NULL, &safety_attributes);
 80084f8:	4621      	mov	r1, r4
 80084fa:	4a16      	ldr	r2, [pc, #88]	; (8008554 <main+0x55c>)
 80084fc:	4816      	ldr	r0, [pc, #88]	; (8008558 <main+0x560>)
  mediumFrequencyHandle = osThreadNew(startMediumFrequencyTask, NULL, &mediumFrequency_attributes);
 80084fe:	601d      	str	r5, [r3, #0]
  safetyHandle = osThreadNew(StartSafetyTask, NULL, &safety_attributes);
 8008500:	f003 fd16 	bl	800bf30 <osThreadNew>
 8008504:	4b15      	ldr	r3, [pc, #84]	; (800855c <main+0x564>)
 8008506:	6018      	str	r0, [r3, #0]
  task_init(); //bring up user tasks
 8008508:	f001 fb22 	bl	8009b50 <task_init>
  HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, GPIO_PIN_SET);
 800850c:	2201      	movs	r2, #1
 800850e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008512:	480c      	ldr	r0, [pc, #48]	; (8008544 <main+0x54c>)
 8008514:	f002 fa4c 	bl	800a9b0 <HAL_GPIO_WritePin>
  osKernelStart();
 8008518:	f003 fce8 	bl	800beec <osKernelStart>
  vTaskSwitchContext();
 800851c:	f005 fae8 	bl	800daf0 <vTaskSwitchContext>
  while (1)
 8008520:	e7fe      	b.n	8008520 <main+0x528>
 8008522:	bf00      	nop
 8008524:	20004274 	.word	0x20004274
 8008528:	40000400 	.word	0x40000400
 800852c:	200041bc 	.word	0x200041bc
 8008530:	40004800 	.word	0x40004800
 8008534:	20004338 	.word	0x20004338
 8008538:	40013800 	.word	0x40013800
 800853c:	20004408 	.word	0x20004408
 8008540:	40004400 	.word	0x40004400
 8008544:	40010800 	.word	0x40010800
 8008548:	08010d7c 	.word	0x08010d7c
 800854c:	08003439 	.word	0x08003439
 8008550:	20004334 	.word	0x20004334
 8008554:	08010da0 	.word	0x08010da0
 8008558:	08003449 	.word	0x08003449
 800855c:	200042bc 	.word	0x200042bc

08008560 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM4) {
 8008560:	4b03      	ldr	r3, [pc, #12]	; (8008570 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8008562:	6802      	ldr	r2, [r0, #0]
 8008564:	429a      	cmp	r2, r3
 8008566:	d000      	beq.n	800856a <HAL_TIM_PeriodElapsedCallback+0xa>
}
 8008568:	4770      	bx	lr
    HAL_IncTick();
 800856a:	f001 bb47 	b.w	8009bfc <HAL_IncTick>
 800856e:	bf00      	nop
 8008570:	40000800 	.word	0x40000800

08008574 <Error_Handler>:
 8008574:	b672      	cpsid	i
  while (1)
 8008576:	e7fe      	b.n	8008576 <Error_Handler+0x2>

08008578 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 8008578:	429a      	cmp	r2, r3
    ((char*)buffer)[idx] = character;
 800857a:	bf38      	it	cc
 800857c:	5488      	strbcc	r0, [r1, r2]
  }
}
 800857e:	4770      	bx	lr

08008580 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop

08008584 <_out_rev>:
}


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8008584:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008588:	469a      	mov	sl, r3
  const size_t start_idx = idx;

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800858a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
{
 800858c:	4617      	mov	r7, r2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800858e:	079a      	lsls	r2, r3, #30
{
 8008590:	4605      	mov	r5, r0
 8008592:	468b      	mov	fp, r1
 8008594:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8008598:	d111      	bne.n	80085be <_out_rev+0x3a>
    for (size_t i = len; i < width; i++) {
 800859a:	e9dd 320b 	ldrd	r3, r2, [sp, #44]	; 0x2c
 800859e:	4293      	cmp	r3, r2
 80085a0:	d20d      	bcs.n	80085be <_out_rev+0x3a>
 80085a2:	4613      	mov	r3, r2
 80085a4:	463c      	mov	r4, r7
 80085a6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085a8:	1a9e      	subs	r6, r3, r2
 80085aa:	443e      	add	r6, r7
      out(' ', buffer, idx++, maxlen);
 80085ac:	4622      	mov	r2, r4
 80085ae:	4653      	mov	r3, sl
 80085b0:	4659      	mov	r1, fp
 80085b2:	2020      	movs	r0, #32
 80085b4:	3401      	adds	r4, #1
 80085b6:	47a8      	blx	r5
    for (size_t i = len; i < width; i++) {
 80085b8:	42b4      	cmp	r4, r6
 80085ba:	d1f7      	bne.n	80085ac <_out_rev+0x28>
 80085bc:	e000      	b.n	80085c0 <_out_rev+0x3c>
 80085be:	463e      	mov	r6, r7
    }
  }

  // reverse string
  while (len) {
 80085c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085c2:	b173      	cbz	r3, 80085e2 <_out_rev+0x5e>
 80085c4:	eb08 0403 	add.w	r4, r8, r3
 80085c8:	eb06 0904 	add.w	r9, r6, r4
 80085cc:	eba9 0204 	sub.w	r2, r9, r4
    out(buf[--len], buffer, idx++, maxlen);
 80085d0:	f814 0d01 	ldrb.w	r0, [r4, #-1]!
 80085d4:	4653      	mov	r3, sl
 80085d6:	4659      	mov	r1, fp
 80085d8:	47a8      	blx	r5
  while (len) {
 80085da:	4544      	cmp	r4, r8
 80085dc:	d1f6      	bne.n	80085cc <_out_rev+0x48>
 80085de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085e0:	441e      	add	r6, r3
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 80085e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085e4:	079b      	lsls	r3, r3, #30
 80085e6:	d519      	bpl.n	800861c <_out_rev+0x98>
    while (idx - start_idx < width) {
 80085e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80085ea:	1bf4      	subs	r4, r6, r7
 80085ec:	42a3      	cmp	r3, r4
 80085ee:	d915      	bls.n	800861c <_out_rev+0x98>
 80085f0:	4698      	mov	r8, r3
      out(' ', buffer, idx++, maxlen);
 80085f2:	19e2      	adds	r2, r4, r7
 80085f4:	4653      	mov	r3, sl
 80085f6:	4659      	mov	r1, fp
 80085f8:	2020      	movs	r0, #32
 80085fa:	3401      	adds	r4, #1
 80085fc:	47a8      	blx	r5
    while (idx - start_idx < width) {
 80085fe:	4544      	cmp	r4, r8
 8008600:	d3f7      	bcc.n	80085f2 <_out_rev+0x6e>
 8008602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008604:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008606:	3b01      	subs	r3, #1
 8008608:	443b      	add	r3, r7
 800860a:	f1c7 0701 	rsb	r7, r7, #1
 800860e:	1b9b      	subs	r3, r3, r6
 8008610:	4437      	add	r7, r6
 8008612:	42ba      	cmp	r2, r7
 8008614:	bf38      	it	cc
 8008616:	2300      	movcc	r3, #0
 8008618:	3601      	adds	r6, #1
 800861a:	441e      	add	r6, r3
    }
  }

  return idx;
}
 800861c:	4630      	mov	r0, r6
 800861e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008622:	bf00      	nop

08008624 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8008624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008628:	b093      	sub	sp, #76	; 0x4c
 800862a:	469a      	mov	sl, r3
 800862c:	e9dd 581e 	ldrd	r5, r8, [sp, #120]	; 0x78
 8008630:	f89d 3074 	ldrb.w	r3, [sp, #116]	; 0x74
 8008634:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008636:	9308      	str	r3, [sp, #32]
 8008638:	e9cd 0105 	strd	r0, r1, [sp, #20]
 800863c:	e9dd 3e20 	ldrd	r3, lr, [sp, #128]	; 0x80
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8008640:	b94c      	cbnz	r4, 8008656 <_ntoa_long+0x32>
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8008642:	f41e 6180 	ands.w	r1, lr, #1024	; 0x400
    flags &= ~FLAGS_HASH;
 8008646:	f02e 0010 	bic.w	r0, lr, #16
  if (!(flags & FLAGS_PRECISION) || value) {
 800864a:	9109      	str	r1, [sp, #36]	; 0x24
 800864c:	f040 808a 	bne.w	8008764 <_ntoa_long+0x140>
    flags &= ~FLAGS_HASH;
 8008650:	4686      	mov	lr, r0
  if (!(flags & FLAGS_PRECISION) || value) {
 8008652:	9107      	str	r1, [sp, #28]
 8008654:	e005      	b.n	8008662 <_ntoa_long+0x3e>
 8008656:	f40e 6180 	and.w	r1, lr, #1024	; 0x400
 800865a:	9109      	str	r1, [sp, #36]	; 0x24
 800865c:	f00e 0110 	and.w	r1, lr, #16
 8008660:	9107      	str	r1, [sp, #28]
 8008662:	f01e 0f20 	tst.w	lr, #32
 8008666:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800866a:	bf14      	ite	ne
 800866c:	f04f 0937 	movne.w	r9, #55	; 0x37
 8008670:	f04f 0957 	moveq.w	r9, #87	; 0x57
 8008674:	46dc      	mov	ip, fp
 8008676:	2100      	movs	r1, #0
 8008678:	e002      	b.n	8008680 <_ntoa_long+0x5c>
      value /= base;
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800867a:	2920      	cmp	r1, #32
 800867c:	d012      	beq.n	80086a4 <_ntoa_long+0x80>
      value /= base;
 800867e:	4634      	mov	r4, r6
      const char digit = (char)(value % base);
 8008680:	fbb4 f6f5 	udiv	r6, r4, r5
 8008684:	fb05 4716 	mls	r7, r5, r6, r4
 8008688:	b2f8      	uxtb	r0, r7
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800868a:	2f09      	cmp	r7, #9
 800868c:	f100 0730 	add.w	r7, r0, #48	; 0x30
 8008690:	bf8a      	itet	hi
 8008692:	4448      	addhi	r0, r9
 8008694:	b2f8      	uxtbls	r0, r7
 8008696:	b2c0      	uxtbhi	r0, r0
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8008698:	42ac      	cmp	r4, r5
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800869a:	f101 0101 	add.w	r1, r1, #1
 800869e:	f80c 0b01 	strb.w	r0, [ip], #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80086a2:	d2ea      	bcs.n	800867a <_ntoa_long+0x56>
  if (!(flags & FLAGS_LEFT)) {
 80086a4:	f01e 0f02 	tst.w	lr, #2
 80086a8:	d14a      	bne.n	8008740 <_ntoa_long+0x11c>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d063      	beq.n	8008776 <_ntoa_long+0x152>
 80086ae:	f01e 0601 	ands.w	r6, lr, #1
 80086b2:	f000 8086 	beq.w	80087c2 <_ntoa_long+0x19e>
 80086b6:	9808      	ldr	r0, [sp, #32]
 80086b8:	2800      	cmp	r0, #0
 80086ba:	f040 80a9 	bne.w	8008810 <_ntoa_long+0x1ec>
 80086be:	f01e 0f0c 	tst.w	lr, #12
 80086c2:	f040 80a5 	bne.w	8008810 <_ntoa_long+0x1ec>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80086c6:	4588      	cmp	r8, r1
 80086c8:	d968      	bls.n	800879c <_ntoa_long+0x178>
 80086ca:	2920      	cmp	r1, #32
 80086cc:	d159      	bne.n	8008782 <_ntoa_long+0x15e>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80086ce:	2b20      	cmp	r3, #32
 80086d0:	d936      	bls.n	8008740 <_ntoa_long+0x11c>
  if (flags & FLAGS_HASH) {
 80086d2:	9907      	ldr	r1, [sp, #28]
 80086d4:	2900      	cmp	r1, #0
 80086d6:	d07b      	beq.n	80087d0 <_ntoa_long+0x1ac>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80086d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086da:	2900      	cmp	r1, #0
 80086dc:	f040 80c3 	bne.w	8008866 <_ntoa_long+0x242>
 80086e0:	2120      	movs	r1, #32
 80086e2:	4588      	cmp	r8, r1
 80086e4:	f000 8096 	beq.w	8008814 <_ntoa_long+0x1f0>
 80086e8:	428b      	cmp	r3, r1
 80086ea:	f000 8093 	beq.w	8008814 <_ntoa_long+0x1f0>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80086ee:	2d10      	cmp	r5, #16
 80086f0:	f000 809b 	beq.w	800882a <_ntoa_long+0x206>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80086f4:	2d02      	cmp	r5, #2
 80086f6:	f000 8085 	beq.w	8008804 <_ntoa_long+0x1e0>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80086fa:	2920      	cmp	r1, #32
 80086fc:	d011      	beq.n	8008722 <_ntoa_long+0xfe>
 80086fe:	4608      	mov	r0, r1
      buf[len++] = '0';
 8008700:	2430      	movs	r4, #48	; 0x30
 8008702:	a912      	add	r1, sp, #72	; 0x48
 8008704:	4401      	add	r1, r0
 8008706:	f801 4c20 	strb.w	r4, [r1, #-32]
 800870a:	1c41      	adds	r1, r0, #1
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800870c:	2920      	cmp	r1, #32
 800870e:	d05f      	beq.n	80087d0 <_ntoa_long+0x1ac>
    if (negative) {
 8008710:	9808      	ldr	r0, [sp, #32]
 8008712:	2800      	cmp	r0, #0
 8008714:	d05e      	beq.n	80087d4 <_ntoa_long+0x1b0>
      buf[len++] = '-';
 8008716:	242d      	movs	r4, #45	; 0x2d
 8008718:	a812      	add	r0, sp, #72	; 0x48
 800871a:	4408      	add	r0, r1
 800871c:	f800 4c20 	strb.w	r4, [r0, #-32]
 8008720:	3101      	adds	r1, #1
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8008722:	e9cd 3e02 	strd	r3, lr, [sp, #8]
 8008726:	e9cd b100 	strd	fp, r1, [sp]
 800872a:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 800872e:	4653      	mov	r3, sl
 8008730:	f7ff ff28 	bl	8008584 <_out_rev>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
}
 8008734:	b013      	add	sp, #76	; 0x4c
 8008736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800873a:	2e00      	cmp	r6, #0
 800873c:	bf08      	it	eq
 800873e:	2300      	moveq	r3, #0
  if (flags & FLAGS_HASH) {
 8008740:	9807      	ldr	r0, [sp, #28]
 8008742:	2800      	cmp	r0, #0
 8008744:	d0e2      	beq.n	800870c <_ntoa_long+0xe8>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8008746:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008748:	2800      	cmp	r0, #0
 800874a:	d1d0      	bne.n	80086ee <_ntoa_long+0xca>
 800874c:	2900      	cmp	r1, #0
 800874e:	d1c8      	bne.n	80086e2 <_ntoa_long+0xbe>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008750:	2d10      	cmp	r5, #16
 8008752:	d077      	beq.n	8008844 <_ntoa_long+0x220>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008754:	2d02      	cmp	r5, #2
 8008756:	f000 808d 	beq.w	8008874 <_ntoa_long+0x250>
      buf[len++] = '0';
 800875a:	2130      	movs	r1, #48	; 0x30
 800875c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008760:	2101      	movs	r1, #1
 8008762:	e7d5      	b.n	8008710 <_ntoa_long+0xec>
  if (!(flags & FLAGS_LEFT)) {
 8008764:	f01e 0102 	ands.w	r1, lr, #2
 8008768:	4686      	mov	lr, r0
 800876a:	d147      	bne.n	80087fc <_ntoa_long+0x1d8>
 800876c:	9107      	str	r1, [sp, #28]
 800876e:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8008772:	2b00      	cmp	r3, #0
 8008774:	d19b      	bne.n	80086ae <_ntoa_long+0x8a>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008776:	4588      	cmp	r8, r1
 8008778:	f00e 0601 	and.w	r6, lr, #1
 800877c:	d9dd      	bls.n	800873a <_ntoa_long+0x116>
 800877e:	2920      	cmp	r1, #32
 8008780:	d0db      	beq.n	800873a <_ntoa_long+0x116>
 8008782:	1e48      	subs	r0, r1, #1
      buf[len++] = '0';
 8008784:	2430      	movs	r4, #48	; 0x30
 8008786:	4458      	add	r0, fp
 8008788:	e001      	b.n	800878e <_ntoa_long+0x16a>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800878a:	2920      	cmp	r1, #32
 800878c:	d004      	beq.n	8008798 <_ntoa_long+0x174>
      buf[len++] = '0';
 800878e:	3101      	adds	r1, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008790:	4588      	cmp	r8, r1
      buf[len++] = '0';
 8008792:	f800 4f01 	strb.w	r4, [r0, #1]!
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008796:	d8f8      	bhi.n	800878a <_ntoa_long+0x166>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008798:	2e00      	cmp	r6, #0
 800879a:	d0d1      	beq.n	8008740 <_ntoa_long+0x11c>
 800879c:	4299      	cmp	r1, r3
 800879e:	d2cf      	bcs.n	8008740 <_ntoa_long+0x11c>
 80087a0:	291f      	cmp	r1, #31
 80087a2:	d896      	bhi.n	80086d2 <_ntoa_long+0xae>
 80087a4:	1e48      	subs	r0, r1, #1
      buf[len++] = '0';
 80087a6:	2430      	movs	r4, #48	; 0x30
 80087a8:	4458      	add	r0, fp
 80087aa:	e001      	b.n	80087b0 <_ntoa_long+0x18c>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80087ac:	2920      	cmp	r1, #32
 80087ae:	d090      	beq.n	80086d2 <_ntoa_long+0xae>
      buf[len++] = '0';
 80087b0:	3101      	adds	r1, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80087b2:	4299      	cmp	r1, r3
      buf[len++] = '0';
 80087b4:	f800 4f01 	strb.w	r4, [r0, #1]!
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80087b8:	d1f8      	bne.n	80087ac <_ntoa_long+0x188>
  if (flags & FLAGS_HASH) {
 80087ba:	9807      	ldr	r0, [sp, #28]
 80087bc:	2800      	cmp	r0, #0
 80087be:	d1c2      	bne.n	8008746 <_ntoa_long+0x122>
 80087c0:	e7a4      	b.n	800870c <_ntoa_long+0xe8>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80087c2:	4588      	cmp	r8, r1
 80087c4:	d9bc      	bls.n	8008740 <_ntoa_long+0x11c>
 80087c6:	2920      	cmp	r1, #32
 80087c8:	d1db      	bne.n	8008782 <_ntoa_long+0x15e>
  if (flags & FLAGS_HASH) {
 80087ca:	9807      	ldr	r0, [sp, #28]
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d1ba      	bne.n	8008746 <_ntoa_long+0x122>
 80087d0:	2120      	movs	r1, #32
 80087d2:	e7a6      	b.n	8008722 <_ntoa_long+0xfe>
    else if (flags & FLAGS_PLUS) {
 80087d4:	f01e 0f04 	tst.w	lr, #4
 80087d8:	d109      	bne.n	80087ee <_ntoa_long+0x1ca>
    else if (flags & FLAGS_SPACE) {
 80087da:	f01e 0f08 	tst.w	lr, #8
 80087de:	d0a0      	beq.n	8008722 <_ntoa_long+0xfe>
      buf[len++] = ' ';
 80087e0:	2420      	movs	r4, #32
 80087e2:	a812      	add	r0, sp, #72	; 0x48
 80087e4:	4408      	add	r0, r1
 80087e6:	f800 4c20 	strb.w	r4, [r0, #-32]
 80087ea:	3101      	adds	r1, #1
 80087ec:	e799      	b.n	8008722 <_ntoa_long+0xfe>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80087ee:	242b      	movs	r4, #43	; 0x2b
 80087f0:	a812      	add	r0, sp, #72	; 0x48
 80087f2:	4408      	add	r0, r1
 80087f4:	f800 4c20 	strb.w	r4, [r0, #-32]
 80087f8:	3101      	adds	r1, #1
 80087fa:	e792      	b.n	8008722 <_ntoa_long+0xfe>
  size_t len = 0U;
 80087fc:	4621      	mov	r1, r4
 80087fe:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 8008802:	e785      	b.n	8008710 <_ntoa_long+0xec>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008804:	2920      	cmp	r1, #32
 8008806:	d08c      	beq.n	8008722 <_ntoa_long+0xfe>
 8008808:	eb0b 0001 	add.w	r0, fp, r1
 800880c:	3101      	adds	r1, #1
 800880e:	e009      	b.n	8008824 <_ntoa_long+0x200>
      width--;
 8008810:	3b01      	subs	r3, #1
 8008812:	e758      	b.n	80086c6 <_ntoa_long+0xa2>
      if (len && (base == 16U)) {
 8008814:	1e48      	subs	r0, r1, #1
 8008816:	d09b      	beq.n	8008750 <_ntoa_long+0x12c>
 8008818:	2d10      	cmp	r5, #16
 800881a:	d030      	beq.n	800887e <_ntoa_long+0x25a>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800881c:	2d02      	cmp	r5, #2
 800881e:	f47f af6f 	bne.w	8008700 <_ntoa_long+0xdc>
 8008822:	4458      	add	r0, fp
      buf[len++] = 'b';
 8008824:	2462      	movs	r4, #98	; 0x62
 8008826:	7004      	strb	r4, [r0, #0]
 8008828:	e767      	b.n	80086fa <_ntoa_long+0xd6>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800882a:	f01e 0f20 	tst.w	lr, #32
 800882e:	d011      	beq.n	8008854 <_ntoa_long+0x230>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008830:	2920      	cmp	r1, #32
 8008832:	f43f af76 	beq.w	8008722 <_ntoa_long+0xfe>
      buf[len++] = 'X';
 8008836:	2458      	movs	r4, #88	; 0x58
 8008838:	a812      	add	r0, sp, #72	; 0x48
 800883a:	4408      	add	r0, r1
 800883c:	f800 4c20 	strb.w	r4, [r0, #-32]
 8008840:	3101      	adds	r1, #1
 8008842:	e75a      	b.n	80086fa <_ntoa_long+0xd6>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008844:	f01e 0f20 	tst.w	lr, #32
 8008848:	d10f      	bne.n	800886a <_ntoa_long+0x246>
      buf[len++] = 'x';
 800884a:	2178      	movs	r1, #120	; 0x78
 800884c:	2001      	movs	r0, #1
 800884e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8008852:	e755      	b.n	8008700 <_ntoa_long+0xdc>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008854:	2920      	cmp	r1, #32
 8008856:	f43f af64 	beq.w	8008722 <_ntoa_long+0xfe>
 800885a:	eb0b 0401 	add.w	r4, fp, r1
 800885e:	3101      	adds	r1, #1
      buf[len++] = 'x';
 8008860:	2078      	movs	r0, #120	; 0x78
 8008862:	7020      	strb	r0, [r4, #0]
 8008864:	e749      	b.n	80086fa <_ntoa_long+0xd6>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8008866:	2120      	movs	r1, #32
 8008868:	e741      	b.n	80086ee <_ntoa_long+0xca>
      buf[len++] = 'X';
 800886a:	2158      	movs	r1, #88	; 0x58
 800886c:	2001      	movs	r0, #1
 800886e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8008872:	e745      	b.n	8008700 <_ntoa_long+0xdc>
      buf[len++] = 'b';
 8008874:	2162      	movs	r1, #98	; 0x62
 8008876:	2001      	movs	r0, #1
 8008878:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800887c:	e740      	b.n	8008700 <_ntoa_long+0xdc>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800887e:	f01e 0f20 	tst.w	lr, #32
        len--;
 8008882:	f1a1 0102 	sub.w	r1, r1, #2
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8008886:	d1d6      	bne.n	8008836 <_ntoa_long+0x212>
 8008888:	eb0b 0401 	add.w	r4, fp, r1
 800888c:	4601      	mov	r1, r0
 800888e:	e7e7      	b.n	8008860 <_ntoa_long+0x23c>

08008890 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8008890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008894:	b09b      	sub	sp, #108	; 0x6c
 8008896:	461c      	mov	r4, r3
 8008898:	4690      	mov	r8, r2
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
 800889a:	4dae      	ldr	r5, [pc, #696]	; (8008b54 <_vsnprintf+0x2c4>)
 800889c:	9a24      	ldr	r2, [sp, #144]	; 0x90
  }

  while (*format)
 800889e:	781b      	ldrb	r3, [r3, #0]
    out = _out_null;
 80088a0:	f1b1 0900 	subs.w	r9, r1, #0
 80088a4:	bf14      	ite	ne
 80088a6:	4683      	movne	fp, r0
 80088a8:	46ab      	moveq	fp, r5
 80088aa:	9207      	str	r2, [sp, #28]
  while (*format)
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 83be 	beq.w	800902e <_vsnprintf+0x79e>
 80088b2:	f04f 0a00 	mov.w	sl, #0
  if (diff > 0.5) {
 80088b6:	4618      	mov	r0, r3
 80088b8:	e00a      	b.n	80088d0 <_vsnprintf+0x40>
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
 80088ba:	4652      	mov	r2, sl
 80088bc:	4643      	mov	r3, r8
 80088be:	4649      	mov	r1, r9
 80088c0:	f10a 0a01 	add.w	sl, sl, #1
        format++;
 80088c4:	3401      	adds	r4, #1
        out(*format, buffer, idx++, maxlen);
 80088c6:	47d8      	blx	fp
  while (*format)
 80088c8:	7820      	ldrb	r0, [r4, #0]
 80088ca:	2800      	cmp	r0, #0
 80088cc:	f000 8126 	beq.w	8008b1c <_vsnprintf+0x28c>
    if (*format != '%') {
 80088d0:	2825      	cmp	r0, #37	; 0x25
 80088d2:	d1f2      	bne.n	80088ba <_vsnprintf+0x2a>
    flags = 0U;
 80088d4:	2500      	movs	r5, #0
      format++;
 80088d6:	1c63      	adds	r3, r4, #1
 80088d8:	461c      	mov	r4, r3
      switch (*format) {
 80088da:	f813 0b01 	ldrb.w	r0, [r3], #1
 80088de:	f1a0 0220 	sub.w	r2, r0, #32
 80088e2:	2a10      	cmp	r2, #16
 80088e4:	d80a      	bhi.n	80088fc <_vsnprintf+0x6c>
 80088e6:	e8df f002 	tbb	[pc, r2]
 80088ea:	093c      	.short	0x093c
 80088ec:	09093909 	.word	0x09093909
 80088f0:	09090909 	.word	0x09090909
 80088f4:	33093609 	.word	0x33093609
 80088f8:	0909      	.short	0x0909
 80088fa:	30          	.byte	0x30
 80088fb:	00          	.byte	0x00
    if (_is_digit(*format)) {
 80088fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008900:	2b09      	cmp	r3, #9
 8008902:	f240 80ec 	bls.w	8008ade <_vsnprintf+0x24e>
    else if (*format == '*') {
 8008906:	282a      	cmp	r0, #42	; 0x2a
 8008908:	f000 8116 	beq.w	8008b38 <_vsnprintf+0x2a8>
    width = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	9308      	str	r3, [sp, #32]
    if (*format == '.') {
 8008910:	282e      	cmp	r0, #46	; 0x2e
 8008912:	f000 80f4 	beq.w	8008afe <_vsnprintf+0x26e>
    precision = 0U;
 8008916:	2700      	movs	r7, #0
    switch (*format) {
 8008918:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 800891c:	2b12      	cmp	r3, #18
 800891e:	d82a      	bhi.n	8008976 <_vsnprintf+0xe6>
 8008920:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008924:	0029015c 	.word	0x0029015c
 8008928:	00290157 	.word	0x00290157
 800892c:	00290022 	.word	0x00290022
 8008930:	00290029 	.word	0x00290029
 8008934:	00290029 	.word	0x00290029
 8008938:	00290029 	.word	0x00290029
 800893c:	002900d8 	.word	0x002900d8
 8008940:	00290029 	.word	0x00290029
 8008944:	00290029 	.word	0x00290029
 8008948:	00d8      	.short	0x00d8
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800894a:	f045 0501 	orr.w	r5, r5, #1
    } while (n);
 800894e:	e7c3      	b.n	80088d8 <_vsnprintf+0x48>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8008950:	f045 0502 	orr.w	r5, r5, #2
    } while (n);
 8008954:	e7c0      	b.n	80088d8 <_vsnprintf+0x48>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8008956:	f045 0504 	orr.w	r5, r5, #4
    } while (n);
 800895a:	e7bd      	b.n	80088d8 <_vsnprintf+0x48>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800895c:	f045 0510 	orr.w	r5, r5, #16
    } while (n);
 8008960:	e7ba      	b.n	80088d8 <_vsnprintf+0x48>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8008962:	f045 0508 	orr.w	r5, r5, #8
    } while (n);
 8008966:	e7b7      	b.n	80088d8 <_vsnprintf+0x48>
        if (*format == 'l') {
 8008968:	7860      	ldrb	r0, [r4, #1]
 800896a:	286c      	cmp	r0, #108	; 0x6c
 800896c:	f000 8353 	beq.w	8009016 <_vsnprintf+0x786>
        flags |= FLAGS_LONG;
 8008970:	f445 7580 	orr.w	r5, r5, #256	; 0x100
        format++;
 8008974:	3401      	adds	r4, #1
    switch (*format) {
 8008976:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 800897a:	2b53      	cmp	r3, #83	; 0x53
 800897c:	d89d      	bhi.n	80088ba <_vsnprintf+0x2a>
 800897e:	a201      	add	r2, pc, #4	; (adr r2, 8008984 <_vsnprintf+0xf4>)
 8008980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008984:	08008ddd 	.word	0x08008ddd
 8008988:	080088bb 	.word	0x080088bb
 800898c:	080088bb 	.word	0x080088bb
 8008990:	080088bb 	.word	0x080088bb
 8008994:	080088bb 	.word	0x080088bb
 8008998:	080088bb 	.word	0x080088bb
 800899c:	080088bb 	.word	0x080088bb
 80089a0:	080088bb 	.word	0x080088bb
 80089a4:	080088bb 	.word	0x080088bb
 80089a8:	080088bb 	.word	0x080088bb
 80089ac:	080088bb 	.word	0x080088bb
 80089b0:	080088bb 	.word	0x080088bb
 80089b4:	080088bb 	.word	0x080088bb
 80089b8:	080088bb 	.word	0x080088bb
 80089bc:	080088bb 	.word	0x080088bb
 80089c0:	080088bb 	.word	0x080088bb
 80089c4:	080088bb 	.word	0x080088bb
 80089c8:	080088bb 	.word	0x080088bb
 80089cc:	080088bb 	.word	0x080088bb
 80089d0:	080088bb 	.word	0x080088bb
 80089d4:	080088bb 	.word	0x080088bb
 80089d8:	080088bb 	.word	0x080088bb
 80089dc:	080088bb 	.word	0x080088bb
 80089e0:	080088bb 	.word	0x080088bb
 80089e4:	080088bb 	.word	0x080088bb
 80089e8:	080088bb 	.word	0x080088bb
 80089ec:	080088bb 	.word	0x080088bb
 80089f0:	080088bb 	.word	0x080088bb
 80089f4:	080088bb 	.word	0x080088bb
 80089f8:	080088bb 	.word	0x080088bb
 80089fc:	080088bb 	.word	0x080088bb
 8008a00:	080088bb 	.word	0x080088bb
 8008a04:	080088bb 	.word	0x080088bb
 8008a08:	08008bed 	.word	0x08008bed
 8008a0c:	080088bb 	.word	0x080088bb
 8008a10:	080088bb 	.word	0x080088bb
 8008a14:	080088bb 	.word	0x080088bb
 8008a18:	080088bb 	.word	0x080088bb
 8008a1c:	080088bb 	.word	0x080088bb
 8008a20:	080088bb 	.word	0x080088bb
 8008a24:	080088bb 	.word	0x080088bb
 8008a28:	080088bb 	.word	0x080088bb
 8008a2c:	080088bb 	.word	0x080088bb
 8008a30:	080088bb 	.word	0x080088bb
 8008a34:	080088bb 	.word	0x080088bb
 8008a38:	080088bb 	.word	0x080088bb
 8008a3c:	080088bb 	.word	0x080088bb
 8008a40:	080088bb 	.word	0x080088bb
 8008a44:	080088bb 	.word	0x080088bb
 8008a48:	080088bb 	.word	0x080088bb
 8008a4c:	080088bb 	.word	0x080088bb
 8008a50:	08008b59 	.word	0x08008b59
 8008a54:	080088bb 	.word	0x080088bb
 8008a58:	080088bb 	.word	0x080088bb
 8008a5c:	080088bb 	.word	0x080088bb
 8008a60:	080088bb 	.word	0x080088bb
 8008a64:	080088bb 	.word	0x080088bb
 8008a68:	080088bb 	.word	0x080088bb
 8008a6c:	080088bb 	.word	0x080088bb
 8008a70:	080088bb 	.word	0x080088bb
 8008a74:	080088bb 	.word	0x080088bb
 8008a78:	08008b59 	.word	0x08008b59
 8008a7c:	08008df1 	.word	0x08008df1
 8008a80:	08008b59 	.word	0x08008b59
 8008a84:	080088bb 	.word	0x080088bb
 8008a88:	08008bed 	.word	0x08008bed
 8008a8c:	080088bb 	.word	0x080088bb
 8008a90:	080088bb 	.word	0x080088bb
 8008a94:	08008b59 	.word	0x08008b59
 8008a98:	080088bb 	.word	0x080088bb
 8008a9c:	080088bb 	.word	0x080088bb
 8008aa0:	080088bb 	.word	0x080088bb
 8008aa4:	080088bb 	.word	0x080088bb
 8008aa8:	080088bb 	.word	0x080088bb
 8008aac:	08008b59 	.word	0x08008b59
 8008ab0:	08008ecb 	.word	0x08008ecb
 8008ab4:	080088bb 	.word	0x080088bb
 8008ab8:	080088bb 	.word	0x080088bb
 8008abc:	08008e2d 	.word	0x08008e2d
 8008ac0:	080088bb 	.word	0x080088bb
 8008ac4:	08008b59 	.word	0x08008b59
 8008ac8:	080088bb 	.word	0x080088bb
 8008acc:	080088bb 	.word	0x080088bb
 8008ad0:	08008b59 	.word	0x08008b59
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8008ad4:	7860      	ldrb	r0, [r4, #1]
 8008ad6:	f445 7580 	orr.w	r5, r5, #256	; 0x100
        format++;
 8008ada:	3401      	adds	r4, #1
        break;
 8008adc:	e74b      	b.n	8008976 <_vsnprintf+0xe6>
  unsigned int i = 0U;
 8008ade:	2600      	movs	r6, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8008ae0:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8008ae4:	eb00 0646 	add.w	r6, r0, r6, lsl #1
  while (_is_digit(**str)) {
 8008ae8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8008aec:	3e30      	subs	r6, #48	; 0x30
  while (_is_digit(**str)) {
 8008aee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008af2:	2b09      	cmp	r3, #9
 8008af4:	d9f4      	bls.n	8008ae0 <_vsnprintf+0x250>
    if (*format == '.') {
 8008af6:	282e      	cmp	r0, #46	; 0x2e
 8008af8:	9608      	str	r6, [sp, #32]
 8008afa:	f47f af0c 	bne.w	8008916 <_vsnprintf+0x86>
      if (_is_digit(*format)) {
 8008afe:	7860      	ldrb	r0, [r4, #1]
      flags |= FLAGS_PRECISION;
 8008b00:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
      if (_is_digit(*format)) {
 8008b04:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8008b08:	2a09      	cmp	r2, #9
      format++;
 8008b0a:	f104 0301 	add.w	r3, r4, #1
      if (_is_digit(*format)) {
 8008b0e:	f240 8207 	bls.w	8008f20 <_vsnprintf+0x690>
      else if (*format == '*') {
 8008b12:	282a      	cmp	r0, #42	; 0x2a
 8008b14:	f000 8214 	beq.w	8008f40 <_vsnprintf+0x6b0>
      format++;
 8008b18:	461c      	mov	r4, r3
 8008b1a:	e6fc      	b.n	8008916 <_vsnprintf+0x86>
 8008b1c:	4654      	mov	r4, sl
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8008b1e:	45d0      	cmp	r8, sl
 8008b20:	d801      	bhi.n	8008b26 <_vsnprintf+0x296>
 8008b22:	f108 3aff 	add.w	sl, r8, #4294967295
 8008b26:	4643      	mov	r3, r8
 8008b28:	4652      	mov	r2, sl
 8008b2a:	4649      	mov	r1, r9
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	47d8      	blx	fp

  // return written chars without terminating \0
  return (int)idx;
}
 8008b30:	4620      	mov	r0, r4
 8008b32:	b01b      	add	sp, #108	; 0x6c
 8008b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      const int w = va_arg(va, int);
 8008b38:	9b07      	ldr	r3, [sp, #28]
 8008b3a:	7860      	ldrb	r0, [r4, #1]
 8008b3c:	f853 6b04 	ldr.w	r6, [r3], #4
      format++;
 8008b40:	3401      	adds	r4, #1
      if (w < 0) {
 8008b42:	2e00      	cmp	r6, #0
        width = (unsigned int)-w;
 8008b44:	bfbd      	ittte	lt
 8008b46:	4272      	neglt	r2, r6
        flags |= FLAGS_LEFT;    // reverse padding
 8008b48:	f045 0502 	orrlt.w	r5, r5, #2
        width = (unsigned int)-w;
 8008b4c:	9208      	strlt	r2, [sp, #32]
        width = (unsigned int)w;
 8008b4e:	9608      	strge	r6, [sp, #32]
      const int w = va_arg(va, int);
 8008b50:	9307      	str	r3, [sp, #28]
 8008b52:	e6dd      	b.n	8008910 <_vsnprintf+0x80>
 8008b54:	08008581 	.word	0x08008581
        if (*format == 'x' || *format == 'X') {
 8008b58:	2878      	cmp	r0, #120	; 0x78
 8008b5a:	f000 8261 	beq.w	8009020 <_vsnprintf+0x790>
 8008b5e:	2858      	cmp	r0, #88	; 0x58
 8008b60:	f000 8214 	beq.w	8008f8c <_vsnprintf+0x6fc>
        else if (*format == 'o') {
 8008b64:	286f      	cmp	r0, #111	; 0x6f
 8008b66:	f000 82de 	beq.w	8009126 <_vsnprintf+0x896>
        else if (*format == 'b') {
 8008b6a:	2862      	cmp	r0, #98	; 0x62
 8008b6c:	f000 8218 	beq.w	8008fa0 <_vsnprintf+0x710>
        if ((*format != 'i') && (*format != 'd')) {
 8008b70:	2869      	cmp	r0, #105	; 0x69
          base = 10U;
 8008b72:	f04f 010a 	mov.w	r1, #10
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8008b76:	f025 0310 	bic.w	r3, r5, #16
        if ((*format != 'i') && (*format != 'd')) {
 8008b7a:	f040 8213 	bne.w	8008fa4 <_vsnprintf+0x714>
        if (flags & FLAGS_PRECISION) {
 8008b7e:	056e      	lsls	r6, r5, #21
 8008b80:	f140 8217 	bpl.w	8008fb2 <_vsnprintf+0x722>
          flags &= ~FLAGS_ZEROPAD;
 8008b84:	f023 0301 	bic.w	r3, r3, #1
        if ((*format == 'i') || (*format == 'd')) {
 8008b88:	2869      	cmp	r0, #105	; 0x69
 8008b8a:	f000 8212 	beq.w	8008fb2 <_vsnprintf+0x722>
 8008b8e:	2864      	cmp	r0, #100	; 0x64
 8008b90:	f000 820f 	beq.w	8008fb2 <_vsnprintf+0x722>
          if (flags & FLAGS_LONG_LONG) {
 8008b94:	f413 7200 	ands.w	r2, r3, #512	; 0x200
 8008b98:	f040 81f6 	bne.w	8008f88 <_vsnprintf+0x6f8>
          else if (flags & FLAGS_LONG) {
 8008b9c:	05d8      	lsls	r0, r3, #23
 8008b9e:	f100 82ac 	bmi.w	80090fa <_vsnprintf+0x86a>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8008ba2:	9807      	ldr	r0, [sp, #28]
 8008ba4:	065e      	lsls	r6, r3, #25
 8008ba6:	f850 2b04 	ldr.w	r2, [r0], #4
 8008baa:	f140 833a 	bpl.w	8009222 <_vsnprintf+0x992>
 8008bae:	b2d2      	uxtb	r2, r2
 8008bb0:	9007      	str	r0, [sp, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	9200      	str	r2, [sp, #0]
 8008bb6:	4652      	mov	r2, sl
 8008bb8:	9305      	str	r3, [sp, #20]
 8008bba:	9b08      	ldr	r3, [sp, #32]
 8008bbc:	9102      	str	r1, [sp, #8]
 8008bbe:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8008bc2:	9001      	str	r0, [sp, #4]
 8008bc4:	4643      	mov	r3, r8
 8008bc6:	4649      	mov	r1, r9
 8008bc8:	4658      	mov	r0, fp
 8008bca:	f7ff fd2b 	bl	8008624 <_ntoa_long>
 8008bce:	4682      	mov	sl, r0
        format++;
 8008bd0:	e1da      	b.n	8008f88 <_vsnprintf+0x6f8>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8008bd2:	7860      	ldrb	r0, [r4, #1]
 8008bd4:	f445 7500 	orr.w	r5, r5, #512	; 0x200
        format++;
 8008bd8:	3401      	adds	r4, #1
        break;
 8008bda:	e6cc      	b.n	8008976 <_vsnprintf+0xe6>
        if (*format == 'h') {
 8008bdc:	7860      	ldrb	r0, [r4, #1]
 8008bde:	2868      	cmp	r0, #104	; 0x68
 8008be0:	f000 8214 	beq.w	800900c <_vsnprintf+0x77c>
        flags |= FLAGS_SHORT;
 8008be4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
        format++;
 8008be8:	3401      	adds	r4, #1
 8008bea:	e6c4      	b.n	8008976 <_vsnprintf+0xe6>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8008bec:	9b07      	ldr	r3, [sp, #28]
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8008bee:	2846      	cmp	r0, #70	; 0x46
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8008bf0:	f103 0307 	add.w	r3, r3, #7
 8008bf4:	f023 0307 	bic.w	r3, r3, #7
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	f851 2b08 	ldr.w	r2, [r1], #8
 8008c00:	461e      	mov	r6, r3
  if (value < -DBL_MAX)
 8008c02:	4610      	mov	r0, r2
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8008c04:	9209      	str	r2, [sp, #36]	; 0x24
 8008c06:	9107      	str	r1, [sp, #28]
 8008c08:	930a      	str	r3, [sp, #40]	; 0x28
  if (value < -DBL_MAX)
 8008c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c0e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8008c12:	4631      	mov	r1, r6
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8008c14:	bf08      	it	eq
 8008c16:	f045 0520 	orreq.w	r5, r5, #32
  if (value < -DBL_MAX)
 8008c1a:	f7f7 fed1 	bl	80009c0 <__aeabi_dcmplt>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f040 8252 	bne.w	80090c8 <_vsnprintf+0x838>
  if (value > DBL_MAX)
 8008c24:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	; 0x24
 8008c28:	f04f 32ff 	mov.w	r2, #4294967295
 8008c2c:	4bb8      	ldr	r3, [pc, #736]	; (8008f10 <_vsnprintf+0x680>)
 8008c2e:	f7f7 fee5 	bl	80009fc <__aeabi_dcmpgt>
 8008c32:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c34:	2800      	cmp	r0, #0
 8008c36:	f040 8192 	bne.w	8008f5e <_vsnprintf+0x6ce>
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8008c3a:	e9dd 0609 	ldrd	r0, r6, [sp, #36]	; 0x24
 8008c3e:	a3b0      	add	r3, pc, #704	; (adr r3, 8008f00 <_vsnprintf+0x670>)
 8008c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c44:	4631      	mov	r1, r6
 8008c46:	f7f7 fed9 	bl	80009fc <__aeabi_dcmpgt>
 8008c4a:	900c      	str	r0, [sp, #48]	; 0x30
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	f040 8244 	bne.w	80090da <_vsnprintf+0x84a>
 8008c52:	a3ad      	add	r3, pc, #692	; (adr r3, 8008f08 <_vsnprintf+0x678>)
 8008c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c58:	4631      	mov	r1, r6
 8008c5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c5c:	f7f7 feb0 	bl	80009c0 <__aeabi_dcmplt>
 8008c60:	2800      	cmp	r0, #0
 8008c62:	f040 8263 	bne.w	800912c <_vsnprintf+0x89c>
  if (value < 0) {
 8008c66:	4631      	mov	r1, r6
 8008c68:	2200      	movs	r2, #0
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c6e:	f7f7 fea7 	bl	80009c0 <__aeabi_dcmplt>
 8008c72:	2800      	cmp	r0, #0
 8008c74:	f040 8234 	bne.w	80090e0 <_vsnprintf+0x850>
  bool negative = false;
 8008c78:	9011      	str	r0, [sp, #68]	; 0x44
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8008c7a:	f415 6f80 	tst.w	r5, #1024	; 0x400
 8008c7e:	bf08      	it	eq
 8008c80:	2706      	moveq	r7, #6
    buf[len++] = '0';
 8008c82:	2230      	movs	r2, #48	; 0x30
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8008c84:	4638      	mov	r0, r7
 8008c86:	9e08      	ldr	r6, [sp, #32]
 8008c88:	f1a7 0120 	sub.w	r1, r7, #32
 8008c8c:	ab12      	add	r3, sp, #72	; 0x48
 8008c8e:	e005      	b.n	8008c9c <_vsnprintf+0x40c>
    prec--;
 8008c90:	3801      	subs	r0, #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8008c92:	4288      	cmp	r0, r1
    buf[len++] = '0';
 8008c94:	f803 2b01 	strb.w	r2, [r3], #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8008c98:	f000 82be 	beq.w	8009218 <_vsnprintf+0x988>
 8008c9c:	2809      	cmp	r0, #9
 8008c9e:	eba7 0c00 	sub.w	ip, r7, r0
 8008ca2:	d8f5      	bhi.n	8008c90 <_vsnprintf+0x400>
 8008ca4:	9608      	str	r6, [sp, #32]
 8008ca6:	900d      	str	r0, [sp, #52]	; 0x34
 8008ca8:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
  int whole = (int)value;
 8008cac:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008cae:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008cb0:	4638      	mov	r0, r7
 8008cb2:	4631      	mov	r1, r6
 8008cb4:	f7f7 feac 	bl	8000a10 <__aeabi_d2iz>
  double tmp = (value - whole) * pow10[prec];
 8008cb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cba:	4b96      	ldr	r3, [pc, #600]	; (8008f14 <_vsnprintf+0x684>)
  int whole = (int)value;
 8008cbc:	900c      	str	r0, [sp, #48]	; 0x30
  double tmp = (value - whole) * pow10[prec];
 8008cbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008cca:	f7f7 fb9d 	bl	8000408 <__aeabi_i2d>
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4638      	mov	r0, r7
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	f7f7 fa49 	bl	800016c <__aeabi_dsub>
 8008cda:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008cde:	f7f7 fbfd 	bl	80004dc <__aeabi_dmul>
 8008ce2:	460f      	mov	r7, r1
 8008ce4:	4606      	mov	r6, r0
  unsigned long frac = (unsigned long)tmp;
 8008ce6:	f7f7 febb 	bl	8000a60 <__aeabi_d2uiz>
 8008cea:	9010      	str	r0, [sp, #64]	; 0x40
  diff = tmp - frac;
 8008cec:	f7f7 fb7c 	bl	80003e8 <__aeabi_ui2d>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	460b      	mov	r3, r1
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	4639      	mov	r1, r7
 8008cf8:	f7f7 fa38 	bl	800016c <__aeabi_dsub>
  if (diff > 0.5) {
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	4b86      	ldr	r3, [pc, #536]	; (8008f18 <_vsnprintf+0x688>)
  diff = tmp - frac;
 8008d00:	4606      	mov	r6, r0
 8008d02:	460f      	mov	r7, r1
  if (diff > 0.5) {
 8008d04:	f7f7 fe7a 	bl	80009fc <__aeabi_dcmpgt>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	f000 8262 	beq.w	80091d2 <_vsnprintf+0x942>
    ++frac;
 8008d0e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d10:	3301      	adds	r3, #1
    if (frac >= pow10[prec]) {
 8008d12:	4618      	mov	r0, r3
    ++frac;
 8008d14:	9310      	str	r3, [sp, #64]	; 0x40
    if (frac >= pow10[prec]) {
 8008d16:	f7f7 fb67 	bl	80003e8 <__aeabi_ui2d>
 8008d1a:	4602      	mov	r2, r0
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008d22:	f7f7 fe57 	bl	80009d4 <__aeabi_dcmple>
 8008d26:	b120      	cbz	r0, 8008d32 <_vsnprintf+0x4a2>
      ++whole;
 8008d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	930c      	str	r3, [sp, #48]	; 0x30
      frac = 0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	9310      	str	r3, [sp, #64]	; 0x40
  if (prec == 0U) {
 8008d32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f040 81fc 	bne.w	8009132 <_vsnprintf+0x8a2>
    diff = value - (double)whole;
 8008d3a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008d3c:	4630      	mov	r0, r6
 8008d3e:	f7f7 fb63 	bl	8000408 <__aeabi_i2d>
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	e9dd 0109 	ldrd	r0, r1, [sp, #36]	; 0x24
 8008d4a:	f7f7 fa0f 	bl	800016c <__aeabi_dsub>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8008d4e:	2200      	movs	r2, #0
 8008d50:	4b71      	ldr	r3, [pc, #452]	; (8008f18 <_vsnprintf+0x688>)
 8008d52:	f7f7 fe49 	bl	80009e8 <__aeabi_dcmpge>
 8008d56:	b120      	cbz	r0, 8008d62 <_vsnprintf+0x4d2>
 8008d58:	07f1      	lsls	r1, r6, #31
 8008d5a:	4633      	mov	r3, r6
 8008d5c:	d501      	bpl.n	8008d62 <_vsnprintf+0x4d2>
      ++whole;
 8008d5e:	3301      	adds	r3, #1
 8008d60:	930c      	str	r3, [sp, #48]	; 0x30
 8008d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d64:	a812      	add	r0, sp, #72	; 0x48
 8008d66:	469c      	mov	ip, r3
 8008d68:	1e5a      	subs	r2, r3, #1
    buf[len++] = (char)(48 + (whole % 10));
 8008d6a:	496c      	ldr	r1, [pc, #432]	; (8008f1c <_vsnprintf+0x68c>)
 8008d6c:	9e08      	ldr	r6, [sp, #32]
 8008d6e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8008d70:	4402      	add	r2, r0
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8008d72:	f1bc 0f20 	cmp.w	ip, #32
    buf[len++] = (char)(48 + (whole % 10));
 8008d76:	ea4f 73e7 	mov.w	r3, r7, asr #31
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8008d7a:	f000 8257 	beq.w	800922c <_vsnprintf+0x99c>
    buf[len++] = (char)(48 + (whole % 10));
 8008d7e:	fb81 e007 	smull	lr, r0, r1, r7
 8008d82:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
 8008d86:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8008d8a:	eba7 0040 	sub.w	r0, r7, r0, lsl #1
 8008d8e:	3030      	adds	r0, #48	; 0x30
    if (!(whole /= 10)) {
 8008d90:	461f      	mov	r7, r3
    buf[len++] = (char)(48 + (whole % 10));
 8008d92:	f10c 0c01 	add.w	ip, ip, #1
 8008d96:	f802 0f01 	strb.w	r0, [r2, #1]!
    if (!(whole /= 10)) {
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e9      	bne.n	8008d72 <_vsnprintf+0x4e2>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8008d9e:	f005 0303 	and.w	r3, r5, #3
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	9608      	str	r6, [sp, #32]
 8008da6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8008daa:	f000 81ee 	beq.w	800918a <_vsnprintf+0x8fa>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8008dae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008db0:	2920      	cmp	r1, #32
 8008db2:	f000 820c 	beq.w	80091ce <_vsnprintf+0x93e>
    if (negative) {
 8008db6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	f000 8243 	beq.w	8009244 <_vsnprintf+0x9b4>
      buf[len++] = '-';
 8008dbe:	222d      	movs	r2, #45	; 0x2d
 8008dc0:	a81a      	add	r0, sp, #104	; 0x68
 8008dc2:	1843      	adds	r3, r0, r1
 8008dc4:	f803 2c20 	strb.w	r2, [r3, #-32]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	3301      	adds	r3, #1
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8008dcc:	9a08      	ldr	r2, [sp, #32]
 8008dce:	9503      	str	r5, [sp, #12]
 8008dd0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008dd4:	ab12      	add	r3, sp, #72	; 0x48
 8008dd6:	4652      	mov	r2, sl
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	e0cf      	b.n	8008f7c <_vsnprintf+0x6ec>
        out('%', buffer, idx++, maxlen);
 8008ddc:	4652      	mov	r2, sl
 8008dde:	f10a 0501 	add.w	r5, sl, #1
 8008de2:	4643      	mov	r3, r8
 8008de4:	4649      	mov	r1, r9
 8008de6:	2025      	movs	r0, #37	; 0x25
 8008de8:	46aa      	mov	sl, r5
        format++;
 8008dea:	3401      	adds	r4, #1
        out('%', buffer, idx++, maxlen);
 8008dec:	47d8      	blx	fp
        break;
 8008dee:	e56b      	b.n	80088c8 <_vsnprintf+0x38>
        if (!(flags & FLAGS_LEFT)) {
 8008df0:	07af      	lsls	r7, r5, #30
 8008df2:	f140 814d 	bpl.w	8009090 <_vsnprintf+0x800>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8008df6:	9f07      	ldr	r7, [sp, #28]
 8008df8:	4643      	mov	r3, r8
 8008dfa:	f857 0b04 	ldr.w	r0, [r7], #4
 8008dfe:	4652      	mov	r2, sl
 8008e00:	4649      	mov	r1, r9
 8008e02:	b2c0      	uxtb	r0, r0
 8008e04:	47d8      	blx	fp
          while (l++ < width) {
 8008e06:	9b08      	ldr	r3, [sp, #32]
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8008e08:	f10a 0501 	add.w	r5, sl, #1
          while (l++ < width) {
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	f240 8187 	bls.w	8009120 <_vsnprintf+0x890>
 8008e12:	4453      	add	r3, sl
 8008e14:	461e      	mov	r6, r3
            out(' ', buffer, idx++, maxlen);
 8008e16:	462a      	mov	r2, r5
 8008e18:	4643      	mov	r3, r8
 8008e1a:	4649      	mov	r1, r9
 8008e1c:	2020      	movs	r0, #32
 8008e1e:	3501      	adds	r5, #1
 8008e20:	47d8      	blx	fp
          while (l++ < width) {
 8008e22:	42b5      	cmp	r5, r6
 8008e24:	d1f7      	bne.n	8008e16 <_vsnprintf+0x586>
 8008e26:	46aa      	mov	sl, r5
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8008e28:	9707      	str	r7, [sp, #28]
 8008e2a:	e0ad      	b.n	8008f88 <_vsnprintf+0x6f8>
        const char* p = va_arg(va, char*);
 8008e2c:	9b07      	ldr	r3, [sp, #28]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	f852 3b04 	ldr.w	r3, [r2], #4
  for (s = str; *s && maxsize--; ++s);
 8008e34:	7818      	ldrb	r0, [r3, #0]
        const char* p = va_arg(va, char*);
 8008e36:	9307      	str	r3, [sp, #28]
 8008e38:	920a      	str	r2, [sp, #40]	; 0x28
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8008e3a:	2f00      	cmp	r7, #0
 8008e3c:	f040 8089 	bne.w	8008f52 <_vsnprintf+0x6c2>
  for (s = str; *s && maxsize--; ++s);
 8008e40:	2800      	cmp	r0, #0
 8008e42:	f000 8248 	beq.w	80092d6 <_vsnprintf+0xa46>
 8008e46:	f06f 0201 	mvn.w	r2, #1
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	3201      	adds	r2, #1
        const char* p = va_arg(va, char*);
 8008e4e:	460b      	mov	r3, r1
 8008e50:	9e08      	ldr	r6, [sp, #32]
 8008e52:	9209      	str	r2, [sp, #36]	; 0x24
 8008e54:	4411      	add	r1, r2
 8008e56:	e002      	b.n	8008e5e <_vsnprintf+0x5ce>
  for (s = str; *s && maxsize--; ++s);
 8008e58:	428b      	cmp	r3, r1
 8008e5a:	f000 80d5 	beq.w	8009008 <_vsnprintf+0x778>
 8008e5e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8008e62:	2a00      	cmp	r2, #0
 8008e64:	d1f8      	bne.n	8008e58 <_vsnprintf+0x5c8>
 8008e66:	9a07      	ldr	r2, [sp, #28]
 8008e68:	9608      	str	r6, [sp, #32]
 8008e6a:	1a9b      	subs	r3, r3, r2
 8008e6c:	9309      	str	r3, [sp, #36]	; 0x24
        if (flags & FLAGS_PRECISION) {
 8008e6e:	f415 6380 	ands.w	r3, r5, #1024	; 0x400
 8008e72:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e74:	d004      	beq.n	8008e80 <_vsnprintf+0x5f0>
          l = (l < precision ? l : precision);
 8008e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e78:	42bb      	cmp	r3, r7
 8008e7a:	bf28      	it	cs
 8008e7c:	463b      	movcs	r3, r7
 8008e7e:	9309      	str	r3, [sp, #36]	; 0x24
        if (!(flags & FLAGS_LEFT)) {
 8008e80:	f015 0302 	ands.w	r3, r5, #2
 8008e84:	930c      	str	r3, [sp, #48]	; 0x30
 8008e86:	f000 80e7 	beq.w	8009058 <_vsnprintf+0x7c8>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	f000 80d2 	beq.w	8009034 <_vsnprintf+0x7a4>
 8008e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e92:	9d07      	ldr	r5, [sp, #28]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f000 80ab 	beq.w	8008ff0 <_vsnprintf+0x760>
  for (s = str; *s && maxsize--; ++s);
 8008e9a:	4652      	mov	r2, sl
 8008e9c:	9e08      	ldr	r6, [sp, #32]
 8008e9e:	4457      	add	r7, sl
 8008ea0:	e008      	b.n	8008eb4 <_vsnprintf+0x624>
          out(*(p++), buffer, idx++, maxlen);
 8008ea2:	4643      	mov	r3, r8
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	47d8      	blx	fp
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8008ea8:	f815 0f01 	ldrb.w	r0, [r5, #1]!
          out(*(p++), buffer, idx++, maxlen);
 8008eac:	f10a 0a01 	add.w	sl, sl, #1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8008eb0:	b110      	cbz	r0, 8008eb8 <_vsnprintf+0x628>
          out(*(p++), buffer, idx++, maxlen);
 8008eb2:	4652      	mov	r2, sl
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8008eb4:	4557      	cmp	r7, sl
 8008eb6:	d1f4      	bne.n	8008ea2 <_vsnprintf+0x612>
        if (flags & FLAGS_LEFT) {
 8008eb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008eba:	9608      	str	r6, [sp, #32]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f040 80b9 	bne.w	8009034 <_vsnprintf+0x7a4>
        const char* p = va_arg(va, char*);
 8008ec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
        format++;
 8008ec4:	3401      	adds	r4, #1
        const char* p = va_arg(va, char*);
 8008ec6:	9307      	str	r3, [sp, #28]
        break;
 8008ec8:	e4fe      	b.n	80088c8 <_vsnprintf+0x38>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8008eca:	2108      	movs	r1, #8
 8008ecc:	2210      	movs	r2, #16
 8008ece:	2300      	movs	r3, #0
 8008ed0:	e9cd 7103 	strd	r7, r1, [sp, #12]
 8008ed4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008ed8:	9e07      	ldr	r6, [sp, #28]
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8008eda:	f045 0521 	orr.w	r5, r5, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8008ede:	9505      	str	r5, [sp, #20]
 8008ee0:	f856 3b04 	ldr.w	r3, [r6], #4
 8008ee4:	4652      	mov	r2, sl
 8008ee6:	9300      	str	r3, [sp, #0]
 8008ee8:	4649      	mov	r1, r9
 8008eea:	4643      	mov	r3, r8
 8008eec:	4658      	mov	r0, fp
 8008eee:	f7ff fb99 	bl	8008624 <_ntoa_long>
        format++;
 8008ef2:	3401      	adds	r4, #1
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8008ef4:	4682      	mov	sl, r0
 8008ef6:	9607      	str	r6, [sp, #28]
        break;
 8008ef8:	e4e6      	b.n	80088c8 <_vsnprintf+0x38>
 8008efa:	bf00      	nop
 8008efc:	f3af 8000 	nop.w
 8008f00:	00000000 	.word	0x00000000
 8008f04:	41cdcd65 	.word	0x41cdcd65
 8008f08:	00000000 	.word	0x00000000
 8008f0c:	c1cdcd65 	.word	0xc1cdcd65
 8008f10:	7fefffff 	.word	0x7fefffff
 8008f14:	08010dd8 	.word	0x08010dd8
 8008f18:	3fe00000 	.word	0x3fe00000
 8008f1c:	66666667 	.word	0x66666667
  unsigned int i = 0U;
 8008f20:	2700      	movs	r7, #0
 8008f22:	9e08      	ldr	r6, [sp, #32]
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8008f24:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8008f28:	eb00 0747 	add.w	r7, r0, r7, lsl #1
  while (_is_digit(**str)) {
 8008f2c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8008f30:	3f30      	subs	r7, #48	; 0x30
  while (_is_digit(**str)) {
 8008f32:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8008f36:	2a09      	cmp	r2, #9
 8008f38:	d9f4      	bls.n	8008f24 <_vsnprintf+0x694>
 8008f3a:	461c      	mov	r4, r3
 8008f3c:	9608      	str	r6, [sp, #32]
 8008f3e:	e4eb      	b.n	8008918 <_vsnprintf+0x88>
        const int prec = (int)va_arg(va, int);
 8008f40:	9b07      	ldr	r3, [sp, #28]
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8008f42:	78a0      	ldrb	r0, [r4, #2]
 8008f44:	f853 7b04 	ldr.w	r7, [r3], #4
        format++;
 8008f48:	3402      	adds	r4, #2
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8008f4a:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
        const int prec = (int)va_arg(va, int);
 8008f4e:	9307      	str	r3, [sp, #28]
 8008f50:	e4e2      	b.n	8008918 <_vsnprintf+0x88>
  for (s = str; *s && maxsize--; ++s);
 8008f52:	2800      	cmp	r0, #0
 8008f54:	f000 81c1 	beq.w	80092da <_vsnprintf+0xa4a>
 8008f58:	4619      	mov	r1, r3
 8008f5a:	1e7a      	subs	r2, r7, #1
 8008f5c:	e776      	b.n	8008e4c <_vsnprintf+0x5bc>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8008f5e:	f005 0204 	and.w	r2, r5, #4
 8008f62:	2a00      	cmp	r2, #0
 8008f64:	4ab2      	ldr	r2, [pc, #712]	; (8009230 <_vsnprintf+0x9a0>)
 8008f66:	4bb3      	ldr	r3, [pc, #716]	; (8009234 <_vsnprintf+0x9a4>)
 8008f68:	bf12      	itee	ne
 8008f6a:	2104      	movne	r1, #4
 8008f6c:	4613      	moveq	r3, r2
 8008f6e:	2103      	moveq	r1, #3
 8008f70:	9a08      	ldr	r2, [sp, #32]
 8008f72:	e9cd 3100 	strd	r3, r1, [sp]
 8008f76:	9202      	str	r2, [sp, #8]
 8008f78:	4652      	mov	r2, sl
 8008f7a:	9503      	str	r5, [sp, #12]
  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8008f7c:	4643      	mov	r3, r8
 8008f7e:	4649      	mov	r1, r9
 8008f80:	4658      	mov	r0, fp
 8008f82:	f7ff faff 	bl	8008584 <_out_rev>
 8008f86:	4682      	mov	sl, r0
        format++;
 8008f88:	3401      	adds	r4, #1
        break;
 8008f8a:	e49d      	b.n	80088c8 <_vsnprintf+0x38>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8008f8c:	f025 030c 	bic.w	r3, r5, #12
        if (flags & FLAGS_PRECISION) {
 8008f90:	056a      	lsls	r2, r5, #21
          base = 16U;
 8008f92:	f04f 0110 	mov.w	r1, #16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8008f96:	f043 0320 	orr.w	r3, r3, #32
        if (flags & FLAGS_PRECISION) {
 8008f9a:	f53f adf3 	bmi.w	8008b84 <_vsnprintf+0x2f4>
 8008f9e:	e5f9      	b.n	8008b94 <_vsnprintf+0x304>
          base =  2U;
 8008fa0:	2102      	movs	r1, #2
        format++;
 8008fa2:	462b      	mov	r3, r5
        if ((*format != 'i') && (*format != 'd')) {
 8008fa4:	2864      	cmp	r0, #100	; 0x64
 8008fa6:	bf18      	it	ne
 8008fa8:	461d      	movne	r5, r3
 8008faa:	d13a      	bne.n	8009022 <_vsnprintf+0x792>
        if (flags & FLAGS_PRECISION) {
 8008fac:	055d      	lsls	r5, r3, #21
 8008fae:	f53f ade9 	bmi.w	8008b84 <_vsnprintf+0x2f4>
          if (flags & FLAGS_LONG_LONG) {
 8008fb2:	0598      	lsls	r0, r3, #22
 8008fb4:	d4e8      	bmi.n	8008f88 <_vsnprintf+0x6f8>
          else if (flags & FLAGS_LONG) {
 8008fb6:	05da      	lsls	r2, r3, #23
 8008fb8:	f100 811d 	bmi.w	80091f6 <_vsnprintf+0x966>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8008fbc:	065e      	lsls	r6, r3, #25
 8008fbe:	f100 8095 	bmi.w	80090ec <_vsnprintf+0x85c>
 8008fc2:	061d      	lsls	r5, r3, #24
 8008fc4:	f140 816e 	bpl.w	80092a4 <_vsnprintf+0xa14>
 8008fc8:	9d07      	ldr	r5, [sp, #28]
 8008fca:	f855 2b04 	ldr.w	r2, [r5], #4
 8008fce:	b212      	sxth	r2, r2
 8008fd0:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
 8008fd4:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
 8008fd8:	9507      	str	r5, [sp, #28]
 8008fda:	b280      	uxth	r0, r0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8008fdc:	9305      	str	r3, [sp, #20]
 8008fde:	9b08      	ldr	r3, [sp, #32]
 8008fe0:	0fd2      	lsrs	r2, r2, #31
 8008fe2:	9201      	str	r2, [sp, #4]
 8008fe4:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8008fe8:	4652      	mov	r2, sl
 8008fea:	9102      	str	r1, [sp, #8]
 8008fec:	9000      	str	r0, [sp, #0]
 8008fee:	e5e9      	b.n	8008bc4 <_vsnprintf+0x334>
 8008ff0:	9e08      	ldr	r6, [sp, #32]
          out(*(p++), buffer, idx++, maxlen);
 8008ff2:	4652      	mov	r2, sl
 8008ff4:	4643      	mov	r3, r8
 8008ff6:	4649      	mov	r1, r9
 8008ff8:	47d8      	blx	fp
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8008ffa:	f815 0f01 	ldrb.w	r0, [r5, #1]!
          out(*(p++), buffer, idx++, maxlen);
 8008ffe:	f10a 0a01 	add.w	sl, sl, #1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8009002:	2800      	cmp	r0, #0
 8009004:	d1f5      	bne.n	8008ff2 <_vsnprintf+0x762>
 8009006:	e757      	b.n	8008eb8 <_vsnprintf+0x628>
 8009008:	9608      	str	r6, [sp, #32]
 800900a:	e730      	b.n	8008e6e <_vsnprintf+0x5de>
          flags |= FLAGS_CHAR;
 800900c:	78a0      	ldrb	r0, [r4, #2]
 800900e:	f045 05c0 	orr.w	r5, r5, #192	; 0xc0
          format++;
 8009012:	3402      	adds	r4, #2
 8009014:	e4af      	b.n	8008976 <_vsnprintf+0xe6>
          flags |= FLAGS_LONG_LONG;
 8009016:	78a0      	ldrb	r0, [r4, #2]
 8009018:	f445 7540 	orr.w	r5, r5, #768	; 0x300
          format++;
 800901c:	3402      	adds	r4, #2
 800901e:	e4aa      	b.n	8008976 <_vsnprintf+0xe6>
          base = 16U;
 8009020:	2110      	movs	r1, #16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8009022:	f025 030c 	bic.w	r3, r5, #12
        if (flags & FLAGS_PRECISION) {
 8009026:	056d      	lsls	r5, r5, #21
 8009028:	f57f adae 	bpl.w	8008b88 <_vsnprintf+0x2f8>
 800902c:	e5aa      	b.n	8008b84 <_vsnprintf+0x2f4>
  while (*format)
 800902e:	461c      	mov	r4, r3
 8009030:	469a      	mov	sl, r3
 8009032:	e574      	b.n	8008b1e <_vsnprintf+0x28e>
          while (l++ < width) {
 8009034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009036:	9908      	ldr	r1, [sp, #32]
 8009038:	4655      	mov	r5, sl
 800903a:	428b      	cmp	r3, r1
 800903c:	f4bf af41 	bcs.w	8008ec2 <_vsnprintf+0x632>
 8009040:	4451      	add	r1, sl
 8009042:	eba1 0a03 	sub.w	sl, r1, r3
            out(' ', buffer, idx++, maxlen);
 8009046:	462a      	mov	r2, r5
 8009048:	4643      	mov	r3, r8
 800904a:	4649      	mov	r1, r9
 800904c:	2020      	movs	r0, #32
 800904e:	3501      	adds	r5, #1
 8009050:	47d8      	blx	fp
          while (l++ < width) {
 8009052:	4555      	cmp	r5, sl
 8009054:	d1f7      	bne.n	8009046 <_vsnprintf+0x7b6>
 8009056:	e734      	b.n	8008ec2 <_vsnprintf+0x632>
          while (l++ < width) {
 8009058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800905a:	9e08      	ldr	r6, [sp, #32]
 800905c:	1c53      	adds	r3, r2, #1
 800905e:	4296      	cmp	r6, r2
 8009060:	f240 812b 	bls.w	80092ba <_vsnprintf+0xa2a>
 8009064:	eb06 050a 	add.w	r5, r6, sl
 8009068:	1aad      	subs	r5, r5, r2
            out(' ', buffer, idx++, maxlen);
 800906a:	4652      	mov	r2, sl
 800906c:	4643      	mov	r3, r8
 800906e:	4649      	mov	r1, r9
 8009070:	2020      	movs	r0, #32
 8009072:	f10a 0a01 	add.w	sl, sl, #1
 8009076:	47d8      	blx	fp
          while (l++ < width) {
 8009078:	45aa      	cmp	sl, r5
 800907a:	d1f6      	bne.n	800906a <_vsnprintf+0x7da>
 800907c:	4633      	mov	r3, r6
 800907e:	3301      	adds	r3, #1
 8009080:	9309      	str	r3, [sp, #36]	; 0x24
 8009082:	9b07      	ldr	r3, [sp, #28]
 8009084:	9608      	str	r6, [sp, #32]
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8009086:	7818      	ldrb	r0, [r3, #0]
 8009088:	2800      	cmp	r0, #0
 800908a:	f47f af01 	bne.w	8008e90 <_vsnprintf+0x600>
 800908e:	e718      	b.n	8008ec2 <_vsnprintf+0x632>
          while (l++ < width) {
 8009090:	9b08      	ldr	r3, [sp, #32]
 8009092:	2b01      	cmp	r3, #1
 8009094:	f240 810f 	bls.w	80092b6 <_vsnprintf+0xa26>
 8009098:	f10a 35ff 	add.w	r5, sl, #4294967295
 800909c:	441d      	add	r5, r3
            out(' ', buffer, idx++, maxlen);
 800909e:	4652      	mov	r2, sl
 80090a0:	4643      	mov	r3, r8
 80090a2:	4649      	mov	r1, r9
 80090a4:	2020      	movs	r0, #32
 80090a6:	f10a 0a01 	add.w	sl, sl, #1
 80090aa:	47d8      	blx	fp
          while (l++ < width) {
 80090ac:	45aa      	cmp	sl, r5
 80090ae:	d1f6      	bne.n	800909e <_vsnprintf+0x80e>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80090b0:	9e07      	ldr	r6, [sp, #28]
 80090b2:	4643      	mov	r3, r8
 80090b4:	f856 0b04 	ldr.w	r0, [r6], #4
 80090b8:	462a      	mov	r2, r5
 80090ba:	4649      	mov	r1, r9
 80090bc:	b2c0      	uxtb	r0, r0
 80090be:	9607      	str	r6, [sp, #28]
 80090c0:	f105 0a01 	add.w	sl, r5, #1
 80090c4:	47d8      	blx	fp
        if (flags & FLAGS_LEFT) {
 80090c6:	e75f      	b.n	8008f88 <_vsnprintf+0x6f8>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 80090c8:	2104      	movs	r1, #4
 80090ca:	9a08      	ldr	r2, [sp, #32]
 80090cc:	4b5a      	ldr	r3, [pc, #360]	; (8009238 <_vsnprintf+0x9a8>)
 80090ce:	9202      	str	r2, [sp, #8]
 80090d0:	e9cd 3100 	strd	r3, r1, [sp]
 80090d4:	4652      	mov	r2, sl
 80090d6:	9503      	str	r5, [sp, #12]
 80090d8:	e750      	b.n	8008f7c <_vsnprintf+0x6ec>
    return 0U;
 80090da:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80090de:	e753      	b.n	8008f88 <_vsnprintf+0x6f8>
    value = 0 - value;
 80090e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80090e4:	930a      	str	r3, [sp, #40]	; 0x28
    negative = true;
 80090e6:	2301      	movs	r3, #1
 80090e8:	9311      	str	r3, [sp, #68]	; 0x44
 80090ea:	e5c6      	b.n	8008c7a <_vsnprintf+0x3ea>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80090ec:	9807      	ldr	r0, [sp, #28]
 80090ee:	f850 2b04 	ldr.w	r2, [r0], #4
 80090f2:	b2d2      	uxtb	r2, r2
 80090f4:	9007      	str	r0, [sp, #28]
 80090f6:	4610      	mov	r0, r2
 80090f8:	e770      	b.n	8008fdc <_vsnprintf+0x74c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80090fa:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80090fe:	4652      	mov	r2, sl
 8009100:	9305      	str	r3, [sp, #20]
 8009102:	9b08      	ldr	r3, [sp, #32]
 8009104:	9d07      	ldr	r5, [sp, #28]
 8009106:	e9cd 7303 	strd	r7, r3, [sp, #12]
 800910a:	f855 3b04 	ldr.w	r3, [r5], #4
 800910e:	9300      	str	r3, [sp, #0]
 8009110:	4643      	mov	r3, r8
 8009112:	4649      	mov	r1, r9
 8009114:	4658      	mov	r0, fp
 8009116:	f7ff fa85 	bl	8008624 <_ntoa_long>
 800911a:	9507      	str	r5, [sp, #28]
 800911c:	4682      	mov	sl, r0
 800911e:	e733      	b.n	8008f88 <_vsnprintf+0x6f8>
          while (l++ < width) {
 8009120:	46aa      	mov	sl, r5
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8009122:	9707      	str	r7, [sp, #28]
 8009124:	e730      	b.n	8008f88 <_vsnprintf+0x6f8>
          base =  8U;
 8009126:	2108      	movs	r1, #8
        format++;
 8009128:	462b      	mov	r3, r5
 800912a:	e73b      	b.n	8008fa4 <_vsnprintf+0x714>
    return 0U;
 800912c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
        format++;
 8009130:	e72a      	b.n	8008f88 <_vsnprintf+0x6f8>
 8009132:	461e      	mov	r6, r3
 8009134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009136:	aa12      	add	r2, sp, #72	; 0x48
 8009138:	1e58      	subs	r0, r3, #1
 800913a:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
      buf[len++] = (char)(48U + (frac % 10U));
 800913e:	f8df e100 	ldr.w	lr, [pc, #256]	; 8009240 <_vsnprintf+0x9b0>
 8009142:	461d      	mov	r5, r3
 8009144:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8009146:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009148:	4410      	add	r0, r2
 800914a:	e00e      	b.n	800916a <_vsnprintf+0x8da>
 800914c:	fbae 2304 	umull	r2, r3, lr, r4
 8009150:	08db      	lsrs	r3, r3, #3
 8009152:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8009156:	eba4 0242 	sub.w	r2, r4, r2, lsl #1
 800915a:	3230      	adds	r2, #48	; 0x30
      if (!(frac /= 10U)) {
 800915c:	2c09      	cmp	r4, #9
      buf[len++] = (char)(48U + (frac % 10U));
 800915e:	f800 2f01 	strb.w	r2, [r0, #1]!
      if (!(frac /= 10U)) {
 8009162:	d978      	bls.n	8009256 <_vsnprintf+0x9c6>
      --count;
 8009164:	4666      	mov	r6, ip
      if (!(frac /= 10U)) {
 8009166:	461c      	mov	r4, r3
      buf[len++] = (char)(48U + (frac % 10U));
 8009168:	460d      	mov	r5, r1
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800916a:	2d20      	cmp	r5, #32
      --count;
 800916c:	f106 3cff 	add.w	ip, r6, #4294967295
      buf[len++] = (char)(48U + (frac % 10U));
 8009170:	f105 0101 	add.w	r1, r5, #1
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8009174:	d1ea      	bne.n	800914c <_vsnprintf+0x8bc>
 8009176:	e9dd 5409 	ldrd	r5, r4, [sp, #36]	; 0x24
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800917a:	f005 0303 	and.w	r3, r5, #3
 800917e:	2b01      	cmp	r3, #1
 8009180:	f04f 0320 	mov.w	r3, #32
 8009184:	f47f ae22 	bne.w	8008dcc <_vsnprintf+0x53c>
 8009188:	930b      	str	r3, [sp, #44]	; 0x2c
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800918a:	9b08      	ldr	r3, [sp, #32]
 800918c:	2b00      	cmp	r3, #0
 800918e:	f43f ae0e 	beq.w	8008dae <_vsnprintf+0x51e>
 8009192:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009194:	b913      	cbnz	r3, 800919c <_vsnprintf+0x90c>
 8009196:	f015 0f0c 	tst.w	r5, #12
 800919a:	d002      	beq.n	80091a2 <_vsnprintf+0x912>
      width--;
 800919c:	9b08      	ldr	r3, [sp, #32]
 800919e:	3b01      	subs	r3, #1
 80091a0:	9308      	str	r3, [sp, #32]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80091a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091a4:	9a08      	ldr	r2, [sp, #32]
 80091a6:	429a      	cmp	r2, r3
 80091a8:	f67f ae01 	bls.w	8008dae <_vsnprintf+0x51e>
 80091ac:	2b20      	cmp	r3, #32
 80091ae:	d00e      	beq.n	80091ce <_vsnprintf+0x93e>
 80091b0:	4616      	mov	r6, r2
      buf[len++] = '0';
 80091b2:	2230      	movs	r2, #48	; 0x30
 80091b4:	4619      	mov	r1, r3
 80091b6:	a812      	add	r0, sp, #72	; 0x48
 80091b8:	3b01      	subs	r3, #1
 80091ba:	4403      	add	r3, r0
 80091bc:	3101      	adds	r1, #1
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80091be:	42b1      	cmp	r1, r6
      buf[len++] = '0';
 80091c0:	f803 2f01 	strb.w	r2, [r3, #1]!
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80091c4:	f000 808d 	beq.w	80092e2 <_vsnprintf+0xa52>
 80091c8:	2920      	cmp	r1, #32
 80091ca:	d1f7      	bne.n	80091bc <_vsnprintf+0x92c>
 80091cc:	9608      	str	r6, [sp, #32]
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80091ce:	2320      	movs	r3, #32
 80091d0:	e5fc      	b.n	8008dcc <_vsnprintf+0x53c>
  else if (diff < 0.5) {
 80091d2:	4630      	mov	r0, r6
 80091d4:	4639      	mov	r1, r7
 80091d6:	2200      	movs	r2, #0
 80091d8:	4b18      	ldr	r3, [pc, #96]	; (800923c <_vsnprintf+0x9ac>)
 80091da:	f7f7 fbf1 	bl	80009c0 <__aeabi_dcmplt>
 80091de:	2800      	cmp	r0, #0
 80091e0:	f47f ada7 	bne.w	8008d32 <_vsnprintf+0x4a2>
  else if ((frac == 0U) || (frac & 1U)) {
 80091e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091e6:	b113      	cbz	r3, 80091ee <_vsnprintf+0x95e>
 80091e8:	07d8      	lsls	r0, r3, #31
 80091ea:	f57f ada2 	bpl.w	8008d32 <_vsnprintf+0x4a2>
    ++frac;
 80091ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80091f0:	3301      	adds	r3, #1
 80091f2:	9310      	str	r3, [sp, #64]	; 0x40
 80091f4:	e59d      	b.n	8008d32 <_vsnprintf+0x4a2>
            const long value = va_arg(va, long);
 80091f6:	9d07      	ldr	r5, [sp, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80091f8:	4652      	mov	r2, sl
            const long value = va_arg(va, long);
 80091fa:	f855 0b04 	ldr.w	r0, [r5], #4
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80091fe:	9305      	str	r3, [sp, #20]
 8009200:	ea80 7ce0 	eor.w	ip, r0, r0, asr #31
 8009204:	9b08      	ldr	r3, [sp, #32]
 8009206:	ebac 7ce0 	sub.w	ip, ip, r0, asr #31
 800920a:	0fc0      	lsrs	r0, r0, #31
 800920c:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8009210:	e9cd c000 	strd	ip, r0, [sp]
 8009214:	9102      	str	r1, [sp, #8]
 8009216:	e77b      	b.n	8009110 <_vsnprintf+0x880>
 8009218:	2320      	movs	r3, #32
 800921a:	9608      	str	r6, [sp, #32]
 800921c:	900d      	str	r0, [sp, #52]	; 0x34
 800921e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009220:	e544      	b.n	8008cac <_vsnprintf+0x41c>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8009222:	061d      	lsls	r5, r3, #24
 8009224:	bf48      	it	mi
 8009226:	b292      	uxthmi	r2, r2
 8009228:	9007      	str	r0, [sp, #28]
 800922a:	e4c2      	b.n	8008bb2 <_vsnprintf+0x322>
 800922c:	9608      	str	r6, [sp, #32]
 800922e:	e7a4      	b.n	800917a <_vsnprintf+0x8ea>
 8009230:	08010dcc 	.word	0x08010dcc
 8009234:	08010dc4 	.word	0x08010dc4
 8009238:	08010dd0 	.word	0x08010dd0
 800923c:	3fe00000 	.word	0x3fe00000
 8009240:	cccccccd 	.word	0xcccccccd
    else if (flags & FLAGS_PLUS) {
 8009244:	076a      	lsls	r2, r5, #29
 8009246:	d53d      	bpl.n	80092c4 <_vsnprintf+0xa34>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8009248:	222b      	movs	r2, #43	; 0x2b
 800924a:	ab1a      	add	r3, sp, #104	; 0x68
 800924c:	440b      	add	r3, r1
 800924e:	f803 2c20 	strb.w	r2, [r3, #-32]
 8009252:	1c4b      	adds	r3, r1, #1
 8009254:	e5ba      	b.n	8008dcc <_vsnprintf+0x53c>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8009256:	2920      	cmp	r1, #32
 8009258:	950b      	str	r5, [sp, #44]	; 0x2c
 800925a:	e9cd 760c 	strd	r7, r6, [sp, #48]	; 0x30
 800925e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009260:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009262:	d08a      	beq.n	800917a <_vsnprintf+0x8ea>
 8009264:	460b      	mov	r3, r1
 8009266:	f1bc 0f00 	cmp.w	ip, #0
 800926a:	d013      	beq.n	8009294 <_vsnprintf+0xa04>
 800926c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800926e:	a812      	add	r0, sp, #72	; 0x48
 8009270:	4402      	add	r2, r0
      buf[len++] = '0';
 8009272:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8009276:	4610      	mov	r0, r2
 8009278:	46b6      	mov	lr, r6
 800927a:	9e08      	ldr	r6, [sp, #32]
 800927c:	3301      	adds	r3, #1
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 800927e:	2b20      	cmp	r3, #32
      buf[len++] = '0';
 8009280:	f800 cf01 	strb.w	ip, [r0, #1]!
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8009284:	d0d2      	beq.n	800922c <_vsnprintf+0x99c>
 8009286:	43da      	mvns	r2, r3
 8009288:	440a      	add	r2, r1
 800928a:	eb12 0f0e 	cmn.w	r2, lr
 800928e:	d1f5      	bne.n	800927c <_vsnprintf+0x9ec>
 8009290:	9608      	str	r6, [sp, #32]
 8009292:	970c      	str	r7, [sp, #48]	; 0x30
      buf[len++] = '.';
 8009294:	212e      	movs	r1, #46	; 0x2e
 8009296:	aa1a      	add	r2, sp, #104	; 0x68
 8009298:	441a      	add	r2, r3
 800929a:	3301      	adds	r3, #1
 800929c:	f802 1c20 	strb.w	r1, [r2, #-32]
 80092a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80092a2:	e55e      	b.n	8008d62 <_vsnprintf+0x4d2>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 80092a4:	9807      	ldr	r0, [sp, #28]
 80092a6:	f850 2b04 	ldr.w	r2, [r0], #4
 80092aa:	9007      	str	r0, [sp, #28]
 80092ac:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
 80092b0:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
 80092b4:	e692      	b.n	8008fdc <_vsnprintf+0x74c>
          while (l++ < width) {
 80092b6:	4655      	mov	r5, sl
 80092b8:	e6fa      	b.n	80090b0 <_vsnprintf+0x820>
          while (l++ < width) {
 80092ba:	9309      	str	r3, [sp, #36]	; 0x24
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80092bc:	2800      	cmp	r0, #0
 80092be:	f47f ade7 	bne.w	8008e90 <_vsnprintf+0x600>
 80092c2:	e5fe      	b.n	8008ec2 <_vsnprintf+0x632>
    else if (flags & FLAGS_SPACE) {
 80092c4:	072b      	lsls	r3, r5, #28
 80092c6:	d50a      	bpl.n	80092de <_vsnprintf+0xa4e>
      buf[len++] = ' ';
 80092c8:	2220      	movs	r2, #32
 80092ca:	ab1a      	add	r3, sp, #104	; 0x68
 80092cc:	440b      	add	r3, r1
 80092ce:	f803 2c20 	strb.w	r2, [r3, #-32]
 80092d2:	1c4b      	adds	r3, r1, #1
 80092d4:	e57a      	b.n	8008dcc <_vsnprintf+0x53c>
  for (s = str; *s && maxsize--; ++s);
 80092d6:	9709      	str	r7, [sp, #36]	; 0x24
 80092d8:	e5c9      	b.n	8008e6e <_vsnprintf+0x5de>
 80092da:	9009      	str	r0, [sp, #36]	; 0x24
 80092dc:	e5c7      	b.n	8008e6e <_vsnprintf+0x5de>
 80092de:	460b      	mov	r3, r1
 80092e0:	e574      	b.n	8008dcc <_vsnprintf+0x53c>
 80092e2:	9608      	str	r6, [sp, #32]
 80092e4:	910b      	str	r1, [sp, #44]	; 0x2c
 80092e6:	e562      	b.n	8008dae <_vsnprintf+0x51e>

080092e8 <vsnprintf_>:
  return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
}


int vsnprintf_(char* buffer, size_t count, const char* format, va_list va)
{
 80092e8:	b530      	push	{r4, r5, lr}
 80092ea:	460d      	mov	r5, r1
 80092ec:	4614      	mov	r4, r2
 80092ee:	b083      	sub	sp, #12
  return _vsnprintf(_out_buffer, buffer, count, format, va);
 80092f0:	4601      	mov	r1, r0
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	462a      	mov	r2, r5
 80092f6:	4623      	mov	r3, r4
 80092f8:	4802      	ldr	r0, [pc, #8]	; (8009304 <vsnprintf_+0x1c>)
 80092fa:	f7ff fac9 	bl	8008890 <_vsnprintf>
}
 80092fe:	b003      	add	sp, #12
 8009300:	bd30      	pop	{r4, r5, pc}
 8009302:	bf00      	nop
 8009304:	08008579 	.word	0x08008579

08009308 <ADC1_2_IRQHandler>:
{
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */

  ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8009308:	4a03      	ldr	r2, [pc, #12]	; (8009318 <ADC1_2_IRQHandler+0x10>)
 800930a:	6813      	ldr	r3, [r2, #0]
 800930c:	f023 030c 	bic.w	r3, r3, #12
 8009310:	6013      	str	r3, [r2, #0]

  TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8009312:	f7f9 bef7 	b.w	8003104 <TSK_HighFrequencyTask>
 8009316:	bf00      	nop
 8009318:	40012400 	.word	0x40012400

0800931c <TIM1_UP_IRQHandler>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800931c:	f06f 0201 	mvn.w	r2, #1
 8009320:	4b02      	ldr	r3, [pc, #8]	; (800932c <TIM1_UP_IRQHandler+0x10>)
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */
    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8009322:	4803      	ldr	r0, [pc, #12]	; (8009330 <TIM1_UP_IRQHandler+0x14>)
 8009324:	611a      	str	r2, [r3, #16]
 8009326:	f7f9 b857 	b.w	80023d8 <R3_2_TIMx_UP_IRQHandler>
 800932a:	bf00      	nop
 800932c:	40012c00 	.word	0x40012c00
 8009330:	20000374 	.word	0x20000374

08009334 <TIM1_BRK_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8009334:	4807      	ldr	r0, [pc, #28]	; (8009354 <TIM1_BRK_IRQHandler+0x20>)
{
 8009336:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8009338:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800933a:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800933c:	691a      	ldr	r2, [r3, #16]
 800933e:	0612      	lsls	r2, r2, #24
 8009340:	d504      	bpl.n	800934c <TIM1_BRK_IRQHandler+0x18>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8009342:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009346:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);

    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8009348:	f7f9 f880 	bl	800244c <R3_2_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 800934c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8009350:	f7f9 bea2 	b.w	8003098 <MC_Scheduler>
 8009354:	20000374 	.word	0x20000374

08009358 <TIM3_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 8009358:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* HALL Timer Update IT always enabled, no need to check enable UPDATE state */
  if (LL_TIM_IsActiveFlag_UPDATE(HALL_M1.TIMx))
 800935a:	4c0c      	ldr	r4, [pc, #48]	; (800938c <TIM3_IRQHandler+0x34>)
 800935c:	6b63      	ldr	r3, [r4, #52]	; 0x34
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800935e:	691a      	ldr	r2, [r3, #16]
 8009360:	07d1      	lsls	r1, r2, #31
 8009362:	d40b      	bmi.n	800937c <TIM3_IRQHandler+0x24>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8009364:	691a      	ldr	r2, [r3, #16]
 8009366:	0792      	lsls	r2, r2, #30
 8009368:	d507      	bpl.n	800937a <TIM3_IRQHandler+0x22>
  /* Nothing to do */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 800936a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800936e:	f06f 0202 	mvn.w	r2, #2
    HALL_TIMx_CC_IRQHandler(&HALL_M1);
 8009372:	4806      	ldr	r0, [pc, #24]	; (800938c <TIM3_IRQHandler+0x34>)
 8009374:	611a      	str	r2, [r3, #16]
 8009376:	f7f8 b8c7 	b.w	8001508 <HALL_TIMx_CC_IRQHandler>
}
 800937a:	bd10      	pop	{r4, pc}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800937c:	f06f 0201 	mvn.w	r2, #1
    HALL_TIMx_UP_IRQHandler(&HALL_M1);
 8009380:	4620      	mov	r0, r4
 8009382:	611a      	str	r2, [r3, #16]
 8009384:	f7f8 fa16 	bl	80017b4 <HALL_TIMx_UP_IRQHandler>
 8009388:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800938a:	e7eb      	b.n	8009364 <TIM3_IRQHandler+0xc>
 800938c:	200000b4 	.word	0x200000b4

08009390 <USART1_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8009390:	b500      	push	{lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  uint16_t hUSART_SR = VESC_USART->SR;
 8009392:	4a0e      	ldr	r2, [pc, #56]	; (80093cc <USART1_IRQHandler+0x3c>)
{
 8009394:	b083      	sub	sp, #12
  uint16_t hUSART_SR = VESC_USART->SR;
 8009396:	6813      	ldr	r3, [r2, #0]

  if (hUSART_SR & USART_SR_ORE) /* Overrun error occurs before SR access */
 8009398:	0719      	lsls	r1, r3, #28
 800939a:	d505      	bpl.n	80093a8 <USART1_IRQHandler+0x18>
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 800939c:	6811      	ldr	r1, [r2, #0]
 800939e:	9101      	str	r1, [sp, #4]
  (void) tmpreg;
 80093a0:	9901      	ldr	r1, [sp, #4]
  tmpreg = USARTx->DR;
 80093a2:	6852      	ldr	r2, [r2, #4]
 80093a4:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80093a6:	9a01      	ldr	r2, [sp, #4]

    /* USER CODE END USART_ORE   */
  }
  uint8_t c;

  if (hUSART_SR & USART_SR_RXNE) /* Valid data received */
 80093a8:	069b      	lsls	r3, r3, #26
 80093aa:	d50c      	bpl.n	80093c6 <USART1_IRQHandler+0x36>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 80093ac:	4b07      	ldr	r3, [pc, #28]	; (80093cc <USART1_IRQHandler+0x3c>)
  {


	c = LL_USART_ReceiveData8(VESC_USART);
	if(UART_RX!=NULL) xStreamBufferSendFromISR(UART_RX, &c, sizeof(c), 0);
 80093ae:	4a08      	ldr	r2, [pc, #32]	; (80093d0 <USART1_IRQHandler+0x40>)
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	6810      	ldr	r0, [r2, #0]
 80093b4:	f88d 3003 	strb.w	r3, [sp, #3]
 80093b8:	b128      	cbz	r0, 80093c6 <USART1_IRQHandler+0x36>
 80093ba:	2300      	movs	r3, #0
 80093bc:	2201      	movs	r2, #1
 80093be:	f10d 0103 	add.w	r1, sp, #3
 80093c2:	f003 fe25 	bl	800d010 <xStreamBufferSendFromISR>
  }

  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 80093c6:	b003      	add	sp, #12
 80093c8:	f85d fb04 	ldr.w	pc, [sp], #4
 80093cc:	40013800 	.word	0x40013800
 80093d0:	200044a0 	.word	0x200044a0

080093d4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80093d4:	b500      	push	{lr}
 80093d6:	b083      	sub	sp, #12
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80093d8:	f7fa f81e 	bl	8003418 <TSK_HardwareFaultTask>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80093dc:	4b06      	ldr	r3, [pc, #24]	; (80093f8 <HardFault_Handler+0x24>)
 80093de:	681a      	ldr	r2, [r3, #0]

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(VESC_USART)) /* Overrun error occurs */
 80093e0:	0712      	lsls	r2, r2, #28
 80093e2:	d505      	bpl.n	80093f0 <HardFault_Handler+0x1c>
  tmpreg = USARTx->SR;
 80093e4:	681a      	ldr	r2, [r3, #0]
 80093e6:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80093e8:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 80093ea:	685a      	ldr	r2, [r3, #4]
 80093ec:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 80093ee:	9a01      	ldr	r2, [sp, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 80093f0:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	e7f3      	b.n	80093de <HardFault_Handler+0xa>
 80093f6:	bf00      	nop
 80093f8:	40013800 	.word	0x40013800

080093fc <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 80093fc:	4b03      	ldr	r3, [pc, #12]	; (800940c <EXTI15_10_IRQHandler+0x10>)
 80093fe:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC15.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_15) )
 8009400:	0412      	lsls	r2, r2, #16
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8009402:	bf44      	itt	mi
 8009404:	f44f 4200 	movmi.w	r2, #32768	; 0x8000
 8009408:	615a      	strmi	r2, [r3, #20]
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_15);
    //UI_HandleStartStopButton_cb ();
  }

}
 800940a:	4770      	bx	lr
 800940c:	40010400 	.word	0x40010400

08009410 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8009410:	4b11      	ldr	r3, [pc, #68]	; (8009458 <HAL_MspInit+0x48>)
{
 8009412:	b510      	push	{r4, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8009414:	6998      	ldr	r0, [r3, #24]
{
 8009416:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8009418:	f040 0001 	orr.w	r0, r0, #1
 800941c:	6198      	str	r0, [r3, #24]
 800941e:	699c      	ldr	r4, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009420:	2200      	movs	r2, #0
  __HAL_RCC_AFIO_CLK_ENABLE();
 8009422:	f004 0401 	and.w	r4, r4, #1
 8009426:	9400      	str	r4, [sp, #0]
 8009428:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800942a:	69dc      	ldr	r4, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800942c:	210f      	movs	r1, #15
  __HAL_RCC_PWR_CLK_ENABLE();
 800942e:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8009432:	61dc      	str	r4, [r3, #28]
 8009434:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009436:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800943a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800943e:	9301      	str	r3, [sp, #4]
 8009440:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009442:	f000 fe63 	bl	800a10c <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009446:	4a05      	ldr	r2, [pc, #20]	; (800945c <HAL_MspInit+0x4c>)
 8009448:	6853      	ldr	r3, [r2, #4]
 800944a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800944e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009452:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009454:	b002      	add	sp, #8
 8009456:	bd10      	pop	{r4, pc}
 8009458:	40021000 	.word	0x40021000
 800945c:	40010000 	.word	0x40010000

08009460 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8009460:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009462:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8009464:	6803      	ldr	r3, [r0, #0]
 8009466:	4a30      	ldr	r2, [pc, #192]	; (8009528 <HAL_ADC_MspInit+0xc8>)
{
 8009468:	b089      	sub	sp, #36	; 0x24
  if(hadc->Instance==ADC1)
 800946a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800946c:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8009470:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8009474:	d004      	beq.n	8009480 <HAL_ADC_MspInit+0x20>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8009476:	4a2d      	ldr	r2, [pc, #180]	; (800952c <HAL_ADC_MspInit+0xcc>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d034      	beq.n	80094e6 <HAL_ADC_MspInit+0x86>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800947c:	b009      	add	sp, #36	; 0x24
 800947e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin
 8009480:	263b      	movs	r6, #59	; 0x3b
 8009482:	2703      	movs	r7, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009484:	4b2a      	ldr	r3, [pc, #168]	; (8009530 <HAL_ADC_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009486:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009488:	699a      	ldr	r2, [r3, #24]
 800948a:	4605      	mov	r5, r0
 800948c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009490:	619a      	str	r2, [r3, #24]
 8009492:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009494:	4827      	ldr	r0, [pc, #156]	; (8009534 <HAL_ADC_MspInit+0xd4>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8009496:	f402 7200 	and.w	r2, r2, #512	; 0x200
 800949a:	9200      	str	r2, [sp, #0]
 800949c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800949e:	699a      	ldr	r2, [r3, #24]
 80094a0:	f042 0204 	orr.w	r2, r2, #4
 80094a4:	619a      	str	r2, [r3, #24]
 80094a6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = M1_TEMPERATURE_Pin|M1_BUS_VOLTAGE_Pin|M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin
 80094a8:	e9cd 6704 	strd	r6, r7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094ac:	f003 0304 	and.w	r3, r3, #4
 80094b0:	9301      	str	r3, [sp, #4]
 80094b2:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094b4:	f001 f96a 	bl	800a78c <HAL_GPIO_Init>
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80094b8:	f44f 7080 	mov.w	r0, #256	; 0x100
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80094bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80094c0:	2320      	movs	r3, #32
    hdma_adc1.Instance = DMA1_Channel1;
 80094c2:	4e1d      	ldr	r6, [pc, #116]	; (8009538 <HAL_ADC_MspInit+0xd8>)
 80094c4:	491d      	ldr	r1, [pc, #116]	; (800953c <HAL_ADC_MspInit+0xdc>)
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80094c6:	6130      	str	r0, [r6, #16]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80094c8:	4630      	mov	r0, r6
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80094ca:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80094ce:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_adc1.Init.MemInc = DMA_MINC_DISABLE;
 80094d2:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80094d4:	61f4      	str	r4, [r6, #28]
    hdma_adc1.Instance = DMA1_Channel1;
 80094d6:	6031      	str	r1, [r6, #0]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80094d8:	f000 fe76 	bl	800a1c8 <HAL_DMA_Init>
 80094dc:	bb00      	cbnz	r0, 8009520 <HAL_ADC_MspInit+0xc0>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80094de:	622e      	str	r6, [r5, #32]
 80094e0:	6275      	str	r5, [r6, #36]	; 0x24
}
 80094e2:	b009      	add	sp, #36	; 0x24
 80094e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin;
 80094e6:	2438      	movs	r4, #56	; 0x38
 80094e8:	2503      	movs	r5, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 80094ea:	4b11      	ldr	r3, [pc, #68]	; (8009530 <HAL_ADC_MspInit+0xd0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094ec:	4811      	ldr	r0, [pc, #68]	; (8009534 <HAL_ADC_MspInit+0xd4>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 80094ee:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094f0:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC2_CLK_ENABLE();
 80094f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80094f6:	619a      	str	r2, [r3, #24]
 80094f8:	699a      	ldr	r2, [r3, #24]
 80094fa:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80094fe:	9202      	str	r2, [sp, #8]
 8009500:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009502:	699a      	ldr	r2, [r3, #24]
 8009504:	f042 0204 	orr.w	r2, r2, #4
 8009508:	619a      	str	r2, [r3, #24]
 800950a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_CURR_AMPL_V_Pin|M1_CURR_AMPL_W_Pin;
 800950c:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009510:	f003 0304 	and.w	r3, r3, #4
 8009514:	9303      	str	r3, [sp, #12]
 8009516:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009518:	f001 f938 	bl	800a78c <HAL_GPIO_Init>
}
 800951c:	b009      	add	sp, #36	; 0x24
 800951e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8009520:	f7ff f828 	bl	8008574 <Error_Handler>
 8009524:	e7db      	b.n	80094de <HAL_ADC_MspInit+0x7e>
 8009526:	bf00      	nop
 8009528:	40012400 	.word	0x40012400
 800952c:	40012800 	.word	0x40012800
 8009530:	40021000 	.word	0x40021000
 8009534:	40010800 	.word	0x40010800
 8009538:	2000437c 	.word	0x2000437c
 800953c:	40020008 	.word	0x40020008

08009540 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009540:	2300      	movs	r3, #0
{
 8009542:	b530      	push	{r4, r5, lr}
  if(htim_base->Instance==TIM1)
 8009544:	6802      	ldr	r2, [r0, #0]
 8009546:	4921      	ldr	r1, [pc, #132]	; (80095cc <HAL_TIM_Base_MspInit+0x8c>)
{
 8009548:	b089      	sub	sp, #36	; 0x24
  if(htim_base->Instance==TIM1)
 800954a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800954c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8009550:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(htim_base->Instance==TIM1)
 8009554:	d004      	beq.n	8009560 <HAL_TIM_Base_MspInit+0x20>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8009556:	491e      	ldr	r1, [pc, #120]	; (80095d0 <HAL_TIM_Base_MspInit+0x90>)
 8009558:	428a      	cmp	r2, r1
 800955a:	d010      	beq.n	800957e <HAL_TIM_Base_MspInit+0x3e>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800955c:	b009      	add	sp, #36	; 0x24
 800955e:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009560:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009564:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8009568:	699a      	ldr	r2, [r3, #24]
 800956a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800956e:	619a      	str	r2, [r3, #24]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	9b01      	ldr	r3, [sp, #4]
}
 800957a:	b009      	add	sp, #36	; 0x24
 800957c:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H1_Pin|M1_HALL_H2_Pin;
 800957e:	2431      	movs	r4, #49	; 0x31
 8009580:	2500      	movs	r5, #0
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009582:	4a14      	ldr	r2, [pc, #80]	; (80095d4 <HAL_TIM_Base_MspInit+0x94>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009584:	a904      	add	r1, sp, #16
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009586:	69d0      	ldr	r0, [r2, #28]
 8009588:	f040 0002 	orr.w	r0, r0, #2
 800958c:	61d0      	str	r0, [r2, #28]
 800958e:	69d0      	ldr	r0, [r2, #28]
 8009590:	f000 0002 	and.w	r0, r0, #2
 8009594:	9002      	str	r0, [sp, #8]
 8009596:	9802      	ldr	r0, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009598:	6990      	ldr	r0, [r2, #24]
 800959a:	f040 0008 	orr.w	r0, r0, #8
 800959e:	6190      	str	r0, [r2, #24]
 80095a0:	6992      	ldr	r2, [r2, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80095a2:	480d      	ldr	r0, [pc, #52]	; (80095d8 <HAL_TIM_Base_MspInit+0x98>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80095a4:	f002 0208 	and.w	r2, r2, #8
 80095a8:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80095aa:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = M1_HALL_H3_Pin|M1_HALL_H1_Pin|M1_HALL_H2_Pin;
 80095ac:	e9cd 4504 	strd	r4, r5, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80095b0:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80095b2:	f001 f8eb 	bl	800a78c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 80095b6:	4a09      	ldr	r2, [pc, #36]	; (80095dc <HAL_TIM_Base_MspInit+0x9c>)
 80095b8:	6853      	ldr	r3, [r2, #4]
 80095ba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80095be:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80095c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80095c6:	6053      	str	r3, [r2, #4]
}
 80095c8:	b009      	add	sp, #36	; 0x24
 80095ca:	bd30      	pop	{r4, r5, pc}
 80095cc:	40012c00 	.word	0x40012c00
 80095d0:	40000400 	.word	0x40000400
 80095d4:	40021000 	.word	0x40021000
 80095d8:	40010c00 	.word	0x40010c00
 80095dc:	40010000 	.word	0x40010000

080095e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095e0:	2300      	movs	r3, #0
{
 80095e2:	b510      	push	{r4, lr}
  if(htim->Instance==TIM1)
 80095e4:	6801      	ldr	r1, [r0, #0]
 80095e6:	4a1b      	ldr	r2, [pc, #108]	; (8009654 <HAL_TIM_MspPostInit+0x74>)
{
 80095e8:	b086      	sub	sp, #24
  if(htim->Instance==TIM1)
 80095ea:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80095f0:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(htim->Instance==TIM1)
 80095f4:	d001      	beq.n	80095fa <HAL_TIM_MspPostInit+0x1a>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80095f6:	b006      	add	sp, #24
 80095f8:	bd10      	pop	{r4, pc}
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80095fa:	f44f 4060 	mov.w	r0, #57344	; 0xe000
 80095fe:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009600:	2403      	movs	r4, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009602:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009606:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800960a:	699a      	ldr	r2, [r3, #24]
 800960c:	f042 0208 	orr.w	r2, r2, #8
 8009610:	619a      	str	r2, [r3, #24]
 8009612:	699a      	ldr	r2, [r3, #24]
 8009614:	f002 0208 	and.w	r2, r2, #8
 8009618:	9200      	str	r2, [sp, #0]
 800961a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800961c:	699a      	ldr	r2, [r3, #24]
 800961e:	f042 0204 	orr.w	r2, r2, #4
 8009622:	619a      	str	r2, [r3, #24]
 8009624:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin|M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8009626:	e9cd 0102 	strd	r0, r1, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800962a:	f003 0304 	and.w	r3, r3, #4
 800962e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009630:	a902      	add	r1, sp, #8
 8009632:	4809      	ldr	r0, [pc, #36]	; (8009658 <HAL_TIM_MspPostInit+0x78>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009634:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009636:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009638:	f001 f8a8 	bl	800a78c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800963c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8009640:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009642:	4806      	ldr	r0, [pc, #24]	; (800965c <HAL_TIM_MspPostInit+0x7c>)
 8009644:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8009646:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800964a:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800964c:	f001 f89e 	bl	800a78c <HAL_GPIO_Init>
}
 8009650:	b006      	add	sp, #24
 8009652:	bd10      	pop	{r4, pc}
 8009654:	40012c00 	.word	0x40012c00
 8009658:	40010c00 	.word	0x40010c00
 800965c:	40010800 	.word	0x40010800

08009660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009660:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009662:	2400      	movs	r4, #0
  if(huart->Instance==USART1)
 8009664:	6803      	ldr	r3, [r0, #0]
 8009666:	4a66      	ldr	r2, [pc, #408]	; (8009800 <HAL_UART_MspInit+0x1a0>)
{
 8009668:	b08b      	sub	sp, #44	; 0x2c
  if(huart->Instance==USART1)
 800966a:	4293      	cmp	r3, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800966c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8009670:	e9cd 4408 	strd	r4, r4, [sp, #32]
  if(huart->Instance==USART1)
 8009674:	d008      	beq.n	8009688 <HAL_UART_MspInit+0x28>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8009676:	4a63      	ldr	r2, [pc, #396]	; (8009804 <HAL_UART_MspInit+0x1a4>)
 8009678:	4605      	mov	r5, r0
 800967a:	4293      	cmp	r3, r2
 800967c:	d033      	beq.n	80096e6 <HAL_UART_MspInit+0x86>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800967e:	4a62      	ldr	r2, [pc, #392]	; (8009808 <HAL_UART_MspInit+0x1a8>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d077      	beq.n	8009774 <HAL_UART_MspInit+0x114>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8009684:	b00b      	add	sp, #44	; 0x2c
 8009686:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = UART1_TX_Pin;
 8009688:	2040      	movs	r0, #64	; 0x40
 800968a:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800968c:	2502      	movs	r5, #2
    __HAL_RCC_USART1_CLK_ENABLE();
 800968e:	4b5f      	ldr	r3, [pc, #380]	; (800980c <HAL_UART_MspInit+0x1ac>)
 8009690:	699a      	ldr	r2, [r3, #24]
 8009692:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009696:	619a      	str	r2, [r3, #24]
 8009698:	699a      	ldr	r2, [r3, #24]
 800969a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800969e:	9200      	str	r2, [sp, #0]
 80096a0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096a2:	699a      	ldr	r2, [r3, #24]
 80096a4:	f042 0208 	orr.w	r2, r2, #8
 80096a8:	619a      	str	r2, [r3, #24]
 80096aa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = UART1_TX_Pin;
 80096ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096b0:	f003 0308 	and.w	r3, r3, #8
 80096b4:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(UART1_TX_GPIO_Port, &GPIO_InitStruct);
 80096b6:	a906      	add	r1, sp, #24
 80096b8:	4855      	ldr	r0, [pc, #340]	; (8009810 <HAL_UART_MspInit+0x1b0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096bc:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(UART1_TX_GPIO_Port, &GPIO_InitStruct);
 80096be:	f001 f865 	bl	800a78c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART1_RX_Pin;
 80096c2:	2280      	movs	r2, #128	; 0x80
 80096c4:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART1_RX_GPIO_Port, &GPIO_InitStruct);
 80096c6:	4852      	ldr	r0, [pc, #328]	; (8009810 <HAL_UART_MspInit+0x1b0>)
 80096c8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART1_RX_Pin;
 80096ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096ce:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(UART1_RX_GPIO_Port, &GPIO_InitStruct);
 80096d0:	f001 f85c 	bl	800a78c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART1_ENABLE();
 80096d4:	4a4f      	ldr	r2, [pc, #316]	; (8009814 <HAL_UART_MspInit+0x1b4>)
 80096d6:	6853      	ldr	r3, [r2, #4]
 80096d8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80096dc:	f043 0304 	orr.w	r3, r3, #4
 80096e0:	6053      	str	r3, [r2, #4]
}
 80096e2:	b00b      	add	sp, #44	; 0x2c
 80096e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = UART2_RXTX_Pin;
 80096e6:	2604      	movs	r6, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096e8:	f04f 0c02 	mov.w	ip, #2
    GPIO_InitStruct.Pin = UART2_RXTX_Pin;
 80096ec:	2712      	movs	r7, #18
    __HAL_RCC_USART2_CLK_ENABLE();
 80096ee:	4b47      	ldr	r3, [pc, #284]	; (800980c <HAL_UART_MspInit+0x1ac>)
    HAL_GPIO_Init(UART2_RXTX_GPIO_Port, &GPIO_InitStruct);
 80096f0:	4849      	ldr	r0, [pc, #292]	; (8009818 <HAL_UART_MspInit+0x1b8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80096f2:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(UART2_RXTX_GPIO_Port, &GPIO_InitStruct);
 80096f4:	a906      	add	r1, sp, #24
    __HAL_RCC_USART2_CLK_ENABLE();
 80096f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80096fa:	61da      	str	r2, [r3, #28]
 80096fc:	69da      	ldr	r2, [r3, #28]
 80096fe:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8009702:	9202      	str	r2, [sp, #8]
 8009704:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009706:	699a      	ldr	r2, [r3, #24]
 8009708:	f042 0204 	orr.w	r2, r2, #4
 800970c:	619a      	str	r2, [r3, #24]
 800970e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = UART2_RXTX_Pin;
 8009710:	e9cd 6706 	strd	r6, r7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009714:	f003 0304 	and.w	r3, r3, #4
 8009718:	9303      	str	r3, [sp, #12]
 800971a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800971c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    HAL_GPIO_Init(UART2_RXTX_GPIO_Port, &GPIO_InitStruct);
 8009720:	f001 f834 	bl	800a78c <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009724:	2110      	movs	r1, #16
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009726:	2380      	movs	r3, #128	; 0x80
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8009728:	4e3c      	ldr	r6, [pc, #240]	; (800981c <HAL_UART_MspInit+0x1bc>)
 800972a:	4a3d      	ldr	r2, [pc, #244]	; (8009820 <HAL_UART_MspInit+0x1c0>)
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800972c:	4630      	mov	r0, r6
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800972e:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009732:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009736:	6071      	str	r1, [r6, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009738:	60b4      	str	r4, [r6, #8]
    hdma_usart2_tx.Instance = DMA1_Channel7;
 800973a:	6032      	str	r2, [r6, #0]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800973c:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800973e:	f000 fd43 	bl	800a1c8 <HAL_DMA_Init>
 8009742:	2800      	cmp	r0, #0
 8009744:	d156      	bne.n	80097f4 <HAL_UART_MspInit+0x194>
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009746:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009748:	2280      	movs	r2, #128	; 0x80
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800974a:	4c36      	ldr	r4, [pc, #216]	; (8009824 <HAL_UART_MspInit+0x1c4>)
 800974c:	4936      	ldr	r1, [pc, #216]	; (8009828 <HAL_UART_MspInit+0x1c8>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800974e:	636e      	str	r6, [r5, #52]	; 0x34
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8009750:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8009752:	6275      	str	r5, [r6, #36]	; 0x24
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009754:	e9c4 3301 	strd	r3, r3, [r4, #4]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009758:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800975c:	e9c4 3306 	strd	r3, r3, [r4, #24]
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8009760:	6021      	str	r1, [r4, #0]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009762:	60e2      	str	r2, [r4, #12]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8009764:	f000 fd30 	bl	800a1c8 <HAL_DMA_Init>
 8009768:	2800      	cmp	r0, #0
 800976a:	d140      	bne.n	80097ee <HAL_UART_MspInit+0x18e>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800976c:	63ac      	str	r4, [r5, #56]	; 0x38
 800976e:	6265      	str	r5, [r4, #36]	; 0x24
}
 8009770:	b00b      	add	sp, #44	; 0x2c
 8009772:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GPIO_InitStruct.Pin = UART3_TX_Pin;
 8009774:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009778:	2102      	movs	r1, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800977a:	2602      	movs	r6, #2
    __HAL_RCC_USART3_CLK_ENABLE();
 800977c:	4b23      	ldr	r3, [pc, #140]	; (800980c <HAL_UART_MspInit+0x1ac>)
 800977e:	69da      	ldr	r2, [r3, #28]
 8009780:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8009784:	61da      	str	r2, [r3, #28]
 8009786:	69da      	ldr	r2, [r3, #28]
 8009788:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800978c:	9204      	str	r2, [sp, #16]
 800978e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009790:	699a      	ldr	r2, [r3, #24]
 8009792:	f042 0208 	orr.w	r2, r2, #8
 8009796:	619a      	str	r2, [r3, #24]
 8009798:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = UART3_TX_Pin;
 800979a:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800979e:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(UART3_TX_GPIO_Port, &GPIO_InitStruct);
 80097a2:	481b      	ldr	r0, [pc, #108]	; (8009810 <HAL_UART_MspInit+0x1b0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80097a4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(UART3_TX_GPIO_Port, &GPIO_InitStruct);
 80097a6:	a906      	add	r1, sp, #24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80097a8:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097aa:	9609      	str	r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(UART3_TX_GPIO_Port, &GPIO_InitStruct);
 80097ac:	f000 ffee 	bl	800a78c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART3_RX_Pin;
 80097b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097b4:	2300      	movs	r3, #0
    HAL_GPIO_Init(UART3_RX_GPIO_Port, &GPIO_InitStruct);
 80097b6:	4816      	ldr	r0, [pc, #88]	; (8009810 <HAL_UART_MspInit+0x1b0>)
 80097b8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = UART3_RX_Pin;
 80097ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097be:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(UART3_RX_GPIO_Port, &GPIO_InitStruct);
 80097c0:	f000 ffe4 	bl	800a78c <HAL_GPIO_Init>
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80097c4:	2110      	movs	r1, #16
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80097c6:	2380      	movs	r3, #128	; 0x80
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80097c8:	4e18      	ldr	r6, [pc, #96]	; (800982c <HAL_UART_MspInit+0x1cc>)
 80097ca:	4a19      	ldr	r2, [pc, #100]	; (8009830 <HAL_UART_MspInit+0x1d0>)
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80097cc:	4630      	mov	r0, r6
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80097ce:	e9c6 4404 	strd	r4, r4, [r6, #16]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80097d2:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80097d6:	6071      	str	r1, [r6, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80097d8:	60b4      	str	r4, [r6, #8]
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80097da:	6032      	str	r2, [r6, #0]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80097dc:	60f3      	str	r3, [r6, #12]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80097de:	f000 fcf3 	bl	800a1c8 <HAL_DMA_Init>
 80097e2:	b950      	cbnz	r0, 80097fa <HAL_UART_MspInit+0x19a>
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80097e4:	2300      	movs	r3, #0
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80097e6:	2280      	movs	r2, #128	; 0x80
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80097e8:	4c12      	ldr	r4, [pc, #72]	; (8009834 <HAL_UART_MspInit+0x1d4>)
 80097ea:	4913      	ldr	r1, [pc, #76]	; (8009838 <HAL_UART_MspInit+0x1d8>)
 80097ec:	e7af      	b.n	800974e <HAL_UART_MspInit+0xee>
      Error_Handler();
 80097ee:	f7fe fec1 	bl	8008574 <Error_Handler>
 80097f2:	e7bb      	b.n	800976c <HAL_UART_MspInit+0x10c>
      Error_Handler();
 80097f4:	f7fe febe 	bl	8008574 <Error_Handler>
 80097f8:	e7a5      	b.n	8009746 <HAL_UART_MspInit+0xe6>
      Error_Handler();
 80097fa:	f7fe febb 	bl	8008574 <Error_Handler>
 80097fe:	e7f1      	b.n	80097e4 <HAL_UART_MspInit+0x184>
 8009800:	40013800 	.word	0x40013800
 8009804:	40004400 	.word	0x40004400
 8009808:	40004800 	.word	0x40004800
 800980c:	40021000 	.word	0x40021000
 8009810:	40010c00 	.word	0x40010c00
 8009814:	40010000 	.word	0x40010000
 8009818:	40010800 	.word	0x40010800
 800981c:	200042f0 	.word	0x200042f0
 8009820:	40020080 	.word	0x40020080
 8009824:	20004134 	.word	0x20004134
 8009828:	4002006c 	.word	0x4002006c
 800982c:	20004230 	.word	0x20004230
 8009830:	4002001c 	.word	0x4002001c
 8009834:	20004178 	.word	0x20004178
 8009838:	40020030 	.word	0x40020030

0800983c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800983c:	b530      	push	{r4, r5, lr}
 800983e:	4601      	mov	r1, r0
 8009840:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8009842:	2200      	movs	r2, #0
 8009844:	201e      	movs	r0, #30
 8009846:	f000 fc61 	bl	800a10c <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800984a:	201e      	movs	r0, #30
 800984c:	f000 fc96 	bl	800a17c <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8009850:	4b15      	ldr	r3, [pc, #84]	; (80098a8 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009852:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM4_CLK_ENABLE();
 8009854:	69da      	ldr	r2, [r3, #28]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009856:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8009858:	f042 0204 	orr.w	r2, r2, #4
 800985c:	61da      	str	r2, [r3, #28]
 800985e:	69db      	ldr	r3, [r3, #28]

  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8009860:	4d12      	ldr	r5, [pc, #72]	; (80098ac <HAL_InitTick+0x70>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 8009862:	f003 0304 	and.w	r3, r3, #4
 8009866:	9302      	str	r3, [sp, #8]
 8009868:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800986a:	f001 fb9f 	bl	800afac <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800986e:	f001 fb7d 	bl	800af6c <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 8009872:	2200      	movs	r2, #0
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8009874:	f240 31e7 	movw	r1, #999	; 0x3e7
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009878:	0043      	lsls	r3, r0, #1
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800987a:	fba5 0303 	umull	r0, r3, r5, r3
  htim4.Instance = TIM4;
 800987e:	4c0c      	ldr	r4, [pc, #48]	; (80098b0 <HAL_InitTick+0x74>)
 8009880:	4d0c      	ldr	r5, [pc, #48]	; (80098b4 <HAL_InitTick+0x78>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8009882:	0c9b      	lsrs	r3, r3, #18
 8009884:	3b01      	subs	r3, #1
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8009886:	4620      	mov	r0, r4
  htim4.Instance = TIM4;
 8009888:	e9c4 5300 	strd	r5, r3, [r4]
  htim4.Init.ClockDivision = 0;
 800988c:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009890:	60a2      	str	r2, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8009892:	f001 fc2b 	bl	800b0ec <HAL_TIM_Base_Init>
 8009896:	b110      	cbz	r0, 800989e <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
  }

  /* Return function status */
  return HAL_ERROR;
 8009898:	2001      	movs	r0, #1
}
 800989a:	b009      	add	sp, #36	; 0x24
 800989c:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim4);
 800989e:	4620      	mov	r0, r4
 80098a0:	f001 fc88 	bl	800b1b4 <HAL_TIM_Base_Start_IT>
}
 80098a4:	b009      	add	sp, #36	; 0x24
 80098a6:	bd30      	pop	{r4, r5, pc}
 80098a8:	40021000 	.word	0x40021000
 80098ac:	431bde83 	.word	0x431bde83
 80098b0:	2000444c 	.word	0x2000444c
 80098b4:	40000800 	.word	0x40000800

080098b8 <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80098b8:	4801      	ldr	r0, [pc, #4]	; (80098c0 <DMA1_Channel2_IRQHandler+0x8>)
 80098ba:	f000 bd1b 	b.w	800a2f4 <HAL_DMA_IRQHandler>
 80098be:	bf00      	nop
 80098c0:	20004230 	.word	0x20004230

080098c4 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80098c4:	4801      	ldr	r0, [pc, #4]	; (80098cc <DMA1_Channel3_IRQHandler+0x8>)
 80098c6:	f000 bd15 	b.w	800a2f4 <HAL_DMA_IRQHandler>
 80098ca:	bf00      	nop
 80098cc:	20004178 	.word	0x20004178

080098d0 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80098d0:	4801      	ldr	r0, [pc, #4]	; (80098d8 <DMA1_Channel6_IRQHandler+0x8>)
 80098d2:	f000 bd0f 	b.w	800a2f4 <HAL_DMA_IRQHandler>
 80098d6:	bf00      	nop
 80098d8:	20004134 	.word	0x20004134

080098dc <DMA1_Channel7_IRQHandler>:
void DMA1_Channel7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80098dc:	4801      	ldr	r0, [pc, #4]	; (80098e4 <DMA1_Channel7_IRQHandler+0x8>)
 80098de:	f000 bd09 	b.w	800a2f4 <HAL_DMA_IRQHandler>
 80098e2:	bf00      	nop
 80098e4:	200042f0 	.word	0x200042f0

080098e8 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80098e8:	4801      	ldr	r0, [pc, #4]	; (80098f0 <TIM4_IRQHandler+0x8>)
 80098ea:	f001 bf21 	b.w	800b730 <HAL_TIM_IRQHandler>
 80098ee:	bf00      	nop
 80098f0:	2000444c 	.word	0x2000444c

080098f4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80098f4:	2001      	movs	r0, #1
 80098f6:	4770      	bx	lr

080098f8 <_kill>:

int _kill(int pid, int sig)
{
 80098f8:	b508      	push	{r3, lr}
	errno = EINVAL;
 80098fa:	f004 fe23 	bl	800e544 <__errno>
 80098fe:	2216      	movs	r2, #22
 8009900:	4603      	mov	r3, r0
	return -1;
}
 8009902:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8009906:	601a      	str	r2, [r3, #0]
}
 8009908:	bd08      	pop	{r3, pc}
 800990a:	bf00      	nop

0800990c <_read>:
//	_kill(status, -1);
//	while (1) {}		/* Make sure we hang here */
//}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800990c:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800990e:	1e16      	subs	r6, r2, #0
 8009910:	dd07      	ble.n	8009922 <_read+0x16>
 8009912:	460c      	mov	r4, r1
 8009914:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8009916:	f3af 8000 	nop.w
 800991a:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800991e:	42a5      	cmp	r5, r4
 8009920:	d1f9      	bne.n	8009916 <_read+0xa>
	}

return len;
}
 8009922:	4630      	mov	r0, r6
 8009924:	bd70      	pop	{r4, r5, r6, pc}
 8009926:	bf00      	nop

08009928 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009928:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800992a:	1e16      	subs	r6, r2, #0
 800992c:	dd07      	ble.n	800993e <_write+0x16>
 800992e:	460c      	mov	r4, r1
 8009930:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8009932:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009936:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800993a:	42ac      	cmp	r4, r5
 800993c:	d1f9      	bne.n	8009932 <_write+0xa>
	}
	return len;
}
 800993e:	4630      	mov	r0, r6
 8009940:	bd70      	pop	{r4, r5, r6, pc}
 8009942:	bf00      	nop

08009944 <_close>:

int _close(int file)
{
	return -1;
}
 8009944:	f04f 30ff 	mov.w	r0, #4294967295
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop

0800994c <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800994c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8009950:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8009952:	604b      	str	r3, [r1, #4]
}
 8009954:	4770      	bx	lr
 8009956:	bf00      	nop

08009958 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8009958:	2001      	movs	r0, #1
 800995a:	4770      	bx	lr

0800995c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800995c:	2000      	movs	r0, #0
 800995e:	4770      	bx	lr

08009960 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009960:	490d      	ldr	r1, [pc, #52]	; (8009998 <_sbrk+0x38>)
{
 8009962:	4603      	mov	r3, r0
 8009964:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009966:	4a0d      	ldr	r2, [pc, #52]	; (800999c <_sbrk+0x3c>)
 8009968:	4c0d      	ldr	r4, [pc, #52]	; (80099a0 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 800996a:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800996c:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800996e:	b120      	cbz	r0, 800997a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009970:	4403      	add	r3, r0
 8009972:	4293      	cmp	r3, r2
 8009974:	d807      	bhi.n	8009986 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8009976:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8009978:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800997a:	4c0a      	ldr	r4, [pc, #40]	; (80099a4 <_sbrk+0x44>)
 800997c:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 800997e:	4403      	add	r3, r0
 8009980:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8009982:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8009984:	d9f7      	bls.n	8009976 <_sbrk+0x16>
    errno = ENOMEM;
 8009986:	f004 fddd 	bl	800e544 <__errno>
 800998a:	220c      	movs	r2, #12
 800998c:	4603      	mov	r3, r0
    return (void *)-1;
 800998e:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8009992:	601a      	str	r2, [r3, #0]
}
 8009994:	bd10      	pop	{r4, pc}
 8009996:	bf00      	nop
 8009998:	20000d90 	.word	0x20000d90
 800999c:	20005000 	.word	0x20005000
 80099a0:	00000400 	.word	0x00000400
 80099a4:	20004520 	.word	0x20004520

080099a8 <task_LED>:
	osDelay(ticks);
}


void task_LED(void * argument)
{
 80099a8:	b508      	push	{r3, lr}
 80099aa:	4e25      	ldr	r6, [pc, #148]	; (8009a40 <task_LED+0x98>)
 80099ac:	4d25      	ldr	r5, [pc, #148]	; (8009a44 <task_LED+0x9c>)
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, pdFALSE);
 80099ae:	4c26      	ldr	r4, [pc, #152]	; (8009a48 <task_LED+0xa0>)

  /* Infinite loop */
  for(;;)
  {
	  if(pMCI[M1]->pSTM->hFaultOccurred){
 80099b0:	6833      	ldr	r3, [r6, #0]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	889a      	ldrh	r2, [r3, #4]
 80099b6:	b35a      	cbz	r2, 8009a10 <task_LED+0x68>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, pdFALSE);
 80099b8:	2200      	movs	r2, #0
 80099ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80099be:	4620      	mov	r0, r4
 80099c0:	f000 fff6 	bl	800a9b0 <HAL_GPIO_WritePin>
	osDelay(ticks);
 80099c4:	20c8      	movs	r0, #200	; 0xc8
 80099c6:	f002 fb15 	bl	800bff4 <osDelay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, pdTRUE);
 80099ca:	2201      	movs	r2, #1
 80099cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80099d0:	4620      	mov	r0, r4
 80099d2:	f000 ffed 	bl	800a9b0 <HAL_GPIO_WritePin>
	osDelay(ticks);
 80099d6:	20c8      	movs	r0, #200	; 0xc8
 80099d8:	f002 fb0c 	bl	800bff4 <osDelay>
		  prv_LED_blink(200);
	  }else{
		  prv_LED_blink(1000);
	  }
	  if(task_cli_mode == UART_MODE_CLI){
 80099dc:	782b      	ldrb	r3, [r5, #0]
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d1e6      	bne.n	80099b0 <task_LED+0x8>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, pdFALSE);
 80099e2:	2200      	movs	r2, #0
 80099e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80099e8:	4620      	mov	r0, r4
 80099ea:	f000 ffe1 	bl	800a9b0 <HAL_GPIO_WritePin>
	osDelay(ticks);
 80099ee:	2064      	movs	r0, #100	; 0x64
 80099f0:	f002 fb00 	bl	800bff4 <osDelay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, pdTRUE);
 80099f4:	2201      	movs	r2, #1
 80099f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 ffd8 	bl	800a9b0 <HAL_GPIO_WritePin>
	osDelay(ticks);
 8009a00:	2064      	movs	r0, #100	; 0x64
 8009a02:	f002 faf7 	bl	800bff4 <osDelay>
	  if(pMCI[M1]->pSTM->hFaultOccurred){
 8009a06:	6833      	ldr	r3, [r6, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	889a      	ldrh	r2, [r3, #4]
 8009a0c:	2a00      	cmp	r2, #0
 8009a0e:	d1d3      	bne.n	80099b8 <task_LED+0x10>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, pdFALSE);
 8009a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a14:	4620      	mov	r0, r4
 8009a16:	f000 ffcb 	bl	800a9b0 <HAL_GPIO_WritePin>
	osDelay(ticks);
 8009a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009a1e:	f002 fae9 	bl	800bff4 <osDelay>
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, pdTRUE);
 8009a22:	2201      	movs	r2, #1
 8009a24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a28:	4620      	mov	r0, r4
 8009a2a:	f000 ffc1 	bl	800a9b0 <HAL_GPIO_WritePin>
	osDelay(ticks);
 8009a2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009a32:	f002 fadf 	bl	800bff4 <osDelay>
	  if(task_cli_mode == UART_MODE_CLI){
 8009a36:	782b      	ldrb	r3, [r5, #0]
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d1b9      	bne.n	80099b0 <task_LED+0x8>
 8009a3c:	e7d1      	b.n	80099e2 <task_LED+0x3a>
 8009a3e:	bf00      	nop
 8009a40:	200033ac 	.word	0x200033ac
 8009a44:	20000d94 	.word	0x20000d94
 8009a48:	40010800 	.word	0x40010800

08009a4c <task_LED_init>:
		  prv_LED_blink(100);
	  }
  }
}

void task_LED_init(){
 8009a4c:	b508      	push	{r3, lr}
	LEDHandle = osThreadNew(task_LED, NULL, &LED_attributes);
 8009a4e:	2100      	movs	r1, #0
 8009a50:	4a03      	ldr	r2, [pc, #12]	; (8009a60 <task_LED_init+0x14>)
 8009a52:	4804      	ldr	r0, [pc, #16]	; (8009a64 <task_LED_init+0x18>)
 8009a54:	f002 fa6c 	bl	800bf30 <osThreadNew>
 8009a58:	4b03      	ldr	r3, [pc, #12]	; (8009a68 <task_LED_init+0x1c>)
 8009a5a:	6018      	str	r0, [r3, #0]
}
 8009a5c:	bd08      	pop	{r3, pc}
 8009a5e:	bf00      	nop
 8009a60:	08010e2c 	.word	0x08010e2c
 8009a64:	080099a9 	.word	0x080099a9
 8009a68:	20004494 	.word	0x20004494

08009a6c <putbuffer>:
	}
	LL_USART_TransmitData8(VESC_USART, character);
}

void putbuffer(unsigned char *buf, unsigned int len){
	while(len){
 8009a6c:	b149      	cbz	r1, 8009a82 <putbuffer+0x16>
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8009a6e:	4a05      	ldr	r2, [pc, #20]	; (8009a84 <putbuffer+0x18>)
 8009a70:	4401      	add	r1, r0
 8009a72:	6813      	ldr	r3, [r2, #0]
		while(!LL_USART_IsActiveFlag_TXE(VESC_USART)){
 8009a74:	061b      	lsls	r3, r3, #24
 8009a76:	d5fc      	bpl.n	8009a72 <putbuffer+0x6>
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8009a78:	f810 3b01 	ldrb.w	r3, [r0], #1
	while(len){
 8009a7c:	4288      	cmp	r0, r1
 8009a7e:	6053      	str	r3, [r2, #4]
 8009a80:	d1f7      	bne.n	8009a72 <putbuffer+0x6>
		}
		LL_USART_TransmitData8(VESC_USART, *buf);
		len--;
		buf++;
	}
}
 8009a82:	4770      	bx	lr
 8009a84:	40013800 	.word	0x40013800

08009a88 <comm_uart_send_packet>:


void comm_uart_send_packet(unsigned char *data, unsigned int len) {
	packet_send_packet(data, len, UART_HANDLE);
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f7fd b855 	b.w	8006b38 <packet_send_packet>
 8009a8e:	bf00      	nop

08009a90 <process_packet>:
}

void process_packet(unsigned char *data, unsigned int len){

	commands_process_packet(data, len, &comm_uart_send_packet);
 8009a90:	4a01      	ldr	r2, [pc, #4]	; (8009a98 <process_packet+0x8>)
 8009a92:	f7f9 bf9d 	b.w	80039d0 <commands_process_packet>
 8009a96:	bf00      	nop
 8009a98:	08009a89 	.word	0x08009a89

08009a9c <task_cli>:

}


void task_cli(void * argument)
{
 8009a9c:	b510      	push	{r4, lr}

	uint8_t c=0, len=0;
 8009a9e:	2400      	movs	r4, #0


	MCI_StartMotor( pMCI[M1] );
 8009aa0:	4b15      	ldr	r3, [pc, #84]	; (8009af8 <task_cli+0x5c>)
{
 8009aa2:	b082      	sub	sp, #8
	MCI_StartMotor( pMCI[M1] );
 8009aa4:	6818      	ldr	r0, [r3, #0]
	uint8_t c=0, len=0;
 8009aa6:	f88d 4007 	strb.w	r4, [sp, #7]
	MCI_StartMotor( pMCI[M1] );
 8009aaa:	f7f8 ff59 	bl	8002960 <MCI_StartMotor>

	vTaskDelay(200);
 8009aae:	20c8      	movs	r0, #200	; 0xc8
 8009ab0:	f003 ffc8 	bl	800da44 <vTaskDelay>
	VescToSTM_set_brake(0);
 8009ab4:	4620      	mov	r0, r4
 8009ab6:	f7fb f8fb 	bl	8004cb0 <VescToSTM_set_brake>



	packet_init(putbuffer, process_packet, UART_HANDLE);
 8009aba:	4622      	mov	r2, r4
 8009abc:	490f      	ldr	r1, [pc, #60]	; (8009afc <task_cli+0x60>)
 8009abe:	4810      	ldr	r0, [pc, #64]	; (8009b00 <task_cli+0x64>)
 8009ac0:	f7fd f828 	bl	8006b14 <packet_init>
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8009ac4:	4a0f      	ldr	r2, [pc, #60]	; (8009b04 <task_cli+0x68>)
 8009ac6:	4c10      	ldr	r4, [pc, #64]	; (8009b08 <task_cli+0x6c>)
 8009ac8:	68d3      	ldr	r3, [r2, #12]
 8009aca:	f043 0320 	orr.w	r3, r3, #32
 8009ace:	60d3      	str	r3, [r2, #12]
	LL_USART_EnableIT_RXNE(VESC_USART);
  /* Infinite loop */
	for(;;)
	{
		/* `#START TASK_LOOP_CODE` */
		len = xStreamBufferReceive(UART_RX, &c,sizeof(c), 1);
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	6820      	ldr	r0, [r4, #0]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	f10d 0107 	add.w	r1, sp, #7
 8009ada:	f003 fb0d 	bl	800d0f8 <xStreamBufferReceive>

		if(len){
 8009ade:	f010 0fff 	tst.w	r0, #255	; 0xff
 8009ae2:	d004      	beq.n	8009aee <task_cli+0x52>
			packet_process_byte(c, UART_HANDLE);
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8009aea:	f7fd f86f 	bl	8006bcc <packet_process_byte>

		}

		send_sample();
 8009aee:	f7f9 fed7 	bl	80038a0 <send_sample>
		VescToSTM_handle_timeout();
 8009af2:	f7fb f811 	bl	8004b18 <VescToSTM_handle_timeout>
		len = xStreamBufferReceive(UART_RX, &c,sizeof(c), 1);
 8009af6:	e7eb      	b.n	8009ad0 <task_cli+0x34>
 8009af8:	200033ac 	.word	0x200033ac
 8009afc:	08009a91 	.word	0x08009a91
 8009b00:	08009a6d 	.word	0x08009a6d
 8009b04:	40013800 	.word	0x40013800
 8009b08:	200044a0 	.word	0x200044a0

08009b0c <task_cli_init>:
	}
}



void task_cli_init(){
 8009b0c:	b538      	push	{r3, r4, r5, lr}
	HAL_NVIC_SetPriority(VESC_USART_IRQn, 5, 0);
 8009b0e:	2200      	movs	r2, #0
 8009b10:	2105      	movs	r1, #5
 8009b12:	2025      	movs	r0, #37	; 0x25
 8009b14:	f000 fafa 	bl	800a10c <HAL_NVIC_SetPriority>
	cli_handle = NULL;
 8009b18:	2200      	movs	r2, #0
 8009b1a:	4c08      	ldr	r4, [pc, #32]	; (8009b3c <task_cli_init+0x30>)
	UART_RX = xStreamBufferCreate(STREAMBUFFER_RX_SIZE,1);
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	2020      	movs	r0, #32
	cli_handle = NULL;
 8009b20:	6022      	str	r2, [r4, #0]
	UART_RX = xStreamBufferCreate(STREAMBUFFER_RX_SIZE,1);
 8009b22:	f003 fa2f 	bl	800cf84 <xStreamBufferGenericCreate>
 8009b26:	4605      	mov	r5, r0
 8009b28:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <task_cli_init+0x34>)
	task_cli_handle = osThreadNew(task_cli, cli_handle, &task_cli_attributes);
 8009b2a:	6821      	ldr	r1, [r4, #0]
 8009b2c:	4a05      	ldr	r2, [pc, #20]	; (8009b44 <task_cli_init+0x38>)
 8009b2e:	4806      	ldr	r0, [pc, #24]	; (8009b48 <task_cli_init+0x3c>)
	UART_RX = xStreamBufferCreate(STREAMBUFFER_RX_SIZE,1);
 8009b30:	601d      	str	r5, [r3, #0]
	task_cli_handle = osThreadNew(task_cli, cli_handle, &task_cli_attributes);
 8009b32:	f002 f9fd 	bl	800bf30 <osThreadNew>
 8009b36:	4b05      	ldr	r3, [pc, #20]	; (8009b4c <task_cli_init+0x40>)
 8009b38:	6018      	str	r0, [r3, #0]
}
 8009b3a:	bd38      	pop	{r3, r4, r5, pc}
 8009b3c:	2000449c 	.word	0x2000449c
 8009b40:	200044a0 	.word	0x200044a0
 8009b44:	08010e54 	.word	0x08010e54
 8009b48:	08009a9d 	.word	0x08009a9d
 8009b4c:	20004498 	.word	0x20004498

08009b50 <task_init>:
#include "task_init.h"
#include "task_LED.h"
#include "task_pwr.h"
#include "task_cli.h"

void task_init(){
 8009b50:	b508      	push	{r3, lr}
	task_cli_init();
 8009b52:	f7ff ffdb 	bl	8009b0c <task_cli_init>
	task_LED_init();  //Bring up the blinky
 8009b56:	f7ff ff79 	bl	8009a4c <task_LED_init>
	task_PWR_init();  //Manage power button

}
 8009b5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	task_PWR_init();  //Manage power button
 8009b5e:	f000 b829 	b.w	8009bb4 <task_PWR_init>
 8009b62:	bf00      	nop

08009b64 <task_PWR>:
			poweroff();
		}
	}
}

void task_PWR(void *argument) {
 8009b64:	b508      	push	{r3, lr}
	if (HAL_GPIO_ReadPin(PWR_BTN_GPIO_Port, PWR_BTN_Pin)) {
 8009b66:	4d11      	ldr	r5, [pc, #68]	; (8009bac <task_PWR+0x48>)
	HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, GPIO_PIN_RESET);
 8009b68:	4e11      	ldr	r6, [pc, #68]	; (8009bb0 <task_PWR+0x4c>)
	if (HAL_GPIO_ReadPin(PWR_BTN_GPIO_Port, PWR_BTN_Pin)) {
 8009b6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 ff18 	bl	800a9a4 <HAL_GPIO_ReadPin>
 8009b74:	b178      	cbz	r0, 8009b96 <task_PWR+0x32>
 8009b76:	2400      	movs	r4, #0
 8009b78:	e002      	b.n	8009b80 <task_PWR+0x1c>
			HAL_Delay(10);
 8009b7a:	200a      	movs	r0, #10
 8009b7c:	f000 f850 	bl	8009c20 <HAL_Delay>
		while (HAL_GPIO_ReadPin(PWR_BTN_GPIO_Port, PWR_BTN_Pin)) {
 8009b80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009b84:	4628      	mov	r0, r5
 8009b86:	f000 ff0d 	bl	800a9a4 <HAL_GPIO_ReadPin>
			HAL_Delay(10);
 8009b8a:	b2a3      	uxth	r3, r4
		while (HAL_GPIO_ReadPin(PWR_BTN_GPIO_Port, PWR_BTN_Pin)) {
 8009b8c:	3401      	adds	r4, #1
 8009b8e:	2800      	cmp	r0, #0
 8009b90:	d1f3      	bne.n	8009b7a <task_PWR+0x16>
		if (cnt_press >= 2 * 100) {
 8009b92:	2bc7      	cmp	r3, #199	; 0xc7
 8009b94:	d803      	bhi.n	8009b9e <task_PWR+0x3a>

	/* Infinite loop */
	for (;;) {
		poweroffPressCheck();
		osDelay(100);
 8009b96:	2064      	movs	r0, #100	; 0x64
 8009b98:	f002 fa2c 	bl	800bff4 <osDelay>
	for (;;) {
 8009b9c:	e7e5      	b.n	8009b6a <task_PWR+0x6>
	HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, GPIO_PIN_RESET);
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009ba4:	4630      	mov	r0, r6
 8009ba6:	f000 ff03 	bl	800a9b0 <HAL_GPIO_WritePin>
}
 8009baa:	e7f4      	b.n	8009b96 <task_PWR+0x32>
 8009bac:	40011000 	.word	0x40011000
 8009bb0:	40010800 	.word	0x40010800

08009bb4 <task_PWR_init>:
	}
}

void task_PWR_init() {
 8009bb4:	b508      	push	{r3, lr}
	PwrHandle = osThreadNew(task_PWR, NULL, &PWR_attributes);
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	4a03      	ldr	r2, [pc, #12]	; (8009bc8 <task_PWR_init+0x14>)
 8009bba:	4804      	ldr	r0, [pc, #16]	; (8009bcc <task_PWR_init+0x18>)
 8009bbc:	f002 f9b8 	bl	800bf30 <osThreadNew>
 8009bc0:	4b03      	ldr	r3, [pc, #12]	; (8009bd0 <task_PWR_init+0x1c>)
 8009bc2:	6018      	str	r0, [r3, #0]
}
 8009bc4:	bd08      	pop	{r3, pc}
 8009bc6:	bf00      	nop
 8009bc8:	08010e7c 	.word	0x08010e7c
 8009bcc:	08009b65 	.word	0x08009b65
 8009bd0:	200044a4 	.word	0x200044a4

08009bd4 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop

08009bd8 <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009bd8:	4a07      	ldr	r2, [pc, #28]	; (8009bf8 <HAL_Init+0x20>)
{
 8009bda:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009bdc:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009bde:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009be0:	f043 0310 	orr.w	r3, r3, #16
 8009be4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009be6:	f000 fa7f 	bl	800a0e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009bea:	2000      	movs	r0, #0
 8009bec:	f7ff fe26 	bl	800983c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009bf0:	f7ff fc0e 	bl	8009410 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8009bf4:	2000      	movs	r0, #0
 8009bf6:	bd08      	pop	{r3, pc}
 8009bf8:	40022000 	.word	0x40022000

08009bfc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8009bfc:	4a03      	ldr	r2, [pc, #12]	; (8009c0c <HAL_IncTick+0x10>)
 8009bfe:	4b04      	ldr	r3, [pc, #16]	; (8009c10 <HAL_IncTick+0x14>)
 8009c00:	6811      	ldr	r1, [r2, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	440b      	add	r3, r1
 8009c06:	6013      	str	r3, [r2, #0]
}
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	200044a8 	.word	0x200044a8
 8009c10:	20000490 	.word	0x20000490

08009c14 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8009c14:	4b01      	ldr	r3, [pc, #4]	; (8009c1c <HAL_GetTick+0x8>)
 8009c16:	6818      	ldr	r0, [r3, #0]
}
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	200044a8 	.word	0x200044a8

08009c20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009c24:	f7ff fff6 	bl	8009c14 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009c28:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8009c2a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8009c2c:	d002      	beq.n	8009c34 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8009c2e:	4b04      	ldr	r3, [pc, #16]	; (8009c40 <HAL_Delay+0x20>)
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009c34:	f7ff ffee 	bl	8009c14 <HAL_GetTick>
 8009c38:	1b40      	subs	r0, r0, r5
 8009c3a:	42a0      	cmp	r0, r4
 8009c3c:	d3fa      	bcc.n	8009c34 <HAL_Delay+0x14>
  {
  }
}
 8009c3e:	bd38      	pop	{r3, r4, r5, pc}
 8009c40:	20000490 	.word	0x20000490

08009c44 <HAL_ADC_Init>:
  uint32_t tmp_cr1 = 0U;
  uint32_t tmp_cr2 = 0U;
  uint32_t tmp_sqr1 = 0U;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8009c44:	2800      	cmp	r0, #0
 8009c46:	f000 8082 	beq.w	8009d4e <HAL_ADC_Init+0x10a>
{
 8009c4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009c4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009c4e:	4604      	mov	r4, r0
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d065      	beq.n	8009d20 <HAL_ADC_Init+0xdc>
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	689a      	ldr	r2, [r3, #8]
 8009c58:	07d5      	lsls	r5, r2, #31
 8009c5a:	d43e      	bmi.n	8009cda <HAL_ADC_Init+0x96>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8009c5c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009c5e:	06d2      	lsls	r2, r2, #27
 8009c60:	d458      	bmi.n	8009d14 <HAL_ADC_Init+0xd0>
    ADC_STATE_CLR_SET(hadc->State,
 8009c62:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8009c64:	69e0      	ldr	r0, [r4, #28]
 8009c66:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8009c68:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8009c6c:	4301      	orrs	r1, r0
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8009c6e:	68a0      	ldr	r0, [r4, #8]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8009c70:	7b26      	ldrb	r6, [r4, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8009c72:	f022 0202 	bic.w	r2, r2, #2
 8009c76:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8009c7a:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    ADC_STATE_CLR_SET(hadc->State,
 8009c7e:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8009c80:	ea41 0246 	orr.w	r2, r1, r6, lsl #1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009c84:	7d21      	ldrb	r1, [r4, #20]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8009c86:	d051      	beq.n	8009d2c <HAL_ADC_Init+0xe8>
 8009c88:	2801      	cmp	r0, #1
 8009c8a:	bf0c      	ite	eq
 8009c8c:	f44f 7780 	moveq.w	r7, #256	; 0x100
 8009c90:	2700      	movne	r7, #0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009c92:	2901      	cmp	r1, #1
 8009c94:	d067      	beq.n	8009d66 <HAL_ADC_Init+0x122>
      MODIFY_REG(hadc->Instance->CR1,
 8009c96:	685d      	ldr	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8009c98:	4943      	ldr	r1, [pc, #268]	; (8009da8 <HAL_ADC_Init+0x164>)
      MODIFY_REG(hadc->Instance->CR1,
 8009c9a:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8009c9e:	433d      	orrs	r5, r7
 8009ca0:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8009ca2:	689d      	ldr	r5, [r3, #8]
 8009ca4:	4029      	ands	r1, r5
 8009ca6:	4311      	orrs	r1, r2
 8009ca8:	6099      	str	r1, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8009caa:	2801      	cmp	r0, #1
 8009cac:	d04b      	beq.n	8009d46 <HAL_ADC_Init+0x102>
  uint32_t tmp_sqr1 = 0U;
 8009cae:	2000      	movs	r0, #0
    MODIFY_REG(hadc->Instance->SQR1,
 8009cb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8009cb2:	4d3e      	ldr	r5, [pc, #248]	; (8009dac <HAL_ADC_Init+0x168>)
    MODIFY_REG(hadc->Instance->SQR1,
 8009cb4:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
 8009cb8:	4301      	orrs	r1, r0
 8009cba:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	401d      	ands	r5, r3
 8009cc0:	42aa      	cmp	r2, r5
 8009cc2:	d046      	beq.n	8009d52 <HAL_ADC_Init+0x10e>
      tmp_hal_status = HAL_ERROR;
 8009cc4:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8009cc6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009cc8:	f023 0312 	bic.w	r3, r3, #18
 8009ccc:	f043 0310 	orr.w	r3, r3, #16
 8009cd0:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009cd2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009cd4:	4303      	orrs	r3, r0
 8009cd6:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8009cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8009cda:	689a      	ldr	r2, [r3, #8]
 8009cdc:	f022 0201 	bic.w	r2, r2, #1
 8009ce0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8009ce2:	f7ff ff97 	bl	8009c14 <HAL_GetTick>
 8009ce6:	4605      	mov	r5, r0
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8009ce8:	6823      	ldr	r3, [r4, #0]
 8009cea:	689a      	ldr	r2, [r3, #8]
 8009cec:	07d0      	lsls	r0, r2, #31
 8009cee:	d5b5      	bpl.n	8009c5c <HAL_ADC_Init+0x18>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009cf0:	f7ff ff90 	bl	8009c14 <HAL_GetTick>
 8009cf4:	1b43      	subs	r3, r0, r5
 8009cf6:	2b02      	cmp	r3, #2
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8009cf8:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8009cfa:	d9f6      	bls.n	8009cea <HAL_ADC_Init+0xa6>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8009cfc:	689a      	ldr	r2, [r3, #8]
 8009cfe:	07d1      	lsls	r1, r2, #31
 8009d00:	d5f3      	bpl.n	8009cea <HAL_ADC_Init+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009d02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009d04:	f043 0310 	orr.w	r3, r3, #16
 8009d08:	62a3      	str	r3, [r4, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009d0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009d0c:	f043 0301 	orr.w	r3, r3, #1
 8009d10:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8009d12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009d14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8009d16:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009d18:	f043 0310 	orr.w	r3, r3, #16
 8009d1c:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8009d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ADC_CLEAR_ERRORCODE(hadc);
 8009d20:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8009d22:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 8009d26:	f7ff fb9b 	bl	8009460 <HAL_ADC_MspInit>
 8009d2a:	e793      	b.n	8009c54 <HAL_ADC_Init+0x10>
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8009d2c:	2901      	cmp	r1, #1
 8009d2e:	d019      	beq.n	8009d64 <HAL_ADC_Init+0x120>
      MODIFY_REG(hadc->Instance->CR1,
 8009d30:	6858      	ldr	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8009d32:	491d      	ldr	r1, [pc, #116]	; (8009da8 <HAL_ADC_Init+0x164>)
      MODIFY_REG(hadc->Instance->CR1,
 8009d34:	f420 4069 	bic.w	r0, r0, #59648	; 0xe900
 8009d38:	f440 7080 	orr.w	r0, r0, #256	; 0x100
 8009d3c:	6058      	str	r0, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8009d3e:	6898      	ldr	r0, [r3, #8]
 8009d40:	4001      	ands	r1, r0
 8009d42:	4311      	orrs	r1, r2
 8009d44:	6099      	str	r1, [r3, #8]
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8009d46:	6921      	ldr	r1, [r4, #16]
 8009d48:	3901      	subs	r1, #1
 8009d4a:	0508      	lsls	r0, r1, #20
 8009d4c:	e7b0      	b.n	8009cb0 <HAL_ADC_Init+0x6c>
    return HAL_ERROR;
 8009d4e:	2001      	movs	r0, #1
}
 8009d50:	4770      	bx	lr
      ADC_CLEAR_ERRORCODE(hadc);
 8009d52:	2000      	movs	r0, #0
 8009d54:	62e0      	str	r0, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8009d56:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009d58:	f023 0303 	bic.w	r3, r3, #3
 8009d5c:	f043 0301 	orr.w	r3, r3, #1
 8009d60:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8009d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8009d64:	4607      	mov	r7, r0
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8009d66:	b1be      	cbz	r6, 8009d98 <HAL_ADC_Init+0x154>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009d68:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8009d6a:	f041 0120 	orr.w	r1, r1, #32
 8009d6e:	62a1      	str	r1, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009d70:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009d72:	f041 0101 	orr.w	r1, r1, #1
 8009d76:	62e1      	str	r1, [r4, #44]	; 0x2c
      MODIFY_REG(hadc->Instance->CR1,
 8009d78:	685d      	ldr	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8009d7a:	490b      	ldr	r1, [pc, #44]	; (8009da8 <HAL_ADC_Init+0x164>)
      MODIFY_REG(hadc->Instance->CR1,
 8009d7c:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8009d80:	433d      	orrs	r5, r7
 8009d82:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8009d84:	689d      	ldr	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8009d86:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR2,
 8009d8a:	ea01 0105 	and.w	r1, r1, r5
 8009d8e:	ea41 0102 	orr.w	r1, r1, r2
 8009d92:	6099      	str	r1, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8009d94:	d189      	bne.n	8009caa <HAL_ADC_Init+0x66>
 8009d96:	e7d6      	b.n	8009d46 <HAL_ADC_Init+0x102>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8009d98:	69a1      	ldr	r1, [r4, #24]
 8009d9a:	1e4d      	subs	r5, r1, #1
 8009d9c:	ea47 3545 	orr.w	r5, r7, r5, lsl #13
 8009da0:	f445 6700 	orr.w	r7, r5, #2048	; 0x800
 8009da4:	e7e8      	b.n	8009d78 <HAL_ADC_Init+0x134>
 8009da6:	bf00      	nop
 8009da8:	ffe1f7fd 	.word	0xffe1f7fd
 8009dac:	ff1f0efe 	.word	0xff1f0efe

08009db0 <HAL_ADC_ConfigChannel>:
{ 
 8009db0:	4602      	mov	r2, r0
  __IO uint32_t wait_loop_index = 0U;
 8009db2:	2000      	movs	r0, #0
{ 
 8009db4:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hadc);
 8009db6:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
{ 
 8009dba:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 8009dbc:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8009dbe:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8009dc0:	d05b      	beq.n	8009e7a <HAL_ADC_ConfigChannel+0xca>
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8009dc8:	684b      	ldr	r3, [r1, #4]
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8009dca:	261f      	movs	r6, #31
  if (sConfig->Rank < 7U)
 8009dcc:	2b06      	cmp	r3, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8009dce:	6814      	ldr	r4, [r2, #0]
  if (sConfig->Rank < 7U)
 8009dd0:	d92d      	bls.n	8009e2e <HAL_ADC_ConfigChannel+0x7e>
  else if (sConfig->Rank < 13U)
 8009dd2:	2b0c      	cmp	r3, #12
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8009dd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  else if (sConfig->Rank < 13U)
 8009dd8:	d844      	bhi.n	8009e64 <HAL_ADC_ConfigChannel+0xb4>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8009dda:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8009ddc:	6808      	ldr	r0, [r1, #0]
 8009dde:	3b23      	subs	r3, #35	; 0x23
 8009de0:	409e      	lsls	r6, r3
 8009de2:	ea25 0506 	bic.w	r5, r5, r6
 8009de6:	fa00 f303 	lsl.w	r3, r0, r3
 8009dea:	432b      	orrs	r3, r5
 8009dec:	6323      	str	r3, [r4, #48]	; 0x30
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8009dee:	2809      	cmp	r0, #9
 8009df0:	d92b      	bls.n	8009e4a <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8009df2:	2607      	movs	r6, #7
 8009df4:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8009df8:	688d      	ldr	r5, [r1, #8]
 8009dfa:	3b1e      	subs	r3, #30
 8009dfc:	68e1      	ldr	r1, [r4, #12]
 8009dfe:	409e      	lsls	r6, r3
 8009e00:	409d      	lsls	r5, r3
 8009e02:	ea21 0306 	bic.w	r3, r1, r6
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8009e06:	f1a0 0110 	sub.w	r1, r0, #16
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8009e0a:	432b      	orrs	r3, r5
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8009e0c:	2901      	cmp	r1, #1
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8009e0e:	60e3      	str	r3, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8009e10:	d826      	bhi.n	8009e60 <HAL_ADC_ConfigChannel+0xb0>
    if (hadc->Instance == ADC1)
 8009e12:	4b2a      	ldr	r3, [pc, #168]	; (8009ebc <HAL_ADC_ConfigChannel+0x10c>)
 8009e14:	429c      	cmp	r4, r3
 8009e16:	d034      	beq.n	8009e82 <HAL_ADC_ConfigChannel+0xd2>
      tmp_hal_status = HAL_ERROR;
 8009e18:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009e1a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8009e1c:	f043 0320 	orr.w	r3, r3, #32
 8009e20:	6293      	str	r3, [r2, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 8009e22:	2300      	movs	r3, #0
 8009e24:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
}
 8009e28:	b003      	add	sp, #12
 8009e2a:	bc70      	pop	{r4, r5, r6}
 8009e2c:	4770      	bx	lr
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8009e2e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009e32:	6808      	ldr	r0, [r1, #0]
 8009e34:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8009e36:	3b05      	subs	r3, #5
 8009e38:	409e      	lsls	r6, r3
 8009e3a:	ea25 0506 	bic.w	r5, r5, r6
 8009e3e:	fa00 f303 	lsl.w	r3, r0, r3
 8009e42:	432b      	orrs	r3, r5
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8009e44:	2809      	cmp	r0, #9
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8009e46:	6363      	str	r3, [r4, #52]	; 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8009e48:	d8d3      	bhi.n	8009df2 <HAL_ADC_ConfigChannel+0x42>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8009e4a:	2507      	movs	r5, #7
 8009e4c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8009e50:	6889      	ldr	r1, [r1, #8]
 8009e52:	6923      	ldr	r3, [r4, #16]
 8009e54:	4085      	lsls	r5, r0
 8009e56:	4081      	lsls	r1, r0
 8009e58:	ea23 0005 	bic.w	r0, r3, r5
 8009e5c:	4308      	orrs	r0, r1
 8009e5e:	6120      	str	r0, [r4, #16]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009e60:	2000      	movs	r0, #0
 8009e62:	e7de      	b.n	8009e22 <HAL_ADC_ConfigChannel+0x72>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8009e64:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8009e66:	6808      	ldr	r0, [r1, #0]
 8009e68:	3b41      	subs	r3, #65	; 0x41
 8009e6a:	409e      	lsls	r6, r3
 8009e6c:	ea25 0506 	bic.w	r5, r5, r6
 8009e70:	fa00 f303 	lsl.w	r3, r0, r3
 8009e74:	432b      	orrs	r3, r5
 8009e76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009e78:	e7b9      	b.n	8009dee <HAL_ADC_ConfigChannel+0x3e>
  __HAL_LOCK(hadc);
 8009e7a:	2002      	movs	r0, #2
}
 8009e7c:	b003      	add	sp, #12
 8009e7e:	bc70      	pop	{r4, r5, r6}
 8009e80:	4770      	bx	lr
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8009e82:	68a3      	ldr	r3, [r4, #8]
 8009e84:	021b      	lsls	r3, r3, #8
 8009e86:	d4eb      	bmi.n	8009e60 <HAL_ADC_ConfigChannel+0xb0>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8009e88:	68a3      	ldr	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009e8a:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8009e8c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009e90:	60a3      	str	r3, [r4, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8009e92:	d1e5      	bne.n	8009e60 <HAL_ADC_ConfigChannel+0xb0>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009e94:	4b0a      	ldr	r3, [pc, #40]	; (8009ec0 <HAL_ADC_ConfigChannel+0x110>)
 8009e96:	490b      	ldr	r1, [pc, #44]	; (8009ec4 <HAL_ADC_ConfigChannel+0x114>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	fba1 1303 	umull	r1, r3, r1, r3
 8009e9e:	0c9b      	lsrs	r3, r3, #18
 8009ea0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009ea4:	005b      	lsls	r3, r3, #1
 8009ea6:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8009ea8:	9b01      	ldr	r3, [sp, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d0d8      	beq.n	8009e60 <HAL_ADC_ConfigChannel+0xb0>
            wait_loop_index--;
 8009eae:	9b01      	ldr	r3, [sp, #4]
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8009eb4:	9b01      	ldr	r3, [sp, #4]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1f9      	bne.n	8009eae <HAL_ADC_ConfigChannel+0xfe>
 8009eba:	e7d1      	b.n	8009e60 <HAL_ADC_ConfigChannel+0xb0>
 8009ebc:	40012400 	.word	0x40012400
 8009ec0:	2000048c 	.word	0x2000048c
 8009ec4:	431bde83 	.word	0x431bde83

08009ec8 <HAL_ADCEx_InjectedConfigChannel>:
  * @param  sConfigInjected: Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8009ec8:	4603      	mov	r3, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8009eca:	2000      	movs	r0, #0
{
 8009ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
    assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
    assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009ece:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
 8009ed2:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 8009ed4:	2a01      	cmp	r2, #1
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8009ed6:	689e      	ldr	r6, [r3, #8]
  __IO uint32_t wait_loop_index = 0U;
 8009ed8:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8009eda:	f000 80db 	beq.w	800a094 <HAL_ADCEx_InjectedConfigChannel+0x1cc>
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  /*   conversions is forced to 0x00 for alignment over all STM32 devices.    */
  /* - if scan mode is enabled, injected channels sequence length is set to   */
  /*   parameter "InjectedNbrOfConversion".                                   */
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
  {
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8009ee4:	684c      	ldr	r4, [r1, #4]
  if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8009ee6:	2e00      	cmp	r6, #0
 8009ee8:	d05b      	beq.n	8009fa2 <HAL_ADCEx_InjectedConfigChannel+0xda>
  else
  {
    /* Since injected channels rank conv. order depends on total number of   */
    /* injected conversions, selected rank must be below or equal to total   */
    /* number of injected conversions to be updated.                         */
    if (sConfigInjected->InjectedRank <= sConfigInjected->InjectedNbrOfConversion)
 8009eea:	690e      	ldr	r6, [r1, #16]
 8009eec:	42b4      	cmp	r4, r6
 8009eee:	f200 8099 	bhi.w	800a024 <HAL_ADCEx_InjectedConfigChannel+0x15c>
    {
      /* Clear the old SQx bits for the selected rank */
      /* Set the SQx bits for the selected rank */
      MODIFY_REG(hadc->Instance->JSQR                                         ,
 8009ef2:	f04f 0e1f 	mov.w	lr, #31
 8009ef6:	1ba7      	subs	r7, r4, r6
 8009ef8:	681a      	ldr	r2, [r3, #0]
 8009efa:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8009efe:	680d      	ldr	r5, [r1, #0]
 8009f00:	370f      	adds	r7, #15
 8009f02:	f8d2 c038 	ldr.w	ip, [r2, #56]	; 0x38
 8009f06:	fa0e fe07 	lsl.w	lr, lr, r7
 8009f0a:	3e01      	subs	r6, #1
 8009f0c:	fa05 f707 	lsl.w	r7, r5, r7
 8009f10:	f44e 1e40 	orr.w	lr, lr, #3145728	; 0x300000
 8009f14:	ea47 5606 	orr.w	r6, r7, r6, lsl #20
 8009f18:	ea2c 070e 	bic.w	r7, ip, lr
 8009f1c:	433e      	orrs	r6, r7
 8009f1e:	6396      	str	r6, [r2, #56]	; 0x38
  /* Parameters update not conditioned to ADC state:                          */
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  /* Note: In case of ADC already enabled, caution to not launch an unwanted  */
  /*       conversion while modifying register CR2 by writing 1 to bit ADON.  */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8009f20:	6896      	ldr	r6, [r2, #8]
 8009f22:	07f6      	lsls	r6, r6, #31
 8009f24:	d407      	bmi.n	8009f36 <HAL_ADCEx_InjectedConfigChannel+0x6e>
  {    
    MODIFY_REG(hadc->Instance->CR2                                           ,
 8009f26:	6896      	ldr	r6, [r2, #8]
 8009f28:	698f      	ldr	r7, [r1, #24]
 8009f2a:	f426 46e0 	bic.w	r6, r6, #28672	; 0x7000
 8009f2e:	f026 0601 	bic.w	r6, r6, #1
 8009f32:	433e      	orrs	r6, r7
 8009f34:	6096      	str	r6, [r2, #8]
  /*  - Automatic injected conversion                                         */
  /*  - Injected discontinuous mode                                           */
  
    /* Automatic injected conversion can be enabled if injected group         */
    /* external triggers are disabled.                                        */
    if (sConfigInjected->AutoInjectedConv == ENABLE)
 8009f36:	7d4e      	ldrb	r6, [r1, #21]
 8009f38:	2e01      	cmp	r6, #1
 8009f3a:	d061      	beq.n	800a000 <HAL_ADCEx_InjectedConfigChannel+0x138>
      }
    }
    
    /* Injected discontinuous can be enabled only if auto-injected mode is    */
    /* disabled.                                                              */  
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 8009f3c:	7d0f      	ldrb	r7, [r1, #20]
 8009f3e:	2f01      	cmp	r7, #1
 8009f40:	f000 8097 	beq.w	800a072 <HAL_ADCEx_InjectedConfigChannel+0x1aa>
    }


  /* InjectedChannel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8009f44:	2d09      	cmp	r5, #9
 8009f46:	d936      	bls.n	8009fb6 <HAL_ADCEx_InjectedConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8009f48:	f04f 0e07 	mov.w	lr, #7
 8009f4c:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8009f50:	68d6      	ldr	r6, [r2, #12]
 8009f52:	688f      	ldr	r7, [r1, #8]
 8009f54:	f1ac 0c1e 	sub.w	ip, ip, #30
 8009f58:	fa0e fe0c 	lsl.w	lr, lr, ip
 8009f5c:	fa07 f70c 	lsl.w	r7, r7, ip
 8009f60:	ea26 060e 	bic.w	r6, r6, lr
 8009f64:	433e      	orrs	r6, r7
               ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel) );
  }
  
  /* If ADC1 InjectedChannel_16 or InjectedChannel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8009f66:	f1a5 0710 	sub.w	r7, r5, #16
 8009f6a:	2f01      	cmp	r7, #1
    MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 8009f6c:	60d6      	str	r6, [r2, #12]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8009f6e:	d803      	bhi.n	8009f78 <HAL_ADCEx_InjectedConfigChannel+0xb0>
      (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)      )
  {
    SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8009f70:	6896      	ldr	r6, [r2, #8]
 8009f72:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8009f76:	6096      	str	r6, [r2, #8]
  }
  
  
  /* Configure the offset: offset enable/disable, InjectedChannel, offset value */
  switch(sConfigInjected->InjectedRank)
 8009f78:	2c02      	cmp	r4, #2
 8009f7a:	d02e      	beq.n	8009fda <HAL_ADCEx_InjectedConfigChannel+0x112>
 8009f7c:	2c03      	cmp	r4, #3
 8009f7e:	d06a      	beq.n	800a056 <HAL_ADCEx_InjectedConfigChannel+0x18e>
 8009f80:	2c01      	cmp	r4, #1
 8009f82:	d05f      	beq.n	800a044 <HAL_ADCEx_InjectedConfigChannel+0x17c>
                 ADC_JOFR3_JOFFSET3,
                 sConfigInjected->InjectedOffset);
      break;
    case 4:
    default:
      MODIFY_REG(hadc->Instance->JOFR4,
 8009f84:	6a14      	ldr	r4, [r2, #32]
 8009f86:	68ce      	ldr	r6, [r1, #12]
 8009f88:	f424 617f 	bic.w	r1, r4, #4080	; 0xff0
 8009f8c:	f021 010f 	bic.w	r1, r1, #15
 8009f90:	4331      	orrs	r1, r6
 8009f92:	6211      	str	r1, [r2, #32]
      break;
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8009f94:	2f01      	cmp	r7, #1
 8009f96:	d92a      	bls.n	8009fee <HAL_ADCEx_InjectedConfigChannel+0x126>
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009f98:	2200      	movs	r2, #0
 8009f9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8009f9e:	b003      	add	sp, #12
 8009fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8009fa2:	4294      	cmp	r4, r2
 8009fa4:	d06c      	beq.n	800a080 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009fa6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8009fa8:	4610      	mov	r0, r2
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009faa:	f045 0520 	orr.w	r5, r5, #32
 8009fae:	629d      	str	r5, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	680d      	ldr	r5, [r1, #0]
 8009fb4:	e7b4      	b.n	8009f20 <HAL_ADCEx_InjectedConfigChannel+0x58>
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8009fb6:	f04f 0c07 	mov.w	ip, #7
 8009fba:	6916      	ldr	r6, [r2, #16]
 8009fbc:	688f      	ldr	r7, [r1, #8]
 8009fbe:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8009fc2:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009fc6:	fa07 f70e 	lsl.w	r7, r7, lr
 8009fca:	ea26 060c 	bic.w	r6, r6, ip
 8009fce:	433e      	orrs	r6, r7
  switch(sConfigInjected->InjectedRank)
 8009fd0:	2c02      	cmp	r4, #2
    MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8009fd2:	6116      	str	r6, [r2, #16]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8009fd4:	f1a5 0710 	sub.w	r7, r5, #16
  switch(sConfigInjected->InjectedRank)
 8009fd8:	d1d0      	bne.n	8009f7c <HAL_ADCEx_InjectedConfigChannel+0xb4>
      MODIFY_REG(hadc->Instance->JOFR2,
 8009fda:	6994      	ldr	r4, [r2, #24]
 8009fdc:	68ce      	ldr	r6, [r1, #12]
 8009fde:	f424 617f 	bic.w	r1, r4, #4080	; 0xff0
 8009fe2:	f021 010f 	bic.w	r1, r1, #15
 8009fe6:	4331      	orrs	r1, r6
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8009fe8:	2f01      	cmp	r7, #1
      MODIFY_REG(hadc->Instance->JOFR2,
 8009fea:	6191      	str	r1, [r2, #24]
  if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) ||
 8009fec:	d8d4      	bhi.n	8009f98 <HAL_ADCEx_InjectedConfigChannel+0xd0>
    if (hadc->Instance == ADC1)
 8009fee:	493b      	ldr	r1, [pc, #236]	; (800a0dc <HAL_ADCEx_InjectedConfigChannel+0x214>)
 8009ff0:	428a      	cmp	r2, r1
 8009ff2:	d052      	beq.n	800a09a <HAL_ADCEx_InjectedConfigChannel+0x1d2>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009ff4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8009ff6:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009ff8:	f042 0220 	orr.w	r2, r2, #32
 8009ffc:	629a      	str	r2, [r3, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8009ffe:	e7cb      	b.n	8009f98 <HAL_ADCEx_InjectedConfigChannel+0xd0>
      if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800a000:	698f      	ldr	r7, [r1, #24]
 800a002:	f5b7 4fe0 	cmp.w	r7, #28672	; 0x7000
 800a006:	d02f      	beq.n	800a068 <HAL_ADCEx_InjectedConfigChannel+0x1a0>
        tmp_hal_status = HAL_ERROR;
 800a008:	4630      	mov	r0, r6
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a00a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 800a00c:	f047 0720 	orr.w	r7, r7, #32
 800a010:	629f      	str	r7, [r3, #40]	; 0x28
    if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 800a012:	7d0e      	ldrb	r6, [r1, #20]
 800a014:	2e01      	cmp	r6, #1
 800a016:	d195      	bne.n	8009f44 <HAL_ADCEx_InjectedConfigChannel+0x7c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a018:	6a9e      	ldr	r6, [r3, #40]	; 0x28
        tmp_hal_status = HAL_ERROR;
 800a01a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a01c:	f046 0620 	orr.w	r6, r6, #32
 800a020:	629e      	str	r6, [r3, #40]	; 0x28
        tmp_hal_status = HAL_ERROR;
 800a022:	e78f      	b.n	8009f44 <HAL_ADCEx_InjectedConfigChannel+0x7c>
      MODIFY_REG(hadc->Instance->JSQR                                       ,
 800a024:	251f      	movs	r5, #31
 800a026:	1ba6      	subs	r6, r4, r6
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800a02e:	360f      	adds	r6, #15
 800a030:	fa05 f606 	lsl.w	r6, r5, r6
 800a034:	6b95      	ldr	r5, [r2, #56]	; 0x38
 800a036:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800a03a:	ea25 0606 	bic.w	r6, r5, r6
 800a03e:	680d      	ldr	r5, [r1, #0]
 800a040:	6396      	str	r6, [r2, #56]	; 0x38
 800a042:	e76d      	b.n	8009f20 <HAL_ADCEx_InjectedConfigChannel+0x58>
      MODIFY_REG(hadc->Instance->JOFR1,
 800a044:	6954      	ldr	r4, [r2, #20]
 800a046:	68ce      	ldr	r6, [r1, #12]
 800a048:	f424 617f 	bic.w	r1, r4, #4080	; 0xff0
 800a04c:	f021 010f 	bic.w	r1, r1, #15
 800a050:	4331      	orrs	r1, r6
 800a052:	6151      	str	r1, [r2, #20]
      break;
 800a054:	e79e      	b.n	8009f94 <HAL_ADCEx_InjectedConfigChannel+0xcc>
      MODIFY_REG(hadc->Instance->JOFR3,
 800a056:	69d4      	ldr	r4, [r2, #28]
 800a058:	68ce      	ldr	r6, [r1, #12]
 800a05a:	f424 617f 	bic.w	r1, r4, #4080	; 0xff0
 800a05e:	f021 010f 	bic.w	r1, r1, #15
 800a062:	4331      	orrs	r1, r6
 800a064:	61d1      	str	r1, [r2, #28]
      break;
 800a066:	e795      	b.n	8009f94 <HAL_ADCEx_InjectedConfigChannel+0xcc>
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO);
 800a068:	6856      	ldr	r6, [r2, #4]
 800a06a:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
 800a06e:	6056      	str	r6, [r2, #4]
 800a070:	e7cf      	b.n	800a012 <HAL_ADCEx_InjectedConfigChannel+0x14a>
      if (sConfigInjected->AutoInjectedConv == DISABLE)
 800a072:	2e00      	cmp	r6, #0
 800a074:	d1d0      	bne.n	800a018 <HAL_ADCEx_InjectedConfigChannel+0x150>
        SET_BIT(hadc->Instance->CR1, ADC_CR1_JDISCEN);
 800a076:	6856      	ldr	r6, [r2, #4]
 800a078:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
 800a07c:	6056      	str	r6, [r2, #4]
 800a07e:	e761      	b.n	8009f44 <HAL_ADCEx_InjectedConfigChannel+0x7c>
      MODIFY_REG(hadc->Instance->JSQR                             ,
 800a080:	681a      	ldr	r2, [r3, #0]
 800a082:	680d      	ldr	r5, [r1, #0]
 800a084:	6b97      	ldr	r7, [r2, #56]	; 0x38
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a086:	4630      	mov	r0, r6
      MODIFY_REG(hadc->Instance->JSQR                             ,
 800a088:	0dbe      	lsrs	r6, r7, #22
 800a08a:	05b6      	lsls	r6, r6, #22
 800a08c:	ea46 36c5 	orr.w	r6, r6, r5, lsl #15
 800a090:	6396      	str	r6, [r2, #56]	; 0x38
 800a092:	e745      	b.n	8009f20 <HAL_ADCEx_InjectedConfigChannel+0x58>
  __HAL_LOCK(hadc);
 800a094:	2002      	movs	r0, #2
}
 800a096:	b003      	add	sp, #12
 800a098:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800a09a:	6891      	ldr	r1, [r2, #8]
 800a09c:	0209      	lsls	r1, r1, #8
 800a09e:	f53f af7b 	bmi.w	8009f98 <HAL_ADCEx_InjectedConfigChannel+0xd0>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800a0a2:	6891      	ldr	r1, [r2, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 800a0a4:	2d10      	cmp	r5, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800a0a6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800a0aa:	6091      	str	r1, [r2, #8]
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR))
 800a0ac:	f47f af74 	bne.w	8009f98 <HAL_ADCEx_InjectedConfigChannel+0xd0>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a0b0:	4a0b      	ldr	r2, [pc, #44]	; (800a0e0 <HAL_ADCEx_InjectedConfigChannel+0x218>)
 800a0b2:	490c      	ldr	r1, [pc, #48]	; (800a0e4 <HAL_ADCEx_InjectedConfigChannel+0x21c>)
 800a0b4:	6812      	ldr	r2, [r2, #0]
 800a0b6:	fba1 1202 	umull	r1, r2, r1, r2
 800a0ba:	0c92      	lsrs	r2, r2, #18
 800a0bc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a0c0:	0052      	lsls	r2, r2, #1
 800a0c2:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800a0c4:	9a01      	ldr	r2, [sp, #4]
 800a0c6:	2a00      	cmp	r2, #0
 800a0c8:	f43f af66 	beq.w	8009f98 <HAL_ADCEx_InjectedConfigChannel+0xd0>
            wait_loop_index--;
 800a0cc:	9a01      	ldr	r2, [sp, #4]
 800a0ce:	3a01      	subs	r2, #1
 800a0d0:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 800a0d2:	9a01      	ldr	r2, [sp, #4]
 800a0d4:	2a00      	cmp	r2, #0
 800a0d6:	d1f9      	bne.n	800a0cc <HAL_ADCEx_InjectedConfigChannel+0x204>
 800a0d8:	e75e      	b.n	8009f98 <HAL_ADCEx_InjectedConfigChannel+0xd0>
 800a0da:	bf00      	nop
 800a0dc:	40012400 	.word	0x40012400
 800a0e0:	2000048c 	.word	0x2000048c
 800a0e4:	431bde83 	.word	0x431bde83

0800a0e8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a0e8:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a0ec:	4a06      	ldr	r2, [pc, #24]	; (800a108 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800a0ee:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a0f0:	68d0      	ldr	r0, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800a0f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a0f6:	4008      	ands	r0, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a0f8:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 800a0fa:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a0fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800a102:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800a104:	4770      	bx	lr
 800a106:	bf00      	nop
 800a108:	e000ed00 	.word	0xe000ed00

0800a10c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a10c:	4b19      	ldr	r3, [pc, #100]	; (800a174 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a10e:	b430      	push	{r4, r5}
 800a110:	68db      	ldr	r3, [r3, #12]
 800a112:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a116:	f1c3 0507 	rsb	r5, r3, #7
 800a11a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a11c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a120:	bf28      	it	cs
 800a122:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a124:	2c06      	cmp	r4, #6
 800a126:	d919      	bls.n	800a15c <HAL_NVIC_SetPriority+0x50>
 800a128:	f04f 34ff 	mov.w	r4, #4294967295
 800a12c:	3b03      	subs	r3, #3
 800a12e:	409c      	lsls	r4, r3
 800a130:	ea22 0204 	bic.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a134:	f04f 34ff 	mov.w	r4, #4294967295
 800a138:	40ac      	lsls	r4, r5
 800a13a:	ea21 0104 	bic.w	r1, r1, r4
 800a13e:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 800a140:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a142:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800a146:	db0c      	blt.n	800a162 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a148:	0109      	lsls	r1, r1, #4
 800a14a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800a14e:	b2c9      	uxtb	r1, r1
 800a150:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 800a154:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800a158:	bc30      	pop	{r4, r5}
 800a15a:	4770      	bx	lr
 800a15c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a15e:	4613      	mov	r3, r2
 800a160:	e7e8      	b.n	800a134 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a162:	4b05      	ldr	r3, [pc, #20]	; (800a178 <HAL_NVIC_SetPriority+0x6c>)
 800a164:	f000 000f 	and.w	r0, r0, #15
 800a168:	0109      	lsls	r1, r1, #4
 800a16a:	b2c9      	uxtb	r1, r1
 800a16c:	4403      	add	r3, r0
 800a16e:	7619      	strb	r1, [r3, #24]
 800a170:	bc30      	pop	{r4, r5}
 800a172:	4770      	bx	lr
 800a174:	e000ed00 	.word	0xe000ed00
 800a178:	e000ecfc 	.word	0xe000ecfc

0800a17c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800a17c:	2800      	cmp	r0, #0
 800a17e:	db07      	blt.n	800a190 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a180:	2301      	movs	r3, #1
 800a182:	f000 011f 	and.w	r1, r0, #31
 800a186:	4a03      	ldr	r2, [pc, #12]	; (800a194 <HAL_NVIC_EnableIRQ+0x18>)
 800a188:	408b      	lsls	r3, r1
 800a18a:	0940      	lsrs	r0, r0, #5
 800a18c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800a190:	4770      	bx	lr
 800a192:	bf00      	nop
 800a194:	e000e100 	.word	0xe000e100

0800a198 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a198:	3801      	subs	r0, #1
 800a19a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800a19e:	d20d      	bcs.n	800a1bc <HAL_SYSTICK_Config+0x24>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a1a0:	b430      	push	{r4, r5}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1a2:	25f0      	movs	r5, #240	; 0xf0
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a1a4:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a1a6:	2107      	movs	r1, #7
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a1a8:	4b05      	ldr	r3, [pc, #20]	; (800a1c0 <HAL_SYSTICK_Config+0x28>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1aa:	4c06      	ldr	r4, [pc, #24]	; (800a1c4 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a1ac:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1ae:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a1b2:	4610      	mov	r0, r2
   return SysTick_Config(TicksNumb);
}
 800a1b4:	bc30      	pop	{r4, r5}
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a1b6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a1b8:	6019      	str	r1, [r3, #0]
 800a1ba:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800a1bc:	2001      	movs	r0, #1
 800a1be:	4770      	bx	lr
 800a1c0:	e000e010 	.word	0xe000e010
 800a1c4:	e000ed00 	.word	0xe000ed00

0800a1c8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800a1c8:	b340      	cbz	r0, 800a21c <HAL_DMA_Init+0x54>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a1ca:	4603      	mov	r3, r0
{
 800a1cc:	b4f0      	push	{r4, r5, r6, r7}
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a1ce:	e9d0 2601 	ldrd	r2, r6, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a1d2:	f44f 7580 	mov.w	r5, #256	; 0x100
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a1d6:	2400      	movs	r4, #0
  tmp |=  hdma->Init.Direction        |
 800a1d8:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1da:	68de      	ldr	r6, [r3, #12]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a1dc:	6800      	ldr	r0, [r0, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1de:	4332      	orrs	r2, r6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a1e0:	490f      	ldr	r1, [pc, #60]	; (800a220 <HAL_DMA_Init+0x58>)
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1e2:	691e      	ldr	r6, [r3, #16]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a1e4:	4f0f      	ldr	r7, [pc, #60]	; (800a224 <HAL_DMA_Init+0x5c>)
 800a1e6:	4401      	add	r1, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a1e8:	4332      	orrs	r2, r6
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1ea:	695e      	ldr	r6, [r3, #20]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a1ec:	fba7 7101 	umull	r7, r1, r7, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1f0:	4332      	orrs	r2, r6
 800a1f2:	699e      	ldr	r6, [r3, #24]
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1f4:	69df      	ldr	r7, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1f6:	4332      	orrs	r2, r6
  tmp = hdma->Instance->CCR;
 800a1f8:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a1fa:	0909      	lsrs	r1, r1, #4
 800a1fc:	0089      	lsls	r1, r1, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800a1fe:	f426 567f 	bic.w	r6, r6, #16320	; 0x3fc0
          hdma->Init.Mode                | hdma->Init.Priority;
 800a202:	433a      	orrs	r2, r7
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800a204:	f026 0630 	bic.w	r6, r6, #48	; 0x30
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a208:	6419      	str	r1, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800a20a:	4907      	ldr	r1, [pc, #28]	; (800a228 <HAL_DMA_Init+0x60>)
  tmp |=  hdma->Init.Direction        |
 800a20c:	4332      	orrs	r2, r6
  hdma->DmaBaseAddress = DMA1;
 800a20e:	63d9      	str	r1, [r3, #60]	; 0x3c
  hdma->Instance->CCR = tmp;
 800a210:	6002      	str	r2, [r0, #0]
  hdma->Lock = HAL_UNLOCKED;
 800a212:	841d      	strh	r5, [r3, #32]

  return HAL_OK;
 800a214:	4620      	mov	r0, r4
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a216:	639c      	str	r4, [r3, #56]	; 0x38
}
 800a218:	bcf0      	pop	{r4, r5, r6, r7}
 800a21a:	4770      	bx	lr
    return HAL_ERROR;
 800a21c:	2001      	movs	r0, #1
}
 800a21e:	4770      	bx	lr
 800a220:	bffdfff8 	.word	0xbffdfff8
 800a224:	cccccccd 	.word	0xcccccccd
 800a228:	40020000 	.word	0x40020000

0800a22c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a22c:	b4f0      	push	{r4, r5, r6, r7}
 800a22e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a230:	f890 0020 	ldrb.w	r0, [r0, #32]
 800a234:	2801      	cmp	r0, #1
 800a236:	d038      	beq.n	800a2aa <HAL_DMA_Start_IT+0x7e>
 800a238:	2501      	movs	r5, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a23a:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
  __HAL_LOCK(hdma);
 800a23e:	f884 5020 	strb.w	r5, [r4, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 800a242:	42a8      	cmp	r0, r5
 800a244:	d005      	beq.n	800a252 <HAL_DMA_Start_IT+0x26>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800a246:	2300      	movs	r3, #0
 800a248:	f884 3020 	strb.w	r3, [r4, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800a24c:	2002      	movs	r0, #2
  }    
  return status;
}
 800a24e:	bcf0      	pop	{r4, r5, r6, r7}
 800a250:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 800a252:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a254:	2600      	movs	r6, #0
    __HAL_DMA_DISABLE(hdma);
 800a256:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800a258:	f884 7021 	strb.w	r7, [r4, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a25c:	63a6      	str	r6, [r4, #56]	; 0x38
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a25e:	6c27      	ldr	r7, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 800a260:	682e      	ldr	r6, [r5, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a262:	40b8      	lsls	r0, r7
    __HAL_DMA_DISABLE(hdma);
 800a264:	f026 0601 	bic.w	r6, r6, #1
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a268:	6be7      	ldr	r7, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800a26a:	602e      	str	r6, [r5, #0]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a26c:	6866      	ldr	r6, [r4, #4]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a26e:	6078      	str	r0, [r7, #4]
  hdma->Instance->CNDTR = DataLength;
 800a270:	606b      	str	r3, [r5, #4]
    if(NULL != hdma->XferHalfCpltCallback)
 800a272:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a274:	2e10      	cmp	r6, #16
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800a276:	bf0b      	itete	eq
 800a278:	60aa      	streq	r2, [r5, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800a27a:	60a9      	strne	r1, [r5, #8]
    hdma->Instance->CMAR = SrcAddress;
 800a27c:	60e9      	streq	r1, [r5, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800a27e:	60ea      	strne	r2, [r5, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 800a280:	b153      	cbz	r3, 800a298 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a282:	682b      	ldr	r3, [r5, #0]
 800a284:	f043 030e 	orr.w	r3, r3, #14
 800a288:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800a28a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a28c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800a28e:	f043 0301 	orr.w	r3, r3, #1
 800a292:	602b      	str	r3, [r5, #0]
}
 800a294:	bcf0      	pop	{r4, r5, r6, r7}
 800a296:	4770      	bx	lr
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a298:	682b      	ldr	r3, [r5, #0]
 800a29a:	f023 0304 	bic.w	r3, r3, #4
 800a29e:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a2a0:	682b      	ldr	r3, [r5, #0]
 800a2a2:	f043 030a 	orr.w	r3, r3, #10
 800a2a6:	602b      	str	r3, [r5, #0]
 800a2a8:	e7ef      	b.n	800a28a <HAL_DMA_Start_IT+0x5e>
  __HAL_LOCK(hdma);
 800a2aa:	2002      	movs	r0, #2
}
 800a2ac:	bcf0      	pop	{r4, r5, r6, r7}
 800a2ae:	4770      	bx	lr

0800a2b0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a2b0:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
{
 800a2b4:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a2b6:	2a02      	cmp	r2, #2
 800a2b8:	d006      	beq.n	800a2c8 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a2ba:	2104      	movs	r1, #4
    __HAL_UNLOCK(hdma);
 800a2bc:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a2be:	6381      	str	r1, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800a2c0:	f880 2020 	strb.w	r2, [r0, #32]
    return HAL_ERROR;
 800a2c4:	2001      	movs	r0, #1
}
 800a2c6:	4770      	bx	lr
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a2c8:	2101      	movs	r1, #1
{
 800a2ca:	b470      	push	{r4, r5, r6}
  __HAL_UNLOCK(hdma);      
 800a2cc:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a2d0:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a2d2:	6c1e      	ldr	r6, [r3, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a2d4:	6814      	ldr	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a2d6:	40b1      	lsls	r1, r6
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a2d8:	f024 040e 	bic.w	r4, r4, #14
 800a2dc:	6014      	str	r4, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800a2de:	6814      	ldr	r4, [r2, #0]
  return status; 
 800a2e0:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800a2e2:	f024 0401 	bic.w	r4, r4, #1
 800a2e6:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a2e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2ea:	6051      	str	r1, [r2, #4]
  __HAL_UNLOCK(hdma);      
 800a2ec:	841d      	strh	r5, [r3, #32]
}
 800a2ee:	bc70      	pop	{r4, r5, r6}
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop

0800a2f4 <HAL_DMA_IRQHandler>:
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800a2f4:	2204      	movs	r2, #4
{
 800a2f6:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800a2f8:	e9d0 610f 	ldrd	r6, r1, [r0, #60]	; 0x3c
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a2fc:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800a2fe:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800a300:	408a      	lsls	r2, r1
 800a302:	4222      	tst	r2, r4
  uint32_t source_it = hdma->Instance->CCR;
 800a304:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800a306:	d01f      	beq.n	800a348 <HAL_DMA_IRQHandler+0x54>
 800a308:	076a      	lsls	r2, r5, #29
 800a30a:	d51d      	bpl.n	800a348 <HAL_DMA_IRQHandler+0x54>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a30c:	681a      	ldr	r2, [r3, #0]
 800a30e:	0691      	lsls	r1, r2, #26
 800a310:	d403      	bmi.n	800a31a <HAL_DMA_IRQHandler+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a312:	681a      	ldr	r2, [r3, #0]
 800a314:	f022 0204 	bic.w	r2, r2, #4
 800a318:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a31a:	4a3e      	ldr	r2, [pc, #248]	; (800a414 <HAL_DMA_IRQHandler+0x120>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d05a      	beq.n	800a3d6 <HAL_DMA_IRQHandler+0xe2>
 800a320:	3214      	adds	r2, #20
 800a322:	4293      	cmp	r3, r2
 800a324:	d05f      	beq.n	800a3e6 <HAL_DMA_IRQHandler+0xf2>
 800a326:	3214      	adds	r2, #20
 800a328:	4293      	cmp	r3, r2
 800a32a:	d066      	beq.n	800a3fa <HAL_DMA_IRQHandler+0x106>
 800a32c:	3214      	adds	r2, #20
 800a32e:	4293      	cmp	r3, r2
 800a330:	d069      	beq.n	800a406 <HAL_DMA_IRQHandler+0x112>
 800a332:	3214      	adds	r2, #20
 800a334:	4293      	cmp	r3, r2
 800a336:	d05b      	beq.n	800a3f0 <HAL_DMA_IRQHandler+0xfc>
 800a338:	3214      	adds	r2, #20
 800a33a:	4293      	cmp	r3, r2
 800a33c:	bf0c      	ite	eq
 800a33e:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800a342:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 800a346:	e047      	b.n	800a3d8 <HAL_DMA_IRQHandler+0xe4>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800a348:	2202      	movs	r2, #2
 800a34a:	408a      	lsls	r2, r1
 800a34c:	4222      	tst	r2, r4
 800a34e:	d022      	beq.n	800a396 <HAL_DMA_IRQHandler+0xa2>
 800a350:	07aa      	lsls	r2, r5, #30
 800a352:	d520      	bpl.n	800a396 <HAL_DMA_IRQHandler+0xa2>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a354:	681a      	ldr	r2, [r3, #0]
 800a356:	0691      	lsls	r1, r2, #26
 800a358:	d406      	bmi.n	800a368 <HAL_DMA_IRQHandler+0x74>
      hdma->State = HAL_DMA_STATE_READY;
 800a35a:	2101      	movs	r1, #1
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	f022 020a 	bic.w	r2, r2, #10
 800a362:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800a364:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a368:	4a2a      	ldr	r2, [pc, #168]	; (800a414 <HAL_DMA_IRQHandler+0x120>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d029      	beq.n	800a3c2 <HAL_DMA_IRQHandler+0xce>
 800a36e:	3214      	adds	r2, #20
 800a370:	4293      	cmp	r3, r2
 800a372:	d040      	beq.n	800a3f6 <HAL_DMA_IRQHandler+0x102>
 800a374:	3214      	adds	r2, #20
 800a376:	4293      	cmp	r3, r2
 800a378:	d042      	beq.n	800a400 <HAL_DMA_IRQHandler+0x10c>
 800a37a:	3214      	adds	r2, #20
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d034      	beq.n	800a3ea <HAL_DMA_IRQHandler+0xf6>
 800a380:	3214      	adds	r2, #20
 800a382:	4293      	cmp	r3, r2
 800a384:	d042      	beq.n	800a40c <HAL_DMA_IRQHandler+0x118>
 800a386:	3214      	adds	r2, #20
 800a388:	4293      	cmp	r3, r2
 800a38a:	bf0c      	ite	eq
 800a38c:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800a390:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800a394:	e016      	b.n	800a3c4 <HAL_DMA_IRQHandler+0xd0>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800a396:	2208      	movs	r2, #8
 800a398:	408a      	lsls	r2, r1
 800a39a:	4222      	tst	r2, r4
 800a39c:	d019      	beq.n	800a3d2 <HAL_DMA_IRQHandler+0xde>
 800a39e:	072a      	lsls	r2, r5, #28
 800a3a0:	d517      	bpl.n	800a3d2 <HAL_DMA_IRQHandler+0xde>
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a3a2:	2401      	movs	r4, #1
    __HAL_UNLOCK(hdma);
 800a3a4:	f44f 7580 	mov.w	r5, #256	; 0x100
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a3a8:	681a      	ldr	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a3aa:	fa04 f101 	lsl.w	r1, r4, r1
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a3ae:	f022 020e 	bic.w	r2, r2, #14
 800a3b2:	601a      	str	r2, [r3, #0]
    if (hdma->XferErrorCallback != NULL)
 800a3b4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800a3b6:	6071      	str	r1, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a3b8:	6384      	str	r4, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 800a3ba:	8405      	strh	r5, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800a3bc:	b14b      	cbz	r3, 800a3d2 <HAL_DMA_IRQHandler+0xde>
}
 800a3be:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 800a3c0:	4718      	bx	r3
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a3c2:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 800a3c4:	2100      	movs	r1, #0
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a3c6:	4c14      	ldr	r4, [pc, #80]	; (800a418 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferCpltCallback != NULL)
 800a3c8:	6a82      	ldr	r2, [r0, #40]	; 0x28
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a3ca:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hdma);
 800a3cc:	f880 1020 	strb.w	r1, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 800a3d0:	b93a      	cbnz	r2, 800a3e2 <HAL_DMA_IRQHandler+0xee>
}
 800a3d2:	bc70      	pop	{r4, r5, r6}
 800a3d4:	4770      	bx	lr
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a3d6:	2304      	movs	r3, #4
 800a3d8:	490f      	ldr	r1, [pc, #60]	; (800a418 <HAL_DMA_IRQHandler+0x124>)
    if(hdma->XferHalfCpltCallback != NULL)
 800a3da:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a3dc:	604b      	str	r3, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 800a3de:	2a00      	cmp	r2, #0
 800a3e0:	d0f7      	beq.n	800a3d2 <HAL_DMA_IRQHandler+0xde>
}
 800a3e2:	bc70      	pop	{r4, r5, r6}
      hdma->XferCpltCallback(hdma);
 800a3e4:	4710      	bx	r2
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a3e6:	2340      	movs	r3, #64	; 0x40
 800a3e8:	e7f6      	b.n	800a3d8 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a3ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3ee:	e7e9      	b.n	800a3c4 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a3f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a3f4:	e7f0      	b.n	800a3d8 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a3f6:	2320      	movs	r3, #32
 800a3f8:	e7e4      	b.n	800a3c4 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a3fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3fe:	e7eb      	b.n	800a3d8 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a400:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a404:	e7de      	b.n	800a3c4 <HAL_DMA_IRQHandler+0xd0>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800a406:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a40a:	e7e5      	b.n	800a3d8 <HAL_DMA_IRQHandler+0xe4>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800a40c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a410:	e7d8      	b.n	800a3c4 <HAL_DMA_IRQHandler+0xd0>
 800a412:	bf00      	nop
 800a414:	40020008 	.word	0x40020008
 800a418:	40020000 	.word	0x40020000

0800a41c <HAL_DMA_GetState>:
}
 800a41c:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop

0800a424 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a424:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint8_t index = 0;
  uint8_t nbiterations = 0;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a428:	4e6b      	ldr	r6, [pc, #428]	; (800a5d8 <HAL_FLASH_Program+0x1b4>)
{
 800a42a:	4680      	mov	r8, r0
  __HAL_LOCK(&pFlash);
 800a42c:	7e30      	ldrb	r0, [r6, #24]
 800a42e:	2801      	cmp	r0, #1
 800a430:	f000 80c7 	beq.w	800a5c2 <HAL_FLASH_Program+0x19e>
 800a434:	461f      	mov	r7, r3
 800a436:	2301      	movs	r3, #1
 800a438:	460d      	mov	r5, r1
 800a43a:	4691      	mov	r9, r2
 800a43c:	7633      	strb	r3, [r6, #24]
{
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800a43e:	f7ff fbe9 	bl	8009c14 <HAL_GetTick>
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
  { 
    if (Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800a442:	f24c 3b50 	movw	fp, #50000	; 0xc350
  uint32_t tickstart = HAL_GetTick();
 800a446:	4604      	mov	r4, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a448:	f8df a190 	ldr.w	sl, [pc, #400]	; 800a5dc <HAL_FLASH_Program+0x1b8>
 800a44c:	e005      	b.n	800a45a <HAL_FLASH_Program+0x36>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800a44e:	f7ff fbe1 	bl	8009c14 <HAL_GetTick>
 800a452:	1b00      	subs	r0, r0, r4
 800a454:	4558      	cmp	r0, fp
 800a456:	f200 80b2 	bhi.w	800a5be <HAL_FLASH_Program+0x19a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a45a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a45e:	07db      	lsls	r3, r3, #31
 800a460:	d4f5      	bmi.n	800a44e <HAL_FLASH_Program+0x2a>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800a462:	f8da 300c 	ldr.w	r3, [sl, #12]
 800a466:	0698      	lsls	r0, r3, #26
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a468:	bf44      	itt	mi
 800a46a:	2320      	movmi	r3, #32
 800a46c:	f8ca 300c 	strmi.w	r3, [sl, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a470:	4b5a      	ldr	r3, [pc, #360]	; (800a5dc <HAL_FLASH_Program+0x1b8>)
 800a472:	68da      	ldr	r2, [r3, #12]
 800a474:	06d1      	lsls	r1, r2, #27
 800a476:	d453      	bmi.n	800a520 <HAL_FLASH_Program+0xfc>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a478:	69da      	ldr	r2, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a47a:	07d2      	lsls	r2, r2, #31
 800a47c:	d450      	bmi.n	800a520 <HAL_FLASH_Program+0xfc>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a47e:	68db      	ldr	r3, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a480:	f013 0a04 	ands.w	sl, r3, #4
 800a484:	d14c      	bne.n	800a520 <HAL_FLASH_Program+0xfc>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a486:	f1b8 0f01 	cmp.w	r8, #1
 800a48a:	d006      	beq.n	800a49a <HAL_FLASH_Program+0x76>
      nbiterations = 4U;
 800a48c:	f1b8 0f02 	cmp.w	r8, #2
 800a490:	bf0c      	ite	eq
 800a492:	f04f 0802 	moveq.w	r8, #2
 800a496:	f04f 0804 	movne.w	r8, #4
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800a49a:	4c50      	ldr	r4, [pc, #320]	; (800a5dc <HAL_FLASH_Program+0x1b8>)
 800a49c:	eb05 0848 	add.w	r8, r5, r8, lsl #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a4a0:	2200      	movs	r2, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800a4a2:	f1ca 0c20 	rsb	ip, sl, #32
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a4a6:	61f2      	str	r2, [r6, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800a4a8:	fa07 fc0c 	lsl.w	ip, r7, ip
 800a4ac:	fa29 f00a 	lsr.w	r0, r9, sl
 800a4b0:	f1aa 0120 	sub.w	r1, sl, #32
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800a4b4:	6922      	ldr	r2, [r4, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800a4b6:	ea40 000c 	orr.w	r0, r0, ip
 800a4ba:	fa27 f101 	lsr.w	r1, r7, r1
 800a4be:	4308      	orrs	r0, r1
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800a4c0:	f042 0201 	orr.w	r2, r2, #1
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800a4c4:	b280      	uxth	r0, r0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800a4c6:	6122      	str	r2, [r4, #16]
  *(__IO uint16_t*)Address = Data;
 800a4c8:	8028      	strh	r0, [r5, #0]
  uint32_t tickstart = HAL_GetTick();
 800a4ca:	f7ff fba3 	bl	8009c14 <HAL_GetTick>
 800a4ce:	4683      	mov	fp, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a4d0:	e007      	b.n	800a4e2 <HAL_FLASH_Program+0xbe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800a4d2:	f7ff fb9f 	bl	8009c14 <HAL_GetTick>
 800a4d6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a4da:	eba0 000b 	sub.w	r0, r0, fp
 800a4de:	4298      	cmp	r0, r3
 800a4e0:	d865      	bhi.n	800a5ae <HAL_FLASH_Program+0x18a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a4e2:	68e2      	ldr	r2, [r4, #12]
 800a4e4:	07d0      	lsls	r0, r2, #31
 800a4e6:	d4f4      	bmi.n	800a4d2 <HAL_FLASH_Program+0xae>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800a4e8:	68e2      	ldr	r2, [r4, #12]
 800a4ea:	0691      	lsls	r1, r2, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a4ec:	bf44      	itt	mi
 800a4ee:	2220      	movmi	r2, #32
 800a4f0:	60e2      	strmi	r2, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a4f2:	68e2      	ldr	r2, [r4, #12]
 800a4f4:	06d2      	lsls	r2, r2, #27
 800a4f6:	d432      	bmi.n	800a55e <HAL_FLASH_Program+0x13a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a4f8:	69e2      	ldr	r2, [r4, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a4fa:	07d3      	lsls	r3, r2, #31
 800a4fc:	d42f      	bmi.n	800a55e <HAL_FLASH_Program+0x13a>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a4fe:	68e0      	ldr	r0, [r4, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a500:	f010 0004 	ands.w	r0, r0, #4
 800a504:	d12b      	bne.n	800a55e <HAL_FLASH_Program+0x13a>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a506:	6922      	ldr	r2, [r4, #16]
 800a508:	3502      	adds	r5, #2
 800a50a:	f022 0201 	bic.w	r2, r2, #1
    for (index = 0U; index < nbiterations; index++)
 800a50e:	4545      	cmp	r5, r8
 800a510:	f10a 0a10 	add.w	sl, sl, #16
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a514:	6122      	str	r2, [r4, #16]
    for (index = 0U; index < nbiterations; index++)
 800a516:	d1c3      	bne.n	800a4a0 <HAL_FLASH_Program+0x7c>
  __HAL_UNLOCK(&pFlash);
 800a518:	2300      	movs	r3, #0
 800a51a:	7633      	strb	r3, [r6, #24]
}
 800a51c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800a520:	4b2e      	ldr	r3, [pc, #184]	; (800a5dc <HAL_FLASH_Program+0x1b8>)
 800a522:	68db      	ldr	r3, [r3, #12]
 800a524:	f013 0310 	ands.w	r3, r3, #16
 800a528:	d14e      	bne.n	800a5c8 <HAL_FLASH_Program+0x1a4>
 800a52a:	2104      	movs	r1, #4
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a52c:	4a2b      	ldr	r2, [pc, #172]	; (800a5dc <HAL_FLASH_Program+0x1b8>)
 800a52e:	68d2      	ldr	r2, [r2, #12]
 800a530:	0755      	lsls	r5, r2, #29
 800a532:	d504      	bpl.n	800a53e <HAL_FLASH_Program+0x11a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800a534:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800a536:	69f2      	ldr	r2, [r6, #28]
 800a538:	f042 0201 	orr.w	r2, r2, #1
 800a53c:	61f2      	str	r2, [r6, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800a53e:	4a27      	ldr	r2, [pc, #156]	; (800a5dc <HAL_FLASH_Program+0x1b8>)
 800a540:	69d1      	ldr	r1, [r2, #28]
 800a542:	07cc      	lsls	r4, r1, #31
 800a544:	d507      	bpl.n	800a556 <HAL_FLASH_Program+0x132>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800a546:	69f1      	ldr	r1, [r6, #28]
 800a548:	f041 0104 	orr.w	r1, r1, #4
 800a54c:	61f1      	str	r1, [r6, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800a54e:	69d1      	ldr	r1, [r2, #28]
 800a550:	f021 0101 	bic.w	r1, r1, #1
 800a554:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800a556:	4a21      	ldr	r2, [pc, #132]	; (800a5dc <HAL_FLASH_Program+0x1b8>)
    return HAL_ERROR;
 800a558:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 800a55a:	60d3      	str	r3, [r2, #12]
  if(status == HAL_OK)
 800a55c:	e7dc      	b.n	800a518 <HAL_FLASH_Program+0xf4>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800a55e:	4b1f      	ldr	r3, [pc, #124]	; (800a5dc <HAL_FLASH_Program+0x1b8>)
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	f013 0310 	ands.w	r3, r3, #16
 800a566:	d028      	beq.n	800a5ba <HAL_FLASH_Program+0x196>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a568:	69f3      	ldr	r3, [r6, #28]
 800a56a:	2114      	movs	r1, #20
 800a56c:	f043 0302 	orr.w	r3, r3, #2
 800a570:	61f3      	str	r3, [r6, #28]
    flags |= FLASH_FLAG_WRPERR;
 800a572:	2310      	movs	r3, #16
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a574:	4a19      	ldr	r2, [pc, #100]	; (800a5dc <HAL_FLASH_Program+0x1b8>)
 800a576:	68d2      	ldr	r2, [r2, #12]
 800a578:	0750      	lsls	r0, r2, #29
 800a57a:	d504      	bpl.n	800a586 <HAL_FLASH_Program+0x162>
    flags |= FLASH_FLAG_PGERR;
 800a57c:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800a57e:	69f2      	ldr	r2, [r6, #28]
 800a580:	f042 0201 	orr.w	r2, r2, #1
 800a584:	61f2      	str	r2, [r6, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800a586:	4a15      	ldr	r2, [pc, #84]	; (800a5dc <HAL_FLASH_Program+0x1b8>)
 800a588:	69d1      	ldr	r1, [r2, #28]
 800a58a:	07c9      	lsls	r1, r1, #31
 800a58c:	d507      	bpl.n	800a59e <HAL_FLASH_Program+0x17a>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800a58e:	69f1      	ldr	r1, [r6, #28]
 800a590:	f041 0104 	orr.w	r1, r1, #4
 800a594:	61f1      	str	r1, [r6, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800a596:	69d1      	ldr	r1, [r2, #28]
 800a598:	f021 0101 	bic.w	r1, r1, #1
 800a59c:	61d1      	str	r1, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 800a59e:	4a0f      	ldr	r2, [pc, #60]	; (800a5dc <HAL_FLASH_Program+0x1b8>)
    return HAL_ERROR;
 800a5a0:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 800a5a2:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a5a4:	6913      	ldr	r3, [r2, #16]
 800a5a6:	f023 0301 	bic.w	r3, r3, #1
 800a5aa:	6113      	str	r3, [r2, #16]
      if (status != HAL_OK)
 800a5ac:	e7b4      	b.n	800a518 <HAL_FLASH_Program+0xf4>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800a5ae:	6923      	ldr	r3, [r4, #16]
 800a5b0:	2003      	movs	r0, #3
 800a5b2:	f023 0301 	bic.w	r3, r3, #1
 800a5b6:	6123      	str	r3, [r4, #16]
      if (status != HAL_OK)
 800a5b8:	e7ae      	b.n	800a518 <HAL_FLASH_Program+0xf4>
 800a5ba:	2104      	movs	r1, #4
 800a5bc:	e7da      	b.n	800a574 <HAL_FLASH_Program+0x150>
 800a5be:	2003      	movs	r0, #3
 800a5c0:	e7aa      	b.n	800a518 <HAL_FLASH_Program+0xf4>
  __HAL_LOCK(&pFlash);
 800a5c2:	2002      	movs	r0, #2
}
 800a5c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a5c8:	69f3      	ldr	r3, [r6, #28]
 800a5ca:	2114      	movs	r1, #20
 800a5cc:	f043 0302 	orr.w	r3, r3, #2
 800a5d0:	61f3      	str	r3, [r6, #28]
    flags |= FLASH_FLAG_WRPERR;
 800a5d2:	2310      	movs	r3, #16
 800a5d4:	e7aa      	b.n	800a52c <HAL_FLASH_Program+0x108>
 800a5d6:	bf00      	nop
 800a5d8:	200044b0 	.word	0x200044b0
 800a5dc:	40022000 	.word	0x40022000

0800a5e0 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a5e0:	4b06      	ldr	r3, [pc, #24]	; (800a5fc <HAL_FLASH_Unlock+0x1c>)
 800a5e2:	6918      	ldr	r0, [r3, #16]
 800a5e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5e8:	d006      	beq.n	800a5f8 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a5ea:	4905      	ldr	r1, [pc, #20]	; (800a600 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a5ec:	4a05      	ldr	r2, [pc, #20]	; (800a604 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a5ee:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a5f0:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a5f2:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800a5f4:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	40022000 	.word	0x40022000
 800a600:	45670123 	.word	0x45670123
 800a604:	cdef89ab 	.word	0xcdef89ab

0800a608 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800a608:	4a03      	ldr	r2, [pc, #12]	; (800a618 <HAL_FLASH_Lock+0x10>)
}
 800a60a:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800a60c:	6913      	ldr	r3, [r2, #16]
 800a60e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a612:	6113      	str	r3, [r2, #16]
}
 800a614:	4770      	bx	lr
 800a616:	bf00      	nop
 800a618:	40022000 	.word	0x40022000

0800a61c <FLASH_WaitForLastOperation>:
{
 800a61c:	b570      	push	{r4, r5, r6, lr}
 800a61e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a620:	f7ff faf8 	bl	8009c14 <HAL_GetTick>
 800a624:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a626:	4e26      	ldr	r6, [pc, #152]	; (800a6c0 <FLASH_WaitForLastOperation+0xa4>)
 800a628:	1c60      	adds	r0, r4, #1
 800a62a:	d136      	bne.n	800a69a <FLASH_WaitForLastOperation+0x7e>
 800a62c:	4a24      	ldr	r2, [pc, #144]	; (800a6c0 <FLASH_WaitForLastOperation+0xa4>)
 800a62e:	68d3      	ldr	r3, [r2, #12]
 800a630:	07d9      	lsls	r1, r3, #31
 800a632:	d4fc      	bmi.n	800a62e <FLASH_WaitForLastOperation+0x12>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800a634:	4b22      	ldr	r3, [pc, #136]	; (800a6c0 <FLASH_WaitForLastOperation+0xa4>)
 800a636:	68da      	ldr	r2, [r3, #12]
 800a638:	0696      	lsls	r6, r2, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a63a:	bf44      	itt	mi
 800a63c:	2220      	movmi	r2, #32
 800a63e:	60da      	strmi	r2, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a640:	4b1f      	ldr	r3, [pc, #124]	; (800a6c0 <FLASH_WaitForLastOperation+0xa4>)
 800a642:	68da      	ldr	r2, [r3, #12]
 800a644:	06d5      	lsls	r5, r2, #27
 800a646:	d407      	bmi.n	800a658 <FLASH_WaitForLastOperation+0x3c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a648:	69da      	ldr	r2, [r3, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800a64a:	07d4      	lsls	r4, r2, #31
 800a64c:	d404      	bmi.n	800a658 <FLASH_WaitForLastOperation+0x3c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a64e:	68d8      	ldr	r0, [r3, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 800a650:	f010 0004 	ands.w	r0, r0, #4
 800a654:	d100      	bne.n	800a658 <FLASH_WaitForLastOperation+0x3c>
}
 800a656:	bd70      	pop	{r4, r5, r6, pc}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800a658:	4b19      	ldr	r3, [pc, #100]	; (800a6c0 <FLASH_WaitForLastOperation+0xa4>)
 800a65a:	68db      	ldr	r3, [r3, #12]
 800a65c:	f013 0310 	ands.w	r3, r3, #16
 800a660:	d126      	bne.n	800a6b0 <FLASH_WaitForLastOperation+0x94>
 800a662:	2104      	movs	r1, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800a664:	4a16      	ldr	r2, [pc, #88]	; (800a6c0 <FLASH_WaitForLastOperation+0xa4>)
 800a666:	68d2      	ldr	r2, [r2, #12]
 800a668:	0750      	lsls	r0, r2, #29
 800a66a:	d505      	bpl.n	800a678 <FLASH_WaitForLastOperation+0x5c>
    flags |= FLASH_FLAG_PGERR;
 800a66c:	460b      	mov	r3, r1
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800a66e:	4915      	ldr	r1, [pc, #84]	; (800a6c4 <FLASH_WaitForLastOperation+0xa8>)
 800a670:	69ca      	ldr	r2, [r1, #28]
 800a672:	f042 0201 	orr.w	r2, r2, #1
 800a676:	61ca      	str	r2, [r1, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800a678:	4a11      	ldr	r2, [pc, #68]	; (800a6c0 <FLASH_WaitForLastOperation+0xa4>)
 800a67a:	69d1      	ldr	r1, [r2, #28]
 800a67c:	07c9      	lsls	r1, r1, #31
 800a67e:	d508      	bpl.n	800a692 <FLASH_WaitForLastOperation+0x76>
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800a680:	4810      	ldr	r0, [pc, #64]	; (800a6c4 <FLASH_WaitForLastOperation+0xa8>)
 800a682:	69c1      	ldr	r1, [r0, #28]
 800a684:	f041 0104 	orr.w	r1, r1, #4
 800a688:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800a68a:	69d1      	ldr	r1, [r2, #28]
 800a68c:	f021 0101 	bic.w	r1, r1, #1
 800a690:	61d1      	str	r1, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(flags);
 800a692:	4a0b      	ldr	r2, [pc, #44]	; (800a6c0 <FLASH_WaitForLastOperation+0xa4>)
    return HAL_ERROR;
 800a694:	2001      	movs	r0, #1
  __HAL_FLASH_CLEAR_FLAG(flags);
 800a696:	60d3      	str	r3, [r2, #12]
}
 800a698:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800a69a:	68f3      	ldr	r3, [r6, #12]
 800a69c:	07db      	lsls	r3, r3, #31
 800a69e:	d5c9      	bpl.n	800a634 <FLASH_WaitForLastOperation+0x18>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800a6a0:	b124      	cbz	r4, 800a6ac <FLASH_WaitForLastOperation+0x90>
 800a6a2:	f7ff fab7 	bl	8009c14 <HAL_GetTick>
 800a6a6:	1b40      	subs	r0, r0, r5
 800a6a8:	42a0      	cmp	r0, r4
 800a6aa:	d9bd      	bls.n	800a628 <FLASH_WaitForLastOperation+0xc>
        return HAL_TIMEOUT;
 800a6ac:	2003      	movs	r0, #3
}
 800a6ae:	bd70      	pop	{r4, r5, r6, pc}
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a6b0:	4804      	ldr	r0, [pc, #16]	; (800a6c4 <FLASH_WaitForLastOperation+0xa8>)
 800a6b2:	2114      	movs	r1, #20
 800a6b4:	69c2      	ldr	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 800a6b6:	2310      	movs	r3, #16
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800a6b8:	f042 0202 	orr.w	r2, r2, #2
 800a6bc:	61c2      	str	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 800a6be:	e7d1      	b.n	800a664 <FLASH_WaitForLastOperation+0x48>
 800a6c0:	40022000 	.word	0x40022000
 800a6c4:	200044b0 	.word	0x200044b0

0800a6c8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800a6c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  uint32_t address = 0U;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a6cc:	4e2d      	ldr	r6, [pc, #180]	; (800a784 <HAL_FLASHEx_Erase+0xbc>)
 800a6ce:	7e33      	ldrb	r3, [r6, #24]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d054      	beq.n	800a77e <HAL_FLASHEx_Erase+0xb6>
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	7633      	strb	r3, [r6, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a6d8:	6803      	ldr	r3, [r0, #0]
 800a6da:	4681      	mov	r9, r0
 800a6dc:	2b02      	cmp	r3, #2
 800a6de:	d031      	beq.n	800a744 <HAL_FLASHEx_Erase+0x7c>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800a6e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a6e4:	4688      	mov	r8, r1
 800a6e6:	f7ff ff99 	bl	800a61c <FLASH_WaitForLastOperation>
 800a6ea:	bb80      	cbnz	r0, 800a74e <HAL_FLASHEx_Erase+0x86>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800a6ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a6f0:	f8c8 3000 	str.w	r3, [r8]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800a6f4:	e9d9 5302 	ldrd	r5, r3, [r9, #8]
 800a6f8:	eb05 2383 	add.w	r3, r5, r3, lsl #10
        for(address = pEraseInit->PageAddress;
 800a6fc:	429d      	cmp	r5, r3
 800a6fe:	d226      	bcs.n	800a74e <HAL_FLASHEx_Erase+0x86>
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a700:	4607      	mov	r7, r0
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800a702:	4c21      	ldr	r4, [pc, #132]	; (800a788 <HAL_FLASHEx_Erase+0xc0>)
 800a704:	e007      	b.n	800a716 <HAL_FLASHEx_Erase+0x4e>
            address += FLASH_PAGE_SIZE)
 800a706:	f505 6580 	add.w	r5, r5, #1024	; 0x400
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800a70a:	e9d9 3202 	ldrd	r3, r2, [r9, #8]
 800a70e:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 800a712:	42ab      	cmp	r3, r5
 800a714:	d91c      	bls.n	800a750 <HAL_FLASHEx_Erase+0x88>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a716:	61f7      	str	r7, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800a718:	6923      	ldr	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a71a:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800a71e:	f043 0302 	orr.w	r3, r3, #2
 800a722:	6123      	str	r3, [r4, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800a724:	6165      	str	r5, [r4, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a726:	6923      	ldr	r3, [r4, #16]
 800a728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a72c:	6123      	str	r3, [r4, #16]
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a72e:	f7ff ff75 	bl	800a61c <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800a732:	6923      	ldr	r3, [r4, #16]
 800a734:	f023 0302 	bic.w	r3, r3, #2
 800a738:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 800a73a:	2800      	cmp	r0, #0
 800a73c:	d0e3      	beq.n	800a706 <HAL_FLASHEx_Erase+0x3e>
            *PageError = address;
 800a73e:	f8c8 5000 	str.w	r5, [r8]
            break;
 800a742:	e005      	b.n	800a750 <HAL_FLASHEx_Erase+0x88>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800a744:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a748:	f7ff ff68 	bl	800a61c <FLASH_WaitForLastOperation>
 800a74c:	b120      	cbz	r0, 800a758 <HAL_FLASHEx_Erase+0x90>
  HAL_StatusTypeDef status = HAL_ERROR;
 800a74e:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800a750:	2300      	movs	r3, #0
 800a752:	7633      	strb	r3, [r6, #24]
}
 800a754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800a758:	4c0b      	ldr	r4, [pc, #44]	; (800a788 <HAL_FLASHEx_Erase+0xc0>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a75a:	61f0      	str	r0, [r6, #28]
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800a75c:	6923      	ldr	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a75e:	f24c 3050 	movw	r0, #50000	; 0xc350
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800a762:	f043 0304 	orr.w	r3, r3, #4
 800a766:	6123      	str	r3, [r4, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a768:	6923      	ldr	r3, [r4, #16]
 800a76a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a76e:	6123      	str	r3, [r4, #16]
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a770:	f7ff ff54 	bl	800a61c <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800a774:	6923      	ldr	r3, [r4, #16]
 800a776:	f023 0304 	bic.w	r3, r3, #4
 800a77a:	6123      	str	r3, [r4, #16]
 800a77c:	e7e8      	b.n	800a750 <HAL_FLASHEx_Erase+0x88>
  __HAL_LOCK(&pFlash);
 800a77e:	2002      	movs	r0, #2
}
 800a780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a784:	200044b0 	.word	0x200044b0
 800a788:	40022000 	.word	0x40022000

0800a78c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a790:	680c      	ldr	r4, [r1, #0]
{
 800a792:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a794:	2c00      	cmp	r4, #0
 800a796:	f000 809e 	beq.w	800a8d6 <HAL_GPIO_Init+0x14a>
  uint32_t config = 0x00u;
 800a79a:	2600      	movs	r6, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a79c:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 800a994 <HAL_GPIO_Init+0x208>
  uint32_t position = 0x00u;
 800a7a0:	4633      	mov	r3, r6
        {
          SET_BIT(EXTI->FTSR, iocurrent);
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a7a2:	4f77      	ldr	r7, [pc, #476]	; (800a980 <HAL_GPIO_Init+0x1f4>)
      switch (GPIO_Init->Mode)
 800a7a4:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 800a998 <HAL_GPIO_Init+0x20c>
 800a7a8:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 800a99c <HAL_GPIO_Init+0x210>
 800a7ac:	9000      	str	r0, [sp, #0]
 800a7ae:	e004      	b.n	800a7ba <HAL_GPIO_Init+0x2e>
        }
      }
    }

	position++;
 800a7b0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a7b2:	fa34 f203 	lsrs.w	r2, r4, r3
 800a7b6:	f000 808e 	beq.w	800a8d6 <HAL_GPIO_Init+0x14a>
    ioposition = (0x01uL << position);
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	409a      	lsls	r2, r3
    if (iocurrent == ioposition)
 800a7be:	ea32 0004 	bics.w	r0, r2, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a7c2:	ea02 0504 	and.w	r5, r2, r4
    if (iocurrent == ioposition)
 800a7c6:	d1f3      	bne.n	800a7b0 <HAL_GPIO_Init+0x24>
      switch (GPIO_Init->Mode)
 800a7c8:	684c      	ldr	r4, [r1, #4]
 800a7ca:	2c12      	cmp	r4, #18
 800a7cc:	f200 8086 	bhi.w	800a8dc <HAL_GPIO_Init+0x150>
 800a7d0:	2c12      	cmp	r4, #18
 800a7d2:	d80c      	bhi.n	800a7ee <HAL_GPIO_Init+0x62>
 800a7d4:	e8df f004 	tbb	[pc, r4]
 800a7d8:	0abcbf8a 	.word	0x0abcbf8a
 800a7dc:	0b0b0b0b 	.word	0x0b0b0b0b
 800a7e0:	0b0b0b0b 	.word	0x0b0b0b0b
 800a7e4:	0b0b0b0b 	.word	0x0b0b0b0b
 800a7e8:	b90b      	.short	0xb90b
 800a7ea:	b6          	.byte	0xb6
 800a7eb:	00          	.byte	0x00
 800a7ec:	2600      	movs	r6, #0
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a7ee:	2dff      	cmp	r5, #255	; 0xff
 800a7f0:	f200 8083 	bhi.w	800a8fa <HAL_GPIO_Init+0x16e>
 800a7f4:	f8dd 9000 	ldr.w	r9, [sp]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a7f8:	ea4f 0a83 	mov.w	sl, r3, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800a7fc:	240f      	movs	r4, #15
 800a7fe:	f8d9 2000 	ldr.w	r2, [r9]
 800a802:	fa04 fb0a 	lsl.w	fp, r4, sl
 800a806:	ea22 020b 	bic.w	r2, r2, fp
 800a80a:	fa06 fa0a 	lsl.w	sl, r6, sl
 800a80e:	ea42 020a 	orr.w	r2, r2, sl
 800a812:	f8c9 2000 	str.w	r2, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a816:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800a81a:	f019 5f80 	tst.w	r9, #268435456	; 0x10000000
 800a81e:	f000 808f 	beq.w	800a940 <HAL_GPIO_Init+0x1b4>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a822:	f8dc a018 	ldr.w	sl, [ip, #24]
 800a826:	f023 0203 	bic.w	r2, r3, #3
 800a82a:	f04a 0a01 	orr.w	sl, sl, #1
 800a82e:	f8cc a018 	str.w	sl, [ip, #24]
 800a832:	f8dc a018 	ldr.w	sl, [ip, #24]
 800a836:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800a83a:	f00a 0a01 	and.w	sl, sl, #1
 800a83e:	f8cd a00c 	str.w	sl, [sp, #12]
 800a842:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a846:	f003 0a03 	and.w	sl, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800a84a:	f8dd b00c 	ldr.w	fp, [sp, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a84e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800a852:	f8d2 b008 	ldr.w	fp, [r2, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800a856:	fa04 f40a 	lsl.w	r4, r4, sl
 800a85a:	ea2b 0004 	bic.w	r0, fp, r4
 800a85e:	9001      	str	r0, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800a860:	9c00      	ldr	r4, [sp, #0]
 800a862:	4848      	ldr	r0, [pc, #288]	; (800a984 <HAL_GPIO_Init+0x1f8>)
 800a864:	4284      	cmp	r4, r0
 800a866:	d013      	beq.n	800a890 <HAL_GPIO_Init+0x104>
 800a868:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800a86c:	4284      	cmp	r4, r0
 800a86e:	d07d      	beq.n	800a96c <HAL_GPIO_Init+0x1e0>
 800a870:	4845      	ldr	r0, [pc, #276]	; (800a988 <HAL_GPIO_Init+0x1fc>)
 800a872:	4284      	cmp	r4, r0
 800a874:	d071      	beq.n	800a95a <HAL_GPIO_Init+0x1ce>
 800a876:	4845      	ldr	r0, [pc, #276]	; (800a98c <HAL_GPIO_Init+0x200>)
 800a878:	4284      	cmp	r4, r0
 800a87a:	bf0c      	ite	eq
 800a87c:	f04f 0b03 	moveq.w	fp, #3
 800a880:	f04f 0b04 	movne.w	fp, #4
 800a884:	9801      	ldr	r0, [sp, #4]
 800a886:	fa0b fa0a 	lsl.w	sl, fp, sl
 800a88a:	ea40 000a 	orr.w	r0, r0, sl
 800a88e:	9001      	str	r0, [sp, #4]
        AFIO->EXTICR[position >> 2u] = temp;
 800a890:	9801      	ldr	r0, [sp, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a892:	f419 3f80 	tst.w	r9, #65536	; 0x10000
        AFIO->EXTICR[position >> 2u] = temp;
 800a896:	6090      	str	r0, [r2, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 800a898:	683a      	ldr	r2, [r7, #0]
 800a89a:	bf14      	ite	ne
 800a89c:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800a89e:	43aa      	biceq	r2, r5
 800a8a0:	603a      	str	r2, [r7, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 800a8a2:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a8a4:	f419 3f00 	tst.w	r9, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800a8a8:	bf14      	ite	ne
 800a8aa:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800a8ac:	43aa      	biceq	r2, r5
 800a8ae:	607a      	str	r2, [r7, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 800a8b0:	68ba      	ldr	r2, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a8b2:	f419 1f80 	tst.w	r9, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800a8b6:	bf14      	ite	ne
 800a8b8:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800a8ba:	43aa      	biceq	r2, r5
 800a8bc:	60ba      	str	r2, [r7, #8]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a8be:	f419 1f00 	tst.w	r9, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800a8c2:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a8c4:	d039      	beq.n	800a93a <HAL_GPIO_Init+0x1ae>
          SET_BIT(EXTI->FTSR, iocurrent);
 800a8c6:	4315      	orrs	r5, r2
 800a8c8:	60fd      	str	r5, [r7, #12]
 800a8ca:	680c      	ldr	r4, [r1, #0]
	position++;
 800a8cc:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a8ce:	fa34 f203 	lsrs.w	r2, r4, r3
 800a8d2:	f47f af72 	bne.w	800a7ba <HAL_GPIO_Init+0x2e>
  }
}
 800a8d6:	b005      	add	sp, #20
 800a8d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800a8dc:	4544      	cmp	r4, r8
 800a8de:	d005      	beq.n	800a8ec <HAL_GPIO_Init+0x160>
 800a8e0:	d913      	bls.n	800a90a <HAL_GPIO_Init+0x17e>
 800a8e2:	4574      	cmp	r4, lr
 800a8e4:	d002      	beq.n	800a8ec <HAL_GPIO_Init+0x160>
 800a8e6:	482a      	ldr	r0, [pc, #168]	; (800a990 <HAL_GPIO_Init+0x204>)
 800a8e8:	4284      	cmp	r4, r0
 800a8ea:	d180      	bne.n	800a7ee <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a8ec:	688c      	ldr	r4, [r1, #8]
 800a8ee:	b9e4      	cbnz	r4, 800a92a <HAL_GPIO_Init+0x19e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a8f0:	2dff      	cmp	r5, #255	; 0xff
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800a8f2:	f04f 0604 	mov.w	r6, #4
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a8f6:	f67f af7d 	bls.w	800a7f4 <HAL_GPIO_Init+0x68>
 800a8fa:	9a00      	ldr	r2, [sp, #0]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a8fc:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 800a900:	f1aa 0a20 	sub.w	sl, sl, #32
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800a904:	f102 0904 	add.w	r9, r2, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800a908:	e778      	b.n	800a7fc <HAL_GPIO_Init+0x70>
      switch (GPIO_Init->Mode)
 800a90a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 800a9a0 <HAL_GPIO_Init+0x214>
 800a90e:	454c      	cmp	r4, r9
 800a910:	d0ec      	beq.n	800a8ec <HAL_GPIO_Init+0x160>
 800a912:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 800a916:	454c      	cmp	r4, r9
 800a918:	d0e8      	beq.n	800a8ec <HAL_GPIO_Init+0x160>
 800a91a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800a91e:	454c      	cmp	r4, r9
 800a920:	f47f af65 	bne.w	800a7ee <HAL_GPIO_Init+0x62>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800a924:	688c      	ldr	r4, [r1, #8]
 800a926:	2c00      	cmp	r4, #0
 800a928:	d0e2      	beq.n	800a8f0 <HAL_GPIO_Init+0x164>
            GPIOx->BSRR = ioposition;
 800a92a:	9800      	ldr	r0, [sp, #0]
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800a92c:	2c01      	cmp	r4, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800a92e:	f04f 0608 	mov.w	r6, #8
            GPIOx->BSRR = ioposition;
 800a932:	bf0c      	ite	eq
 800a934:	6102      	streq	r2, [r0, #16]
            GPIOx->BRR = ioposition;
 800a936:	6142      	strne	r2, [r0, #20]
 800a938:	e759      	b.n	800a7ee <HAL_GPIO_Init+0x62>
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800a93a:	ea22 0505 	bic.w	r5, r2, r5
 800a93e:	60fd      	str	r5, [r7, #12]
 800a940:	680c      	ldr	r4, [r1, #0]
 800a942:	e735      	b.n	800a7b0 <HAL_GPIO_Init+0x24>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800a944:	68ce      	ldr	r6, [r1, #12]
 800a946:	360c      	adds	r6, #12
          break;
 800a948:	e751      	b.n	800a7ee <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800a94a:	68ce      	ldr	r6, [r1, #12]
 800a94c:	3604      	adds	r6, #4
          break;
 800a94e:	e74e      	b.n	800a7ee <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800a950:	68ce      	ldr	r6, [r1, #12]
 800a952:	3608      	adds	r6, #8
          break;
 800a954:	e74b      	b.n	800a7ee <HAL_GPIO_Init+0x62>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800a956:	68ce      	ldr	r6, [r1, #12]
          break;
 800a958:	e749      	b.n	800a7ee <HAL_GPIO_Init+0x62>
 800a95a:	f04f 0b02 	mov.w	fp, #2
 800a95e:	9801      	ldr	r0, [sp, #4]
 800a960:	fa0b fa0a 	lsl.w	sl, fp, sl
 800a964:	ea40 000a 	orr.w	r0, r0, sl
 800a968:	9001      	str	r0, [sp, #4]
 800a96a:	e791      	b.n	800a890 <HAL_GPIO_Init+0x104>
 800a96c:	f04f 0b01 	mov.w	fp, #1
 800a970:	9801      	ldr	r0, [sp, #4]
 800a972:	fa0b fa0a 	lsl.w	sl, fp, sl
 800a976:	ea40 000a 	orr.w	r0, r0, sl
 800a97a:	9001      	str	r0, [sp, #4]
 800a97c:	e788      	b.n	800a890 <HAL_GPIO_Init+0x104>
 800a97e:	bf00      	nop
 800a980:	40010400 	.word	0x40010400
 800a984:	40010800 	.word	0x40010800
 800a988:	40011000 	.word	0x40011000
 800a98c:	40011400 	.word	0x40011400
 800a990:	10320000 	.word	0x10320000
 800a994:	40021000 	.word	0x40021000
 800a998:	10220000 	.word	0x10220000
 800a99c:	10310000 	.word	0x10310000
 800a9a0:	10120000 	.word	0x10120000

0800a9a4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a9a4:	6883      	ldr	r3, [r0, #8]
 800a9a6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800a9a8:	bf14      	ite	ne
 800a9aa:	2001      	movne	r0, #1
 800a9ac:	2000      	moveq	r0, #0
 800a9ae:	4770      	bx	lr

0800a9b0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a9b0:	b902      	cbnz	r2, 800a9b4 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a9b2:	0409      	lsls	r1, r1, #16
 800a9b4:	6101      	str	r1, [r0, #16]
  }
}
 800a9b6:	4770      	bx	lr

0800a9b8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a9b8:	2800      	cmp	r0, #0
 800a9ba:	f000 81c3 	beq.w	800ad44 <HAL_RCC_OscConfig+0x38c>
{
 800a9be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a9c2:	6803      	ldr	r3, [r0, #0]
 800a9c4:	4604      	mov	r4, r0
 800a9c6:	07dd      	lsls	r5, r3, #31
{
 800a9c8:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a9ca:	d535      	bpl.n	800aa38 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a9cc:	49a6      	ldr	r1, [pc, #664]	; (800ac68 <HAL_RCC_OscConfig+0x2b0>)
 800a9ce:	684a      	ldr	r2, [r1, #4]
 800a9d0:	f002 020c 	and.w	r2, r2, #12
 800a9d4:	2a04      	cmp	r2, #4
 800a9d6:	f000 80ef 	beq.w	800abb8 <HAL_RCC_OscConfig+0x200>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800a9da:	684a      	ldr	r2, [r1, #4]
 800a9dc:	f002 020c 	and.w	r2, r2, #12
 800a9e0:	2a08      	cmp	r2, #8
 800a9e2:	f000 80e5 	beq.w	800abb0 <HAL_RCC_OscConfig+0x1f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a9e6:	6863      	ldr	r3, [r4, #4]
 800a9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9ec:	d010      	beq.n	800aa10 <HAL_RCC_OscConfig+0x58>
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	f000 810d 	beq.w	800ac0e <HAL_RCC_OscConfig+0x256>
 800a9f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a9f8:	f000 818f 	beq.w	800ad1a <HAL_RCC_OscConfig+0x362>
 800a9fc:	4b9a      	ldr	r3, [pc, #616]	; (800ac68 <HAL_RCC_OscConfig+0x2b0>)
 800a9fe:	681a      	ldr	r2, [r3, #0]
 800aa00:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800aa04:	601a      	str	r2, [r3, #0]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800aa0c:	601a      	str	r2, [r3, #0]
 800aa0e:	e004      	b.n	800aa1a <HAL_RCC_OscConfig+0x62>
 800aa10:	4a95      	ldr	r2, [pc, #596]	; (800ac68 <HAL_RCC_OscConfig+0x2b0>)
 800aa12:	6813      	ldr	r3, [r2, #0]
 800aa14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa18:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800aa1a:	f7ff f8fb 	bl	8009c14 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa1e:	4e92      	ldr	r6, [pc, #584]	; (800ac68 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800aa20:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa22:	e005      	b.n	800aa30 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa24:	f7ff f8f6 	bl	8009c14 <HAL_GetTick>
 800aa28:	1b40      	subs	r0, r0, r5
 800aa2a:	2864      	cmp	r0, #100	; 0x64
 800aa2c:	f200 80eb 	bhi.w	800ac06 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800aa30:	6833      	ldr	r3, [r6, #0]
 800aa32:	039a      	lsls	r2, r3, #14
 800aa34:	d5f6      	bpl.n	800aa24 <HAL_RCC_OscConfig+0x6c>
 800aa36:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa38:	079f      	lsls	r7, r3, #30
 800aa3a:	d528      	bpl.n	800aa8e <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800aa3c:	4a8a      	ldr	r2, [pc, #552]	; (800ac68 <HAL_RCC_OscConfig+0x2b0>)
 800aa3e:	6851      	ldr	r1, [r2, #4]
 800aa40:	f011 0f0c 	tst.w	r1, #12
 800aa44:	f000 808e 	beq.w	800ab64 <HAL_RCC_OscConfig+0x1ac>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800aa48:	6851      	ldr	r1, [r2, #4]
 800aa4a:	f001 010c 	and.w	r1, r1, #12
 800aa4e:	2908      	cmp	r1, #8
 800aa50:	f000 8084 	beq.w	800ab5c <HAL_RCC_OscConfig+0x1a4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800aa54:	6923      	ldr	r3, [r4, #16]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	f000 8125 	beq.w	800aca6 <HAL_RCC_OscConfig+0x2ee>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aa5c:	2201      	movs	r2, #1
 800aa5e:	4b83      	ldr	r3, [pc, #524]	; (800ac6c <HAL_RCC_OscConfig+0x2b4>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa60:	4e81      	ldr	r6, [pc, #516]	; (800ac68 <HAL_RCC_OscConfig+0x2b0>)
        __HAL_RCC_HSI_ENABLE();
 800aa62:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800aa64:	f7ff f8d6 	bl	8009c14 <HAL_GetTick>
 800aa68:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa6a:	e005      	b.n	800aa78 <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aa6c:	f7ff f8d2 	bl	8009c14 <HAL_GetTick>
 800aa70:	1b40      	subs	r0, r0, r5
 800aa72:	2802      	cmp	r0, #2
 800aa74:	f200 80c7 	bhi.w	800ac06 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa78:	6833      	ldr	r3, [r6, #0]
 800aa7a:	0798      	lsls	r0, r3, #30
 800aa7c:	d5f6      	bpl.n	800aa6c <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aa7e:	6833      	ldr	r3, [r6, #0]
 800aa80:	6962      	ldr	r2, [r4, #20]
 800aa82:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800aa86:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800aa8a:	6033      	str	r3, [r6, #0]
 800aa8c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa8e:	071a      	lsls	r2, r3, #28
 800aa90:	d41f      	bmi.n	800aad2 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa92:	075d      	lsls	r5, r3, #29
 800aa94:	d541      	bpl.n	800ab1a <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800aa96:	4b74      	ldr	r3, [pc, #464]	; (800ac68 <HAL_RCC_OscConfig+0x2b0>)
 800aa98:	69da      	ldr	r2, [r3, #28]
 800aa9a:	00d0      	lsls	r0, r2, #3
 800aa9c:	d57d      	bpl.n	800ab9a <HAL_RCC_OscConfig+0x1e2>
    FlagStatus       pwrclkchanged = RESET;
 800aa9e:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800aaa0:	4b73      	ldr	r3, [pc, #460]	; (800ac70 <HAL_RCC_OscConfig+0x2b8>)
 800aaa2:	681a      	ldr	r2, [r3, #0]
 800aaa4:	05d1      	lsls	r1, r2, #23
 800aaa6:	f140 809d 	bpl.w	800abe4 <HAL_RCC_OscConfig+0x22c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aaaa:	68e3      	ldr	r3, [r4, #12]
 800aaac:	2b01      	cmp	r3, #1
 800aaae:	f000 810b 	beq.w	800acc8 <HAL_RCC_OscConfig+0x310>
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	f000 80c5 	beq.w	800ac42 <HAL_RCC_OscConfig+0x28a>
 800aab8:	2b05      	cmp	r3, #5
 800aaba:	4b6b      	ldr	r3, [pc, #428]	; (800ac68 <HAL_RCC_OscConfig+0x2b0>)
 800aabc:	6a1a      	ldr	r2, [r3, #32]
 800aabe:	f000 8139 	beq.w	800ad34 <HAL_RCC_OscConfig+0x37c>
 800aac2:	f022 0201 	bic.w	r2, r2, #1
 800aac6:	621a      	str	r2, [r3, #32]
 800aac8:	6a1a      	ldr	r2, [r3, #32]
 800aaca:	f022 0204 	bic.w	r2, r2, #4
 800aace:	621a      	str	r2, [r3, #32]
 800aad0:	e0ff      	b.n	800acd2 <HAL_RCC_OscConfig+0x31a>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800aad2:	69a3      	ldr	r3, [r4, #24]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d050      	beq.n	800ab7a <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 800aad8:	2201      	movs	r2, #1
 800aada:	4b66      	ldr	r3, [pc, #408]	; (800ac74 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aadc:	4e62      	ldr	r6, [pc, #392]	; (800ac68 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_ENABLE();
 800aade:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800aae0:	f7ff f898 	bl	8009c14 <HAL_GetTick>
 800aae4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aae6:	e005      	b.n	800aaf4 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aae8:	f7ff f894 	bl	8009c14 <HAL_GetTick>
 800aaec:	1b40      	subs	r0, r0, r5
 800aaee:	2802      	cmp	r0, #2
 800aaf0:	f200 8089 	bhi.w	800ac06 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800aaf4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800aaf6:	079b      	lsls	r3, r3, #30
 800aaf8:	d5f6      	bpl.n	800aae8 <HAL_RCC_OscConfig+0x130>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800aafa:	4b5f      	ldr	r3, [pc, #380]	; (800ac78 <HAL_RCC_OscConfig+0x2c0>)
 800aafc:	4a5f      	ldr	r2, [pc, #380]	; (800ac7c <HAL_RCC_OscConfig+0x2c4>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	fba2 2303 	umull	r2, r3, r2, r3
 800ab04:	0a5b      	lsrs	r3, r3, #9
 800ab06:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800ab08:	bf00      	nop
  }
  while (Delay --);
 800ab0a:	9b01      	ldr	r3, [sp, #4]
 800ab0c:	1e5a      	subs	r2, r3, #1
 800ab0e:	9201      	str	r2, [sp, #4]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1f9      	bne.n	800ab08 <HAL_RCC_OscConfig+0x150>
 800ab14:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab16:	075d      	lsls	r5, r3, #29
 800ab18:	d4bd      	bmi.n	800aa96 <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ab1a:	69e0      	ldr	r0, [r4, #28]
 800ab1c:	b1d0      	cbz	r0, 800ab54 <HAL_RCC_OscConfig+0x19c>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ab1e:	4d52      	ldr	r5, [pc, #328]	; (800ac68 <HAL_RCC_OscConfig+0x2b0>)
 800ab20:	686a      	ldr	r2, [r5, #4]
 800ab22:	f002 020c 	and.w	r2, r2, #12
 800ab26:	2a08      	cmp	r2, #8
 800ab28:	f000 80e6 	beq.w	800acf8 <HAL_RCC_OscConfig+0x340>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab2c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800ab2e:	f04f 0100 	mov.w	r1, #0
 800ab32:	4a53      	ldr	r2, [pc, #332]	; (800ac80 <HAL_RCC_OscConfig+0x2c8>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ab34:	f000 8108 	beq.w	800ad48 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_PLL_DISABLE();
 800ab38:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800ab3a:	f7ff f86b 	bl	8009c14 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab3e:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800ab40:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab42:	e004      	b.n	800ab4e <HAL_RCC_OscConfig+0x196>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ab44:	f7ff f866 	bl	8009c14 <HAL_GetTick>
 800ab48:	1b40      	subs	r0, r0, r5
 800ab4a:	2802      	cmp	r0, #2
 800ab4c:	d85b      	bhi.n	800ac06 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ab4e:	6823      	ldr	r3, [r4, #0]
 800ab50:	019b      	lsls	r3, r3, #6
 800ab52:	d4f7      	bmi.n	800ab44 <HAL_RCC_OscConfig+0x18c>
  return HAL_OK;
 800ab54:	2000      	movs	r0, #0
}
 800ab56:	b002      	add	sp, #8
 800ab58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800ab5c:	6852      	ldr	r2, [r2, #4]
 800ab5e:	03d6      	lsls	r6, r2, #15
 800ab60:	f53f af78 	bmi.w	800aa54 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ab64:	4a40      	ldr	r2, [pc, #256]	; (800ac68 <HAL_RCC_OscConfig+0x2b0>)
 800ab66:	6812      	ldr	r2, [r2, #0]
 800ab68:	0795      	lsls	r5, r2, #30
 800ab6a:	d52f      	bpl.n	800abcc <HAL_RCC_OscConfig+0x214>
 800ab6c:	6922      	ldr	r2, [r4, #16]
 800ab6e:	2a01      	cmp	r2, #1
 800ab70:	d02c      	beq.n	800abcc <HAL_RCC_OscConfig+0x214>
        return HAL_ERROR;
 800ab72:	2001      	movs	r0, #1
}
 800ab74:	b002      	add	sp, #8
 800ab76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 800ab7a:	4a3e      	ldr	r2, [pc, #248]	; (800ac74 <HAL_RCC_OscConfig+0x2bc>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab7c:	4e3a      	ldr	r6, [pc, #232]	; (800ac68 <HAL_RCC_OscConfig+0x2b0>)
      __HAL_RCC_LSI_DISABLE();
 800ab7e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800ab80:	f7ff f848 	bl	8009c14 <HAL_GetTick>
 800ab84:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab86:	e004      	b.n	800ab92 <HAL_RCC_OscConfig+0x1da>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ab88:	f7ff f844 	bl	8009c14 <HAL_GetTick>
 800ab8c:	1b40      	subs	r0, r0, r5
 800ab8e:	2802      	cmp	r0, #2
 800ab90:	d839      	bhi.n	800ac06 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800ab92:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ab94:	079f      	lsls	r7, r3, #30
 800ab96:	d4f7      	bmi.n	800ab88 <HAL_RCC_OscConfig+0x1d0>
 800ab98:	e7bc      	b.n	800ab14 <HAL_RCC_OscConfig+0x15c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab9a:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 800ab9c:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800ab9e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800aba2:	61da      	str	r2, [r3, #28]
 800aba4:	69db      	ldr	r3, [r3, #28]
 800aba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 800abae:	e777      	b.n	800aaa0 <HAL_RCC_OscConfig+0xe8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800abb0:	684a      	ldr	r2, [r1, #4]
 800abb2:	03d0      	lsls	r0, r2, #15
 800abb4:	f57f af17 	bpl.w	800a9e6 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800abb8:	4a2b      	ldr	r2, [pc, #172]	; (800ac68 <HAL_RCC_OscConfig+0x2b0>)
 800abba:	6812      	ldr	r2, [r2, #0]
 800abbc:	0391      	lsls	r1, r2, #14
 800abbe:	f57f af3b 	bpl.w	800aa38 <HAL_RCC_OscConfig+0x80>
 800abc2:	6862      	ldr	r2, [r4, #4]
 800abc4:	2a00      	cmp	r2, #0
 800abc6:	f47f af37 	bne.w	800aa38 <HAL_RCC_OscConfig+0x80>
 800abca:	e7d2      	b.n	800ab72 <HAL_RCC_OscConfig+0x1ba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800abcc:	4926      	ldr	r1, [pc, #152]	; (800ac68 <HAL_RCC_OscConfig+0x2b0>)
 800abce:	6960      	ldr	r0, [r4, #20]
 800abd0:	680a      	ldr	r2, [r1, #0]
 800abd2:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800abd6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 800abda:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800abdc:	071a      	lsls	r2, r3, #28
 800abde:	f57f af58 	bpl.w	800aa92 <HAL_RCC_OscConfig+0xda>
 800abe2:	e776      	b.n	800aad2 <HAL_RCC_OscConfig+0x11a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800abe4:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abe6:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800abe8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abec:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800abee:	f7ff f811 	bl	8009c14 <HAL_GetTick>
 800abf2:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	05da      	lsls	r2, r3, #23
 800abf8:	f53f af57 	bmi.w	800aaaa <HAL_RCC_OscConfig+0xf2>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800abfc:	f7ff f80a 	bl	8009c14 <HAL_GetTick>
 800ac00:	1b80      	subs	r0, r0, r6
 800ac02:	2864      	cmp	r0, #100	; 0x64
 800ac04:	d9f6      	bls.n	800abf4 <HAL_RCC_OscConfig+0x23c>
            return HAL_TIMEOUT;
 800ac06:	2003      	movs	r0, #3
}
 800ac08:	b002      	add	sp, #8
 800ac0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac12:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800ac16:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac18:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ac1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ac1e:	601a      	str	r2, [r3, #0]
 800ac20:	681a      	ldr	r2, [r3, #0]
 800ac22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ac26:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ac28:	f7fe fff4 	bl	8009c14 <HAL_GetTick>
 800ac2c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac2e:	e004      	b.n	800ac3a <HAL_RCC_OscConfig+0x282>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ac30:	f7fe fff0 	bl	8009c14 <HAL_GetTick>
 800ac34:	1b40      	subs	r0, r0, r5
 800ac36:	2864      	cmp	r0, #100	; 0x64
 800ac38:	d8e5      	bhi.n	800ac06 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ac3a:	6833      	ldr	r3, [r6, #0]
 800ac3c:	039b      	lsls	r3, r3, #14
 800ac3e:	d4f7      	bmi.n	800ac30 <HAL_RCC_OscConfig+0x278>
 800ac40:	e6f9      	b.n	800aa36 <HAL_RCC_OscConfig+0x7e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac42:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ac46:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 800ac4a:	6a1a      	ldr	r2, [r3, #32]
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac4c:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac4e:	f022 0201 	bic.w	r2, r2, #1
 800ac52:	621a      	str	r2, [r3, #32]
 800ac54:	6a1a      	ldr	r2, [r3, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac56:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ac5a:	f022 0204 	bic.w	r2, r2, #4
 800ac5e:	621a      	str	r2, [r3, #32]
      tickstart = HAL_GetTick();
 800ac60:	f7fe ffd8 	bl	8009c14 <HAL_GetTick>
 800ac64:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac66:	e012      	b.n	800ac8e <HAL_RCC_OscConfig+0x2d6>
 800ac68:	40021000 	.word	0x40021000
 800ac6c:	42420000 	.word	0x42420000
 800ac70:	40007000 	.word	0x40007000
 800ac74:	42420480 	.word	0x42420480
 800ac78:	2000048c 	.word	0x2000048c
 800ac7c:	10624dd3 	.word	0x10624dd3
 800ac80:	42420060 	.word	0x42420060
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac84:	f7fe ffc6 	bl	8009c14 <HAL_GetTick>
 800ac88:	1b80      	subs	r0, r0, r6
 800ac8a:	4540      	cmp	r0, r8
 800ac8c:	d8bb      	bhi.n	800ac06 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ac8e:	6a3b      	ldr	r3, [r7, #32]
 800ac90:	0798      	lsls	r0, r3, #30
 800ac92:	d4f7      	bmi.n	800ac84 <HAL_RCC_OscConfig+0x2cc>
    if (pwrclkchanged == SET)
 800ac94:	2d00      	cmp	r5, #0
 800ac96:	f43f af40 	beq.w	800ab1a <HAL_RCC_OscConfig+0x162>
      __HAL_RCC_PWR_CLK_DISABLE();
 800ac9a:	4a44      	ldr	r2, [pc, #272]	; (800adac <HAL_RCC_OscConfig+0x3f4>)
 800ac9c:	69d3      	ldr	r3, [r2, #28]
 800ac9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aca2:	61d3      	str	r3, [r2, #28]
 800aca4:	e739      	b.n	800ab1a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800aca6:	4a42      	ldr	r2, [pc, #264]	; (800adb0 <HAL_RCC_OscConfig+0x3f8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aca8:	4e40      	ldr	r6, [pc, #256]	; (800adac <HAL_RCC_OscConfig+0x3f4>)
        __HAL_RCC_HSI_DISABLE();
 800acaa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800acac:	f7fe ffb2 	bl	8009c14 <HAL_GetTick>
 800acb0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acb2:	e004      	b.n	800acbe <HAL_RCC_OscConfig+0x306>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800acb4:	f7fe ffae 	bl	8009c14 <HAL_GetTick>
 800acb8:	1b40      	subs	r0, r0, r5
 800acba:	2802      	cmp	r0, #2
 800acbc:	d8a3      	bhi.n	800ac06 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800acbe:	6833      	ldr	r3, [r6, #0]
 800acc0:	0799      	lsls	r1, r3, #30
 800acc2:	d4f7      	bmi.n	800acb4 <HAL_RCC_OscConfig+0x2fc>
 800acc4:	6823      	ldr	r3, [r4, #0]
 800acc6:	e6e2      	b.n	800aa8e <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800acc8:	4a38      	ldr	r2, [pc, #224]	; (800adac <HAL_RCC_OscConfig+0x3f4>)
 800acca:	6a13      	ldr	r3, [r2, #32]
 800accc:	f043 0301 	orr.w	r3, r3, #1
 800acd0:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 800acd2:	f7fe ff9f 	bl	8009c14 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acd6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800acda:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800acdc:	4f33      	ldr	r7, [pc, #204]	; (800adac <HAL_RCC_OscConfig+0x3f4>)
 800acde:	e004      	b.n	800acea <HAL_RCC_OscConfig+0x332>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ace0:	f7fe ff98 	bl	8009c14 <HAL_GetTick>
 800ace4:	1b80      	subs	r0, r0, r6
 800ace6:	4540      	cmp	r0, r8
 800ace8:	d88d      	bhi.n	800ac06 <HAL_RCC_OscConfig+0x24e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800acea:	6a3b      	ldr	r3, [r7, #32]
 800acec:	079b      	lsls	r3, r3, #30
 800acee:	d5f7      	bpl.n	800ace0 <HAL_RCC_OscConfig+0x328>
    if (pwrclkchanged == SET)
 800acf0:	2d00      	cmp	r5, #0
 800acf2:	f43f af12 	beq.w	800ab1a <HAL_RCC_OscConfig+0x162>
 800acf6:	e7d0      	b.n	800ac9a <HAL_RCC_OscConfig+0x2e2>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800acf8:	2801      	cmp	r0, #1
 800acfa:	f43f af2c 	beq.w	800ab56 <HAL_RCC_OscConfig+0x19e>
        pll_config = RCC->CFGR;
 800acfe:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ad00:	6a22      	ldr	r2, [r4, #32]
 800ad02:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800ad06:	4291      	cmp	r1, r2
 800ad08:	f47f af33 	bne.w	800ab72 <HAL_RCC_OscConfig+0x1ba>
 800ad0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800ad0e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 800ad12:	1a18      	subs	r0, r3, r0
 800ad14:	bf18      	it	ne
 800ad16:	2001      	movne	r0, #1
 800ad18:	e71d      	b.n	800ab56 <HAL_RCC_OscConfig+0x19e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad1a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ad1e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 800ad22:	681a      	ldr	r2, [r3, #0]
 800ad24:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	681a      	ldr	r2, [r3, #0]
 800ad2c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800ad30:	601a      	str	r2, [r3, #0]
 800ad32:	e672      	b.n	800aa1a <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad34:	f042 0204 	orr.w	r2, r2, #4
 800ad38:	621a      	str	r2, [r3, #32]
 800ad3a:	6a1a      	ldr	r2, [r3, #32]
 800ad3c:	f042 0201 	orr.w	r2, r2, #1
 800ad40:	621a      	str	r2, [r3, #32]
 800ad42:	e7c6      	b.n	800acd2 <HAL_RCC_OscConfig+0x31a>
    return HAL_ERROR;
 800ad44:	2001      	movs	r0, #1
}
 800ad46:	4770      	bx	lr
        __HAL_RCC_PLL_DISABLE();
 800ad48:	6011      	str	r1, [r2, #0]
        tickstart = HAL_GetTick();
 800ad4a:	f7fe ff63 	bl	8009c14 <HAL_GetTick>
 800ad4e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad50:	e005      	b.n	800ad5e <HAL_RCC_OscConfig+0x3a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad52:	f7fe ff5f 	bl	8009c14 <HAL_GetTick>
 800ad56:	1b80      	subs	r0, r0, r6
 800ad58:	2802      	cmp	r0, #2
 800ad5a:	f63f af54 	bhi.w	800ac06 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800ad5e:	682b      	ldr	r3, [r5, #0]
 800ad60:	0199      	lsls	r1, r3, #6
 800ad62:	d4f6      	bmi.n	800ad52 <HAL_RCC_OscConfig+0x39a>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800ad64:	6a23      	ldr	r3, [r4, #32]
 800ad66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad6a:	d105      	bne.n	800ad78 <HAL_RCC_OscConfig+0x3c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800ad6c:	686a      	ldr	r2, [r5, #4]
 800ad6e:	68a1      	ldr	r1, [r4, #8]
 800ad70:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800ad74:	430a      	orrs	r2, r1
 800ad76:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800ad78:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad7a:	4d0c      	ldr	r5, [pc, #48]	; (800adac <HAL_RCC_OscConfig+0x3f4>)
 800ad7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ad7e:	686a      	ldr	r2, [r5, #4]
 800ad80:	430b      	orrs	r3, r1
 800ad82:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 800ad86:	490b      	ldr	r1, [pc, #44]	; (800adb4 <HAL_RCC_OscConfig+0x3fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ad88:	4313      	orrs	r3, r2
 800ad8a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800ad8c:	6008      	str	r0, [r1, #0]
        tickstart = HAL_GetTick();
 800ad8e:	f7fe ff41 	bl	8009c14 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ad92:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 800ad94:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ad96:	e005      	b.n	800ada4 <HAL_RCC_OscConfig+0x3ec>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad98:	f7fe ff3c 	bl	8009c14 <HAL_GetTick>
 800ad9c:	1b40      	subs	r0, r0, r5
 800ad9e:	2802      	cmp	r0, #2
 800ada0:	f63f af31 	bhi.w	800ac06 <HAL_RCC_OscConfig+0x24e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800ada4:	6823      	ldr	r3, [r4, #0]
 800ada6:	019a      	lsls	r2, r3, #6
 800ada8:	d5f6      	bpl.n	800ad98 <HAL_RCC_OscConfig+0x3e0>
 800adaa:	e6d3      	b.n	800ab54 <HAL_RCC_OscConfig+0x19c>
 800adac:	40021000 	.word	0x40021000
 800adb0:	42420000 	.word	0x42420000
 800adb4:	42420060 	.word	0x42420060

0800adb8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800adb8:	2800      	cmp	r0, #0
 800adba:	f000 80af 	beq.w	800af1c <HAL_RCC_ClockConfig+0x164>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800adbe:	4a5d      	ldr	r2, [pc, #372]	; (800af34 <HAL_RCC_ClockConfig+0x17c>)
{
 800adc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800adc4:	6813      	ldr	r3, [r2, #0]
 800adc6:	4604      	mov	r4, r0
 800adc8:	f003 0307 	and.w	r3, r3, #7
 800adcc:	428b      	cmp	r3, r1
 800adce:	460d      	mov	r5, r1
{
 800add0:	b086      	sub	sp, #24
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800add2:	d20d      	bcs.n	800adf0 <HAL_RCC_ClockConfig+0x38>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800add4:	6813      	ldr	r3, [r2, #0]
 800add6:	f023 0307 	bic.w	r3, r3, #7
 800adda:	430b      	orrs	r3, r1
 800addc:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800adde:	6813      	ldr	r3, [r2, #0]
 800ade0:	f003 0307 	and.w	r3, r3, #7
 800ade4:	428b      	cmp	r3, r1
 800ade6:	d003      	beq.n	800adf0 <HAL_RCC_ClockConfig+0x38>
    return HAL_ERROR;
 800ade8:	2001      	movs	r0, #1
}
 800adea:	b006      	add	sp, #24
 800adec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800adf0:	6823      	ldr	r3, [r4, #0]
 800adf2:	0798      	lsls	r0, r3, #30
 800adf4:	d514      	bpl.n	800ae20 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800adf6:	0759      	lsls	r1, r3, #29
 800adf8:	d504      	bpl.n	800ae04 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800adfa:	494f      	ldr	r1, [pc, #316]	; (800af38 <HAL_RCC_ClockConfig+0x180>)
 800adfc:	684a      	ldr	r2, [r1, #4]
 800adfe:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800ae02:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae04:	071a      	lsls	r2, r3, #28
 800ae06:	d504      	bpl.n	800ae12 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ae08:	494b      	ldr	r1, [pc, #300]	; (800af38 <HAL_RCC_ClockConfig+0x180>)
 800ae0a:	684a      	ldr	r2, [r1, #4]
 800ae0c:	f442 5260 	orr.w	r2, r2, #14336	; 0x3800
 800ae10:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae12:	4949      	ldr	r1, [pc, #292]	; (800af38 <HAL_RCC_ClockConfig+0x180>)
 800ae14:	68a0      	ldr	r0, [r4, #8]
 800ae16:	684a      	ldr	r2, [r1, #4]
 800ae18:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800ae1c:	4302      	orrs	r2, r0
 800ae1e:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae20:	07db      	lsls	r3, r3, #31
 800ae22:	d520      	bpl.n	800ae66 <HAL_RCC_ClockConfig+0xae>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae24:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae26:	4b44      	ldr	r3, [pc, #272]	; (800af38 <HAL_RCC_ClockConfig+0x180>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae28:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae2a:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae2c:	d078      	beq.n	800af20 <HAL_RCC_ClockConfig+0x168>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae2e:	2a02      	cmp	r2, #2
 800ae30:	d071      	beq.n	800af16 <HAL_RCC_ClockConfig+0x15e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ae32:	0798      	lsls	r0, r3, #30
 800ae34:	d5d8      	bpl.n	800ade8 <HAL_RCC_ClockConfig+0x30>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae36:	4e40      	ldr	r6, [pc, #256]	; (800af38 <HAL_RCC_ClockConfig+0x180>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae38:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ae3c:	6873      	ldr	r3, [r6, #4]
 800ae3e:	f023 0303 	bic.w	r3, r3, #3
 800ae42:	4313      	orrs	r3, r2
 800ae44:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800ae46:	f7fe fee5 	bl	8009c14 <HAL_GetTick>
 800ae4a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae4c:	e004      	b.n	800ae58 <HAL_RCC_ClockConfig+0xa0>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae4e:	f7fe fee1 	bl	8009c14 <HAL_GetTick>
 800ae52:	1bc0      	subs	r0, r0, r7
 800ae54:	4540      	cmp	r0, r8
 800ae56:	d866      	bhi.n	800af26 <HAL_RCC_ClockConfig+0x16e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae58:	6873      	ldr	r3, [r6, #4]
 800ae5a:	6862      	ldr	r2, [r4, #4]
 800ae5c:	f003 030c 	and.w	r3, r3, #12
 800ae60:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800ae64:	d1f3      	bne.n	800ae4e <HAL_RCC_ClockConfig+0x96>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800ae66:	4a33      	ldr	r2, [pc, #204]	; (800af34 <HAL_RCC_ClockConfig+0x17c>)
 800ae68:	6813      	ldr	r3, [r2, #0]
 800ae6a:	f003 0307 	and.w	r3, r3, #7
 800ae6e:	42ab      	cmp	r3, r5
 800ae70:	d909      	bls.n	800ae86 <HAL_RCC_ClockConfig+0xce>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae72:	6813      	ldr	r3, [r2, #0]
 800ae74:	f023 0307 	bic.w	r3, r3, #7
 800ae78:	432b      	orrs	r3, r5
 800ae7a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae7c:	6813      	ldr	r3, [r2, #0]
 800ae7e:	f003 0307 	and.w	r3, r3, #7
 800ae82:	42ab      	cmp	r3, r5
 800ae84:	d1b0      	bne.n	800ade8 <HAL_RCC_ClockConfig+0x30>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae86:	6823      	ldr	r3, [r4, #0]
 800ae88:	0759      	lsls	r1, r3, #29
 800ae8a:	d506      	bpl.n	800ae9a <HAL_RCC_ClockConfig+0xe2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae8c:	492a      	ldr	r1, [pc, #168]	; (800af38 <HAL_RCC_ClockConfig+0x180>)
 800ae8e:	68e0      	ldr	r0, [r4, #12]
 800ae90:	684a      	ldr	r2, [r1, #4]
 800ae92:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800ae96:	4302      	orrs	r2, r0
 800ae98:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae9a:	071a      	lsls	r2, r3, #28
 800ae9c:	d507      	bpl.n	800aeae <HAL_RCC_ClockConfig+0xf6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800ae9e:	4a26      	ldr	r2, [pc, #152]	; (800af38 <HAL_RCC_ClockConfig+0x180>)
 800aea0:	6921      	ldr	r1, [r4, #16]
 800aea2:	6853      	ldr	r3, [r2, #4]
 800aea4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800aea8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800aeac:	6053      	str	r3, [r2, #4]
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800aeae:	f240 2201 	movw	r2, #513	; 0x201
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800aeb2:	4b22      	ldr	r3, [pc, #136]	; (800af3c <HAL_RCC_ClockConfig+0x184>)
 800aeb4:	ac06      	add	r4, sp, #24
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800aeb6:	f8ad 2004 	strh.w	r2, [sp, #4]
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800aeba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800aebc:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
  tmpreg = RCC->CFGR;
 800aec0:	491d      	ldr	r1, [pc, #116]	; (800af38 <HAL_RCC_ClockConfig+0x180>)
 800aec2:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800aec4:	f002 030c 	and.w	r3, r2, #12
 800aec8:	2b08      	cmp	r3, #8
 800aeca:	d011      	beq.n	800aef0 <HAL_RCC_ClockConfig+0x138>
      sysclockfreq = HSE_VALUE;
 800aecc:	4b1c      	ldr	r3, [pc, #112]	; (800af40 <HAL_RCC_ClockConfig+0x188>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aece:	4a1a      	ldr	r2, [pc, #104]	; (800af38 <HAL_RCC_ClockConfig+0x180>)
 800aed0:	481c      	ldr	r0, [pc, #112]	; (800af44 <HAL_RCC_ClockConfig+0x18c>)
 800aed2:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 800aed4:	491c      	ldr	r1, [pc, #112]	; (800af48 <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aed6:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800aeda:	5c80      	ldrb	r0, [r0, r2]
 800aedc:	4a1b      	ldr	r2, [pc, #108]	; (800af4c <HAL_RCC_ClockConfig+0x194>)
 800aede:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 800aee0:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800aee2:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 800aee4:	f7fe fcaa 	bl	800983c <HAL_InitTick>
  return HAL_OK;
 800aee8:	2000      	movs	r0, #0
}
 800aeea:	b006      	add	sp, #24
 800aeec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800aef0:	f3c2 4383 	ubfx	r3, r2, #18, #4
 800aef4:	4423      	add	r3, r4
 800aef6:	f813 0c10 	ldrb.w	r0, [r3, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800aefa:	03d3      	lsls	r3, r2, #15
 800aefc:	d515      	bpl.n	800af2a <HAL_RCC_ClockConfig+0x172>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800aefe:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800af00:	4b0f      	ldr	r3, [pc, #60]	; (800af40 <HAL_RCC_ClockConfig+0x188>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800af02:	f3c2 4240 	ubfx	r2, r2, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800af06:	fb03 f300 	mul.w	r3, r3, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800af0a:	4422      	add	r2, r4
 800af0c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800af10:	fbb3 f3f2 	udiv	r3, r3, r2
 800af14:	e7db      	b.n	800aece <HAL_RCC_ClockConfig+0x116>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800af16:	019e      	lsls	r6, r3, #6
 800af18:	d48d      	bmi.n	800ae36 <HAL_RCC_ClockConfig+0x7e>
 800af1a:	e765      	b.n	800ade8 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 800af1c:	2001      	movs	r0, #1
}
 800af1e:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af20:	039f      	lsls	r7, r3, #14
 800af22:	d488      	bmi.n	800ae36 <HAL_RCC_ClockConfig+0x7e>
 800af24:	e760      	b.n	800ade8 <HAL_RCC_ClockConfig+0x30>
        return HAL_TIMEOUT;
 800af26:	2003      	movs	r0, #3
 800af28:	e75f      	b.n	800adea <HAL_RCC_ClockConfig+0x32>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800af2a:	4b09      	ldr	r3, [pc, #36]	; (800af50 <HAL_RCC_ClockConfig+0x198>)
 800af2c:	fb03 f300 	mul.w	r3, r3, r0
 800af30:	e7cd      	b.n	800aece <HAL_RCC_ClockConfig+0x116>
 800af32:	bf00      	nop
 800af34:	40022000 	.word	0x40022000
 800af38:	40021000 	.word	0x40021000
 800af3c:	08010eb8 	.word	0x08010eb8
 800af40:	007a1200 	.word	0x007a1200
 800af44:	08010ea0 	.word	0x08010ea0
 800af48:	20000494 	.word	0x20000494
 800af4c:	2000048c 	.word	0x2000048c
 800af50:	003d0900 	.word	0x003d0900

0800af54 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800af54:	2201      	movs	r2, #1
 800af56:	4b01      	ldr	r3, [pc, #4]	; (800af5c <HAL_RCC_EnableCSS+0x8>)
 800af58:	601a      	str	r2, [r3, #0]
}
 800af5a:	4770      	bx	lr
 800af5c:	4242004c 	.word	0x4242004c

0800af60 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 800af60:	4b01      	ldr	r3, [pc, #4]	; (800af68 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800af62:	6818      	ldr	r0, [r3, #0]
 800af64:	4770      	bx	lr
 800af66:	bf00      	nop
 800af68:	2000048c 	.word	0x2000048c

0800af6c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af6c:	4b04      	ldr	r3, [pc, #16]	; (800af80 <HAL_RCC_GetPCLK1Freq+0x14>)
 800af6e:	4905      	ldr	r1, [pc, #20]	; (800af84 <HAL_RCC_GetPCLK1Freq+0x18>)
 800af70:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 800af72:	4a05      	ldr	r2, [pc, #20]	; (800af88 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800af74:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800af78:	5ccb      	ldrb	r3, [r1, r3]
 800af7a:	6810      	ldr	r0, [r2, #0]
}
 800af7c:	40d8      	lsrs	r0, r3
 800af7e:	4770      	bx	lr
 800af80:	40021000 	.word	0x40021000
 800af84:	08010eb0 	.word	0x08010eb0
 800af88:	2000048c 	.word	0x2000048c

0800af8c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800af8c:	4b04      	ldr	r3, [pc, #16]	; (800afa0 <HAL_RCC_GetPCLK2Freq+0x14>)
 800af8e:	4905      	ldr	r1, [pc, #20]	; (800afa4 <HAL_RCC_GetPCLK2Freq+0x18>)
 800af90:	685b      	ldr	r3, [r3, #4]
  return SystemCoreClock;
 800af92:	4a05      	ldr	r2, [pc, #20]	; (800afa8 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800af94:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800af98:	5ccb      	ldrb	r3, [r1, r3]
 800af9a:	6810      	ldr	r0, [r2, #0]
}
 800af9c:	40d8      	lsrs	r0, r3
 800af9e:	4770      	bx	lr
 800afa0:	40021000 	.word	0x40021000
 800afa4:	08010eb0 	.word	0x08010eb0
 800afa8:	2000048c 	.word	0x2000048c

0800afac <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800afac:	220f      	movs	r2, #15
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800afae:	4b0d      	ldr	r3, [pc, #52]	; (800afe4 <HAL_RCC_GetClockConfig+0x38>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800afb0:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800afb2:	685a      	ldr	r2, [r3, #4]
{
 800afb4:	b410      	push	{r4}
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800afb6:	f002 0203 	and.w	r2, r2, #3
 800afba:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800afbc:	685a      	ldr	r2, [r3, #4]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800afbe:	4c0a      	ldr	r4, [pc, #40]	; (800afe8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800afc0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800afc4:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800afc6:	685a      	ldr	r2, [r3, #4]
 800afc8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800afcc:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	08db      	lsrs	r3, r3, #3
 800afd2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800afd6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800afd8:	6823      	ldr	r3, [r4, #0]
}
 800afda:	bc10      	pop	{r4}
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800afdc:	f003 0307 	and.w	r3, r3, #7
 800afe0:	600b      	str	r3, [r1, #0]
}
 800afe2:	4770      	bx	lr
 800afe4:	40021000 	.word	0x40021000
 800afe8:	40022000 	.word	0x40022000

0800afec <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800afec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff0:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800aff2:	6800      	ldr	r0, [r0, #0]
{
 800aff4:	b082      	sub	sp, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800aff6:	07c3      	lsls	r3, r0, #31
 800aff8:	d52a      	bpl.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x64>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800affa:	4b39      	ldr	r3, [pc, #228]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800affc:	69da      	ldr	r2, [r3, #28]
 800affe:	00d7      	lsls	r7, r2, #3
 800b000:	d53d      	bpl.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x92>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b002:	4b38      	ldr	r3, [pc, #224]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    FlagStatus pwrclkchanged = RESET;
 800b004:	2500      	movs	r5, #0
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	05d6      	lsls	r6, r2, #23
 800b00a:	d546      	bpl.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0xae>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b00c:	4e34      	ldr	r6, [pc, #208]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800b00e:	6a33      	ldr	r3, [r6, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b010:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800b014:	d00f      	beq.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800b016:	6861      	ldr	r1, [r4, #4]
 800b018:	f401 7240 	and.w	r2, r1, #768	; 0x300
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d00b      	beq.n	800b038 <HAL_RCCEx_PeriphCLKConfig+0x4c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b020:	2701      	movs	r7, #1
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b022:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b024:	6a33      	ldr	r3, [r6, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800b026:	4a30      	ldr	r2, [pc, #192]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b028:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800b02c:	6017      	str	r7, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b02e:	6010      	str	r0, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800b030:	6231      	str	r1, [r6, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800b032:	07d9      	lsls	r1, r3, #31
 800b034:	d445      	bmi.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
 800b036:	6861      	ldr	r1, [r4, #4]
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b038:	4a29      	ldr	r2, [pc, #164]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800b03a:	6a13      	ldr	r3, [r2, #32]
 800b03c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b040:	430b      	orrs	r3, r1
 800b042:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b044:	b11d      	cbz	r5, 800b04e <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b046:	69d3      	ldr	r3, [r2, #28]
 800b048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b04c:	61d3      	str	r3, [r2, #28]
 800b04e:	6820      	ldr	r0, [r4, #0]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b050:	0783      	lsls	r3, r0, #30
 800b052:	d506      	bpl.n	800b062 <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b054:	4922      	ldr	r1, [pc, #136]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800b056:	68a3      	ldr	r3, [r4, #8]
 800b058:	684a      	ldr	r2, [r1, #4]
 800b05a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b05e:	431a      	orrs	r2, r3
 800b060:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b062:	f010 0010 	ands.w	r0, r0, #16
 800b066:	d007      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800b068:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b06a:	4a1d      	ldr	r2, [pc, #116]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 800b06c:	68e1      	ldr	r1, [r4, #12]
 800b06e:	6853      	ldr	r3, [r2, #4]
 800b070:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800b074:	430b      	orrs	r3, r1
 800b076:	6053      	str	r3, [r2, #4]
}
 800b078:	b002      	add	sp, #8
 800b07a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800b07e:	69da      	ldr	r2, [r3, #28]
      pwrclkchanged = SET;
 800b080:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800b082:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b086:	61da      	str	r2, [r3, #28]
 800b088:	69db      	ldr	r3, [r3, #28]
 800b08a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b08e:	9301      	str	r3, [sp, #4]
 800b090:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b092:	4b14      	ldr	r3, [pc, #80]	; (800b0e4 <HAL_RCCEx_PeriphCLKConfig+0xf8>)
 800b094:	681a      	ldr	r2, [r3, #0]
 800b096:	05d6      	lsls	r6, r2, #23
 800b098:	d4b8      	bmi.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x20>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b09a:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b09c:	461f      	mov	r7, r3
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b09e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b0a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800b0a4:	f7fe fdb6 	bl	8009c14 <HAL_GetTick>
 800b0a8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b0aa:	683b      	ldr	r3, [r7, #0]
 800b0ac:	05d8      	lsls	r0, r3, #23
 800b0ae:	d4ad      	bmi.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x20>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b0b0:	f7fe fdb0 	bl	8009c14 <HAL_GetTick>
 800b0b4:	1b83      	subs	r3, r0, r6
 800b0b6:	2b64      	cmp	r3, #100	; 0x64
 800b0b8:	d9f7      	bls.n	800b0aa <HAL_RCCEx_PeriphCLKConfig+0xbe>
          return HAL_TIMEOUT;
 800b0ba:	2003      	movs	r0, #3
}
 800b0bc:	b002      	add	sp, #8
 800b0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tickstart = HAL_GetTick();
 800b0c2:	f7fe fda7 	bl	8009c14 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0c6:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800b0ca:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0cc:	e004      	b.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0xec>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b0ce:	f7fe fda1 	bl	8009c14 <HAL_GetTick>
 800b0d2:	1bc0      	subs	r0, r0, r7
 800b0d4:	4540      	cmp	r0, r8
 800b0d6:	d8f0      	bhi.n	800b0ba <HAL_RCCEx_PeriphCLKConfig+0xce>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0d8:	6a33      	ldr	r3, [r6, #32]
 800b0da:	079a      	lsls	r2, r3, #30
 800b0dc:	d5f7      	bpl.n	800b0ce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800b0de:	e7aa      	b.n	800b036 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 800b0e0:	40021000 	.word	0x40021000
 800b0e4:	40007000 	.word	0x40007000
 800b0e8:	42420440 	.word	0x42420440

0800b0ec <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d05d      	beq.n	800b1ac <HAL_TIM_Base_Init+0xc0>
{
 800b0f0:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b0f2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b0f6:	4604      	mov	r4, r0
 800b0f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d03c      	beq.n	800b17a <HAL_TIM_Base_Init+0x8e>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b100:	2302      	movs	r3, #2

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b102:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b104:	492a      	ldr	r1, [pc, #168]	; (800b1b0 <HAL_TIM_Base_Init+0xc4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800b106:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b10a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800b10c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b10e:	d039      	beq.n	800b184 <HAL_TIM_Base_Init+0x98>
 800b110:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800b114:	d028      	beq.n	800b168 <HAL_TIM_Base_Init+0x7c>
 800b116:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800b11a:	428a      	cmp	r2, r1
 800b11c:	d024      	beq.n	800b168 <HAL_TIM_Base_Init+0x7c>
 800b11e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b122:	428a      	cmp	r2, r1
 800b124:	d020      	beq.n	800b168 <HAL_TIM_Base_Init+0x7c>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b126:	69a5      	ldr	r5, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b128:	68e0      	ldr	r0, [r4, #12]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b12a:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b12c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b130:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800b132:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b134:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b136:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b138:	2301      	movs	r3, #1
 800b13a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b13c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b140:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b144:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b148:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b14c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b150:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b154:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b158:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b15c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800b160:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800b164:	2000      	movs	r0, #0
}
 800b166:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800b168:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b16a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b16e:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b170:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b176:	430b      	orrs	r3, r1
 800b178:	e7d5      	b.n	800b126 <HAL_TIM_Base_Init+0x3a>
    htim->Lock = HAL_UNLOCKED;
 800b17a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b17e:	f7fe f9df 	bl	8009540 <HAL_TIM_Base_MspInit>
 800b182:	e7bd      	b.n	800b100 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800b184:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b18a:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b18c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b18e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b192:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b194:	69a1      	ldr	r1, [r4, #24]
 800b196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b19a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800b19c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b19e:	68e3      	ldr	r3, [r4, #12]
 800b1a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b1a2:	6863      	ldr	r3, [r4, #4]
 800b1a4:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800b1a6:	6963      	ldr	r3, [r4, #20]
 800b1a8:	6313      	str	r3, [r2, #48]	; 0x30
 800b1aa:	e7c5      	b.n	800b138 <HAL_TIM_Base_Init+0x4c>
    return HAL_ERROR;
 800b1ac:	2001      	movs	r0, #1
}
 800b1ae:	4770      	bx	lr
 800b1b0:	40012c00 	.word	0x40012c00

0800b1b4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 800b1b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d11f      	bne.n	800b1fc <HAL_TIM_Base_Start_IT+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800b1bc:	2202      	movs	r2, #2
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1be:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800b1c0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1c4:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1c6:	490f      	ldr	r1, [pc, #60]	; (800b204 <HAL_TIM_Base_Start_IT+0x50>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1c8:	f042 0201 	orr.w	r2, r2, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1cc:	428b      	cmp	r3, r1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b1ce:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1d0:	d009      	beq.n	800b1e6 <HAL_TIM_Base_Start_IT+0x32>
 800b1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1d6:	d006      	beq.n	800b1e6 <HAL_TIM_Base_Start_IT+0x32>
 800b1d8:	4a0b      	ldr	r2, [pc, #44]	; (800b208 <HAL_TIM_Base_Start_IT+0x54>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d003      	beq.n	800b1e6 <HAL_TIM_Base_Start_IT+0x32>
 800b1de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d104      	bne.n	800b1f0 <HAL_TIM_Base_Start_IT+0x3c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b1e6:	689a      	ldr	r2, [r3, #8]
 800b1e8:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b1ec:	2a06      	cmp	r2, #6
 800b1ee:	d007      	beq.n	800b200 <HAL_TIM_Base_Start_IT+0x4c>
    __HAL_TIM_ENABLE(htim);
 800b1f0:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 800b1f2:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 800b1f4:	f042 0201 	orr.w	r2, r2, #1
 800b1f8:	601a      	str	r2, [r3, #0]
 800b1fa:	4770      	bx	lr
    return HAL_ERROR;
 800b1fc:	2001      	movs	r0, #1
 800b1fe:	4770      	bx	lr
  return HAL_OK;
 800b200:	2000      	movs	r0, #0
}
 800b202:	4770      	bx	lr
 800b204:	40012c00 	.word	0x40012c00
 800b208:	40000400 	.word	0x40000400

0800b20c <HAL_TIM_PWM_MspInit>:
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop

0800b210 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800b210:	2800      	cmp	r0, #0
 800b212:	d05d      	beq.n	800b2d0 <HAL_TIM_PWM_Init+0xc0>
{
 800b214:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800b216:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b21a:	4604      	mov	r4, r0
 800b21c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b220:	2b00      	cmp	r3, #0
 800b222:	d03c      	beq.n	800b29e <HAL_TIM_PWM_Init+0x8e>
  htim->State = HAL_TIM_STATE_BUSY;
 800b224:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b226:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b228:	492a      	ldr	r1, [pc, #168]	; (800b2d4 <HAL_TIM_PWM_Init+0xc4>)
  htim->State = HAL_TIM_STATE_BUSY;
 800b22a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b22e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800b230:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b232:	d039      	beq.n	800b2a8 <HAL_TIM_PWM_Init+0x98>
 800b234:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800b238:	d028      	beq.n	800b28c <HAL_TIM_PWM_Init+0x7c>
 800b23a:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800b23e:	428a      	cmp	r2, r1
 800b240:	d024      	beq.n	800b28c <HAL_TIM_PWM_Init+0x7c>
 800b242:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b246:	428a      	cmp	r2, r1
 800b248:	d020      	beq.n	800b28c <HAL_TIM_PWM_Init+0x7c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b24a:	69a5      	ldr	r5, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b24c:	68e0      	ldr	r0, [r4, #12]
  TIMx->PSC = Structure->Prescaler;
 800b24e:	6861      	ldr	r1, [r4, #4]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b254:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800b256:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b258:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b25a:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 800b25c:	2301      	movs	r3, #1
 800b25e:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b260:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b264:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800b268:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800b26c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800b270:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b27c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800b280:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800b284:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800b288:	2000      	movs	r0, #0
}
 800b28a:	bd38      	pop	{r3, r4, r5, pc}
    tmpcr1 |= Structure->CounterMode;
 800b28c:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b28e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b292:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b294:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b29a:	430b      	orrs	r3, r1
 800b29c:	e7d5      	b.n	800b24a <HAL_TIM_PWM_Init+0x3a>
    htim->Lock = HAL_UNLOCKED;
 800b29e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800b2a2:	f7ff ffb3 	bl	800b20c <HAL_TIM_PWM_MspInit>
 800b2a6:	e7bd      	b.n	800b224 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800b2a8:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b2aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b2ae:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2b0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b2b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b2b6:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b2b8:	69a1      	ldr	r1, [r4, #24]
 800b2ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2be:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800b2c0:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2c2:	68e3      	ldr	r3, [r4, #12]
 800b2c4:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b2c6:	6863      	ldr	r3, [r4, #4]
 800b2c8:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800b2ca:	6963      	ldr	r3, [r4, #20]
 800b2cc:	6313      	str	r3, [r2, #48]	; 0x30
 800b2ce:	e7c5      	b.n	800b25c <HAL_TIM_PWM_Init+0x4c>
    return HAL_ERROR;
 800b2d0:	2001      	movs	r0, #1
}
 800b2d2:	4770      	bx	lr
 800b2d4:	40012c00 	.word	0x40012c00

0800b2d8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 800b2d8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b2dc:	2b01      	cmp	r3, #1
 800b2de:	f000 80cb 	beq.w	800b478 <HAL_TIM_PWM_ConfigChannel+0x1a0>
 800b2e2:	2301      	movs	r3, #1
{
 800b2e4:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 800b2e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800b2ea:	2a0c      	cmp	r2, #12
 800b2ec:	d831      	bhi.n	800b352 <HAL_TIM_PWM_ConfigChannel+0x7a>
 800b2ee:	e8df f002 	tbb	[pc, r2]
 800b2f2:	3007      	.short	0x3007
 800b2f4:	30663030 	.word	0x30663030
 800b2f8:	30953030 	.word	0x30953030
 800b2fc:	3030      	.short	0x3030
 800b2fe:	36          	.byte	0x36
 800b2ff:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b300:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b302:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b304:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800b306:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b308:	f025 0501 	bic.w	r5, r5, #1
 800b30c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800b30e:	6a1a      	ldr	r2, [r3, #32]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b310:	4d73      	ldr	r5, [pc, #460]	; (800b4e0 <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 800b312:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800b316:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800b318:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b31c:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b320:	42ab      	cmp	r3, r5
  tmpccer |= OC_Config->OCPolarity;
 800b322:	ea42 0207 	orr.w	r2, r2, r7
  tmpccmrx |= OC_Config->OCMode;
 800b326:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b32a:	f000 80a7 	beq.w	800b47c <HAL_TIM_PWM_ConfigChannel+0x1a4>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b32e:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800b330:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800b334:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800b336:	635d      	str	r5, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b338:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b33a:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b33c:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b33e:	f044 0408 	orr.w	r4, r4, #8
 800b342:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b344:	6999      	ldr	r1, [r3, #24]
 800b346:	f021 0104 	bic.w	r1, r1, #4
 800b34a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b34c:	699a      	ldr	r2, [r3, #24]
 800b34e:	432a      	orrs	r2, r5
 800b350:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800b352:	2300      	movs	r3, #0
 800b354:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800b358:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800b35a:	4618      	mov	r0, r3
}
 800b35c:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b35e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b360:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b362:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b364:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b366:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800b36a:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800b36c:	6a1a      	ldr	r2, [r3, #32]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b36e:	4d5c      	ldr	r5, [pc, #368]	; (800b4e0 <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 800b370:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800b374:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800b376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b37a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b37e:	42ab      	cmp	r3, r5
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b380:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b384:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b388:	f000 8095 	beq.w	800b4b6 <HAL_TIM_PWM_ConfigChannel+0x1de>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b38c:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800b38e:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800b392:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800b394:	641d      	str	r5, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b396:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b398:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b39a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b39c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800b3a0:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b3a2:	69d9      	ldr	r1, [r3, #28]
 800b3a4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800b3a8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b3aa:	69da      	ldr	r2, [r3, #28]
 800b3ac:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800b3b0:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800b3b8:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800b3ba:	4618      	mov	r0, r3
}
 800b3bc:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b3be:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3c0:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3c2:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3c4:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3c6:	f025 0510 	bic.w	r5, r5, #16
 800b3ca:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800b3cc:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3ce:	4d44      	ldr	r5, [pc, #272]	; (800b4e0 <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 800b3d0:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800b3d4:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800b3d6:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3da:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3de:	42ab      	cmp	r3, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b3e0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3e4:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b3e8:	d056      	beq.n	800b498 <HAL_TIM_PWM_ConfigChannel+0x1c0>
  TIMx->CCR2 = OC_Config->Pulse;
 800b3ea:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800b3ec:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800b3f0:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800b3f2:	639d      	str	r5, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800b3f4:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b3f6:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b3f8:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b3fa:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 800b3fe:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b400:	6999      	ldr	r1, [r3, #24]
 800b402:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800b406:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b408:	699a      	ldr	r2, [r3, #24]
 800b40a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800b40e:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800b410:	2300      	movs	r3, #0
 800b412:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800b416:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800b418:	4618      	mov	r0, r3
}
 800b41a:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b41c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b41e:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b420:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 800b422:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b424:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800b428:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800b42a:	6a1a      	ldr	r2, [r3, #32]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b42c:	4d2c      	ldr	r5, [pc, #176]	; (800b4e0 <HAL_TIM_PWM_ConfigChannel+0x208>)
  tmpcr2 =  TIMx->CR2;
 800b42e:	f8d3 c004 	ldr.w	ip, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800b432:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800b434:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b438:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b43c:	42ab      	cmp	r3, r5
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b43e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800b442:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b446:	d03c      	beq.n	800b4c2 <HAL_TIM_PWM_ConfigChannel+0x1ea>
  TIMx->CCR3 = OC_Config->Pulse;
 800b448:	684d      	ldr	r5, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800b44a:	f8c3 c004 	str.w	ip, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800b44e:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800b450:	63dd      	str	r5, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800b452:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b454:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b456:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b458:	f044 0408 	orr.w	r4, r4, #8
 800b45c:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b45e:	69d9      	ldr	r1, [r3, #28]
 800b460:	f021 0104 	bic.w	r1, r1, #4
 800b464:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b466:	69da      	ldr	r2, [r3, #28]
 800b468:	432a      	orrs	r2, r5
 800b46a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800b46c:	2300      	movs	r3, #0
 800b46e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800b472:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800b474:	4618      	mov	r0, r3
}
 800b476:	4770      	bx	lr
  __HAL_LOCK(htim);
 800b478:	2002      	movs	r0, #2
}
 800b47a:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 800b47c:	68cf      	ldr	r7, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800b47e:	f022 0208 	bic.w	r2, r2, #8
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b482:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    tmpccer |= OC_Config->OCNPolarity;
 800b486:	433a      	orrs	r2, r7
    tmpcr2 |= OC_Config->OCNIdleState;
 800b488:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800b48c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800b48e:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800b492:	ea45 0c0c 	orr.w	ip, r5, ip
 800b496:	e74a      	b.n	800b32e <HAL_TIM_PWM_ConfigChannel+0x56>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b498:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800b49a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b49e:	f42c 6c40 	bic.w	ip, ip, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b4a2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4a6:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
 800b4aa:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 800b4ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b4b0:	ea4c 0c85 	orr.w	ip, ip, r5, lsl #2
 800b4b4:	e799      	b.n	800b3ea <HAL_TIM_PWM_ConfigChannel+0x112>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b4b6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b4b8:	f42c 4c80 	bic.w	ip, ip, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b4bc:	ea4c 1c85 	orr.w	ip, ip, r5, lsl #6
 800b4c0:	e764      	b.n	800b38c <HAL_TIM_PWM_ConfigChannel+0xb4>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4c2:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800b4c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b4c8:	f42c 5c40 	bic.w	ip, ip, #12288	; 0x3000
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b4cc:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b4d0:	e9d1 7505 	ldrd	r7, r5, [r1, #20]
 800b4d4:	433d      	orrs	r5, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 800b4d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b4da:	ea4c 1c05 	orr.w	ip, ip, r5, lsl #4
 800b4de:	e7b3      	b.n	800b448 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b4e0:	40012c00 	.word	0x40012c00

0800b4e4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800b4e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d074      	beq.n	800b5d6 <HAL_TIM_ConfigClockSource+0xf2>
{
 800b4ec:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 800b4ee:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 800b4f0:	2401      	movs	r4, #1
  tmpsmcr = htim->Instance->SMCR;
 800b4f2:	6802      	ldr	r2, [r0, #0]
  __HAL_LOCK(htim);
 800b4f4:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800b4f8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800b4fc:	6894      	ldr	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800b4fe:	680b      	ldr	r3, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b500:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 800b504:	f024 0477 	bic.w	r4, r4, #119	; 0x77
  switch (sClockSourceConfig->ClockSource)
 800b508:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800b50a:	6094      	str	r4, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800b50c:	d065      	beq.n	800b5da <HAL_TIM_ConfigClockSource+0xf6>
 800b50e:	d831      	bhi.n	800b574 <HAL_TIM_ConfigClockSource+0x90>
 800b510:	2b40      	cmp	r3, #64	; 0x40
 800b512:	d048      	beq.n	800b5a6 <HAL_TIM_ConfigClockSource+0xc2>
 800b514:	d921      	bls.n	800b55a <HAL_TIM_ConfigClockSource+0x76>
 800b516:	2b50      	cmp	r3, #80	; 0x50
 800b518:	d116      	bne.n	800b548 <HAL_TIM_ConfigClockSource+0x64>
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b51a:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b51c:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b51e:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b520:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b524:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b526:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b528:	6993      	ldr	r3, [r2, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b52a:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b52e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b532:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800b536:	4321      	orrs	r1, r4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b538:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800b53a:	6211      	str	r1, [r2, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b53c:	6893      	ldr	r3, [r2, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b53e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b542:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b546:	6093      	str	r3, [r2, #8]
  __HAL_UNLOCK(htim);
 800b548:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800b54a:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800b54c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800b550:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
}
 800b554:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800b556:	4618      	mov	r0, r3
}
 800b558:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 800b55a:	2b20      	cmp	r3, #32
 800b55c:	d002      	beq.n	800b564 <HAL_TIM_ConfigClockSource+0x80>
 800b55e:	d91e      	bls.n	800b59e <HAL_TIM_ConfigClockSource+0xba>
 800b560:	2b30      	cmp	r3, #48	; 0x30
 800b562:	d1f1      	bne.n	800b548 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr = TIMx->SMCR;
 800b564:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b566:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b56a:	430b      	orrs	r3, r1
 800b56c:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800b570:	6093      	str	r3, [r2, #8]
}
 800b572:	e7e9      	b.n	800b548 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800b574:	2b70      	cmp	r3, #112	; 0x70
 800b576:	d049      	beq.n	800b60c <HAL_TIM_ConfigClockSource+0x128>
 800b578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b57c:	d1e4      	bne.n	800b548 <HAL_TIM_ConfigClockSource+0x64>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b57e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
 800b582:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 800b584:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b586:	432b      	orrs	r3, r5
 800b588:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b58c:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b590:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b592:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b594:	6893      	ldr	r3, [r2, #8]
 800b596:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b59a:	6093      	str	r3, [r2, #8]
      break;
 800b59c:	e7d4      	b.n	800b548 <HAL_TIM_ConfigClockSource+0x64>
  switch (sClockSourceConfig->ClockSource)
 800b59e:	f033 0110 	bics.w	r1, r3, #16
 800b5a2:	d1d1      	bne.n	800b548 <HAL_TIM_ConfigClockSource+0x64>
 800b5a4:	e7de      	b.n	800b564 <HAL_TIM_ConfigClockSource+0x80>
  tmpccer = TIMx->CCER;
 800b5a6:	6a15      	ldr	r5, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5a8:	6a16      	ldr	r6, [r2, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5aa:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5ac:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b5b0:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b5b2:	6216      	str	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5b4:	6993      	ldr	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b5b6:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b5ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b5be:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 800b5c2:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 800b5c4:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800b5c6:	6211      	str	r1, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800b5c8:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b5ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b5ce:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800b5d2:	6093      	str	r3, [r2, #8]
}
 800b5d4:	e7b8      	b.n	800b548 <HAL_TIM_ConfigClockSource+0x64>
  __HAL_LOCK(htim);
 800b5d6:	2002      	movs	r0, #2
}
 800b5d8:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5da:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5dc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5de:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b5e2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5e4:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b5e6:	6991      	ldr	r1, [r2, #24]
  tmpccer = TIMx->CCER;
 800b5e8:	6a13      	ldr	r3, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b5ea:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b5ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800b5f2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b5f6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800b5fa:	6191      	str	r1, [r2, #24]
  TIMx->CCER = tmpccer;
 800b5fc:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 800b5fe:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b600:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b604:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800b608:	6093      	str	r3, [r2, #8]
}
 800b60a:	e79d      	b.n	800b548 <HAL_TIM_ConfigClockSource+0x64>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b60c:	68cc      	ldr	r4, [r1, #12]
 800b60e:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800b612:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b614:	432b      	orrs	r3, r5
 800b616:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b61a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b61e:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800b620:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800b622:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b624:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800b628:	6093      	str	r3, [r2, #8]
      break;
 800b62a:	e78d      	b.n	800b548 <HAL_TIM_ConfigClockSource+0x64>

0800b62c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 800b62c:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800b630:	2a01      	cmp	r2, #1
 800b632:	d049      	beq.n	800b6c8 <HAL_TIM_SlaveConfigSynchro+0x9c>
 800b634:	4603      	mov	r3, r0
  htim->State = HAL_TIM_STATE_BUSY;
 800b636:	2202      	movs	r2, #2
  __HAL_LOCK(htim);
 800b638:	2001      	movs	r0, #1
{
 800b63a:	b4f0      	push	{r4, r5, r6, r7}
  tmpsmcr = htim->Instance->SMCR;
 800b63c:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(htim);
 800b63e:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800b642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800b646:	68a2      	ldr	r2, [r4, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b648:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 800b64a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b64e:	680e      	ldr	r6, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b650:	432a      	orrs	r2, r5
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b652:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b656:	4332      	orrs	r2, r6
  switch (sSlaveConfig->InputTrigger)
 800b658:	2d60      	cmp	r5, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 800b65a:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 800b65c:	d04d      	beq.n	800b6fa <HAL_TIM_SlaveConfigSynchro+0xce>
 800b65e:	d825      	bhi.n	800b6ac <HAL_TIM_SlaveConfigSynchro+0x80>
 800b660:	2d40      	cmp	r5, #64	; 0x40
 800b662:	d033      	beq.n	800b6cc <HAL_TIM_SlaveConfigSynchro+0xa0>
 800b664:	2d50      	cmp	r5, #80	; 0x50
 800b666:	d110      	bne.n	800b68a <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpccer = TIMx->CCER;
 800b668:	6a25      	ldr	r5, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b66a:	6a26      	ldr	r6, [r4, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b66c:	6888      	ldr	r0, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b66e:	f026 0601 	bic.w	r6, r6, #1
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b672:	690f      	ldr	r7, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b674:	6226      	str	r6, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b676:	69a2      	ldr	r2, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b678:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b67c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 800b680:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b682:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800b686:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 800b688:	6221      	str	r1, [r4, #32]
  htim->State = HAL_TIM_STATE_READY;
 800b68a:	2501      	movs	r5, #1
  __HAL_UNLOCK(htim);
 800b68c:	2100      	movs	r1, #0
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b68e:	68e2      	ldr	r2, [r4, #12]
  return HAL_OK;
 800b690:	4608      	mov	r0, r1
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800b692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b696:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800b698:	68e2      	ldr	r2, [r4, #12]
 800b69a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b69e:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 800b6a0:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800b6a4:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
}
 800b6a8:	bcf0      	pop	{r4, r5, r6, r7}
 800b6aa:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800b6ac:	2d70      	cmp	r5, #112	; 0x70
 800b6ae:	d1ec      	bne.n	800b68a <HAL_TIM_SlaveConfigSynchro+0x5e>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6b0:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
 800b6b4:	6908      	ldr	r0, [r1, #16]
  tmpsmcr = TIMx->SMCR;
 800b6b6:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6b8:	432a      	orrs	r2, r5
 800b6ba:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b6be:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b6c2:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 800b6c4:	60a2      	str	r2, [r4, #8]
 800b6c6:	e7e0      	b.n	800b68a <HAL_TIM_SlaveConfigSynchro+0x5e>
  __HAL_LOCK(htim);
 800b6c8:	2002      	movs	r0, #2
}
 800b6ca:	4770      	bx	lr
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b6cc:	2e05      	cmp	r6, #5
 800b6ce:	d00d      	beq.n	800b6ec <HAL_TIM_SlaveConfigSynchro+0xc0>
      tmpccer = htim->Instance->CCER;
 800b6d0:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b6d2:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b6d4:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b6d6:	f020 0001 	bic.w	r0, r0, #1
 800b6da:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b6dc:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b6de:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b6e2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800b6e6:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 800b6e8:	6225      	str	r5, [r4, #32]
      break;
 800b6ea:	e7ce      	b.n	800b68a <HAL_TIM_SlaveConfigSynchro+0x5e>
    __HAL_UNLOCK(htim);
 800b6ec:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 800b6ee:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800b6f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800b6f6:	bcf0      	pop	{r4, r5, r6, r7}
 800b6f8:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6fa:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b6fc:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b6fe:	f020 0010 	bic.w	r0, r0, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b702:	690e      	ldr	r6, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b704:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b706:	69a1      	ldr	r1, [r4, #24]
  tmpccer = TIMx->CCER;
 800b708:	6a22      	ldr	r2, [r4, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b70a:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b70e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b712:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800b716:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800b71a:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 800b71c:	6222      	str	r2, [r4, #32]
 800b71e:	e7b4      	b.n	800b68a <HAL_TIM_SlaveConfigSynchro+0x5e>

0800b720 <HAL_TIM_OC_DelayElapsedCallback>:
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop

0800b724 <HAL_TIM_IC_CaptureCallback>:
 800b724:	4770      	bx	lr
 800b726:	bf00      	nop

0800b728 <HAL_TIM_PWM_PulseFinishedCallback>:
 800b728:	4770      	bx	lr
 800b72a:	bf00      	nop

0800b72c <HAL_TIM_TriggerCallback>:
 800b72c:	4770      	bx	lr
 800b72e:	bf00      	nop

0800b730 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b730:	6803      	ldr	r3, [r0, #0]
{
 800b732:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b734:	691a      	ldr	r2, [r3, #16]
{
 800b736:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b738:	0791      	lsls	r1, r2, #30
 800b73a:	d502      	bpl.n	800b742 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b73c:	68da      	ldr	r2, [r3, #12]
 800b73e:	0792      	lsls	r2, r2, #30
 800b740:	d45f      	bmi.n	800b802 <HAL_TIM_IRQHandler+0xd2>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b742:	691a      	ldr	r2, [r3, #16]
 800b744:	0750      	lsls	r0, r2, #29
 800b746:	d502      	bpl.n	800b74e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b748:	68da      	ldr	r2, [r3, #12]
 800b74a:	0751      	lsls	r1, r2, #29
 800b74c:	d446      	bmi.n	800b7dc <HAL_TIM_IRQHandler+0xac>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b74e:	691a      	ldr	r2, [r3, #16]
 800b750:	0712      	lsls	r2, r2, #28
 800b752:	d502      	bpl.n	800b75a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b754:	68da      	ldr	r2, [r3, #12]
 800b756:	0710      	lsls	r0, r2, #28
 800b758:	d42e      	bmi.n	800b7b8 <HAL_TIM_IRQHandler+0x88>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b75a:	691a      	ldr	r2, [r3, #16]
 800b75c:	06d2      	lsls	r2, r2, #27
 800b75e:	d502      	bpl.n	800b766 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b760:	68da      	ldr	r2, [r3, #12]
 800b762:	06d0      	lsls	r0, r2, #27
 800b764:	d418      	bmi.n	800b798 <HAL_TIM_IRQHandler+0x68>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b766:	691a      	ldr	r2, [r3, #16]
 800b768:	07d1      	lsls	r1, r2, #31
 800b76a:	d502      	bpl.n	800b772 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b76c:	68da      	ldr	r2, [r3, #12]
 800b76e:	07d2      	lsls	r2, r2, #31
 800b770:	d45d      	bmi.n	800b82e <HAL_TIM_IRQHandler+0xfe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b772:	691a      	ldr	r2, [r3, #16]
 800b774:	0610      	lsls	r0, r2, #24
 800b776:	d502      	bpl.n	800b77e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b778:	68da      	ldr	r2, [r3, #12]
 800b77a:	0611      	lsls	r1, r2, #24
 800b77c:	d45f      	bmi.n	800b83e <HAL_TIM_IRQHandler+0x10e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b77e:	691a      	ldr	r2, [r3, #16]
 800b780:	0652      	lsls	r2, r2, #25
 800b782:	d502      	bpl.n	800b78a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b784:	68da      	ldr	r2, [r3, #12]
 800b786:	0650      	lsls	r0, r2, #25
 800b788:	d461      	bmi.n	800b84e <HAL_TIM_IRQHandler+0x11e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b78a:	691a      	ldr	r2, [r3, #16]
 800b78c:	0691      	lsls	r1, r2, #26
 800b78e:	d502      	bpl.n	800b796 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b790:	68da      	ldr	r2, [r3, #12]
 800b792:	0692      	lsls	r2, r2, #26
 800b794:	d443      	bmi.n	800b81e <HAL_TIM_IRQHandler+0xee>
}
 800b796:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b798:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b79c:	2208      	movs	r2, #8
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b79e:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b7a0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7a2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800b7a4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b7a6:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b7aa:	d064      	beq.n	800b876 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800b7ac:	f7ff ffba 	bl	800b724 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	6823      	ldr	r3, [r4, #0]
 800b7b4:	7722      	strb	r2, [r4, #28]
 800b7b6:	e7d6      	b.n	800b766 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b7b8:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7bc:	2204      	movs	r2, #4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b7be:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7c0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7c2:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800b7c4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7c6:	0799      	lsls	r1, r3, #30
 800b7c8:	d152      	bne.n	800b870 <HAL_TIM_IRQHandler+0x140>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7ca:	f7ff ffa9 	bl	800b720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	f7ff ffaa 	bl	800b728 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	7722      	strb	r2, [r4, #28]
 800b7da:	e7be      	b.n	800b75a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b7dc:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b7e0:	2202      	movs	r2, #2
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b7e2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b7e4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b7e6:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800b7e8:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b7ea:	f413 7f40 	tst.w	r3, #768	; 0x300
 800b7ee:	d13c      	bne.n	800b86a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7f0:	f7ff ff96 	bl	800b720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7f4:	4620      	mov	r0, r4
 800b7f6:	f7ff ff97 	bl	800b728 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	6823      	ldr	r3, [r4, #0]
 800b7fe:	7722      	strb	r2, [r4, #28]
 800b800:	e7a5      	b.n	800b74e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b802:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b806:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b808:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b80a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b80c:	699b      	ldr	r3, [r3, #24]
 800b80e:	079b      	lsls	r3, r3, #30
 800b810:	d025      	beq.n	800b85e <HAL_TIM_IRQHandler+0x12e>
          HAL_TIM_IC_CaptureCallback(htim);
 800b812:	f7ff ff87 	bl	800b724 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b816:	2200      	movs	r2, #0
 800b818:	6823      	ldr	r3, [r4, #0]
 800b81a:	7722      	strb	r2, [r4, #28]
 800b81c:	e791      	b.n	800b742 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b81e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800b822:	4620      	mov	r0, r4
}
 800b824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b828:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 800b82a:	f000 b987 	b.w	800bb3c <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b82e:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800b832:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b834:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b836:	f7fc fe93 	bl	8008560 <HAL_TIM_PeriodElapsedCallback>
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	e799      	b.n	800b772 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b83e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800b842:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b844:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b846:	f000 f97b 	bl	800bb40 <HAL_TIMEx_BreakCallback>
 800b84a:	6823      	ldr	r3, [r4, #0]
 800b84c:	e797      	b.n	800b77e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b84e:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800b852:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b854:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b856:	f7ff ff69 	bl	800b72c <HAL_TIM_TriggerCallback>
 800b85a:	6823      	ldr	r3, [r4, #0]
 800b85c:	e795      	b.n	800b78a <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b85e:	f7ff ff5f 	bl	800b720 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b862:	4620      	mov	r0, r4
 800b864:	f7ff ff60 	bl	800b728 <HAL_TIM_PWM_PulseFinishedCallback>
 800b868:	e7d5      	b.n	800b816 <HAL_TIM_IRQHandler+0xe6>
        HAL_TIM_IC_CaptureCallback(htim);
 800b86a:	f7ff ff5b 	bl	800b724 <HAL_TIM_IC_CaptureCallback>
 800b86e:	e7c4      	b.n	800b7fa <HAL_TIM_IRQHandler+0xca>
        HAL_TIM_IC_CaptureCallback(htim);
 800b870:	f7ff ff58 	bl	800b724 <HAL_TIM_IC_CaptureCallback>
 800b874:	e7ae      	b.n	800b7d4 <HAL_TIM_IRQHandler+0xa4>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b876:	f7ff ff53 	bl	800b720 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b87a:	4620      	mov	r0, r4
 800b87c:	f7ff ff54 	bl	800b728 <HAL_TIM_PWM_PulseFinishedCallback>
 800b880:	e796      	b.n	800b7b0 <HAL_TIM_IRQHandler+0x80>
 800b882:	bf00      	nop

0800b884 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b884:	4a1d      	ldr	r2, [pc, #116]	; (800b8fc <TIM_Base_SetConfig+0x78>)
  tmpcr1 = TIMx->CR1;
 800b886:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b888:	4290      	cmp	r0, r2
 800b88a:	d021      	beq.n	800b8d0 <TIM_Base_SetConfig+0x4c>
 800b88c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 800b890:	b430      	push	{r4, r5}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b892:	d014      	beq.n	800b8be <TIM_Base_SetConfig+0x3a>
 800b894:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800b898:	4290      	cmp	r0, r2
 800b89a:	d010      	beq.n	800b8be <TIM_Base_SetConfig+0x3a>
 800b89c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8a0:	4290      	cmp	r0, r2
 800b8a2:	d00c      	beq.n	800b8be <TIM_Base_SetConfig+0x3a>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8a4:	694d      	ldr	r5, [r1, #20]
 800b8a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8aa:	432b      	orrs	r3, r5
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8ac:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800b8ae:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800b8b0:	6003      	str	r3, [r0, #0]
  TIMx->EGR = TIM_EGR_UG;
 800b8b2:	2301      	movs	r3, #1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8b4:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b8b6:	6282      	str	r2, [r0, #40]	; 0x28
}
 800b8b8:	bc30      	pop	{r4, r5}
  TIMx->EGR = TIM_EGR_UG;
 800b8ba:	6143      	str	r3, [r0, #20]
}
 800b8bc:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800b8be:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b8c4:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8c6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	e7e9      	b.n	800b8a4 <TIM_Base_SetConfig+0x20>
    tmpcr1 |= Structure->CounterMode;
 800b8d0:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b8d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800b8d6:	4313      	orrs	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8d8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800b8da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b8de:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b8e0:	694a      	ldr	r2, [r1, #20]
 800b8e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8e6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800b8e8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b8ea:	688b      	ldr	r3, [r1, #8]
 800b8ec:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800b8ee:	680b      	ldr	r3, [r1, #0]
 800b8f0:	6283      	str	r3, [r0, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800b8f2:	690b      	ldr	r3, [r1, #16]
 800b8f4:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	6143      	str	r3, [r0, #20]
 800b8fa:	4770      	bx	lr
 800b8fc:	40012c00 	.word	0x40012c00

0800b900 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b900:	6a02      	ldr	r2, [r0, #32]
{
 800b902:	b4f0      	push	{r4, r5, r6, r7}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b904:	f022 0210 	bic.w	r2, r2, #16
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b908:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b90a:	6202      	str	r2, [r0, #32]
  tmpccer = TIMx->CCER;
 800b90c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800b90e:	6847      	ldr	r7, [r0, #4]
  tmpccer &= ~TIM_CCER_CC2P;
 800b910:	f023 0320 	bic.w	r3, r3, #32
  tmpccmrx = TIMx->CCMR1;
 800b914:	6982      	ldr	r2, [r0, #24]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b916:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b91a:	4d0f      	ldr	r5, [pc, #60]	; (800b958 <TIM_OC2_SetConfig+0x58>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b91c:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b91e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b922:	42a8      	cmp	r0, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b924:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b928:	d006      	beq.n	800b938 <TIM_OC2_SetConfig+0x38>
  TIMx->CCR2 = OC_Config->Pulse;
 800b92a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800b92c:	6047      	str	r7, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800b92e:	6182      	str	r2, [r0, #24]
}
 800b930:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->CCR2 = OC_Config->Pulse;
 800b932:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800b934:	6203      	str	r3, [r0, #32]
}
 800b936:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b938:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800b93a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b93e:	f427 6740 	bic.w	r7, r7, #3072	; 0xc00
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b942:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b946:	e9d1 4505 	ldrd	r4, r5, [r1, #20]
 800b94a:	432c      	orrs	r4, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800b94c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b950:	ea47 0784 	orr.w	r7, r7, r4, lsl #2
 800b954:	e7e9      	b.n	800b92a <TIM_OC2_SetConfig+0x2a>
 800b956:	bf00      	nop
 800b958:	40012c00 	.word	0x40012c00

0800b95c <TIM_TI1_SetConfig>:
{
 800b95c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b95e:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b960:	4e13      	ldr	r6, [pc, #76]	; (800b9b0 <TIM_TI1_SetConfig+0x54>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b962:	f024 0401 	bic.w	r4, r4, #1
 800b966:	6204      	str	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b968:	42b0      	cmp	r0, r6
  tmpccmr1 = TIMx->CCMR1;
 800b96a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800b96c:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800b96e:	d00d      	beq.n	800b98c <TIM_TI1_SetConfig+0x30>
 800b970:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800b974:	d00a      	beq.n	800b98c <TIM_TI1_SetConfig+0x30>
 800b976:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800b97a:	42b0      	cmp	r0, r6
 800b97c:	d006      	beq.n	800b98c <TIM_TI1_SetConfig+0x30>
 800b97e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800b982:	42b0      	cmp	r0, r6
 800b984:	d002      	beq.n	800b98c <TIM_TI1_SetConfig+0x30>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800b986:	f044 0201 	orr.w	r2, r4, #1
 800b98a:	e002      	b.n	800b992 <TIM_TI1_SetConfig+0x36>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800b98c:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800b990:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b992:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b994:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b998:	b2db      	uxtb	r3, r3
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b99a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800b99e:	f001 010a 	and.w	r1, r1, #10
 800b9a2:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800b9a4:	4313      	orrs	r3, r2
  TIMx->CCMR1 = tmpccmr1;
 800b9a6:	6183      	str	r3, [r0, #24]
}
 800b9a8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 800b9aa:	6201      	str	r1, [r0, #32]
}
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	40012c00 	.word	0x40012c00

0800b9b4 <HAL_TIMEx_HallSensor_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_HallSensor_MspInit could be implemented in the user file
   */
}
 800b9b4:	4770      	bx	lr
 800b9b6:	bf00      	nop

0800b9b8 <HAL_TIMEx_HallSensor_Init>:
  if (htim == NULL)
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	d061      	beq.n	800ba80 <HAL_TIMEx_HallSensor_Init+0xc8>
{
 800b9bc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800b9be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800b9c2:	460e      	mov	r6, r1
 800b9c4:	4604      	mov	r4, r0
{
 800b9c6:	b089      	sub	sp, #36	; 0x24
  if (htim->State == HAL_TIM_STATE_RESET)
 800b9c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d052      	beq.n	800ba76 <HAL_TIMEx_HallSensor_Init+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 800b9d0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9d2:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800b9d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b9d8:	f851 0b04 	ldr.w	r0, [r1], #4
 800b9dc:	f7ff ff52 	bl	800b884 <TIM_Base_SetConfig>
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 800b9e0:	68b3      	ldr	r3, [r6, #8]
 800b9e2:	6831      	ldr	r1, [r6, #0]
 800b9e4:	6820      	ldr	r0, [r4, #0]
 800b9e6:	2203      	movs	r2, #3
 800b9e8:	f7ff ffb8 	bl	800b95c <TIM_TI1_SetConfig>
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800b9ec:	2500      	movs	r5, #0
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800b9ee:	f04f 0c70 	mov.w	ip, #112	; 0x70
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b9f2:	6820      	ldr	r0, [r4, #0]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800b9f4:	68f1      	ldr	r1, [r6, #12]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b9f6:	6982      	ldr	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800b9f8:	6877      	ldr	r7, [r6, #4]
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800b9fa:	f022 020c 	bic.w	r2, r2, #12
 800b9fe:	6182      	str	r2, [r0, #24]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800ba00:	6983      	ldr	r3, [r0, #24]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 800ba02:	f8cd c004 	str.w	ip, [sp, #4]
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 800ba06:	433b      	orrs	r3, r7
 800ba08:	6183      	str	r3, [r0, #24]
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 800ba0a:	6843      	ldr	r3, [r0, #4]
 800ba0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba10:	6043      	str	r3, [r0, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800ba12:	6883      	ldr	r3, [r0, #8]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 800ba14:	9102      	str	r1, [sp, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 800ba16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba1a:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800ba1c:	6883      	ldr	r3, [r0, #8]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800ba1e:	a901      	add	r1, sp, #4
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800ba20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba24:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800ba26:	6883      	ldr	r3, [r0, #8]
 800ba28:	f023 0307 	bic.w	r3, r3, #7
 800ba2c:	6083      	str	r3, [r0, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800ba2e:	6883      	ldr	r3, [r0, #8]
 800ba30:	f043 0304 	orr.w	r3, r3, #4
 800ba34:	6083      	str	r3, [r0, #8]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ba36:	e9cd 5505 	strd	r5, r5, [sp, #20]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ba3a:	e9cd 5503 	strd	r5, r5, [sp, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800ba3e:	9507      	str	r5, [sp, #28]
  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800ba40:	f7ff ff5e 	bl	800b900 <TIM_OC2_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba44:	2301      	movs	r3, #1
  return HAL_OK;
 800ba46:	4628      	mov	r0, r5
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800ba48:	6822      	ldr	r2, [r4, #0]
 800ba4a:	6851      	ldr	r1, [r2, #4]
 800ba4c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 800ba50:	6051      	str	r1, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800ba52:	6851      	ldr	r1, [r2, #4]
 800ba54:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 800ba58:	6051      	str	r1, [r2, #4]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba5a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ba5e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ba62:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ba66:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ba6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  htim->State = HAL_TIM_STATE_READY;
 800ba6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ba72:	b009      	add	sp, #36	; 0x24
 800ba74:	bdf0      	pop	{r4, r5, r6, r7, pc}
    htim->Lock = HAL_UNLOCKED;
 800ba76:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIMEx_HallSensor_MspInit(htim);
 800ba7a:	f7ff ff9b 	bl	800b9b4 <HAL_TIMEx_HallSensor_MspInit>
 800ba7e:	e7a7      	b.n	800b9d0 <HAL_TIMEx_HallSensor_Init+0x18>
    return HAL_ERROR;
 800ba80:	2001      	movs	r0, #1
}
 800ba82:	4770      	bx	lr

0800ba84 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d026      	beq.n	800bada <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba8c:	2202      	movs	r2, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba8e:	6803      	ldr	r3, [r0, #0]
{
 800ba90:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800ba92:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800ba96:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba98:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba9a:	4d11      	ldr	r5, [pc, #68]	; (800bae0 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba9c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800baa0:	4322      	orrs	r2, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baa2:	42ab      	cmp	r3, r5
  tmpsmcr = htim->Instance->SMCR;
 800baa4:	689c      	ldr	r4, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 800baa6:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800baa8:	d009      	beq.n	800babe <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800baaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baae:	d006      	beq.n	800babe <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800bab0:	4a0c      	ldr	r2, [pc, #48]	; (800bae4 <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d003      	beq.n	800babe <HAL_TIMEx_MasterConfigSynchronization+0x3a>
 800bab6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800baba:	4293      	cmp	r3, r2
 800babc:	d104      	bne.n	800bac8 <HAL_TIMEx_MasterConfigSynchronization+0x44>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800babe:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bac0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bac4:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bac6:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800bac8:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800baca:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800bacc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 800bad0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

  return HAL_OK;
}
 800bad4:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800bad6:	4618      	mov	r0, r3
}
 800bad8:	4770      	bx	lr
  __HAL_LOCK(htim);
 800bada:	2002      	movs	r0, #2
}
 800badc:	4770      	bx	lr
 800bade:	bf00      	nop
 800bae0:	40012c00 	.word	0x40012c00
 800bae4:	40000400 	.word	0x40000400

0800bae8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800bae8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800baec:	2b01      	cmp	r3, #1
 800baee:	d022      	beq.n	800bb36 <HAL_TIMEx_ConfigBreakDeadTime+0x4e>
 800baf0:	4602      	mov	r2, r0
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800baf2:	e9d1 0302 	ldrd	r0, r3, [r1, #8]
{
 800baf6:	b410      	push	{r4}


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 800baf8:	2400      	movs	r4, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bafa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bafe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bb00:	6848      	ldr	r0, [r1, #4]
 800bb02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bb06:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bb08:	6808      	ldr	r0, [r1, #0]
 800bb0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bb0e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bb10:	6908      	ldr	r0, [r1, #16]
 800bb12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb16:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bb18:	6948      	ldr	r0, [r1, #20]
 800bb1a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bb1e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb20:	69c8      	ldr	r0, [r1, #28]
 800bb22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  htim->Instance->BDTR = tmpbdtr;
 800bb26:	6811      	ldr	r1, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb28:	4303      	orrs	r3, r0
  htim->Instance->BDTR = tmpbdtr;
 800bb2a:	644b      	str	r3, [r1, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800bb2c:	f882 403c 	strb.w	r4, [r2, #60]	; 0x3c

  return HAL_OK;
 800bb30:	4620      	mov	r0, r4
}
 800bb32:	bc10      	pop	{r4}
 800bb34:	4770      	bx	lr
  __HAL_LOCK(htim);
 800bb36:	2002      	movs	r0, #2
}
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop

0800bb3c <HAL_TIMEx_CommutCallback>:
 800bb3c:	4770      	bx	lr
 800bb3e:	bf00      	nop

0800bb40 <HAL_TIMEx_BreakCallback>:
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop

0800bb44 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb44:	2800      	cmp	r0, #0
 800bb46:	d061      	beq.n	800bc0c <HAL_UART_Init+0xc8>
{
 800bb48:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bb4a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bb4e:	4604      	mov	r4, r0
 800bb50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d051      	beq.n	800bbfc <HAL_UART_Init+0xb8>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb58:	2224      	movs	r2, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb5a:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800bb5c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800bb60:	68da      	ldr	r2, [r3, #12]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb62:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 800bb64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb68:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb6a:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bb6c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb6e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800bb72:	4301      	orrs	r1, r0
 800bb74:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800bb76:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bb78:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 800bb7c:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bb80:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800bb82:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bb86:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800bb88:	430a      	orrs	r2, r1
 800bb8a:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb8c:	695a      	ldr	r2, [r3, #20]
 800bb8e:	69a0      	ldr	r0, [r4, #24]


  if(huart->Instance == USART1)
 800bb90:	491f      	ldr	r1, [pc, #124]	; (800bc10 <HAL_UART_Init+0xcc>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb92:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bb96:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 800bb98:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bb9a:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 800bb9c:	d033      	beq.n	800bc06 <HAL_UART_Init+0xc2>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800bb9e:	f7ff f9e5 	bl	800af6c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bba2:	6863      	ldr	r3, [r4, #4]
 800bba4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800bba8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800bbac:	009b      	lsls	r3, r3, #2
 800bbae:	fbb0 f3f3 	udiv	r3, r0, r3
 800bbb2:	2264      	movs	r2, #100	; 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbb4:	2600      	movs	r6, #0
  huart->gState = HAL_UART_STATE_READY;
 800bbb6:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bbb8:	4816      	ldr	r0, [pc, #88]	; (800bc14 <HAL_UART_Init+0xd0>)
 800bbba:	fba0 c103 	umull	ip, r1, r0, r3
 800bbbe:	0949      	lsrs	r1, r1, #5
 800bbc0:	fb02 3311 	mls	r3, r2, r1, r3
 800bbc4:	011b      	lsls	r3, r3, #4
 800bbc6:	3332      	adds	r3, #50	; 0x32
 800bbc8:	fba0 2303 	umull	r2, r3, r0, r3
 800bbcc:	0109      	lsls	r1, r1, #4
 800bbce:	6822      	ldr	r2, [r4, #0]
 800bbd0:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 800bbd4:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbd6:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 800bbd8:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bbda:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800bbde:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bbe0:	6953      	ldr	r3, [r2, #20]
 800bbe2:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800bbe6:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800bbe8:	68d3      	ldr	r3, [r2, #12]
 800bbea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bbee:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbf0:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bbf2:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bbf6:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 800bbfa:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800bbfc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800bc00:	f7fd fd2e 	bl	8009660 <HAL_UART_MspInit>
 800bc04:	e7a8      	b.n	800bb58 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 800bc06:	f7ff f9c1 	bl	800af8c <HAL_RCC_GetPCLK2Freq>
 800bc0a:	e7ca      	b.n	800bba2 <HAL_UART_Init+0x5e>
    return HAL_ERROR;
 800bc0c:	2001      	movs	r0, #1
}
 800bc0e:	4770      	bx	lr
 800bc10:	40013800 	.word	0x40013800
 800bc14:	51eb851f 	.word	0x51eb851f

0800bc18 <HAL_HalfDuplex_Init>:
  if (huart == NULL)
 800bc18:	2800      	cmp	r0, #0
 800bc1a:	d065      	beq.n	800bce8 <HAL_HalfDuplex_Init+0xd0>
{
 800bc1c:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800bc1e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800bc22:	4604      	mov	r4, r0
 800bc24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d055      	beq.n	800bcd8 <HAL_HalfDuplex_Init+0xc0>
  huart->gState = HAL_UART_STATE_BUSY;
 800bc2c:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800bc2e:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800bc30:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 800bc34:	68da      	ldr	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc36:	68e0      	ldr	r0, [r4, #12]
  __HAL_UART_DISABLE(huart);
 800bc38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bc3c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc3e:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bc40:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bc42:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 800bc46:	4301      	orrs	r1, r0
 800bc48:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800bc4a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bc4c:	e9d4 5004 	ldrd	r5, r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR1,
 800bc50:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bc54:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 800bc56:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800bc5a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800bc5c:	430a      	orrs	r2, r1
 800bc5e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc60:	695a      	ldr	r2, [r3, #20]
 800bc62:	69a0      	ldr	r0, [r4, #24]
  if(huart->Instance == USART1)
 800bc64:	4921      	ldr	r1, [pc, #132]	; (800bcec <HAL_HalfDuplex_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc66:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800bc6a:	4302      	orrs	r2, r0
  if(huart->Instance == USART1)
 800bc6c:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800bc6e:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 800bc70:	d037      	beq.n	800bce2 <HAL_HalfDuplex_Init+0xca>
    pclk = HAL_RCC_GetPCLK1Freq();
 800bc72:	f7ff f97b 	bl	800af6c <HAL_RCC_GetPCLK1Freq>
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc76:	6863      	ldr	r3, [r4, #4]
 800bc78:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800bc7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800bc80:	009b      	lsls	r3, r3, #2
 800bc82:	fbb0 f3f3 	udiv	r3, r0, r3
 800bc86:	2264      	movs	r2, #100	; 0x64
 800bc88:	4819      	ldr	r0, [pc, #100]	; (800bcf0 <HAL_HalfDuplex_Init+0xd8>)
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc8a:	2600      	movs	r6, #0
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc8c:	fba0 5103 	umull	r5, r1, r0, r3
  huart->gState = HAL_UART_STATE_READY;
 800bc90:	2520      	movs	r5, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bc92:	0949      	lsrs	r1, r1, #5
 800bc94:	fb02 3311 	mls	r3, r2, r1, r3
 800bc98:	011b      	lsls	r3, r3, #4
 800bc9a:	3332      	adds	r3, #50	; 0x32
 800bc9c:	fba0 2303 	umull	r2, r3, r0, r3
 800bca0:	0109      	lsls	r1, r1, #4
 800bca2:	6822      	ldr	r2, [r4, #0]
 800bca4:	eb01 1353 	add.w	r3, r1, r3, lsr #5
 800bca8:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcaa:	6913      	ldr	r3, [r2, #16]
  return HAL_OK;
 800bcac:	4630      	mov	r0, r6
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bcae:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800bcb2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800bcb4:	6953      	ldr	r3, [r2, #20]
 800bcb6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800bcba:	6153      	str	r3, [r2, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800bcbc:	6953      	ldr	r3, [r2, #20]
 800bcbe:	f043 0308 	orr.w	r3, r3, #8
 800bcc2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 800bcc4:	68d3      	ldr	r3, [r2, #12]
 800bcc6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bcca:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bccc:	6426      	str	r6, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bcce:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bcd2:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
}
 800bcd6:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800bcd8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 800bcdc:	f7fd fcc0 	bl	8009660 <HAL_UART_MspInit>
 800bce0:	e7a4      	b.n	800bc2c <HAL_HalfDuplex_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 800bce2:	f7ff f953 	bl	800af8c <HAL_RCC_GetPCLK2Freq>
 800bce6:	e7c6      	b.n	800bc76 <HAL_HalfDuplex_Init+0x5e>
    return HAL_ERROR;
 800bce8:	2001      	movs	r0, #1
}
 800bcea:	4770      	bx	lr
 800bcec:	40013800 	.word	0x40013800
 800bcf0:	51eb851f 	.word	0x51eb851f

0800bcf4 <HAL_UART_Transmit_DMA>:
{
 800bcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcf6:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800bcf8:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
 800bcfc:	2820      	cmp	r0, #32
 800bcfe:	d12b      	bne.n	800bd58 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 800bd00:	b341      	cbz	r1, 800bd54 <HAL_UART_Transmit_DMA+0x60>
 800bd02:	b33a      	cbz	r2, 800bd54 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 800bd04:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800bd08:	2801      	cmp	r0, #1
 800bd0a:	d025      	beq.n	800bd58 <HAL_UART_Transmit_DMA+0x64>
 800bd0c:	2601      	movs	r6, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd0e:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd10:	2721      	movs	r7, #33	; 0x21
    huart->TxXferCount = Size;
 800bd12:	84e2      	strh	r2, [r4, #38]	; 0x26
    huart->TxXferSize = Size;
 800bd14:	84a2      	strh	r2, [r4, #36]	; 0x24
    __HAL_LOCK(huart);
 800bd16:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bd1a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800bd1c:	4613      	mov	r3, r2
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bd1e:	4e0f      	ldr	r6, [pc, #60]	; (800bd5c <HAL_UART_Transmit_DMA+0x68>)
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bd20:	4a0f      	ldr	r2, [pc, #60]	; (800bd60 <HAL_UART_Transmit_DMA+0x6c>)
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd22:	6425      	str	r5, [r4, #64]	; 0x40
    huart->pTxBuffPtr = pData;
 800bd24:	6221      	str	r1, [r4, #32]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd26:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bd2a:	6286      	str	r6, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800bd2c:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bd2e:	4e0d      	ldr	r6, [pc, #52]	; (800bd64 <HAL_UART_Transmit_DMA+0x70>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800bd30:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 800bd32:	6345      	str	r5, [r0, #52]	; 0x34
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800bd34:	6306      	str	r6, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800bd36:	3204      	adds	r2, #4
 800bd38:	f7fe fa78 	bl	800a22c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800bd3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bd40:	6823      	ldr	r3, [r4, #0]
    return HAL_OK;
 800bd42:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800bd44:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(huart);
 800bd46:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bd4a:	695a      	ldr	r2, [r3, #20]
 800bd4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800bd50:	615a      	str	r2, [r3, #20]
}
 800bd52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 800bd54:	2001      	movs	r0, #1
}
 800bd56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800bd58:	2002      	movs	r0, #2
}
 800bd5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd5c:	0800bdfd 	.word	0x0800bdfd
 800bd60:	0800be2d 	.word	0x0800be2d
 800bd64:	0800be3d 	.word	0x0800be3d

0800bd68 <HAL_UART_DMAStop>:
{
 800bd68:	b510      	push	{r4, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bd6a:	6803      	ldr	r3, [r0, #0]
{
 800bd6c:	4604      	mov	r4, r0
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bd6e:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bd70:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800bd74:	2a21      	cmp	r2, #33	; 0x21
 800bd76:	d006      	beq.n	800bd86 <HAL_UART_DMAStop+0x1e>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bd78:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bd7a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800bd7e:	2a22      	cmp	r2, #34	; 0x22
 800bd80:	d018      	beq.n	800bdb4 <HAL_UART_DMAStop+0x4c>
}
 800bd82:	2000      	movs	r0, #0
 800bd84:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bd86:	0609      	lsls	r1, r1, #24
 800bd88:	d5f6      	bpl.n	800bd78 <HAL_UART_DMAStop+0x10>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bd8a:	695a      	ldr	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 800bd8c:	6b40      	ldr	r0, [r0, #52]	; 0x34
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bd8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd92:	615a      	str	r2, [r3, #20]
    if (huart->hdmatx != NULL)
 800bd94:	b110      	cbz	r0, 800bd9c <HAL_UART_DMAStop+0x34>
      HAL_DMA_Abort(huart->hdmatx);
 800bd96:	f7fe fa8b 	bl	800a2b0 <HAL_DMA_Abort>
 800bd9a:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_READY;
 800bd9c:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bd9e:	68da      	ldr	r2, [r3, #12]
 800bda0:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800bda4:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800bda6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bdaa:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bdac:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800bdb0:	2a22      	cmp	r2, #34	; 0x22
 800bdb2:	d1e6      	bne.n	800bd82 <HAL_UART_DMAStop+0x1a>
 800bdb4:	064a      	lsls	r2, r1, #25
 800bdb6:	d5e4      	bpl.n	800bd82 <HAL_UART_DMAStop+0x1a>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdb8:	695a      	ldr	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 800bdba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdc0:	615a      	str	r2, [r3, #20]
    if (huart->hdmarx != NULL)
 800bdc2:	b110      	cbz	r0, 800bdca <HAL_UART_DMAStop+0x62>
      HAL_DMA_Abort(huart->hdmarx);
 800bdc4:	f7fe fa74 	bl	800a2b0 <HAL_DMA_Abort>
 800bdc8:	6823      	ldr	r3, [r4, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bdca:	68da      	ldr	r2, [r3, #12]
 800bdcc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800bdd0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdd2:	695a      	ldr	r2, [r3, #20]
 800bdd4:	f022 0201 	bic.w	r2, r2, #1
 800bdd8:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdda:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800bddc:	2a01      	cmp	r2, #1
 800bdde:	d103      	bne.n	800bde8 <HAL_UART_DMAStop+0x80>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bde0:	68da      	ldr	r2, [r3, #12]
 800bde2:	f022 0210 	bic.w	r2, r2, #16
 800bde6:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 800bde8:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdea:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800bdec:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
}
 800bdf0:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdf2:	6323      	str	r3, [r4, #48]	; 0x30
}
 800bdf4:	bd10      	pop	{r4, pc}
 800bdf6:	bf00      	nop

0800bdf8 <HAL_UART_TxCpltCallback>:
 800bdf8:	4770      	bx	lr
 800bdfa:	bf00      	nop

0800bdfc <UART_DMATransmitCplt>:
{
 800bdfc:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bdfe:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be00:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f013 0320 	ands.w	r3, r3, #32
 800be08:	d10a      	bne.n	800be20 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800be0a:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 800be0c:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800be0e:	6953      	ldr	r3, [r2, #20]
 800be10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be14:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800be16:	68d3      	ldr	r3, [r2, #12]
 800be18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be1c:	60d3      	str	r3, [r2, #12]
}
 800be1e:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 800be20:	f7ff ffea 	bl	800bdf8 <HAL_UART_TxCpltCallback>
}
 800be24:	bd08      	pop	{r3, pc}
 800be26:	bf00      	nop

0800be28 <HAL_UART_TxHalfCpltCallback>:
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop

0800be2c <UART_DMATxHalfCplt>:
{
 800be2c:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800be2e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800be30:	f7ff fffa 	bl	800be28 <HAL_UART_TxHalfCpltCallback>
}
 800be34:	bd08      	pop	{r3, pc}
 800be36:	bf00      	nop

0800be38 <HAL_UART_ErrorCallback>:
 800be38:	4770      	bx	lr
 800be3a:	bf00      	nop

0800be3c <UART_DMAError>:
{
 800be3c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be3e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800be40:	6803      	ldr	r3, [r0, #0]
 800be42:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800be44:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800be48:	2a21      	cmp	r2, #33	; 0x21
 800be4a:	d00b      	beq.n	800be64 <UART_DMAError+0x28>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be4c:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800be4e:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800be52:	2a22      	cmp	r2, #34	; 0x22
 800be54:	d016      	beq.n	800be84 <UART_DMAError+0x48>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800be56:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800be58:	f043 0310 	orr.w	r3, r3, #16
 800be5c:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 800be5e:	f7ff ffeb 	bl	800be38 <HAL_UART_ErrorCallback>
}
 800be62:	bd08      	pop	{r3, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800be64:	0609      	lsls	r1, r1, #24
 800be66:	d5f1      	bpl.n	800be4c <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 800be68:	2200      	movs	r2, #0
  huart->gState = HAL_UART_STATE_READY;
 800be6a:	2120      	movs	r1, #32
    huart->TxXferCount = 0x00U;
 800be6c:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800be6e:	68da      	ldr	r2, [r3, #12]
 800be70:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800be74:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800be76:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800be7a:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800be7c:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800be80:	2a22      	cmp	r2, #34	; 0x22
 800be82:	d1e8      	bne.n	800be56 <UART_DMAError+0x1a>
 800be84:	064a      	lsls	r2, r1, #25
 800be86:	d5e6      	bpl.n	800be56 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 800be88:	2200      	movs	r2, #0
 800be8a:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be8c:	68da      	ldr	r2, [r3, #12]
 800be8e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800be92:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be94:	695a      	ldr	r2, [r3, #20]
 800be96:	f022 0201 	bic.w	r2, r2, #1
 800be9a:	615a      	str	r2, [r3, #20]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be9c:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800be9e:	2a01      	cmp	r2, #1
 800bea0:	d103      	bne.n	800beaa <UART_DMAError+0x6e>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bea2:	68da      	ldr	r2, [r3, #12]
 800bea4:	f022 0210 	bic.w	r2, r2, #16
 800bea8:	60da      	str	r2, [r3, #12]
  huart->RxState = HAL_UART_STATE_READY;
 800beaa:	2220      	movs	r2, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beac:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800beae:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800beb2:	6303      	str	r3, [r0, #48]	; 0x30
}
 800beb4:	e7cf      	b.n	800be56 <UART_DMAError+0x1a>
 800beb6:	bf00      	nop

0800beb8 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800beb8:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800bebc:	b983      	cbnz	r3, 800bee0 <osKernelInitialize+0x28>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bebe:	f3ef 8310 	mrs	r3, PRIMASK
 800bec2:	b96b      	cbnz	r3, 800bee0 <osKernelInitialize+0x28>
 800bec4:	4b08      	ldr	r3, [pc, #32]	; (800bee8 <osKernelInitialize+0x30>)
 800bec6:	6818      	ldr	r0, [r3, #0]
 800bec8:	2802      	cmp	r0, #2
 800beca:	d003      	beq.n	800bed4 <osKernelInitialize+0x1c>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800becc:	b928      	cbnz	r0, 800beda <osKernelInitialize+0x22>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800bece:	2201      	movs	r2, #1
 800bed0:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bed2:	4770      	bx	lr
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bed4:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800bed8:	b913      	cbnz	r3, 800bee0 <osKernelInitialize+0x28>
    } else {
      stat = osError;
 800beda:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800bede:	4770      	bx	lr
    stat = osErrorISR;
 800bee0:	f06f 0005 	mvn.w	r0, #5
 800bee4:	4770      	bx	lr
 800bee6:	bf00      	nop
 800bee8:	20000ff4 	.word	0x20000ff4

0800beec <osKernelStart>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800beec:	f3ef 8305 	mrs	r3, IPSR
}

osStatus_t osKernelStart (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800bef0:	b9c3      	cbnz	r3, 800bf24 <osKernelStart+0x38>
osStatus_t osKernelStart (void) {
 800bef2:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bef4:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 800bef8:	b98c      	cbnz	r4, 800bf1e <osKernelStart+0x32>
 800befa:	4b0c      	ldr	r3, [pc, #48]	; (800bf2c <osKernelStart+0x40>)
 800befc:	681a      	ldr	r2, [r3, #0]
 800befe:	2a02      	cmp	r2, #2
 800bf00:	d007      	beq.n	800bf12 <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800bf02:	2a01      	cmp	r2, #1
 800bf04:	d108      	bne.n	800bf18 <osKernelStart+0x2c>
      KernelState = osKernelRunning;
 800bf06:	2202      	movs	r2, #2
 800bf08:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800bf0a:	f001 fbb1 	bl	800d670 <vTaskStartScheduler>
      stat = osOK;
 800bf0e:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800bf10:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bf12:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800bf16:	b913      	cbnz	r3, 800bf1e <osKernelStart+0x32>
      stat = osError;
 800bf18:	f04f 30ff 	mov.w	r0, #4294967295
}
 800bf1c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800bf1e:	f06f 0005 	mvn.w	r0, #5
}
 800bf22:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800bf24:	f06f 0005 	mvn.w	r0, #5
}
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	20000ff4 	.word	0x20000ff4

0800bf30 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bf30:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bf32:	2400      	movs	r4, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bf34:	b087      	sub	sp, #28
  hTask = NULL;
 800bf36:	9405      	str	r4, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf38:	f3ef 8505 	mrs	r5, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800bf3c:	2d00      	cmp	r5, #0
 800bf3e:	d13b      	bne.n	800bfb8 <osThreadNew+0x88>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf40:	f3ef 8310 	mrs	r3, PRIMASK
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d13e      	bne.n	800bfc6 <osThreadNew+0x96>
 800bf48:	4b29      	ldr	r3, [pc, #164]	; (800bff0 <osThreadNew+0xc0>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	2b02      	cmp	r3, #2
 800bf4e:	d036      	beq.n	800bfbe <osThreadNew+0x8e>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	d038      	beq.n	800bfc6 <osThreadNew+0x96>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 800bf54:	2300      	movs	r3, #0
 800bf56:	f88d 3013 	strb.w	r3, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 800bf5a:	b302      	cbz	r2, 800bf9e <osThreadNew+0x6e>
      if (attr->name != NULL) {
 800bf5c:	6814      	ldr	r4, [r2, #0]
 800bf5e:	2c00      	cmp	r4, #0
 800bf60:	d039      	beq.n	800bfd6 <osThreadNew+0xa6>
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800bf62:	6993      	ldr	r3, [r2, #24]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d031      	beq.n	800bfcc <osThreadNew+0x9c>
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bf68:	1e5d      	subs	r5, r3, #1
 800bf6a:	2d37      	cmp	r5, #55	; 0x37
 800bf6c:	d824      	bhi.n	800bfb8 <osThreadNew+0x88>
 800bf6e:	6855      	ldr	r5, [r2, #4]
 800bf70:	07ed      	lsls	r5, r5, #31
 800bf72:	d421      	bmi.n	800bfb8 <osThreadNew+0x88>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800bf74:	6955      	ldr	r5, [r2, #20]
 800bf76:	bb5d      	cbnz	r5, 800bfd0 <osThreadNew+0xa0>
    stack = configMINIMAL_STACK_SIZE;
 800bf78:	f04f 0c80 	mov.w	ip, #128	; 0x80
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf7c:	6897      	ldr	r7, [r2, #8]
 800bf7e:	b36f      	cbz	r7, 800bfdc <osThreadNew+0xac>
 800bf80:	68d6      	ldr	r6, [r2, #12]
 800bf82:	2e5b      	cmp	r6, #91	; 0x5b
 800bf84:	d91f      	bls.n	800bfc6 <osThreadNew+0x96>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf86:	6912      	ldr	r2, [r2, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bf88:	b1ea      	cbz	r2, 800bfc6 <osThreadNew+0x96>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bf8a:	b1e5      	cbz	r5, 800bfc6 <osThreadNew+0x96>
    else {
      mem = 0;
    }

    if (mem == 1) {
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bf8c:	e9cd 2701 	strd	r2, r7, [sp, #4]
 800bf90:	9300      	str	r3, [sp, #0]
 800bf92:	4662      	mov	r2, ip
 800bf94:	460b      	mov	r3, r1
 800bf96:	4621      	mov	r1, r4
 800bf98:	f001 fa0e 	bl	800d3b8 <xTaskCreateStatic>
 800bf9c:	e00d      	b.n	800bfba <osThreadNew+0x8a>
 800bf9e:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
 800bfa0:	2318      	movs	r3, #24
    name  = &empty;
 800bfa2:	f10d 0413 	add.w	r4, sp, #19
                                                                                    (StaticTask_t *)attr->cb_mem);
    }
    else {
      if (mem == 0) {
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bfa6:	ad05      	add	r5, sp, #20
 800bfa8:	9300      	str	r3, [sp, #0]
 800bfaa:	9501      	str	r5, [sp, #4]
 800bfac:	460b      	mov	r3, r1
 800bfae:	4621      	mov	r1, r4
 800bfb0:	f001 fab6 	bl	800d520 <xTaskCreate>
 800bfb4:	2801      	cmp	r0, #1
 800bfb6:	d006      	beq.n	800bfc6 <osThreadNew+0x96>
        return (NULL);
 800bfb8:	2000      	movs	r0, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
 800bfba:	b007      	add	sp, #28
 800bfbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bfbe:	f3ef 8311 	mrs	r3, BASEPRI
  if (!IS_IRQ() && (func != NULL)) {
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d0c4      	beq.n	800bf50 <osThreadNew+0x20>
 800bfc6:	9805      	ldr	r0, [sp, #20]
}
 800bfc8:	b007      	add	sp, #28
 800bfca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfcc:	2318      	movs	r3, #24
 800bfce:	e7ce      	b.n	800bf6e <osThreadNew+0x3e>
        stack = attr->stack_size / sizeof(StackType_t);
 800bfd0:	ea4f 0c95 	mov.w	ip, r5, lsr #2
 800bfd4:	e7d2      	b.n	800bf7c <osThreadNew+0x4c>
    name  = &empty;
 800bfd6:	f10d 0413 	add.w	r4, sp, #19
 800bfda:	e7c2      	b.n	800bf62 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bfdc:	68d5      	ldr	r5, [r2, #12]
 800bfde:	2d00      	cmp	r5, #0
 800bfe0:	d1f1      	bne.n	800bfc6 <osThreadNew+0x96>
 800bfe2:	6912      	ldr	r2, [r2, #16]
 800bfe4:	2a00      	cmp	r2, #0
 800bfe6:	d1ee      	bne.n	800bfc6 <osThreadNew+0x96>
 800bfe8:	fa1f f28c 	uxth.w	r2, ip
 800bfec:	e7db      	b.n	800bfa6 <osThreadNew+0x76>
 800bfee:	bf00      	nop
 800bff0:	20000ff4 	.word	0x20000ff4

0800bff4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800bff4:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bff6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800bffa:	b963      	cbnz	r3, 800c016 <osDelay+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bffc:	f3ef 8310 	mrs	r3, PRIMASK
 800c000:	b94b      	cbnz	r3, 800c016 <osDelay+0x22>
 800c002:	4b08      	ldr	r3, [pc, #32]	; (800c024 <osDelay+0x30>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	2b02      	cmp	r3, #2
 800c008:	d001      	beq.n	800c00e <osDelay+0x1a>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 800c00a:	b938      	cbnz	r0, 800c01c <osDelay+0x28>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
 800c00c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800c00e:	f3ef 8311 	mrs	r3, BASEPRI
  if (IS_IRQ()) {
 800c012:	2b00      	cmp	r3, #0
 800c014:	d0f9      	beq.n	800c00a <osDelay+0x16>
    stat = osErrorISR;
 800c016:	f06f 0005 	mvn.w	r0, #5
}
 800c01a:	bd08      	pop	{r3, pc}
      vTaskDelay(ticks);
 800c01c:	f001 fd12 	bl	800da44 <vTaskDelay>
    stat = osOK;
 800c020:	2000      	movs	r0, #0
}
 800c022:	bd08      	pop	{r3, pc}
 800c024:	20000ff4 	.word	0x20000ff4

0800c028 <vApplicationGetIdleTaskMemory>:
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c028:	2380      	movs	r3, #128	; 0x80
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c02a:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c02c:	4d03      	ldr	r5, [pc, #12]	; (800c03c <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c02e:	4c04      	ldr	r4, [pc, #16]	; (800c040 <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c030:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c032:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c034:	6013      	str	r3, [r2, #0]
}
 800c036:	bc30      	pop	{r4, r5}
 800c038:	4770      	bx	lr
 800c03a:	bf00      	nop
 800c03c:	20000f98 	.word	0x20000f98
 800c040:	20000d98 	.word	0x20000d98

0800c044 <vApplicationGetTimerTaskMemory>:
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c044:	f44f 7380 	mov.w	r3, #256	; 0x100
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c048:	b430      	push	{r4, r5}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c04a:	4d03      	ldr	r5, [pc, #12]	; (800c058 <vApplicationGetTimerTaskMemory+0x14>)
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c04c:	4c03      	ldr	r4, [pc, #12]	; (800c05c <vApplicationGetTimerTaskMemory+0x18>)
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c04e:	6005      	str	r5, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c050:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c052:	6013      	str	r3, [r2, #0]
}
 800c054:	bc30      	pop	{r4, r5}
 800c056:	4770      	bx	lr
 800c058:	200013f8 	.word	0x200013f8
 800c05c:	20000ff8 	.word	0x20000ff8

0800c060 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	vTaskSuspendAll();
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c064:	4f55      	ldr	r7, [pc, #340]	; (800c1bc <pvPortMalloc+0x15c>)
{
 800c066:	4606      	mov	r6, r0
	vTaskSuspendAll();
 800c068:	f001 fb90 	bl	800d78c <vTaskSuspendAll>
		if( pxEnd == NULL )
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d03a      	beq.n	800c0e8 <pvPortMalloc+0x88>
 800c072:	4a53      	ldr	r2, [pc, #332]	; (800c1c0 <pvPortMalloc+0x160>)
 800c074:	6815      	ldr	r5, [r2, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c076:	422e      	tst	r6, r5
 800c078:	d130      	bne.n	800c0dc <pvPortMalloc+0x7c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c07a:	b37e      	cbz	r6, 800c0dc <pvPortMalloc+0x7c>
			{
				xWantedSize += xHeapStructSize;
 800c07c:	f106 0408 	add.w	r4, r6, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c080:	0776      	lsls	r6, r6, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c082:	bf1c      	itt	ne
 800c084:	f024 0407 	bicne.w	r4, r4, #7
 800c088:	3408      	addne	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c08a:	b33c      	cbz	r4, 800c0dc <pvPortMalloc+0x7c>
 800c08c:	f8df c13c 	ldr.w	ip, [pc, #316]	; 800c1cc <pvPortMalloc+0x16c>
 800c090:	f8dc 7000 	ldr.w	r7, [ip]
 800c094:	42a7      	cmp	r7, r4
 800c096:	d321      	bcc.n	800c0dc <pvPortMalloc+0x7c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 800c098:	4a4a      	ldr	r2, [pc, #296]	; (800c1c4 <pvPortMalloc+0x164>)
 800c09a:	6811      	ldr	r1, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c09c:	e003      	b.n	800c0a6 <pvPortMalloc+0x46>
 800c09e:	680e      	ldr	r6, [r1, #0]
 800c0a0:	b126      	cbz	r6, 800c0ac <pvPortMalloc+0x4c>
 800c0a2:	460a      	mov	r2, r1
 800c0a4:	4631      	mov	r1, r6
 800c0a6:	6848      	ldr	r0, [r1, #4]
 800c0a8:	42a0      	cmp	r0, r4
 800c0aa:	d3f8      	bcc.n	800c09e <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c0ac:	4299      	cmp	r1, r3
 800c0ae:	d015      	beq.n	800c0dc <pvPortMalloc+0x7c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c0b0:	460e      	mov	r6, r1
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c0b2:	eba0 0e04 	sub.w	lr, r0, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c0b6:	f856 8b08 	ldr.w	r8, [r6], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c0ba:	f1be 0f10 	cmp.w	lr, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c0be:	f8c2 8000 	str.w	r8, [r2]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c0c2:	d953      	bls.n	800c16c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c0c4:	190a      	adds	r2, r1, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c0c6:	0750      	lsls	r0, r2, #29
 800c0c8:	d032      	beq.n	800c130 <pvPortMalloc+0xd0>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	e7fe      	b.n	800c0da <pvPortMalloc+0x7a>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c0dc:	f001 fca2 	bl	800da24 <xTaskResumeAll>
 800c0e0:	2600      	movs	r6, #0
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c0e8:	4b37      	ldr	r3, [pc, #220]	; (800c1c8 <pvPortMalloc+0x168>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c0ea:	075a      	lsls	r2, r3, #29
 800c0ec:	d057      	beq.n	800c19e <pvPortMalloc+0x13e>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c0ee:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c0f0:	f022 0207 	bic.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c0f4:	4611      	mov	r1, r2
 800c0f6:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0fa:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
	xStart.xBlockSize = ( size_t ) 0;
 800c0fe:	2000      	movs	r0, #0
	uxAddress -= xHeapStructSize;
 800c100:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c102:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
 800c106:	603b      	str	r3, [r7, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c108:	f8df c0c4 	ldr.w	ip, [pc, #196]	; 800c1d0 <pvPortMalloc+0x170>
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c10c:	4f2f      	ldr	r7, [pc, #188]	; (800c1cc <pvPortMalloc+0x16c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c10e:	1a9a      	subs	r2, r3, r2
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c110:	f8cc 2000 	str.w	r2, [ip]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c114:	603a      	str	r2, [r7, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c116:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 800c1c0 <pvPortMalloc+0x160>
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c11a:	4f2a      	ldr	r7, [pc, #168]	; (800c1c4 <pvPortMalloc+0x164>)
}
 800c11c:	4625      	mov	r5, r4
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c11e:	e9c7 1000 	strd	r1, r0, [r7]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c122:	f8cc 4000 	str.w	r4, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 800c126:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c12a:	e9c1 3200 	strd	r3, r2, [r1]
}
 800c12e:	e7a2      	b.n	800c076 <pvPortMalloc+0x16>
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c130:	4824      	ldr	r0, [pc, #144]	; (800c1c4 <pvPortMalloc+0x164>)
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c132:	f8c2 e004 	str.w	lr, [r2, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c136:	604c      	str	r4, [r1, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c138:	4686      	mov	lr, r0
 800c13a:	6800      	ldr	r0, [r0, #0]
 800c13c:	4282      	cmp	r2, r0
 800c13e:	d8fb      	bhi.n	800c138 <pvPortMalloc+0xd8>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c140:	f8de 4004 	ldr.w	r4, [lr, #4]
 800c144:	eb0e 0804 	add.w	r8, lr, r4
 800c148:	4542      	cmp	r2, r8
 800c14a:	d12d      	bne.n	800c1a8 <pvPortMalloc+0x148>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c14c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 800c150:	4672      	mov	r2, lr
 800c152:	4444      	add	r4, r8
 800c154:	f8ce 4004 	str.w	r4, [lr, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c158:	eb02 0804 	add.w	r8, r2, r4
 800c15c:	4540      	cmp	r0, r8
 800c15e:	d025      	beq.n	800c1ac <pvPortMalloc+0x14c>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c160:	6010      	str	r0, [r2, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c162:	4596      	cmp	lr, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c164:	6848      	ldr	r0, [r1, #4]
 800c166:	bf18      	it	ne
 800c168:	f8ce 2000 	strne.w	r2, [lr]
					pxBlock->pxNextFreeBlock = NULL;
 800c16c:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c16e:	4a18      	ldr	r2, [pc, #96]	; (800c1d0 <pvPortMalloc+0x170>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c170:	1a3f      	subs	r7, r7, r0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c172:	6814      	ldr	r4, [r2, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c174:	4328      	orrs	r0, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c176:	42a7      	cmp	r7, r4
					pxBlock->pxNextFreeBlock = NULL;
 800c178:	e9c1 3000 	strd	r3, r0, [r1]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c17c:	bf38      	it	cc
 800c17e:	6017      	strcc	r7, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c180:	f8cc 7000 	str.w	r7, [ip]
	( void ) xTaskResumeAll();
 800c184:	f001 fc4e 	bl	800da24 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c188:	0773      	lsls	r3, r6, #29
 800c18a:	d0aa      	beq.n	800c0e2 <pvPortMalloc+0x82>
 800c18c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c190:	f383 8811 	msr	BASEPRI, r3
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	f3bf 8f4f 	dsb	sy
 800c19c:	e7fe      	b.n	800c19c <pvPortMalloc+0x13c>
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c19e:	461a      	mov	r2, r3
 800c1a0:	f503 53c0 	add.w	r3, r3, #6144	; 0x1800
 800c1a4:	4611      	mov	r1, r2
 800c1a6:	e7a8      	b.n	800c0fa <pvPortMalloc+0x9a>
 800c1a8:	6854      	ldr	r4, [r2, #4]
 800c1aa:	e7d5      	b.n	800c158 <pvPortMalloc+0xf8>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c1ac:	4298      	cmp	r0, r3
 800c1ae:	d0d7      	beq.n	800c160 <pvPortMalloc+0x100>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1b0:	c809      	ldmia	r0, {r0, r3}
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c1b2:	441c      	add	r4, r3
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c1b4:	e9c2 0400 	strd	r0, r4, [r2]
 800c1b8:	e7d3      	b.n	800c162 <pvPortMalloc+0x102>
 800c1ba:	bf00      	nop
 800c1bc:	20001454 	.word	0x20001454
 800c1c0:	20002c58 	.word	0x20002c58
 800c1c4:	20002c64 	.word	0x20002c64
 800c1c8:	20001458 	.word	0x20001458
 800c1cc:	20002c5c 	.word	0x20002c5c
 800c1d0:	20002c60 	.word	0x20002c60

0800c1d4 <vPortFree>:
	if( pv != NULL )
 800c1d4:	b1e0      	cbz	r0, 800c210 <vPortFree+0x3c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c1d6:	4a26      	ldr	r2, [pc, #152]	; (800c270 <vPortFree+0x9c>)
{
 800c1d8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c1da:	6812      	ldr	r2, [r2, #0]
 800c1dc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	4213      	tst	r3, r2
 800c1e4:	d00b      	beq.n	800c1fe <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c1e6:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800c1ea:	b191      	cbz	r1, 800c212 <vPortFree+0x3e>
 800c1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	e7fe      	b.n	800c1fc <vPortFree+0x28>
 800c1fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c20e:	e7fe      	b.n	800c20e <vPortFree+0x3a>
 800c210:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c212:	ea23 0302 	bic.w	r3, r3, r2
 800c216:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800c21a:	f001 fab7 	bl	800d78c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c21e:	4915      	ldr	r1, [pc, #84]	; (800c274 <vPortFree+0xa0>)
 800c220:	f854 0c04 	ldr.w	r0, [r4, #-4]
 800c224:	680b      	ldr	r3, [r1, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c226:	4a14      	ldr	r2, [pc, #80]	; (800c278 <vPortFree+0xa4>)
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c228:	4403      	add	r3, r0
 800c22a:	600b      	str	r3, [r1, #0]
		puc -= xHeapStructSize;
 800c22c:	f1a4 0308 	sub.w	r3, r4, #8
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c230:	4611      	mov	r1, r2
 800c232:	6812      	ldr	r2, [r2, #0]
 800c234:	4293      	cmp	r3, r2
 800c236:	d8fb      	bhi.n	800c230 <vPortFree+0x5c>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c238:	684c      	ldr	r4, [r1, #4]
 800c23a:	190d      	adds	r5, r1, r4
 800c23c:	42ab      	cmp	r3, r5
 800c23e:	d00a      	beq.n	800c256 <vPortFree+0x82>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c240:	181c      	adds	r4, r3, r0
 800c242:	42a2      	cmp	r2, r4
 800c244:	d00b      	beq.n	800c25e <vPortFree+0x8a>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c246:	601a      	str	r2, [r3, #0]
	if( pxIterator != pxBlockToInsert )
 800c248:	4299      	cmp	r1, r3
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c24a:	bf18      	it	ne
 800c24c:	600b      	strne	r3, [r1, #0]
}
 800c24e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				( void ) xTaskResumeAll();
 800c252:	f001 bbe7 	b.w	800da24 <xTaskResumeAll>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c256:	4420      	add	r0, r4
 800c258:	460b      	mov	r3, r1
 800c25a:	6048      	str	r0, [r1, #4]
		pxBlockToInsert = pxIterator;
 800c25c:	e7f0      	b.n	800c240 <vPortFree+0x6c>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c25e:	4c07      	ldr	r4, [pc, #28]	; (800c27c <vPortFree+0xa8>)
 800c260:	6824      	ldr	r4, [r4, #0]
 800c262:	42a2      	cmp	r2, r4
 800c264:	d0ef      	beq.n	800c246 <vPortFree+0x72>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c266:	ca14      	ldmia	r2, {r2, r4}
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c268:	4420      	add	r0, r4
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c26a:	e9c3 2000 	strd	r2, r0, [r3]
 800c26e:	e7eb      	b.n	800c248 <vPortFree+0x74>
 800c270:	20002c58 	.word	0x20002c58
 800c274:	20002c5c 	.word	0x20002c5c
 800c278:	20002c64 	.word	0x20002c64
 800c27c:	20001454 	.word	0x20001454

0800c280 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c280:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c284:	2200      	movs	r2, #0
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c286:	f100 0308 	add.w	r3, r0, #8
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c28a:	e9c0 3303 	strd	r3, r3, [r0, #12]
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c28e:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c290:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c292:	6043      	str	r3, [r0, #4]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c294:	4770      	bx	lr
 800c296:	bf00      	nop

0800c298 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800c298:	2300      	movs	r3, #0
 800c29a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop

0800c2a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800c2a0:	6843      	ldr	r3, [r0, #4]
{
 800c2a2:	b410      	push	{r4}

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c2a4:	689c      	ldr	r4, [r3, #8]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800c2a6:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c2a8:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c2aa:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 800c2ac:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 800c2ae:	604b      	str	r3, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c2b0:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c2b2:	6099      	str	r1, [r3, #8]
}
 800c2b4:	bc10      	pop	{r4}
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c2b6:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800c2b8:	6002      	str	r2, [r0, #0]
}
 800c2ba:	4770      	bx	lr

0800c2bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c2bc:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c2be:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c2c0:	1c6b      	adds	r3, r5, #1
 800c2c2:	d010      	beq.n	800c2e6 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c2c4:	f100 0308 	add.w	r3, r0, #8
 800c2c8:	461c      	mov	r4, r3
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	42aa      	cmp	r2, r5
 800c2d0:	d9fa      	bls.n	800c2c8 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800c2d2:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 800c2d4:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 800c2d6:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c2d8:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c2da:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800c2dc:	6061      	str	r1, [r4, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800c2de:	6108      	str	r0, [r1, #16]
}
 800c2e0:	bc30      	pop	{r4, r5}
	( pxList->uxNumberOfItems )++;
 800c2e2:	6002      	str	r2, [r0, #0]
}
 800c2e4:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 800c2e6:	6904      	ldr	r4, [r0, #16]
 800c2e8:	6863      	ldr	r3, [r4, #4]
 800c2ea:	e7f2      	b.n	800c2d2 <vListInsert+0x16>

0800c2ec <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800c2ec:	6903      	ldr	r3, [r0, #16]
{
 800c2ee:	b410      	push	{r4}

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c2f0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c2f4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c2f6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c2f8:	6051      	str	r1, [r2, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800c2fa:	2100      	movs	r1, #0
	if( pxList->pxIndex == pxItemToRemove )
 800c2fc:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c2fe:	bf08      	it	eq
 800c300:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 800c302:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pvContainer = NULL;
 800c304:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800c306:	3a01      	subs	r2, #1
 800c308:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c30a:	6818      	ldr	r0, [r3, #0]
}
 800c30c:	bc10      	pop	{r4}
 800c30e:	4770      	bx	lr

0800c310 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800c310:	4806      	ldr	r0, [pc, #24]	; (800c32c <prvPortStartFirstTask+0x1c>)
 800c312:	6800      	ldr	r0, [r0, #0]
 800c314:	6800      	ldr	r0, [r0, #0]
 800c316:	f380 8808 	msr	MSP, r0
 800c31a:	b662      	cpsie	i
 800c31c:	b661      	cpsie	f
 800c31e:	f3bf 8f4f 	dsb	sy
 800c322:	f3bf 8f6f 	isb	sy
 800c326:	df00      	svc	0
 800c328:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c32a:	0000      	.short	0x0000
 800c32c:	e000ed08 	.word	0xe000ed08

0800c330 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 800c330:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 800c332:	4b0e      	ldr	r3, [pc, #56]	; (800c36c <prvTaskExitError+0x3c>)
{
 800c334:	b082      	sub	sp, #8
	configASSERT( uxCriticalNesting == ~0UL );
 800c336:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0UL;
 800c338:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800c33a:	3301      	adds	r3, #1
 800c33c:	d008      	beq.n	800c350 <prvTaskExitError+0x20>
 800c33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c342:	f383 8811 	msr	BASEPRI, r3
 800c346:	f3bf 8f6f 	isb	sy
 800c34a:	f3bf 8f4f 	dsb	sy
 800c34e:	e7fe      	b.n	800c34e <prvTaskExitError+0x1e>
 800c350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c354:	f383 8811 	msr	BASEPRI, r3
 800c358:	f3bf 8f6f 	isb	sy
 800c35c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800c360:	9b01      	ldr	r3, [sp, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d0fc      	beq.n	800c360 <prvTaskExitError+0x30>
}
 800c366:	b002      	add	sp, #8
 800c368:	4770      	bx	lr
 800c36a:	bf00      	nop
 800c36c:	20000498 	.word	0x20000498

0800c370 <pxPortInitialiseStack>:
{
 800c370:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c372:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c376:	4b07      	ldr	r3, [pc, #28]	; (800c394 <pxPortInitialiseStack+0x24>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c378:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c37c:	f840 4c04 	str.w	r4, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c380:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c384:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c388:	f840 3c0c 	str.w	r3, [r0, #-12]
}
 800c38c:	bc10      	pop	{r4}
 800c38e:	3840      	subs	r0, #64	; 0x40
 800c390:	4770      	bx	lr
 800c392:	bf00      	nop
 800c394:	0800c331 	.word	0x0800c331
	...

0800c3a0 <SVC_Handler>:
	__asm volatile (
 800c3a0:	4b07      	ldr	r3, [pc, #28]	; (800c3c0 <pxCurrentTCBConst2>)
 800c3a2:	6819      	ldr	r1, [r3, #0]
 800c3a4:	6808      	ldr	r0, [r1, #0]
 800c3a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c3aa:	f380 8809 	msr	PSP, r0
 800c3ae:	f3bf 8f6f 	isb	sy
 800c3b2:	f04f 0000 	mov.w	r0, #0
 800c3b6:	f380 8811 	msr	BASEPRI, r0
 800c3ba:	f04e 0e0d 	orr.w	lr, lr, #13
 800c3be:	4770      	bx	lr

0800c3c0 <pxCurrentTCBConst2>:
 800c3c0:	20002c74 	.word	0x20002c74

0800c3c4 <vPortEnterCritical>:
 800c3c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c8:	f383 8811 	msr	BASEPRI, r3
 800c3cc:	f3bf 8f6f 	isb	sy
 800c3d0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c3d4:	4a0a      	ldr	r2, [pc, #40]	; (800c400 <vPortEnterCritical+0x3c>)
 800c3d6:	6813      	ldr	r3, [r2, #0]
 800c3d8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c3da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800c3dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800c3de:	d000      	beq.n	800c3e2 <vPortEnterCritical+0x1e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 800c3e0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c3e2:	4b08      	ldr	r3, [pc, #32]	; (800c404 <vPortEnterCritical+0x40>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c3ea:	d0f9      	beq.n	800c3e0 <vPortEnterCritical+0x1c>
 800c3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f0:	f383 8811 	msr	BASEPRI, r3
 800c3f4:	f3bf 8f6f 	isb	sy
 800c3f8:	f3bf 8f4f 	dsb	sy
 800c3fc:	e7fe      	b.n	800c3fc <vPortEnterCritical+0x38>
 800c3fe:	bf00      	nop
 800c400:	20000498 	.word	0x20000498
 800c404:	e000ed04 	.word	0xe000ed04

0800c408 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800c408:	4a08      	ldr	r2, [pc, #32]	; (800c42c <vPortExitCritical+0x24>)
 800c40a:	6813      	ldr	r3, [r2, #0]
 800c40c:	b943      	cbnz	r3, 800c420 <vPortExitCritical+0x18>
 800c40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c412:	f383 8811 	msr	BASEPRI, r3
 800c416:	f3bf 8f6f 	isb	sy
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	e7fe      	b.n	800c41e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800c420:	3b01      	subs	r3, #1
 800c422:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c424:	b90b      	cbnz	r3, 800c42a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c426:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800c42a:	4770      	bx	lr
 800c42c:	20000498 	.word	0x20000498

0800c430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c430:	f3ef 8009 	mrs	r0, PSP
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	4b0d      	ldr	r3, [pc, #52]	; (800c470 <pxCurrentTCBConst>)
 800c43a:	681a      	ldr	r2, [r3, #0]
 800c43c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c440:	6010      	str	r0, [r2, #0]
 800c442:	e92d 4008 	stmdb	sp!, {r3, lr}
 800c446:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c44a:	f380 8811 	msr	BASEPRI, r0
 800c44e:	f001 fb4f 	bl	800daf0 <vTaskSwitchContext>
 800c452:	f04f 0000 	mov.w	r0, #0
 800c456:	f380 8811 	msr	BASEPRI, r0
 800c45a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c45e:	6819      	ldr	r1, [r3, #0]
 800c460:	6808      	ldr	r0, [r1, #0]
 800c462:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800c466:	f380 8809 	msr	PSP, r0
 800c46a:	f3bf 8f6f 	isb	sy
 800c46e:	4770      	bx	lr

0800c470 <pxCurrentTCBConst>:
 800c470:	20002c74 	.word	0x20002c74

0800c474 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c474:	b508      	push	{r3, lr}
	__asm volatile
 800c476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c47a:	f383 8811 	msr	BASEPRI, r3
 800c47e:	f3bf 8f6f 	isb	sy
 800c482:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c486:	f001 f98f 	bl	800d7a8 <xTaskIncrementTick>
 800c48a:	b118      	cbz	r0, 800c494 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c48c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c490:	4b02      	ldr	r3, [pc, #8]	; (800c49c <SysTick_Handler+0x28>)
 800c492:	601a      	str	r2, [r3, #0]
	__asm volatile
 800c494:	2300      	movs	r3, #0
 800c496:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800c49a:	bd08      	pop	{r3, pc}
 800c49c:	e000ed04 	.word	0xe000ed04

0800c4a0 <xPortStartScheduler>:
{
 800c4a0:	b530      	push	{r4, r5, lr}
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4a2:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4a4:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4a6:	4b32      	ldr	r3, [pc, #200]	; (800c570 <xPortStartScheduler+0xd0>)
{
 800c4a8:	b085      	sub	sp, #20
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4aa:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4ac:	4831      	ldr	r0, [pc, #196]	; (800c574 <xPortStartScheduler+0xd4>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4ae:	b2d2      	uxtb	r2, r2
 800c4b0:	9202      	str	r2, [sp, #8]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4b2:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4b4:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4b6:	4930      	ldr	r1, [pc, #192]	; (800c578 <xPortStartScheduler+0xd8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4be:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4c6:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4ca:	0612      	lsls	r2, r2, #24
 800c4cc:	bf48      	it	mi
 800c4ce:	2206      	movmi	r2, #6
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4d0:	600c      	str	r4, [r1, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4d2:	7003      	strb	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4d4:	d50e      	bpl.n	800c4f4 <xPortStartScheduler+0x54>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c4da:	4610      	mov	r0, r2
 800c4dc:	005b      	lsls	r3, r3, #1
 800c4de:	b2db      	uxtb	r3, r3
 800c4e0:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800c4e8:	3a01      	subs	r2, #1
 800c4ea:	061b      	lsls	r3, r3, #24
 800c4ec:	d4f3      	bmi.n	800c4d6 <xPortStartScheduler+0x36>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c4ee:	2803      	cmp	r0, #3
 800c4f0:	d009      	beq.n	800c506 <xPortStartScheduler+0x66>
 800c4f2:	6008      	str	r0, [r1, #0]
	__asm volatile
 800c4f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f8:	f383 8811 	msr	BASEPRI, r3
 800c4fc:	f3bf 8f6f 	isb	sy
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	e7fe      	b.n	800c504 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c506:	f44f 7540 	mov.w	r5, #768	; 0x300
	uxCriticalNesting = 0;
 800c50a:	2400      	movs	r4, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c50c:	9a02      	ldr	r2, [sp, #8]
 800c50e:	4818      	ldr	r0, [pc, #96]	; (800c570 <xPortStartScheduler+0xd0>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c510:	4b1a      	ldr	r3, [pc, #104]	; (800c57c <xPortStartScheduler+0xdc>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c512:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c514:	600d      	str	r5, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c516:	7002      	strb	r2, [r0, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c518:	681a      	ldr	r2, [r3, #0]
	uxCriticalNesting = 0;
 800c51a:	4d19      	ldr	r5, [pc, #100]	; (800c580 <xPortStartScheduler+0xe0>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c51c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800c520:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c522:	681a      	ldr	r2, [r3, #0]
 800c524:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800c528:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 800c52a:	f7f7 f825 	bl	8003578 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800c52e:	602c      	str	r4, [r5, #0]
	prvPortStartFirstTask();
 800c530:	f7ff feee 	bl	800c310 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800c534:	f001 fadc 	bl	800daf0 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
 800c538:	682b      	ldr	r3, [r5, #0]
volatile uint32_t ulDummy = 0UL;
 800c53a:	9403      	str	r4, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
 800c53c:	3301      	adds	r3, #1
 800c53e:	d008      	beq.n	800c552 <xPortStartScheduler+0xb2>
 800c540:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	e7fe      	b.n	800c550 <xPortStartScheduler+0xb0>
 800c552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c556:	f383 8811 	msr	BASEPRI, r3
 800c55a:	f3bf 8f6f 	isb	sy
 800c55e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800c562:	9b03      	ldr	r3, [sp, #12]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d0fc      	beq.n	800c562 <xPortStartScheduler+0xc2>
}
 800c568:	2000      	movs	r0, #0
 800c56a:	b005      	add	sp, #20
 800c56c:	bd30      	pop	{r4, r5, pc}
 800c56e:	bf00      	nop
 800c570:	e000e400 	.word	0xe000e400
 800c574:	20002c6c 	.word	0x20002c6c
 800c578:	20002c70 	.word	0x20002c70
 800c57c:	e000ed20 	.word	0xe000ed20
 800c580:	20000498 	.word	0x20000498

0800c584 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c584:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c588:	2b0f      	cmp	r3, #15
 800c58a:	d90e      	bls.n	800c5aa <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c58c:	4910      	ldr	r1, [pc, #64]	; (800c5d0 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c58e:	4a11      	ldr	r2, [pc, #68]	; (800c5d4 <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c590:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c592:	7812      	ldrb	r2, [r2, #0]
 800c594:	429a      	cmp	r2, r3
 800c596:	d908      	bls.n	800c5aa <vPortValidateInterruptPriority+0x26>
 800c598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c59c:	f383 8811 	msr	BASEPRI, r3
 800c5a0:	f3bf 8f6f 	isb	sy
 800c5a4:	f3bf 8f4f 	dsb	sy
 800c5a8:	e7fe      	b.n	800c5a8 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c5aa:	4b0b      	ldr	r3, [pc, #44]	; (800c5d8 <vPortValidateInterruptPriority+0x54>)
 800c5ac:	4a0b      	ldr	r2, [pc, #44]	; (800c5dc <vPortValidateInterruptPriority+0x58>)
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	6812      	ldr	r2, [r2, #0]
 800c5b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c5b6:	4293      	cmp	r3, r2
 800c5b8:	d908      	bls.n	800c5cc <vPortValidateInterruptPriority+0x48>
 800c5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	e7fe      	b.n	800c5ca <vPortValidateInterruptPriority+0x46>
	}
 800c5cc:	4770      	bx	lr
 800c5ce:	bf00      	nop
 800c5d0:	e000e3f0 	.word	0xe000e3f0
 800c5d4:	20002c6c 	.word	0x20002c6c
 800c5d8:	e000ed0c 	.word	0xe000ed0c
 800c5dc:	20002c70 	.word	0x20002c70

0800c5e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c5e0:	b570      	push	{r4, r5, r6, lr}
 800c5e2:	4604      	mov	r4, r0

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c5e4:	6c00      	ldr	r0, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5e6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c5e8:	b928      	cbnz	r0, 800c5f6 <prvCopyDataToQueue+0x16>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5ea:	6825      	ldr	r5, [r4, #0]
 800c5ec:	2d00      	cmp	r5, #0
 800c5ee:	d02e      	beq.n	800c64e <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
				pxQueue->pxMutexHolder = NULL;
 800c5f0:	3601      	adds	r6, #1
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c5f2:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800c5f4:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800c5f6:	4615      	mov	r5, r2
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c5f8:	4602      	mov	r2, r0
	else if( xPosition == queueSEND_TO_BACK )
 800c5fa:	b97d      	cbnz	r5, 800c61c <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c5fc:	68a0      	ldr	r0, [r4, #8]
 800c5fe:	f001 ffcb 	bl	800e598 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c602:	68a3      	ldr	r3, [r4, #8]
 800c604:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c606:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c608:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c60a:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c60c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c60e:	d31a      	bcc.n	800c646 <prvCopyDataToQueue+0x66>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c610:	6822      	ldr	r2, [r4, #0]
 800c612:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800c614:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c616:	60a2      	str	r2, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c618:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800c61a:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c61c:	68e0      	ldr	r0, [r4, #12]
 800c61e:	f001 ffbb 	bl	800e598 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c622:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c624:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c626:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c628:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c62a:	428b      	cmp	r3, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c62c:	60e3      	str	r3, [r4, #12]
 800c62e:	f1c2 0200 	rsb	r2, r2, #0
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c632:	d202      	bcs.n	800c63a <prvCopyDataToQueue+0x5a>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c634:	6863      	ldr	r3, [r4, #4]
 800c636:	441a      	add	r2, r3
 800c638:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800c63a:	2d02      	cmp	r5, #2
 800c63c:	d00c      	beq.n	800c658 <prvCopyDataToQueue+0x78>
 800c63e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800c640:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c642:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800c644:	bd70      	pop	{r4, r5, r6, pc}
 800c646:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 800c648:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c64a:	63a6      	str	r6, [r4, #56]	; 0x38
}
 800c64c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c64e:	6860      	ldr	r0, [r4, #4]
 800c650:	f001 fbd4 	bl	800ddfc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800c654:	6065      	str	r5, [r4, #4]
 800c656:	e7cb      	b.n	800c5f0 <prvCopyDataToQueue+0x10>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c658:	2e01      	cmp	r6, #1
 800c65a:	bf38      	it	cc
 800c65c:	2601      	movcc	r6, #1
BaseType_t xReturn = pdFALSE;
 800c65e:	2000      	movs	r0, #0
 800c660:	e7c7      	b.n	800c5f2 <prvCopyDataToQueue+0x12>
 800c662:	bf00      	nop

0800c664 <xQueueGenericCreateStatic>:
	{
 800c664:	b570      	push	{r4, r5, r6, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	f89d 5018 	ldrb.w	r5, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c66c:	b940      	cbnz	r0, 800c680 <xQueueGenericCreateStatic+0x1c>
 800c66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	e7fe      	b.n	800c67e <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 800c680:	461c      	mov	r4, r3
 800c682:	b1e3      	cbz	r3, 800c6be <xQueueGenericCreateStatic+0x5a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c684:	4603      	mov	r3, r0
 800c686:	b172      	cbz	r2, 800c6a6 <xQueueGenericCreateStatic+0x42>
 800c688:	b311      	cbz	r1, 800c6d0 <xQueueGenericCreateStatic+0x6c>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c68a:	2050      	movs	r0, #80	; 0x50
 800c68c:	9001      	str	r0, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c68e:	9801      	ldr	r0, [sp, #4]
 800c690:	2850      	cmp	r0, #80	; 0x50
 800c692:	d026      	beq.n	800c6e2 <xQueueGenericCreateStatic+0x7e>
 800c694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c698:	f383 8811 	msr	BASEPRI, r3
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f3bf 8f4f 	dsb	sy
 800c6a4:	e7fe      	b.n	800c6a4 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c6a6:	2900      	cmp	r1, #0
 800c6a8:	d144      	bne.n	800c734 <xQueueGenericCreateStatic+0xd0>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c6aa:	2250      	movs	r2, #80	; 0x50
 800c6ac:	9201      	str	r2, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c6ae:	9a01      	ldr	r2, [sp, #4]
 800c6b0:	2a50      	cmp	r2, #80	; 0x50
 800c6b2:	d1ef      	bne.n	800c694 <xQueueGenericCreateStatic+0x30>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c6b4:	2201      	movs	r2, #1
 800c6b6:	f884 2046 	strb.w	r2, [r4, #70]	; 0x46
 800c6ba:	4622      	mov	r2, r4
 800c6bc:	e014      	b.n	800c6e8 <xQueueGenericCreateStatic+0x84>
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
 800c6ce:	e7fe      	b.n	800c6ce <xQueueGenericCreateStatic+0x6a>
 800c6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d4:	f383 8811 	msr	BASEPRI, r3
 800c6d8:	f3bf 8f6f 	isb	sy
 800c6dc:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c6e0:	e7fe      	b.n	800c6e0 <xQueueGenericCreateStatic+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c6e2:	2001      	movs	r0, #1
 800c6e4:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800c6e8:	e9c4 310f 	strd	r3, r1, [r4, #60]	; 0x3c
 800c6ec:	6022      	str	r2, [r4, #0]
	taskENTER_CRITICAL();
 800c6ee:	f7ff fe69 	bl	800c3c4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c6f2:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
		pxQueue->cRxLock = queueUNLOCKED;
 800c6f6:	26ff      	movs	r6, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c6f8:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c6fa:	fb03 f302 	mul.w	r3, r3, r2
 800c6fe:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c700:	1a9a      	subs	r2, r3, r2
 800c702:	440a      	add	r2, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800c704:	440b      	add	r3, r1
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c706:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c708:	e9c4 3101 	strd	r3, r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800c70c:	60e2      	str	r2, [r4, #12]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c70e:	f104 0010 	add.w	r0, r4, #16
		pxQueue->cRxLock = queueUNLOCKED;
 800c712:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c716:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c71a:	f7ff fdb1 	bl	800c280 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c71e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c722:	f7ff fdad 	bl	800c280 <vListInitialise>
	taskEXIT_CRITICAL();
 800c726:	f7ff fe6f 	bl	800c408 <vPortExitCritical>
	}
 800c72a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800c72c:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
	}
 800c730:	b002      	add	sp, #8
 800c732:	bd70      	pop	{r4, r5, r6, pc}
 800c734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c738:	f383 8811 	msr	BASEPRI, r3
 800c73c:	f3bf 8f6f 	isb	sy
 800c740:	f3bf 8f4f 	dsb	sy
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c744:	e7fe      	b.n	800c744 <xQueueGenericCreateStatic+0xe0>
 800c746:	bf00      	nop

0800c748 <xQueueGenericSend>:
{
 800c748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c74c:	b084      	sub	sp, #16
 800c74e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800c750:	2800      	cmp	r0, #0
 800c752:	f000 80ac 	beq.w	800c8ae <xQueueGenericSend+0x166>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c756:	4688      	mov	r8, r1
 800c758:	461f      	mov	r7, r3
 800c75a:	4604      	mov	r4, r0
 800c75c:	2900      	cmp	r1, #0
 800c75e:	f000 8099 	beq.w	800c894 <xQueueGenericSend+0x14c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c762:	2f02      	cmp	r7, #2
 800c764:	d10b      	bne.n	800c77e <xQueueGenericSend+0x36>
 800c766:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c768:	2b01      	cmp	r3, #1
 800c76a:	d008      	beq.n	800c77e <xQueueGenericSend+0x36>
 800c76c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c770:	f383 8811 	msr	BASEPRI, r3
 800c774:	f3bf 8f6f 	isb	sy
 800c778:	f3bf 8f4f 	dsb	sy
 800c77c:	e7fe      	b.n	800c77c <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c77e:	f001 fb2d 	bl	800dddc <xTaskGetSchedulerState>
 800c782:	4682      	mov	sl, r0
 800c784:	2800      	cmp	r0, #0
 800c786:	f000 809b 	beq.w	800c8c0 <xQueueGenericSend+0x178>
 800c78a:	f04f 0a00 	mov.w	sl, #0
					portYIELD_WITHIN_API();
 800c78e:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 800ca50 <xQueueGenericSend+0x308>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c792:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
 800c796:	f7ff fe15 	bl	800c3c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c79a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c79c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	f0c0 80f4 	bcc.w	800c98c <xQueueGenericSend+0x244>
 800c7a4:	2f02      	cmp	r7, #2
 800c7a6:	f000 80f1 	beq.w	800c98c <xQueueGenericSend+0x244>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c7aa:	9d01      	ldr	r5, [sp, #4]
 800c7ac:	2d00      	cmp	r5, #0
 800c7ae:	f000 814a 	beq.w	800ca46 <xQueueGenericSend+0x2fe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7b2:	ad02      	add	r5, sp, #8
				else if( xEntryTimeSet == pdFALSE )
 800c7b4:	f1ba 0f00 	cmp.w	sl, #0
 800c7b8:	f000 80e4 	beq.w	800c984 <xQueueGenericSend+0x23c>
		taskEXIT_CRITICAL();
 800c7bc:	f7ff fe24 	bl	800c408 <vPortExitCritical>
		vTaskSuspendAll();
 800c7c0:	f000 ffe4 	bl	800d78c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7c4:	f7ff fdfe 	bl	800c3c4 <vPortEnterCritical>
 800c7c8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c7cc:	2bff      	cmp	r3, #255	; 0xff
 800c7ce:	bf04      	itt	eq
 800c7d0:	2300      	moveq	r3, #0
 800c7d2:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800c7d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c7da:	2bff      	cmp	r3, #255	; 0xff
 800c7dc:	bf04      	itt	eq
 800c7de:	2300      	moveq	r3, #0
 800c7e0:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800c7e4:	f7ff fe10 	bl	800c408 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	a901      	add	r1, sp, #4
 800c7ec:	f001 faa2 	bl	800dd34 <xTaskCheckForTimeOut>
 800c7f0:	2800      	cmp	r0, #0
 800c7f2:	f040 80e8 	bne.w	800c9c6 <xQueueGenericSend+0x27e>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c7f6:	f7ff fde5 	bl	800c3c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c7fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800c7fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d06b      	beq.n	800c8da <xQueueGenericSend+0x192>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800c802:	f7ff fe01 	bl	800c408 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c806:	f7ff fddd 	bl	800c3c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c80a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c80e:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c810:	2d00      	cmp	r5, #0
 800c812:	dc05      	bgt.n	800c820 <xQueueGenericSend+0xd8>
 800c814:	e012      	b.n	800c83c <xQueueGenericSend+0xf4>
			--cTxLock;
 800c816:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c818:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c81c:	b25d      	sxtb	r5, r3
 800c81e:	d00d      	beq.n	800c83c <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c822:	b15b      	cbz	r3, 800c83c <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c824:	4630      	mov	r0, r6
 800c826:	f001 fa33 	bl	800dc90 <xTaskRemoveFromEventList>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d0f3      	beq.n	800c816 <xQueueGenericSend+0xce>
						vTaskMissedYield();
 800c82e:	f001 fac9 	bl	800ddc4 <vTaskMissedYield>
			--cTxLock;
 800c832:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c834:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c838:	b25d      	sxtb	r5, r3
 800c83a:	d1f1      	bne.n	800c820 <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
 800c83c:	23ff      	movs	r3, #255	; 0xff
 800c83e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c842:	f7ff fde1 	bl	800c408 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c846:	f7ff fdbd 	bl	800c3c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c84a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c84e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c850:	2d00      	cmp	r5, #0
 800c852:	dd15      	ble.n	800c880 <xQueueGenericSend+0x138>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c854:	f104 0a10 	add.w	sl, r4, #16
 800c858:	e004      	b.n	800c864 <xQueueGenericSend+0x11c>
				--cRxLock;
 800c85a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c85c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c860:	b25d      	sxtb	r5, r3
 800c862:	d00d      	beq.n	800c880 <xQueueGenericSend+0x138>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c864:	6923      	ldr	r3, [r4, #16]
 800c866:	b15b      	cbz	r3, 800c880 <xQueueGenericSend+0x138>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c868:	4650      	mov	r0, sl
 800c86a:	f001 fa11 	bl	800dc90 <xTaskRemoveFromEventList>
 800c86e:	2800      	cmp	r0, #0
 800c870:	d0f3      	beq.n	800c85a <xQueueGenericSend+0x112>
					vTaskMissedYield();
 800c872:	f001 faa7 	bl	800ddc4 <vTaskMissedYield>
				--cRxLock;
 800c876:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c878:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c87c:	b25d      	sxtb	r5, r3
 800c87e:	d1f1      	bne.n	800c864 <xQueueGenericSend+0x11c>
		pxQueue->cRxLock = queueUNLOCKED;
 800c880:	23ff      	movs	r3, #255	; 0xff
 800c882:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c886:	f7ff fdbf 	bl	800c408 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800c88a:	f001 f8cb 	bl	800da24 <xTaskResumeAll>
 800c88e:	f04f 0a01 	mov.w	sl, #1
 800c892:	e780      	b.n	800c796 <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c894:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800c896:	2b00      	cmp	r3, #0
 800c898:	f43f af63 	beq.w	800c762 <xQueueGenericSend+0x1a>
 800c89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a0:	f383 8811 	msr	BASEPRI, r3
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	e7fe      	b.n	800c8ac <xQueueGenericSend+0x164>
 800c8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8b2:	f383 8811 	msr	BASEPRI, r3
 800c8b6:	f3bf 8f6f 	isb	sy
 800c8ba:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
 800c8be:	e7fe      	b.n	800c8be <xQueueGenericSend+0x176>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8c0:	9b01      	ldr	r3, [sp, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f43f af63 	beq.w	800c78e <xQueueGenericSend+0x46>
 800c8c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8cc:	f383 8811 	msr	BASEPRI, r3
 800c8d0:	f3bf 8f6f 	isb	sy
 800c8d4:	f3bf 8f4f 	dsb	sy
 800c8d8:	e7fe      	b.n	800c8d8 <xQueueGenericSend+0x190>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c8da:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
 800c8de:	f7ff fd93 	bl	800c408 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c8e2:	4650      	mov	r0, sl
 800c8e4:	9901      	ldr	r1, [sp, #4]
 800c8e6:	f001 f945 	bl	800db74 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800c8ea:	f7ff fd6b 	bl	800c3c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c8ee:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c8f2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c8f4:	2d00      	cmp	r5, #0
 800c8f6:	dc05      	bgt.n	800c904 <xQueueGenericSend+0x1bc>
 800c8f8:	e012      	b.n	800c920 <xQueueGenericSend+0x1d8>
			--cTxLock;
 800c8fa:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c8fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c900:	b25d      	sxtb	r5, r3
 800c902:	d00d      	beq.n	800c920 <xQueueGenericSend+0x1d8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c904:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c906:	b15b      	cbz	r3, 800c920 <xQueueGenericSend+0x1d8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c908:	4630      	mov	r0, r6
 800c90a:	f001 f9c1 	bl	800dc90 <xTaskRemoveFromEventList>
 800c90e:	2800      	cmp	r0, #0
 800c910:	d0f3      	beq.n	800c8fa <xQueueGenericSend+0x1b2>
						vTaskMissedYield();
 800c912:	f001 fa57 	bl	800ddc4 <vTaskMissedYield>
			--cTxLock;
 800c916:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c918:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c91c:	b25d      	sxtb	r5, r3
 800c91e:	d1f1      	bne.n	800c904 <xQueueGenericSend+0x1bc>
		pxQueue->cTxLock = queueUNLOCKED;
 800c920:	23ff      	movs	r3, #255	; 0xff
 800c922:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c926:	f7ff fd6f 	bl	800c408 <vPortExitCritical>
	taskENTER_CRITICAL();
 800c92a:	f7ff fd4b 	bl	800c3c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800c92e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800c932:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c934:	2d00      	cmp	r5, #0
 800c936:	dc05      	bgt.n	800c944 <xQueueGenericSend+0x1fc>
 800c938:	e012      	b.n	800c960 <xQueueGenericSend+0x218>
				--cRxLock;
 800c93a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c93c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c940:	b25d      	sxtb	r5, r3
 800c942:	d00d      	beq.n	800c960 <xQueueGenericSend+0x218>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c944:	6923      	ldr	r3, [r4, #16]
 800c946:	b15b      	cbz	r3, 800c960 <xQueueGenericSend+0x218>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c948:	4650      	mov	r0, sl
 800c94a:	f001 f9a1 	bl	800dc90 <xTaskRemoveFromEventList>
 800c94e:	2800      	cmp	r0, #0
 800c950:	d0f3      	beq.n	800c93a <xQueueGenericSend+0x1f2>
					vTaskMissedYield();
 800c952:	f001 fa37 	bl	800ddc4 <vTaskMissedYield>
				--cRxLock;
 800c956:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c958:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c95c:	b25d      	sxtb	r5, r3
 800c95e:	d1f1      	bne.n	800c944 <xQueueGenericSend+0x1fc>
		pxQueue->cRxLock = queueUNLOCKED;
 800c960:	23ff      	movs	r3, #255	; 0xff
 800c962:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800c966:	f7ff fd4f 	bl	800c408 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800c96a:	f001 f85b 	bl	800da24 <xTaskResumeAll>
 800c96e:	2800      	cmp	r0, #0
 800c970:	d18d      	bne.n	800c88e <xQueueGenericSend+0x146>
					portYIELD_WITHIN_API();
 800c972:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c976:	f8c9 3000 	str.w	r3, [r9]
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	e784      	b.n	800c88e <xQueueGenericSend+0x146>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c984:	4628      	mov	r0, r5
 800c986:	f001 f9c9 	bl	800dd1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c98a:	e717      	b.n	800c7bc <xQueueGenericSend+0x74>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c98c:	463a      	mov	r2, r7
 800c98e:	4641      	mov	r1, r8
 800c990:	4620      	mov	r0, r4
 800c992:	f7ff fe25 	bl	800c5e0 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c996:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800c998:	b972      	cbnz	r2, 800c9b8 <xQueueGenericSend+0x270>
					else if( xYieldRequired != pdFALSE )
 800c99a:	b138      	cbz	r0, 800c9ac <xQueueGenericSend+0x264>
						queueYIELD_IF_USING_PREEMPTION();
 800c99c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9a0:	4b2b      	ldr	r3, [pc, #172]	; (800ca50 <xQueueGenericSend+0x308>)
 800c9a2:	601a      	str	r2, [r3, #0]
 800c9a4:	f3bf 8f4f 	dsb	sy
 800c9a8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c9ac:	f7ff fd2c 	bl	800c408 <vPortExitCritical>
				return pdPASS;
 800c9b0:	2001      	movs	r0, #1
}
 800c9b2:	b004      	add	sp, #16
 800c9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800c9bc:	f001 f968 	bl	800dc90 <xTaskRemoveFromEventList>
 800c9c0:	2800      	cmp	r0, #0
 800c9c2:	d0f3      	beq.n	800c9ac <xQueueGenericSend+0x264>
 800c9c4:	e7ea      	b.n	800c99c <xQueueGenericSend+0x254>
	taskENTER_CRITICAL();
 800c9c6:	f7ff fcfd 	bl	800c3c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800c9ca:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800c9ce:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9d0:	2d00      	cmp	r5, #0
 800c9d2:	dd11      	ble.n	800c9f8 <xQueueGenericSend+0x2b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9d4:	f104 0624 	add.w	r6, r4, #36	; 0x24
 800c9d8:	e004      	b.n	800c9e4 <xQueueGenericSend+0x29c>
			--cTxLock;
 800c9da:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c9dc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c9e0:	b25d      	sxtb	r5, r3
 800c9e2:	d009      	beq.n	800c9f8 <xQueueGenericSend+0x2b0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c9e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9e6:	b13b      	cbz	r3, 800c9f8 <xQueueGenericSend+0x2b0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	f001 f951 	bl	800dc90 <xTaskRemoveFromEventList>
 800c9ee:	2800      	cmp	r0, #0
 800c9f0:	d0f3      	beq.n	800c9da <xQueueGenericSend+0x292>
						vTaskMissedYield();
 800c9f2:	f001 f9e7 	bl	800ddc4 <vTaskMissedYield>
 800c9f6:	e7f0      	b.n	800c9da <xQueueGenericSend+0x292>
		pxQueue->cTxLock = queueUNLOCKED;
 800c9f8:	23ff      	movs	r3, #255	; 0xff
 800c9fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800c9fe:	f7ff fd03 	bl	800c408 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ca02:	f7ff fcdf 	bl	800c3c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ca06:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800ca0a:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca0c:	2d00      	cmp	r5, #0
 800ca0e:	dd11      	ble.n	800ca34 <xQueueGenericSend+0x2ec>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca10:	f104 0610 	add.w	r6, r4, #16
 800ca14:	e004      	b.n	800ca20 <xQueueGenericSend+0x2d8>
				--cRxLock;
 800ca16:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ca18:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ca1c:	b25d      	sxtb	r5, r3
 800ca1e:	d009      	beq.n	800ca34 <xQueueGenericSend+0x2ec>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca20:	6923      	ldr	r3, [r4, #16]
 800ca22:	b13b      	cbz	r3, 800ca34 <xQueueGenericSend+0x2ec>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca24:	4630      	mov	r0, r6
 800ca26:	f001 f933 	bl	800dc90 <xTaskRemoveFromEventList>
 800ca2a:	2800      	cmp	r0, #0
 800ca2c:	d0f3      	beq.n	800ca16 <xQueueGenericSend+0x2ce>
					vTaskMissedYield();
 800ca2e:	f001 f9c9 	bl	800ddc4 <vTaskMissedYield>
 800ca32:	e7f0      	b.n	800ca16 <xQueueGenericSend+0x2ce>
		pxQueue->cRxLock = queueUNLOCKED;
 800ca34:	23ff      	movs	r3, #255	; 0xff
 800ca36:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800ca3a:	f7ff fce5 	bl	800c408 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800ca3e:	f000 fff1 	bl	800da24 <xTaskResumeAll>
			return errQUEUE_FULL;
 800ca42:	2000      	movs	r0, #0
 800ca44:	e7b5      	b.n	800c9b2 <xQueueGenericSend+0x26a>
					taskEXIT_CRITICAL();
 800ca46:	f7ff fcdf 	bl	800c408 <vPortExitCritical>
					return errQUEUE_FULL;
 800ca4a:	4628      	mov	r0, r5
 800ca4c:	e7b1      	b.n	800c9b2 <xQueueGenericSend+0x26a>
 800ca4e:	bf00      	nop
 800ca50:	e000ed04 	.word	0xe000ed04

0800ca54 <xQueueReceive>:
{
 800ca54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca58:	b085      	sub	sp, #20
 800ca5a:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800ca5c:	2800      	cmp	r0, #0
 800ca5e:	f000 80f5 	beq.w	800cc4c <xQueueReceive+0x1f8>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ca62:	460e      	mov	r6, r1
 800ca64:	4604      	mov	r4, r0
 800ca66:	2900      	cmp	r1, #0
 800ca68:	f000 808a 	beq.w	800cb80 <xQueueReceive+0x12c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca6c:	f001 f9b6 	bl	800dddc <xTaskGetSchedulerState>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d079      	beq.n	800cb68 <xQueueReceive+0x114>
		taskENTER_CRITICAL();
 800ca74:	f7ff fca6 	bl	800c3c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca78:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca7a:	2d00      	cmp	r5, #0
 800ca7c:	f040 8148 	bne.w	800cd10 <xQueueReceive+0x2bc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca80:	9b01      	ldr	r3, [sp, #4]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	f000 80dc 	beq.w	800cc40 <xQueueReceive+0x1ec>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca88:	a802      	add	r0, sp, #8
 800ca8a:	f001 f947 	bl	800dd1c <vTaskInternalSetTimeOutState>
					portYIELD_WITHIN_API();
 800ca8e:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 800cd5c <xQueueReceive+0x308>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca92:	f104 0724 	add.w	r7, r4, #36	; 0x24
		taskEXIT_CRITICAL();
 800ca96:	f7ff fcb7 	bl	800c408 <vPortExitCritical>
		vTaskSuspendAll();
 800ca9a:	f000 fe77 	bl	800d78c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ca9e:	f7ff fc91 	bl	800c3c4 <vPortEnterCritical>
 800caa2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800caa6:	2bff      	cmp	r3, #255	; 0xff
 800caa8:	bf04      	itt	eq
 800caaa:	2300      	moveq	r3, #0
 800caac:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800cab0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cab4:	2bff      	cmp	r3, #255	; 0xff
 800cab6:	bf04      	itt	eq
 800cab8:	2300      	moveq	r3, #0
 800caba:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800cabe:	f7ff fca3 	bl	800c408 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cac2:	a901      	add	r1, sp, #4
 800cac4:	a802      	add	r0, sp, #8
 800cac6:	f001 f935 	bl	800dd34 <xTaskCheckForTimeOut>
 800caca:	2800      	cmp	r0, #0
 800cacc:	d165      	bne.n	800cb9a <xQueueReceive+0x146>
	taskENTER_CRITICAL();
 800cace:	f7ff fc79 	bl	800c3c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cad2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f000 80c2 	beq.w	800cc5e <xQueueReceive+0x20a>
	taskEXIT_CRITICAL();
 800cada:	f7ff fc95 	bl	800c408 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cade:	f7ff fc71 	bl	800c3c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800cae2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800cae6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cae8:	2d00      	cmp	r5, #0
 800caea:	dc05      	bgt.n	800caf8 <xQueueReceive+0xa4>
 800caec:	e012      	b.n	800cb14 <xQueueReceive+0xc0>
			--cTxLock;
 800caee:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800caf0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800caf4:	b25d      	sxtb	r5, r3
 800caf6:	d00d      	beq.n	800cb14 <xQueueReceive+0xc0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800caf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cafa:	b15b      	cbz	r3, 800cb14 <xQueueReceive+0xc0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cafc:	4638      	mov	r0, r7
 800cafe:	f001 f8c7 	bl	800dc90 <xTaskRemoveFromEventList>
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d0f3      	beq.n	800caee <xQueueReceive+0x9a>
						vTaskMissedYield();
 800cb06:	f001 f95d 	bl	800ddc4 <vTaskMissedYield>
			--cTxLock;
 800cb0a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb0c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cb10:	b25d      	sxtb	r5, r3
 800cb12:	d1f1      	bne.n	800caf8 <xQueueReceive+0xa4>
		pxQueue->cTxLock = queueUNLOCKED;
 800cb14:	23ff      	movs	r3, #255	; 0xff
 800cb16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800cb1a:	f7ff fc75 	bl	800c408 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cb1e:	f7ff fc51 	bl	800c3c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800cb22:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800cb26:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb28:	2d00      	cmp	r5, #0
 800cb2a:	dd15      	ble.n	800cb58 <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb2c:	f104 0910 	add.w	r9, r4, #16
 800cb30:	e004      	b.n	800cb3c <xQueueReceive+0xe8>
				--cRxLock;
 800cb32:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb34:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cb38:	b25d      	sxtb	r5, r3
 800cb3a:	d00d      	beq.n	800cb58 <xQueueReceive+0x104>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb3c:	6923      	ldr	r3, [r4, #16]
 800cb3e:	b15b      	cbz	r3, 800cb58 <xQueueReceive+0x104>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb40:	4648      	mov	r0, r9
 800cb42:	f001 f8a5 	bl	800dc90 <xTaskRemoveFromEventList>
 800cb46:	2800      	cmp	r0, #0
 800cb48:	d0f3      	beq.n	800cb32 <xQueueReceive+0xde>
					vTaskMissedYield();
 800cb4a:	f001 f93b 	bl	800ddc4 <vTaskMissedYield>
				--cRxLock;
 800cb4e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb50:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cb54:	b25d      	sxtb	r5, r3
 800cb56:	d1f1      	bne.n	800cb3c <xQueueReceive+0xe8>
		pxQueue->cRxLock = queueUNLOCKED;
 800cb58:	23ff      	movs	r3, #255	; 0xff
 800cb5a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800cb5e:	f7ff fc53 	bl	800c408 <vPortExitCritical>
				( void ) xTaskResumeAll();
 800cb62:	f000 ff5f 	bl	800da24 <xTaskResumeAll>
		taskENTER_CRITICAL();
 800cb66:	e062      	b.n	800cc2e <xQueueReceive+0x1da>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb68:	9b01      	ldr	r3, [sp, #4]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d082      	beq.n	800ca74 <xQueueReceive+0x20>
 800cb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb72:	f383 8811 	msr	BASEPRI, r3
 800cb76:	f3bf 8f6f 	isb	sy
 800cb7a:	f3bf 8f4f 	dsb	sy
 800cb7e:	e7fe      	b.n	800cb7e <xQueueReceive+0x12a>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb80:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f43f af72 	beq.w	800ca6c <xQueueReceive+0x18>
 800cb88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb8c:	f383 8811 	msr	BASEPRI, r3
 800cb90:	f3bf 8f6f 	isb	sy
 800cb94:	f3bf 8f4f 	dsb	sy
 800cb98:	e7fe      	b.n	800cb98 <xQueueReceive+0x144>
	taskENTER_CRITICAL();
 800cb9a:	f7ff fc13 	bl	800c3c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800cb9e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800cba2:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cba4:	2d00      	cmp	r5, #0
 800cba6:	dc05      	bgt.n	800cbb4 <xQueueReceive+0x160>
 800cba8:	e012      	b.n	800cbd0 <xQueueReceive+0x17c>
			--cTxLock;
 800cbaa:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cbac:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cbb0:	b25d      	sxtb	r5, r3
 800cbb2:	d00d      	beq.n	800cbd0 <xQueueReceive+0x17c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cbb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cbb6:	b15b      	cbz	r3, 800cbd0 <xQueueReceive+0x17c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbb8:	4638      	mov	r0, r7
 800cbba:	f001 f869 	bl	800dc90 <xTaskRemoveFromEventList>
 800cbbe:	2800      	cmp	r0, #0
 800cbc0:	d0f3      	beq.n	800cbaa <xQueueReceive+0x156>
						vTaskMissedYield();
 800cbc2:	f001 f8ff 	bl	800ddc4 <vTaskMissedYield>
			--cTxLock;
 800cbc6:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cbc8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cbcc:	b25d      	sxtb	r5, r3
 800cbce:	d1f1      	bne.n	800cbb4 <xQueueReceive+0x160>
		pxQueue->cTxLock = queueUNLOCKED;
 800cbd0:	23ff      	movs	r3, #255	; 0xff
 800cbd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800cbd6:	f7ff fc17 	bl	800c408 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cbda:	f7ff fbf3 	bl	800c3c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800cbde:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800cbe2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbe4:	2d00      	cmp	r5, #0
 800cbe6:	dd15      	ble.n	800cc14 <xQueueReceive+0x1c0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbe8:	f104 0910 	add.w	r9, r4, #16
 800cbec:	e004      	b.n	800cbf8 <xQueueReceive+0x1a4>
				--cRxLock;
 800cbee:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbf0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cbf4:	b25d      	sxtb	r5, r3
 800cbf6:	d00d      	beq.n	800cc14 <xQueueReceive+0x1c0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbf8:	6923      	ldr	r3, [r4, #16]
 800cbfa:	b15b      	cbz	r3, 800cc14 <xQueueReceive+0x1c0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbfc:	4648      	mov	r0, r9
 800cbfe:	f001 f847 	bl	800dc90 <xTaskRemoveFromEventList>
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d0f3      	beq.n	800cbee <xQueueReceive+0x19a>
					vTaskMissedYield();
 800cc06:	f001 f8dd 	bl	800ddc4 <vTaskMissedYield>
				--cRxLock;
 800cc0a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc0c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cc10:	b25d      	sxtb	r5, r3
 800cc12:	d1f1      	bne.n	800cbf8 <xQueueReceive+0x1a4>
		pxQueue->cRxLock = queueUNLOCKED;
 800cc14:	23ff      	movs	r3, #255	; 0xff
 800cc16:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800cc1a:	f7ff fbf5 	bl	800c408 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800cc1e:	f000 ff01 	bl	800da24 <xTaskResumeAll>
	taskENTER_CRITICAL();
 800cc22:	f7ff fbcf 	bl	800c3c4 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cc26:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cc28:	b153      	cbz	r3, 800cc40 <xQueueReceive+0x1ec>
	taskEXIT_CRITICAL();
 800cc2a:	f7ff fbed 	bl	800c408 <vPortExitCritical>
		taskENTER_CRITICAL();
 800cc2e:	f7ff fbc9 	bl	800c3c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc32:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc34:	2d00      	cmp	r5, #0
 800cc36:	d16b      	bne.n	800cd10 <xQueueReceive+0x2bc>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cc38:	9b01      	ldr	r3, [sp, #4]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	f47f af2b 	bne.w	800ca96 <xQueueReceive+0x42>
					taskEXIT_CRITICAL();
 800cc40:	f7ff fbe2 	bl	800c408 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800cc44:	2000      	movs	r0, #0
}
 800cc46:	b005      	add	sp, #20
 800cc48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc50:	f383 8811 	msr	BASEPRI, r3
 800cc54:	f3bf 8f6f 	isb	sy
 800cc58:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
 800cc5c:	e7fe      	b.n	800cc5c <xQueueReceive+0x208>
	taskEXIT_CRITICAL();
 800cc5e:	f7ff fbd3 	bl	800c408 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc62:	4638      	mov	r0, r7
 800cc64:	9901      	ldr	r1, [sp, #4]
 800cc66:	f000 ff85 	bl	800db74 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 800cc6a:	f7ff fbab 	bl	800c3c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800cc6e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800cc72:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc74:	2d00      	cmp	r5, #0
 800cc76:	dc05      	bgt.n	800cc84 <xQueueReceive+0x230>
 800cc78:	e012      	b.n	800cca0 <xQueueReceive+0x24c>
			--cTxLock;
 800cc7a:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc7c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cc80:	b25d      	sxtb	r5, r3
 800cc82:	d00d      	beq.n	800cca0 <xQueueReceive+0x24c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cc86:	b15b      	cbz	r3, 800cca0 <xQueueReceive+0x24c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc88:	4638      	mov	r0, r7
 800cc8a:	f001 f801 	bl	800dc90 <xTaskRemoveFromEventList>
 800cc8e:	2800      	cmp	r0, #0
 800cc90:	d0f3      	beq.n	800cc7a <xQueueReceive+0x226>
						vTaskMissedYield();
 800cc92:	f001 f897 	bl	800ddc4 <vTaskMissedYield>
			--cTxLock;
 800cc96:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc98:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cc9c:	b25d      	sxtb	r5, r3
 800cc9e:	d1f1      	bne.n	800cc84 <xQueueReceive+0x230>
		pxQueue->cTxLock = queueUNLOCKED;
 800cca0:	23ff      	movs	r3, #255	; 0xff
 800cca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800cca6:	f7ff fbaf 	bl	800c408 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ccaa:	f7ff fb8b 	bl	800c3c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ccae:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800ccb2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ccb4:	2d00      	cmp	r5, #0
 800ccb6:	dd15      	ble.n	800cce4 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccb8:	f104 0910 	add.w	r9, r4, #16
 800ccbc:	e004      	b.n	800ccc8 <xQueueReceive+0x274>
				--cRxLock;
 800ccbe:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ccc0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ccc4:	b25d      	sxtb	r5, r3
 800ccc6:	d00d      	beq.n	800cce4 <xQueueReceive+0x290>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccc8:	6923      	ldr	r3, [r4, #16]
 800ccca:	b15b      	cbz	r3, 800cce4 <xQueueReceive+0x290>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cccc:	4648      	mov	r0, r9
 800ccce:	f000 ffdf 	bl	800dc90 <xTaskRemoveFromEventList>
 800ccd2:	2800      	cmp	r0, #0
 800ccd4:	d0f3      	beq.n	800ccbe <xQueueReceive+0x26a>
					vTaskMissedYield();
 800ccd6:	f001 f875 	bl	800ddc4 <vTaskMissedYield>
				--cRxLock;
 800ccda:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ccdc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800cce0:	b25d      	sxtb	r5, r3
 800cce2:	d1f1      	bne.n	800ccc8 <xQueueReceive+0x274>
		pxQueue->cRxLock = queueUNLOCKED;
 800cce4:	23ff      	movs	r3, #255	; 0xff
 800cce6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800ccea:	f7ff fb8d 	bl	800c408 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 800ccee:	f000 fe99 	bl	800da24 <xTaskResumeAll>
 800ccf2:	2800      	cmp	r0, #0
 800ccf4:	d19b      	bne.n	800cc2e <xQueueReceive+0x1da>
					portYIELD_WITHIN_API();
 800ccf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ccfa:	f8c8 3000 	str.w	r3, [r8]
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 800cd06:	f7ff fb5d 	bl	800c3c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd0a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd0c:	2d00      	cmp	r5, #0
 800cd0e:	d093      	beq.n	800cc38 <xQueueReceive+0x1e4>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cd10:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cd12:	b15a      	cbz	r2, 800cd2c <xQueueReceive+0x2d8>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800cd14:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cd16:	6863      	ldr	r3, [r4, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800cd18:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cd1a:	4299      	cmp	r1, r3
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800cd1c:	60e1      	str	r1, [r4, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800cd1e:	bf28      	it	cs
 800cd20:	6821      	ldrcs	r1, [r4, #0]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800cd22:	4630      	mov	r0, r6
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800cd24:	bf28      	it	cs
 800cd26:	60e1      	strcs	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800cd28:	f001 fc36 	bl	800e598 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cd2c:	3d01      	subs	r5, #1
 800cd2e:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd30:	6923      	ldr	r3, [r4, #16]
 800cd32:	b91b      	cbnz	r3, 800cd3c <xQueueReceive+0x2e8>
				taskEXIT_CRITICAL();
 800cd34:	f7ff fb68 	bl	800c408 <vPortExitCritical>
				return pdPASS;
 800cd38:	2001      	movs	r0, #1
 800cd3a:	e784      	b.n	800cc46 <xQueueReceive+0x1f2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd3c:	f104 0010 	add.w	r0, r4, #16
 800cd40:	f000 ffa6 	bl	800dc90 <xTaskRemoveFromEventList>
 800cd44:	2800      	cmp	r0, #0
 800cd46:	d0f5      	beq.n	800cd34 <xQueueReceive+0x2e0>
						queueYIELD_IF_USING_PREEMPTION();
 800cd48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd4c:	4b03      	ldr	r3, [pc, #12]	; (800cd5c <xQueueReceive+0x308>)
 800cd4e:	601a      	str	r2, [r3, #0]
 800cd50:	f3bf 8f4f 	dsb	sy
 800cd54:	f3bf 8f6f 	isb	sy
 800cd58:	e7ec      	b.n	800cd34 <xQueueReceive+0x2e0>
 800cd5a:	bf00      	nop
 800cd5c:	e000ed04 	.word	0xe000ed04

0800cd60 <vQueueAddToRegistry>:

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cd60:	4b13      	ldr	r3, [pc, #76]	; (800cdb0 <vQueueAddToRegistry+0x50>)
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	b17a      	cbz	r2, 800cd86 <vQueueAddToRegistry+0x26>
 800cd66:	689a      	ldr	r2, [r3, #8]
 800cd68:	b1aa      	cbz	r2, 800cd96 <vQueueAddToRegistry+0x36>
 800cd6a:	691a      	ldr	r2, [r3, #16]
 800cd6c:	b1aa      	cbz	r2, 800cd9a <vQueueAddToRegistry+0x3a>
 800cd6e:	699a      	ldr	r2, [r3, #24]
 800cd70:	b1aa      	cbz	r2, 800cd9e <vQueueAddToRegistry+0x3e>
 800cd72:	6a1a      	ldr	r2, [r3, #32]
 800cd74:	b1aa      	cbz	r2, 800cda2 <vQueueAddToRegistry+0x42>
 800cd76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cd78:	b1aa      	cbz	r2, 800cda6 <vQueueAddToRegistry+0x46>
 800cd7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd7c:	b112      	cbz	r2, 800cd84 <vQueueAddToRegistry+0x24>
 800cd7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd80:	b19a      	cbz	r2, 800cdaa <vQueueAddToRegistry+0x4a>
 800cd82:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd84:	2206      	movs	r2, #6
	{
 800cd86:	b410      	push	{r4}
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cd88:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 800cd8c:	6060      	str	r0, [r4, #4]
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cd8e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cd92:	bc10      	pop	{r4}
 800cd94:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cd96:	2201      	movs	r2, #1
 800cd98:	e7f5      	b.n	800cd86 <vQueueAddToRegistry+0x26>
 800cd9a:	2202      	movs	r2, #2
 800cd9c:	e7f3      	b.n	800cd86 <vQueueAddToRegistry+0x26>
 800cd9e:	2203      	movs	r2, #3
 800cda0:	e7f1      	b.n	800cd86 <vQueueAddToRegistry+0x26>
 800cda2:	2204      	movs	r2, #4
 800cda4:	e7ef      	b.n	800cd86 <vQueueAddToRegistry+0x26>
 800cda6:	2205      	movs	r2, #5
 800cda8:	e7ed      	b.n	800cd86 <vQueueAddToRegistry+0x26>
 800cdaa:	2207      	movs	r2, #7
 800cdac:	e7eb      	b.n	800cd86 <vQueueAddToRegistry+0x26>
 800cdae:	bf00      	nop
 800cdb0:	200044d0 	.word	0x200044d0

0800cdb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cdb4:	b570      	push	{r4, r5, r6, lr}
 800cdb6:	4604      	mov	r4, r0
 800cdb8:	460e      	mov	r6, r1
 800cdba:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cdbc:	f7ff fb02 	bl	800c3c4 <vPortEnterCritical>
 800cdc0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800cdc4:	2bff      	cmp	r3, #255	; 0xff
 800cdc6:	bf04      	itt	eq
 800cdc8:	2300      	moveq	r3, #0
 800cdca:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800cdce:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800cdd2:	2bff      	cmp	r3, #255	; 0xff
 800cdd4:	bf04      	itt	eq
 800cdd6:	2300      	moveq	r3, #0
 800cdd8:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800cddc:	f7ff fb14 	bl	800c408 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800cde0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d045      	beq.n	800ce72 <vQueueWaitForMessageRestricted+0xbe>
	taskENTER_CRITICAL();
 800cde6:	f7ff faed 	bl	800c3c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800cdea:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 800cdee:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cdf0:	2d00      	cmp	r5, #0
 800cdf2:	dd15      	ble.n	800ce20 <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cdf4:	f104 0624 	add.w	r6, r4, #36	; 0x24
 800cdf8:	e004      	b.n	800ce04 <vQueueWaitForMessageRestricted+0x50>
			--cTxLock;
 800cdfa:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cdfc:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ce00:	b25d      	sxtb	r5, r3
 800ce02:	d00d      	beq.n	800ce20 <vQueueWaitForMessageRestricted+0x6c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ce06:	b15b      	cbz	r3, 800ce20 <vQueueWaitForMessageRestricted+0x6c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce08:	4630      	mov	r0, r6
 800ce0a:	f000 ff41 	bl	800dc90 <xTaskRemoveFromEventList>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	d0f3      	beq.n	800cdfa <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
 800ce12:	f000 ffd7 	bl	800ddc4 <vTaskMissedYield>
			--cTxLock;
 800ce16:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce18:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ce1c:	b25d      	sxtb	r5, r3
 800ce1e:	d1f1      	bne.n	800ce04 <vQueueWaitForMessageRestricted+0x50>
		pxQueue->cTxLock = queueUNLOCKED;
 800ce20:	23ff      	movs	r3, #255	; 0xff
 800ce22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800ce26:	f7ff faef 	bl	800c408 <vPortExitCritical>
	taskENTER_CRITICAL();
 800ce2a:	f7ff facb 	bl	800c3c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800ce2e:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800ce32:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce34:	2d00      	cmp	r5, #0
 800ce36:	dd15      	ble.n	800ce64 <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce38:	f104 0610 	add.w	r6, r4, #16
 800ce3c:	e004      	b.n	800ce48 <vQueueWaitForMessageRestricted+0x94>
				--cRxLock;
 800ce3e:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce40:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ce44:	b25d      	sxtb	r5, r3
 800ce46:	d00d      	beq.n	800ce64 <vQueueWaitForMessageRestricted+0xb0>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce48:	6923      	ldr	r3, [r4, #16]
 800ce4a:	b15b      	cbz	r3, 800ce64 <vQueueWaitForMessageRestricted+0xb0>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce4c:	4630      	mov	r0, r6
 800ce4e:	f000 ff1f 	bl	800dc90 <xTaskRemoveFromEventList>
 800ce52:	2800      	cmp	r0, #0
 800ce54:	d0f3      	beq.n	800ce3e <vQueueWaitForMessageRestricted+0x8a>
					vTaskMissedYield();
 800ce56:	f000 ffb5 	bl	800ddc4 <vTaskMissedYield>
				--cRxLock;
 800ce5a:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce5c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ce60:	b25d      	sxtb	r5, r3
 800ce62:	d1f1      	bne.n	800ce48 <vQueueWaitForMessageRestricted+0x94>
		pxQueue->cRxLock = queueUNLOCKED;
 800ce64:	23ff      	movs	r3, #255	; 0xff
 800ce66:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
 800ce6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800ce6e:	f7ff bacb 	b.w	800c408 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ce72:	462a      	mov	r2, r5
 800ce74:	4631      	mov	r1, r6
 800ce76:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800ce7a:	f000 febf 	bl	800dbfc <vTaskPlaceOnEventListRestricted>
 800ce7e:	e7b2      	b.n	800cde6 <vQueueWaitForMessageRestricted+0x32>

0800ce80 <prvReadBytesFromBuffer>:
static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800ce80:	4293      	cmp	r3, r2
 800ce82:	bf28      	it	cs
 800ce84:	4613      	movcs	r3, r2
{
 800ce86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800ce8a:	461c      	mov	r4, r3

	if( xCount > ( size_t ) 0 )
 800ce8c:	b1eb      	cbz	r3, 800ceca <prvReadBytesFromBuffer+0x4a>
 800ce8e:	4690      	mov	r8, r2
	{
		xNextTail = pxStreamBuffer->xTail;
 800ce90:	6805      	ldr	r5, [r0, #0]

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 800ce92:	6882      	ldr	r2, [r0, #8]
 800ce94:	4606      	mov	r6, r0
 800ce96:	1b57      	subs	r7, r2, r5
 800ce98:	429f      	cmp	r7, r3
 800ce9a:	bf28      	it	cs
 800ce9c:	461f      	movcs	r7, r3

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 800ce9e:	45b8      	cmp	r8, r7
 800cea0:	d216      	bcs.n	800ced0 <prvReadBytesFromBuffer+0x50>
 800cea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea6:	f383 8811 	msr	BASEPRI, r3
 800ceaa:	f3bf 8f6f 	isb	sy
 800ceae:	f3bf 8f4f 	dsb	sy
 800ceb2:	e7fe      	b.n	800ceb2 <prvReadBytesFromBuffer+0x32>
		that could be read in the first read... */
		if( xCount > xFirstLength )
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
			memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800ceb4:	69b1      	ldr	r1, [r6, #24]
 800ceb6:	4438      	add	r0, r7
 800ceb8:	1be2      	subs	r2, r4, r7
 800ceba:	f001 fb6d 	bl	800e598 <memcpy>

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;

		if( xNextTail >= pxStreamBuffer->xLength )
 800cebe:	68b3      	ldr	r3, [r6, #8]
		xNextTail += xCount;
 800cec0:	4425      	add	r5, r4
		if( xNextTail >= pxStreamBuffer->xLength )
 800cec2:	42ab      	cmp	r3, r5
		{
			xNextTail -= pxStreamBuffer->xLength;
 800cec4:	bf98      	it	ls
 800cec6:	1aed      	subls	r5, r5, r3
		}

		pxStreamBuffer->xTail = xNextTail;
 800cec8:	6035      	str	r5, [r6, #0]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
}
 800ceca:	4620      	mov	r0, r4
 800cecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ced0:	460b      	mov	r3, r1
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 800ced2:	19e9      	adds	r1, r5, r7
 800ced4:	428a      	cmp	r2, r1
 800ced6:	d208      	bcs.n	800ceea <prvReadBytesFromBuffer+0x6a>
 800ced8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cedc:	f383 8811 	msr	BASEPRI, r3
 800cee0:	f3bf 8f6f 	isb	sy
 800cee4:	f3bf 8f4f 	dsb	sy
 800cee8:	e7fe      	b.n	800cee8 <prvReadBytesFromBuffer+0x68>
		memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800ceea:	6981      	ldr	r1, [r0, #24]
 800ceec:	463a      	mov	r2, r7
 800ceee:	4618      	mov	r0, r3
 800cef0:	4429      	add	r1, r5
 800cef2:	f001 fb51 	bl	800e598 <memcpy>
		if( xCount > xFirstLength )
 800cef6:	42bc      	cmp	r4, r7
 800cef8:	d9e1      	bls.n	800cebe <prvReadBytesFromBuffer+0x3e>
			configASSERT( xCount <= xMaxCount );
 800cefa:	45a0      	cmp	r8, r4
 800cefc:	d2da      	bcs.n	800ceb4 <prvReadBytesFromBuffer+0x34>
 800cefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	e7fe      	b.n	800cf0e <prvReadBytesFromBuffer+0x8e>

0800cf10 <prvWriteBytesToBuffer.part.0>:
static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
 800cf10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800cf14:	6883      	ldr	r3, [r0, #8]
	xNextHead = pxStreamBuffer->xHead;
 800cf16:	6845      	ldr	r5, [r0, #4]
static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
 800cf18:	4616      	mov	r6, r2
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 800cf1a:	1b5f      	subs	r7, r3, r5
 800cf1c:	4297      	cmp	r7, r2
 800cf1e:	bf28      	it	cs
 800cf20:	4617      	movcs	r7, r2
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 800cf22:	19ea      	adds	r2, r5, r7
 800cf24:	4293      	cmp	r3, r2
 800cf26:	d208      	bcs.n	800cf3a <prvWriteBytesToBuffer.part.0+0x2a>
 800cf28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2c:	f383 8811 	msr	BASEPRI, r3
 800cf30:	f3bf 8f6f 	isb	sy
 800cf34:	f3bf 8f4f 	dsb	sy
 800cf38:	e7fe      	b.n	800cf38 <prvWriteBytesToBuffer.part.0+0x28>
	memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	6980      	ldr	r0, [r0, #24]
 800cf3e:	463a      	mov	r2, r7
 800cf40:	4428      	add	r0, r5
 800cf42:	4688      	mov	r8, r1
 800cf44:	f001 fb28 	bl	800e598 <memcpy>
	if( xCount > xFirstLength )
 800cf48:	42be      	cmp	r6, r7
 800cf4a:	d911      	bls.n	800cf70 <prvWriteBytesToBuffer.part.0+0x60>
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 800cf4c:	68a3      	ldr	r3, [r4, #8]
 800cf4e:	1bf2      	subs	r2, r6, r7
 800cf50:	429a      	cmp	r2, r3
 800cf52:	d908      	bls.n	800cf66 <prvWriteBytesToBuffer.part.0+0x56>
 800cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	e7fe      	b.n	800cf64 <prvWriteBytesToBuffer.part.0+0x54>
		memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800cf66:	69a0      	ldr	r0, [r4, #24]
 800cf68:	eb08 0107 	add.w	r1, r8, r7
 800cf6c:	f001 fb14 	bl	800e598 <memcpy>
	if( xNextHead >= pxStreamBuffer->xLength )
 800cf70:	68a3      	ldr	r3, [r4, #8]
	xNextHead += xCount;
 800cf72:	4435      	add	r5, r6
	if( xNextHead >= pxStreamBuffer->xLength )
 800cf74:	429d      	cmp	r5, r3
		xNextHead -= pxStreamBuffer->xLength;
 800cf76:	bf28      	it	cs
 800cf78:	1aed      	subcs	r5, r5, r3
}
 800cf7a:	4630      	mov	r0, r6
	pxStreamBuffer->xHead = xNextHead;
 800cf7c:	6065      	str	r5, [r4, #4]
}
 800cf7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf82:	bf00      	nop

0800cf84 <xStreamBufferGenericCreate>:
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800cf84:	2804      	cmp	r0, #4
 800cf86:	d808      	bhi.n	800cf9a <xStreamBufferGenericCreate+0x16>
 800cf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf8c:	f383 8811 	msr	BASEPRI, r3
 800cf90:	f3bf 8f6f 	isb	sy
 800cf94:	f3bf 8f4f 	dsb	sy
 800cf98:	e7fe      	b.n	800cf98 <xStreamBufferGenericCreate+0x14>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800cf9a:	4288      	cmp	r0, r1
	{
 800cf9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa0:	4605      	mov	r5, r0
 800cfa2:	460e      	mov	r6, r1
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800cfa4:	d208      	bcs.n	800cfb8 <xStreamBufferGenericCreate+0x34>
 800cfa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfaa:	f383 8811 	msr	BASEPRI, r3
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	e7fe      	b.n	800cfb6 <xStreamBufferGenericCreate+0x32>
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800cfb8:	3025      	adds	r0, #37	; 0x25
 800cfba:	4617      	mov	r7, r2
 800cfbc:	f7ff f850 	bl	800c060 <pvPortMalloc>
		if( pucAllocatedMemory != NULL )
 800cfc0:	4604      	mov	r4, r0
 800cfc2:	b308      	cbz	r0, 800d008 <xStreamBufferGenericCreate+0x84>
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800cfc4:	f100 0824 	add.w	r8, r0, #36	; 0x24
		xBufferSizeBytes++;
 800cfc8:	3501      	adds	r5, #1
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800cfca:	462a      	mov	r2, r5
 800cfcc:	4640      	mov	r0, r8
 800cfce:	2155      	movs	r1, #85	; 0x55
 800cfd0:	f001 fb0a 	bl	800e5e8 <memset>
 800cfd4:	4580      	cmp	r8, r0
 800cfd6:	d008      	beq.n	800cfea <xStreamBufferGenericCreate+0x66>
 800cfd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfdc:	f383 8811 	msr	BASEPRI, r3
 800cfe0:	f3bf 8f6f 	isb	sy
 800cfe4:	f3bf 8f4f 	dsb	sy
 800cfe8:	e7fe      	b.n	800cfe8 <xStreamBufferGenericCreate+0x64>
	}
	#endif

	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 800cfea:	2224      	movs	r2, #36	; 0x24
 800cfec:	2100      	movs	r1, #0
 800cfee:	4620      	mov	r0, r4
 800cff0:	f001 fafa 	bl	800e5e8 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
	pxStreamBuffer->xLength = xBufferSizeBytes;
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800cff4:	2e01      	cmp	r6, #1
 800cff6:	bf38      	it	cc
 800cff8:	2601      	movcc	r6, #1
	pxStreamBuffer->pucBuffer = pucBuffer;
 800cffa:	f8c4 8018 	str.w	r8, [r4, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 800cffe:	e9c4 5602 	strd	r5, r6, [r4, #8]

	if( xIsMessageBuffer != pdFALSE )
 800d002:	b10f      	cbz	r7, 800d008 <xStreamBufferGenericCreate+0x84>
	{
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
 800d004:	2301      	movs	r3, #1
 800d006:	7723      	strb	r3, [r4, #28]
	}
 800d008:	4620      	mov	r0, r4
 800d00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d00e:	bf00      	nop

0800d010 <xStreamBufferSendFromISR>:
	configASSERT( pvTxData );
 800d010:	b389      	cbz	r1, 800d076 <xStreamBufferSendFromISR+0x66>
{
 800d012:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d014:	4604      	mov	r4, r0
 800d016:	b085      	sub	sp, #20
	configASSERT( pxStreamBuffer );
 800d018:	b320      	cbz	r0, 800d064 <xStreamBufferSendFromISR+0x54>
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800d01a:	461d      	mov	r5, r3
 800d01c:	7f03      	ldrb	r3, [r0, #28]
 800d01e:	460e      	mov	r6, r1
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800d020:	6880      	ldr	r0, [r0, #8]
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800d022:	f013 0101 	ands.w	r1, r3, #1
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800d026:	6823      	ldr	r3, [r4, #0]
	xSpace -= pxStreamBuffer->xHead;
 800d028:	f8d4 c004 	ldr.w	ip, [r4, #4]
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 800d02c:	4403      	add	r3, r0
 800d02e:	f103 33ff 	add.w	r3, r3, #4294967295
	xSpace -= ( size_t ) 1;
 800d032:	eba3 030c 	sub.w	r3, r3, ip
size_t xRequiredSpace = xDataLengthBytes;
 800d036:	bf0c      	ite	eq
 800d038:	4617      	moveq	r7, r2
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800d03a:	1d17      	addne	r7, r2, #4
	if( xSpace >= pxStreamBuffer->xLength )
 800d03c:	4298      	cmp	r0, r3
		xSpace -= pxStreamBuffer->xLength;
 800d03e:	bf98      	it	ls
 800d040:	1a1b      	subls	r3, r3, r0
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800d042:	9203      	str	r2, [sp, #12]
	if( xSpace == ( size_t ) 0 )
 800d044:	b313      	cbz	r3, 800d08c <xStreamBufferSendFromISR+0x7c>
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800d046:	b9f9      	cbnz	r1, 800d088 <xStreamBufferSendFromISR+0x78>
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace ); /*lint !e9044 Function parameter modified to ensure it is capped to available space. */
 800d048:	429a      	cmp	r2, r3
 800d04a:	bf28      	it	cs
 800d04c:	461a      	movcs	r2, r3
 800d04e:	9203      	str	r2, [sp, #12]
	configASSERT( xCount > ( size_t ) 0 );
 800d050:	bb02      	cbnz	r2, 800d094 <xStreamBufferSendFromISR+0x84>
 800d052:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d056:	f383 8811 	msr	BASEPRI, r3
 800d05a:	f3bf 8f6f 	isb	sy
 800d05e:	f3bf 8f4f 	dsb	sy
 800d062:	e7fe      	b.n	800d062 <xStreamBufferSendFromISR+0x52>
 800d064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d068:	f383 8811 	msr	BASEPRI, r3
 800d06c:	f3bf 8f6f 	isb	sy
 800d070:	f3bf 8f4f 	dsb	sy
	configASSERT( pxStreamBuffer );
 800d074:	e7fe      	b.n	800d074 <xStreamBufferSendFromISR+0x64>
 800d076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f3bf 8f4f 	dsb	sy
	configASSERT( pvTxData );
 800d086:	e7fe      	b.n	800d086 <xStreamBufferSendFromISR+0x76>
	else if( xSpace >= xRequiredSpace )
 800d088:	429f      	cmp	r7, r3
 800d08a:	d92d      	bls.n	800d0e8 <xStreamBufferSendFromISR+0xd8>
		xReturn = 0;
 800d08c:	2600      	movs	r6, #0
}
 800d08e:	4630      	mov	r0, r6
 800d090:	b005      	add	sp, #20
 800d092:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d094:	4631      	mov	r1, r6
 800d096:	4620      	mov	r0, r4
 800d098:	f7ff ff3a 	bl	800cf10 <prvWriteBytesToBuffer.part.0>
	if( xReturn > ( size_t ) 0 )
 800d09c:	4606      	mov	r6, r0
 800d09e:	2800      	cmp	r0, #0
 800d0a0:	d0f5      	beq.n	800d08e <xStreamBufferSendFromISR+0x7e>
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800d0a2:	68a2      	ldr	r2, [r4, #8]
 800d0a4:	6863      	ldr	r3, [r4, #4]
	xCount -= pxStreamBuffer->xTail;
 800d0a6:	6821      	ldr	r1, [r4, #0]
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800d0a8:	4413      	add	r3, r2
	xCount -= pxStreamBuffer->xTail;
 800d0aa:	1a5b      	subs	r3, r3, r1
	if ( xCount >= pxStreamBuffer->xLength )
 800d0ac:	429a      	cmp	r2, r3
		xCount -= pxStreamBuffer->xLength;
 800d0ae:	bf98      	it	ls
 800d0b0:	1a9b      	subls	r3, r3, r2
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 800d0b2:	68e2      	ldr	r2, [r4, #12]
 800d0b4:	429a      	cmp	r2, r3
 800d0b6:	d8ea      	bhi.n	800d08e <xStreamBufferSendFromISR+0x7e>
	__asm volatile
 800d0b8:	f3ef 8711 	mrs	r7, BASEPRI
 800d0bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c0:	f383 8811 	msr	BASEPRI, r3
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	f3bf 8f4f 	dsb	sy
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800d0cc:	6923      	ldr	r3, [r4, #16]
 800d0ce:	b143      	cbz	r3, 800d0e2 <xStreamBufferSendFromISR+0xd2>
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	6920      	ldr	r0, [r4, #16]
 800d0d4:	461a      	mov	r2, r3
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	9500      	str	r5, [sp, #0]
 800d0da:	f000 ffaf 	bl	800e03c <xTaskGenericNotifyFromISR>
 800d0de:	2300      	movs	r3, #0
 800d0e0:	6123      	str	r3, [r4, #16]
	__asm volatile
 800d0e2:	f387 8811 	msr	BASEPRI, r7
	return xReturn;
 800d0e6:	e7d2      	b.n	800d08e <xStreamBufferSendFromISR+0x7e>
	configASSERT( xCount > ( size_t ) 0 );
 800d0e8:	2204      	movs	r2, #4
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	a903      	add	r1, sp, #12
 800d0ee:	f7ff ff0f 	bl	800cf10 <prvWriteBytesToBuffer.part.0>
	if( xShouldWrite != pdFALSE )
 800d0f2:	9a03      	ldr	r2, [sp, #12]
 800d0f4:	e7ac      	b.n	800d050 <xStreamBufferSendFromISR+0x40>
 800d0f6:	bf00      	nop

0800d0f8 <xStreamBufferReceive>:
	configASSERT( pvRxData );
 800d0f8:	b341      	cbz	r1, 800d14c <xStreamBufferReceive+0x54>
{
 800d0fa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0fe:	4605      	mov	r5, r0
 800d100:	b083      	sub	sp, #12
	configASSERT( pxStreamBuffer );
 800d102:	b1d0      	cbz	r0, 800d13a <xStreamBufferReceive+0x42>
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 800d104:	4699      	mov	r9, r3
 800d106:	7f03      	ldrb	r3, [r0, #28]
 800d108:	4617      	mov	r7, r2
		xBytesToStoreMessageLength = 0;
 800d10a:	f013 0f01 	tst.w	r3, #1
 800d10e:	4688      	mov	r8, r1
 800d110:	bf14      	ite	ne
 800d112:	2604      	movne	r6, #4
 800d114:	2600      	moveq	r6, #0
	if( xTicksToWait != ( TickType_t ) 0 )
 800d116:	f1b9 0f00 	cmp.w	r9, #0
 800d11a:	d120      	bne.n	800d15e <xStreamBufferReceive+0x66>
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800d11c:	6883      	ldr	r3, [r0, #8]
 800d11e:	6844      	ldr	r4, [r0, #4]
	xCount -= pxStreamBuffer->xTail;
 800d120:	682a      	ldr	r2, [r5, #0]
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800d122:	441c      	add	r4, r3
	xCount -= pxStreamBuffer->xTail;
 800d124:	1aa4      	subs	r4, r4, r2
	if ( xCount >= pxStreamBuffer->xLength )
 800d126:	42a3      	cmp	r3, r4
		xCount -= pxStreamBuffer->xLength;
 800d128:	bf98      	it	ls
 800d12a:	1ae4      	subls	r4, r4, r3
	if( xBytesAvailable > xBytesToStoreMessageLength )
 800d12c:	42b4      	cmp	r4, r6
 800d12e:	d824      	bhi.n	800d17a <xStreamBufferReceive+0x82>
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 800d130:	2400      	movs	r4, #0
}
 800d132:	4620      	mov	r0, r4
 800d134:	b003      	add	sp, #12
 800d136:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 800d13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13e:	f383 8811 	msr	BASEPRI, r3
 800d142:	f3bf 8f6f 	isb	sy
 800d146:	f3bf 8f4f 	dsb	sy
	configASSERT( pxStreamBuffer );
 800d14a:	e7fe      	b.n	800d14a <xStreamBufferReceive+0x52>
 800d14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d150:	f383 8811 	msr	BASEPRI, r3
 800d154:	f3bf 8f6f 	isb	sy
 800d158:	f3bf 8f4f 	dsb	sy
	configASSERT( pvRxData );
 800d15c:	e7fe      	b.n	800d15c <xStreamBufferReceive+0x64>
		taskENTER_CRITICAL();
 800d15e:	f7ff f931 	bl	800c3c4 <vPortEnterCritical>
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800d162:	68ab      	ldr	r3, [r5, #8]
 800d164:	686c      	ldr	r4, [r5, #4]
	xCount -= pxStreamBuffer->xTail;
 800d166:	682a      	ldr	r2, [r5, #0]
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800d168:	441c      	add	r4, r3
	xCount -= pxStreamBuffer->xTail;
 800d16a:	1aa4      	subs	r4, r4, r2
	if ( xCount >= pxStreamBuffer->xLength )
 800d16c:	42a3      	cmp	r3, r4
		xCount -= pxStreamBuffer->xLength;
 800d16e:	bf98      	it	ls
 800d170:	1ae4      	subls	r4, r4, r3
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800d172:	42a6      	cmp	r6, r4
 800d174:	d21b      	bcs.n	800d1ae <xStreamBufferReceive+0xb6>
		taskEXIT_CRITICAL();
 800d176:	f7ff f947 	bl	800c408 <vPortExitCritical>
	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800d17a:	bb36      	cbnz	r6, 800d1ca <xStreamBufferReceive+0xd2>
		xNextMessageLength = xBufferLengthBytes;
 800d17c:	463a      	mov	r2, r7
 800d17e:	9701      	str	r7, [sp, #4]
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800d180:	4623      	mov	r3, r4
 800d182:	4641      	mov	r1, r8
 800d184:	4628      	mov	r0, r5
 800d186:	f7ff fe7b 	bl	800ce80 <prvReadBytesFromBuffer>
		if( xReceivedLength != ( size_t ) 0 )
 800d18a:	4604      	mov	r4, r0
 800d18c:	2800      	cmp	r0, #0
 800d18e:	d0cf      	beq.n	800d130 <xStreamBufferReceive+0x38>
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 800d190:	f000 fafc 	bl	800d78c <vTaskSuspendAll>
 800d194:	696b      	ldr	r3, [r5, #20]
 800d196:	b13b      	cbz	r3, 800d1a8 <xStreamBufferReceive+0xb0>
 800d198:	2300      	movs	r3, #0
 800d19a:	6968      	ldr	r0, [r5, #20]
 800d19c:	461a      	mov	r2, r3
 800d19e:	4619      	mov	r1, r3
 800d1a0:	f000 fee2 	bl	800df68 <xTaskGenericNotify>
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	616b      	str	r3, [r5, #20]
 800d1a8:	f000 fc3c 	bl	800da24 <xTaskResumeAll>
	return xReceivedLength;
 800d1ac:	e7c1      	b.n	800d132 <xStreamBufferReceive+0x3a>
				( void ) xTaskNotifyStateClear( NULL );
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	f000 ffcc 	bl	800e14c <xTaskNotifyStateClear>
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800d1b4:	692c      	ldr	r4, [r5, #16]
 800d1b6:	b1cc      	cbz	r4, 800d1ec <xStreamBufferReceive+0xf4>
 800d1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	e7fe      	b.n	800d1c8 <xStreamBufferReceive+0xd0>
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800d1ca:	4623      	mov	r3, r4
 800d1cc:	4632      	mov	r2, r6
 800d1ce:	4628      	mov	r0, r5
 800d1d0:	a901      	add	r1, sp, #4
		xOriginalTail = pxStreamBuffer->xTail;
 800d1d2:	f8d5 9000 	ldr.w	r9, [r5]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 800d1d6:	f7ff fe53 	bl	800ce80 <prvReadBytesFromBuffer>
		if( xNextMessageLength > xBufferLengthBytes )
 800d1da:	9a01      	ldr	r2, [sp, #4]
		xBytesAvailable -= xBytesToStoreMessageLength;
 800d1dc:	1ba4      	subs	r4, r4, r6
		if( xNextMessageLength > xBufferLengthBytes )
 800d1de:	4297      	cmp	r7, r2
 800d1e0:	d2ce      	bcs.n	800d180 <xStreamBufferReceive+0x88>
			xNextMessageLength = 0;
 800d1e2:	2200      	movs	r2, #0
			pxStreamBuffer->xTail = xOriginalTail;
 800d1e4:	f8c5 9000 	str.w	r9, [r5]
			xNextMessageLength = 0;
 800d1e8:	9201      	str	r2, [sp, #4]
 800d1ea:	e7c9      	b.n	800d180 <xStreamBufferReceive+0x88>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800d1ec:	f000 fdf0 	bl	800ddd0 <xTaskGetCurrentTaskHandle>
 800d1f0:	6128      	str	r0, [r5, #16]
		taskEXIT_CRITICAL();
 800d1f2:	f7ff f909 	bl	800c408 <vPortExitCritical>
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 800d1f6:	464b      	mov	r3, r9
 800d1f8:	4622      	mov	r2, r4
 800d1fa:	4620      	mov	r0, r4
 800d1fc:	f04f 31ff 	mov.w	r1, #4294967295
 800d200:	f000 fe40 	bl	800de84 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800d204:	612c      	str	r4, [r5, #16]
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800d206:	686c      	ldr	r4, [r5, #4]
 800d208:	68ab      	ldr	r3, [r5, #8]
 800d20a:	e789      	b.n	800d120 <xStreamBufferReceive+0x28>

0800d20c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d210:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d212:	f7ff f8d7 	bl	800c3c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d216:	4a33      	ldr	r2, [pc, #204]	; (800d2e4 <prvAddNewTaskToReadyList+0xd8>)
		if( pxCurrentTCB == NULL )
 800d218:	4e33      	ldr	r6, [pc, #204]	; (800d2e8 <prvAddNewTaskToReadyList+0xdc>)
		uxCurrentNumberOfTasks++;
 800d21a:	6813      	ldr	r3, [r2, #0]
 800d21c:	3301      	adds	r3, #1
 800d21e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d220:	6833      	ldr	r3, [r6, #0]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d032      	beq.n	800d28c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d226:	4d31      	ldr	r5, [pc, #196]	; (800d2ec <prvAddNewTaskToReadyList+0xe0>)
 800d228:	682b      	ldr	r3, [r5, #0]
 800d22a:	b33b      	cbz	r3, 800d27c <prvAddNewTaskToReadyList+0x70>
 800d22c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d22e:	4f30      	ldr	r7, [pc, #192]	; (800d2f0 <prvAddNewTaskToReadyList+0xe4>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d230:	4930      	ldr	r1, [pc, #192]	; (800d2f4 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 800d232:	4a31      	ldr	r2, [pc, #196]	; (800d2f8 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 800d234:	f8d1 c000 	ldr.w	ip, [r1]
		uxTaskNumber++;
 800d238:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800d23a:	4584      	cmp	ip, r0
		uxTaskNumber++;
 800d23c:	f103 0301 	add.w	r3, r3, #1
		prvAddTaskToReadyList( pxNewTCB );
 800d240:	bf38      	it	cc
 800d242:	6008      	strcc	r0, [r1, #0]
 800d244:	eb00 0080 	add.w	r0, r0, r0, lsl #2
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d248:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800d24a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800d24e:	1d21      	adds	r1, r4, #4
		uxTaskNumber++;
 800d250:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800d252:	f7ff f825 	bl	800c2a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d256:	f7ff f8d7 	bl	800c408 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d25a:	682b      	ldr	r3, [r5, #0]
 800d25c:	b163      	cbz	r3, 800d278 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d25e:	6832      	ldr	r2, [r6, #0]
 800d260:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d262:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800d264:	429a      	cmp	r2, r3
 800d266:	d207      	bcs.n	800d278 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d268:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d26c:	4b23      	ldr	r3, [pc, #140]	; (800d2fc <prvAddNewTaskToReadyList+0xf0>)
 800d26e:	601a      	str	r2, [r3, #0]
 800d270:	f3bf 8f4f 	dsb	sy
 800d274:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d27c:	6833      	ldr	r3, [r6, #0]
 800d27e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d282:	4f1b      	ldr	r7, [pc, #108]	; (800d2f0 <prvAddNewTaskToReadyList+0xe4>)
 800d284:	4283      	cmp	r3, r0
					pxCurrentTCB = pxNewTCB;
 800d286:	bf98      	it	ls
 800d288:	6034      	strls	r4, [r6, #0]
 800d28a:	e7d1      	b.n	800d230 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
 800d28c:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d28e:	6813      	ldr	r3, [r2, #0]
 800d290:	2b01      	cmp	r3, #1
 800d292:	d003      	beq.n	800d29c <prvAddNewTaskToReadyList+0x90>
 800d294:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d296:	4f16      	ldr	r7, [pc, #88]	; (800d2f0 <prvAddNewTaskToReadyList+0xe4>)
 800d298:	4d14      	ldr	r5, [pc, #80]	; (800d2ec <prvAddNewTaskToReadyList+0xe0>)
 800d29a:	e7c9      	b.n	800d230 <prvAddNewTaskToReadyList+0x24>
 800d29c:	4f14      	ldr	r7, [pc, #80]	; (800d2f0 <prvAddNewTaskToReadyList+0xe4>)
 800d29e:	463d      	mov	r5, r7
 800d2a0:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d2a4:	4628      	mov	r0, r5
 800d2a6:	3514      	adds	r5, #20
 800d2a8:	f7fe ffea 	bl	800c280 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d2ac:	45a8      	cmp	r8, r5
 800d2ae:	d1f9      	bne.n	800d2a4 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d2b0:	f8df 8064 	ldr.w	r8, [pc, #100]	; 800d318 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList2 );
 800d2b4:	4d12      	ldr	r5, [pc, #72]	; (800d300 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 800d2b6:	4640      	mov	r0, r8
 800d2b8:	f7fe ffe2 	bl	800c280 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d2bc:	4628      	mov	r0, r5
 800d2be:	f7fe ffdf 	bl	800c280 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d2c2:	4810      	ldr	r0, [pc, #64]	; (800d304 <prvAddNewTaskToReadyList+0xf8>)
 800d2c4:	f7fe ffdc 	bl	800c280 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d2c8:	480f      	ldr	r0, [pc, #60]	; (800d308 <prvAddNewTaskToReadyList+0xfc>)
 800d2ca:	f7fe ffd9 	bl	800c280 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d2ce:	480f      	ldr	r0, [pc, #60]	; (800d30c <prvAddNewTaskToReadyList+0x100>)
 800d2d0:	f7fe ffd6 	bl	800c280 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d2d4:	4a0e      	ldr	r2, [pc, #56]	; (800d310 <prvAddNewTaskToReadyList+0x104>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d2d6:	4b0f      	ldr	r3, [pc, #60]	; (800d314 <prvAddNewTaskToReadyList+0x108>)
	pxDelayedTaskList = &xDelayedTaskList1;
 800d2d8:	f8c2 8000 	str.w	r8, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d2dc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d2de:	601d      	str	r5, [r3, #0]
 800d2e0:	4d02      	ldr	r5, [pc, #8]	; (800d2ec <prvAddNewTaskToReadyList+0xe0>)
}
 800d2e2:	e7a5      	b.n	800d230 <prvAddNewTaskToReadyList+0x24>
 800d2e4:	200030e0 	.word	0x200030e0
 800d2e8:	20002c74 	.word	0x20002c74
 800d2ec:	2000313c 	.word	0x2000313c
 800d2f0:	20002c80 	.word	0x20002c80
 800d2f4:	200030f4 	.word	0x200030f4
 800d2f8:	200030f0 	.word	0x200030f0
 800d2fc:	e000ed04 	.word	0xe000ed04
 800d300:	2000310c 	.word	0x2000310c
 800d304:	20003128 	.word	0x20003128
 800d308:	20003154 	.word	0x20003154
 800d30c:	20003140 	.word	0x20003140
 800d310:	20002c78 	.word	0x20002c78
 800d314:	20002c7c 	.word	0x20002c7c
 800d318:	200030f8 	.word	0x200030f8

0800d31c <prvIdleTask>:
				taskYIELD();
 800d31c:	f04f 5a80 	mov.w	sl, #268435456	; 0x10000000
{
 800d320:	b580      	push	{r7, lr}
 800d322:	4d20      	ldr	r5, [pc, #128]	; (800d3a4 <prvIdleTask+0x88>)
 800d324:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800d3b0 <prvIdleTask+0x94>
 800d328:	4e1f      	ldr	r6, [pc, #124]	; (800d3a8 <prvIdleTask+0x8c>)
 800d32a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 800d3b4 <prvIdleTask+0x98>
				taskYIELD();
 800d32e:	4f1f      	ldr	r7, [pc, #124]	; (800d3ac <prvIdleTask+0x90>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d330:	682b      	ldr	r3, [r5, #0]
 800d332:	b343      	cbz	r3, 800d386 <prvIdleTask+0x6a>
		{
			taskENTER_CRITICAL();
 800d334:	f7ff f846 	bl	800c3c4 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d338:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800d33c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d33e:	1d20      	adds	r0, r4, #4
 800d340:	f7fe ffd4 	bl	800c2ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d344:	6833      	ldr	r3, [r6, #0]
 800d346:	3b01      	subs	r3, #1
 800d348:	6033      	str	r3, [r6, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d34a:	682b      	ldr	r3, [r5, #0]
 800d34c:	3b01      	subs	r3, #1
 800d34e:	602b      	str	r3, [r5, #0]
			}
			taskEXIT_CRITICAL();
 800d350:	f7ff f85a 	bl	800c408 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d354:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 800d358:	b163      	cbz	r3, 800d374 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d01e      	beq.n	800d39c <prvIdleTask+0x80>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d35e:	2b02      	cmp	r3, #2
 800d360:	d0e6      	beq.n	800d330 <prvIdleTask+0x14>
 800d362:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d366:	f383 8811 	msr	BASEPRI, r3
 800d36a:	f3bf 8f6f 	isb	sy
 800d36e:	f3bf 8f4f 	dsb	sy
 800d372:	e7fe      	b.n	800d372 <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
 800d374:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800d376:	f7fe ff2d 	bl	800c1d4 <vPortFree>
				vPortFree( pxTCB );
 800d37a:	4620      	mov	r0, r4
 800d37c:	f7fe ff2a 	bl	800c1d4 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d380:	682b      	ldr	r3, [r5, #0]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d1d6      	bne.n	800d334 <prvIdleTask+0x18>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d386:	f8d8 3000 	ldr.w	r3, [r8]
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d9d0      	bls.n	800d330 <prvIdleTask+0x14>
				taskYIELD();
 800d38e:	f8c7 a000 	str.w	sl, [r7]
 800d392:	f3bf 8f4f 	dsb	sy
 800d396:	f3bf 8f6f 	isb	sy
 800d39a:	e7c9      	b.n	800d330 <prvIdleTask+0x14>
				vPortFree( pxTCB );
 800d39c:	4620      	mov	r0, r4
 800d39e:	f7fe ff19 	bl	800c1d4 <vPortFree>
 800d3a2:	e7c5      	b.n	800d330 <prvIdleTask+0x14>
 800d3a4:	200030e4 	.word	0x200030e4
 800d3a8:	200030e0 	.word	0x200030e0
 800d3ac:	e000ed04 	.word	0xe000ed04
 800d3b0:	20003154 	.word	0x20003154
 800d3b4:	20002c80 	.word	0x20002c80

0800d3b8 <xTaskCreateStatic>:
	{
 800d3b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d3bc:	b083      	sub	sp, #12
 800d3be:	4680      	mov	r8, r0
 800d3c0:	e9dd 700a 	ldrd	r7, r0, [sp, #40]	; 0x28
 800d3c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800d3c6:	b1c0      	cbz	r0, 800d3fa <xTaskCreateStatic+0x42>
		configASSERT( pxTaskBuffer != NULL );
 800d3c8:	b174      	cbz	r4, 800d3e8 <xTaskCreateStatic+0x30>
 800d3ca:	4699      	mov	r9, r3
			volatile size_t xSize = sizeof( StaticTask_t );
 800d3cc:	235c      	movs	r3, #92	; 0x5c
 800d3ce:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d3d0:	9b01      	ldr	r3, [sp, #4]
 800d3d2:	2b5c      	cmp	r3, #92	; 0x5c
 800d3d4:	d01a      	beq.n	800d40c <xTaskCreateStatic+0x54>
 800d3d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3da:	f383 8811 	msr	BASEPRI, r3
 800d3de:	f3bf 8f6f 	isb	sy
 800d3e2:	f3bf 8f4f 	dsb	sy
 800d3e6:	e7fe      	b.n	800d3e6 <xTaskCreateStatic+0x2e>
 800d3e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ec:	f383 8811 	msr	BASEPRI, r3
 800d3f0:	f3bf 8f6f 	isb	sy
 800d3f4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800d3f8:	e7fe      	b.n	800d3f8 <xTaskCreateStatic+0x40>
 800d3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3fe:	f383 8811 	msr	BASEPRI, r3
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800d40a:	e7fe      	b.n	800d40a <xTaskCreateStatic+0x52>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d40c:	2302      	movs	r3, #2
 800d40e:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d410:	fa02 f603 	lsl.w	r6, r2, r3
 800d414:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d416:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d41a:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d41c:	6320      	str	r0, [r4, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d41e:	f001 f8e3 	bl	800e5e8 <memset>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d422:	782a      	ldrb	r2, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d424:	6b23      	ldr	r3, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d426:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d42a:	3e04      	subs	r6, #4
		if( pcName[ x ] == 0x00 )
 800d42c:	782a      	ldrb	r2, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d42e:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d430:	f026 0607 	bic.w	r6, r6, #7
		if( pcName[ x ] == 0x00 )
 800d434:	2a00      	cmp	r2, #0
 800d436:	d04d      	beq.n	800d4d4 <xTaskCreateStatic+0x11c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d438:	786b      	ldrb	r3, [r5, #1]
 800d43a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 800d43e:	786b      	ldrb	r3, [r5, #1]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d047      	beq.n	800d4d4 <xTaskCreateStatic+0x11c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d444:	78ab      	ldrb	r3, [r5, #2]
 800d446:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 800d44a:	78ab      	ldrb	r3, [r5, #2]
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d041      	beq.n	800d4d4 <xTaskCreateStatic+0x11c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d450:	78eb      	ldrb	r3, [r5, #3]
 800d452:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 800d456:	78eb      	ldrb	r3, [r5, #3]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d03b      	beq.n	800d4d4 <xTaskCreateStatic+0x11c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d45c:	792b      	ldrb	r3, [r5, #4]
 800d45e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 800d462:	792b      	ldrb	r3, [r5, #4]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d035      	beq.n	800d4d4 <xTaskCreateStatic+0x11c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d468:	796b      	ldrb	r3, [r5, #5]
 800d46a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 800d46e:	796b      	ldrb	r3, [r5, #5]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d02f      	beq.n	800d4d4 <xTaskCreateStatic+0x11c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d474:	79ab      	ldrb	r3, [r5, #6]
 800d476:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 800d47a:	79ab      	ldrb	r3, [r5, #6]
 800d47c:	b353      	cbz	r3, 800d4d4 <xTaskCreateStatic+0x11c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d47e:	79eb      	ldrb	r3, [r5, #7]
 800d480:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 800d484:	79eb      	ldrb	r3, [r5, #7]
 800d486:	b32b      	cbz	r3, 800d4d4 <xTaskCreateStatic+0x11c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d488:	7a2b      	ldrb	r3, [r5, #8]
 800d48a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 800d48e:	7a2b      	ldrb	r3, [r5, #8]
 800d490:	b303      	cbz	r3, 800d4d4 <xTaskCreateStatic+0x11c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d492:	7a6b      	ldrb	r3, [r5, #9]
 800d494:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 800d498:	7a6b      	ldrb	r3, [r5, #9]
 800d49a:	b1db      	cbz	r3, 800d4d4 <xTaskCreateStatic+0x11c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d49c:	7aab      	ldrb	r3, [r5, #10]
 800d49e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 800d4a2:	7aab      	ldrb	r3, [r5, #10]
 800d4a4:	b1b3      	cbz	r3, 800d4d4 <xTaskCreateStatic+0x11c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d4a6:	7aeb      	ldrb	r3, [r5, #11]
 800d4a8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 800d4ac:	7aeb      	ldrb	r3, [r5, #11]
 800d4ae:	b18b      	cbz	r3, 800d4d4 <xTaskCreateStatic+0x11c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d4b0:	7b2b      	ldrb	r3, [r5, #12]
 800d4b2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 800d4b6:	7b2b      	ldrb	r3, [r5, #12]
 800d4b8:	b163      	cbz	r3, 800d4d4 <xTaskCreateStatic+0x11c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d4ba:	7b6b      	ldrb	r3, [r5, #13]
 800d4bc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 800d4c0:	7b6b      	ldrb	r3, [r5, #13]
 800d4c2:	b13b      	cbz	r3, 800d4d4 <xTaskCreateStatic+0x11c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d4c4:	7bab      	ldrb	r3, [r5, #14]
 800d4c6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 800d4ca:	7bab      	ldrb	r3, [r5, #14]
 800d4cc:	b113      	cbz	r3, 800d4d4 <xTaskCreateStatic+0x11c>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d4ce:	7beb      	ldrb	r3, [r5, #15]
 800d4d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d4d4:	2f37      	cmp	r7, #55	; 0x37
 800d4d6:	bf28      	it	cs
 800d4d8:	2737      	movcs	r7, #55	; 0x37
 800d4da:	2500      	movs	r5, #0
	pxNewTCB->uxPriority = uxPriority;
 800d4dc:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800d4de:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d4e0:	1d20      	adds	r0, r4, #4
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d4e2:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800d4e6:	6525      	str	r5, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d4e8:	f7fe fed6 	bl	800c298 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d4ec:	f1c7 0738 	rsb	r7, r7, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d4f0:	f104 0018 	add.w	r0, r4, #24
 800d4f4:	f7fe fed0 	bl	800c298 <vListInitialiseItem>
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d4f8:	464a      	mov	r2, r9
 800d4fa:	4641      	mov	r1, r8
		pxNewTCB->ulNotifiedValue = 0;
 800d4fc:	6565      	str	r5, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d4fe:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d500:	61a7      	str	r7, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d502:	6124      	str	r4, [r4, #16]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d504:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d508:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d50a:	f7fe ff31 	bl	800c370 <pxPortInitialiseStack>
 800d50e:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
 800d510:	4620      	mov	r0, r4
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d512:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800d514:	f7ff fe7a 	bl	800d20c <prvAddNewTaskToReadyList>
	}
 800d518:	4620      	mov	r0, r4
 800d51a:	b003      	add	sp, #12
 800d51c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800d520 <xTaskCreate>:
	{
 800d520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d524:	0096      	lsls	r6, r2, #2
	{
 800d526:	4680      	mov	r8, r0
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d528:	4630      	mov	r0, r6
	{
 800d52a:	460d      	mov	r5, r1
 800d52c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d52e:	f7fe fd97 	bl	800c060 <pvPortMalloc>
			if( pxStack != NULL )
 800d532:	2800      	cmp	r0, #0
 800d534:	f000 8092 	beq.w	800d65c <xTaskCreate+0x13c>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800d538:	4607      	mov	r7, r0
 800d53a:	205c      	movs	r0, #92	; 0x5c
 800d53c:	f7fe fd90 	bl	800c060 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800d540:	4604      	mov	r4, r0
 800d542:	2800      	cmp	r0, #0
 800d544:	f000 808e 	beq.w	800d664 <xTaskCreate+0x144>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d548:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800d54a:	6307      	str	r7, [r0, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d54c:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d54e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d552:	4638      	mov	r0, r7
 800d554:	21a5      	movs	r1, #165	; 0xa5
 800d556:	f001 f847 	bl	800e5e8 <memset>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d55a:	782b      	ldrb	r3, [r5, #0]
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d55c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d560:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
 800d564:	782b      	ldrb	r3, [r5, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d04d      	beq.n	800d606 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d56a:	786b      	ldrb	r3, [r5, #1]
 800d56c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
		if( pcName[ x ] == 0x00 )
 800d570:	786b      	ldrb	r3, [r5, #1]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d047      	beq.n	800d606 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d576:	78ab      	ldrb	r3, [r5, #2]
 800d578:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
		if( pcName[ x ] == 0x00 )
 800d57c:	78ab      	ldrb	r3, [r5, #2]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d041      	beq.n	800d606 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d582:	78eb      	ldrb	r3, [r5, #3]
 800d584:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
		if( pcName[ x ] == 0x00 )
 800d588:	78eb      	ldrb	r3, [r5, #3]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d03b      	beq.n	800d606 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d58e:	792b      	ldrb	r3, [r5, #4]
 800d590:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if( pcName[ x ] == 0x00 )
 800d594:	792b      	ldrb	r3, [r5, #4]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d035      	beq.n	800d606 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d59a:	796b      	ldrb	r3, [r5, #5]
 800d59c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
		if( pcName[ x ] == 0x00 )
 800d5a0:	796b      	ldrb	r3, [r5, #5]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d02f      	beq.n	800d606 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5a6:	79ab      	ldrb	r3, [r5, #6]
 800d5a8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
		if( pcName[ x ] == 0x00 )
 800d5ac:	79ab      	ldrb	r3, [r5, #6]
 800d5ae:	b353      	cbz	r3, 800d606 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5b0:	79eb      	ldrb	r3, [r5, #7]
 800d5b2:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		if( pcName[ x ] == 0x00 )
 800d5b6:	79eb      	ldrb	r3, [r5, #7]
 800d5b8:	b32b      	cbz	r3, 800d606 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5ba:	7a2b      	ldrb	r3, [r5, #8]
 800d5bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if( pcName[ x ] == 0x00 )
 800d5c0:	7a2b      	ldrb	r3, [r5, #8]
 800d5c2:	b303      	cbz	r3, 800d606 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5c4:	7a6b      	ldrb	r3, [r5, #9]
 800d5c6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		if( pcName[ x ] == 0x00 )
 800d5ca:	7a6b      	ldrb	r3, [r5, #9]
 800d5cc:	b1db      	cbz	r3, 800d606 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5ce:	7aab      	ldrb	r3, [r5, #10]
 800d5d0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
		if( pcName[ x ] == 0x00 )
 800d5d4:	7aab      	ldrb	r3, [r5, #10]
 800d5d6:	b1b3      	cbz	r3, 800d606 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5d8:	7aeb      	ldrb	r3, [r5, #11]
 800d5da:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
		if( pcName[ x ] == 0x00 )
 800d5de:	7aeb      	ldrb	r3, [r5, #11]
 800d5e0:	b18b      	cbz	r3, 800d606 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5e2:	7b2b      	ldrb	r3, [r5, #12]
 800d5e4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
		if( pcName[ x ] == 0x00 )
 800d5e8:	7b2b      	ldrb	r3, [r5, #12]
 800d5ea:	b163      	cbz	r3, 800d606 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5ec:	7b6b      	ldrb	r3, [r5, #13]
 800d5ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		if( pcName[ x ] == 0x00 )
 800d5f2:	7b6b      	ldrb	r3, [r5, #13]
 800d5f4:	b13b      	cbz	r3, 800d606 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d5f6:	7bab      	ldrb	r3, [r5, #14]
 800d5f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		if( pcName[ x ] == 0x00 )
 800d5fc:	7bab      	ldrb	r3, [r5, #14]
 800d5fe:	b113      	cbz	r3, 800d606 <xTaskCreate+0xe6>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d600:	7beb      	ldrb	r3, [r5, #15]
 800d602:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d606:	9d08      	ldr	r5, [sp, #32]
 800d608:	2700      	movs	r7, #0
 800d60a:	2d37      	cmp	r5, #55	; 0x37
 800d60c:	bf28      	it	cs
 800d60e:	2537      	movcs	r5, #55	; 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d610:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800d612:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800d614:	64e5      	str	r5, [r4, #76]	; 0x4c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d616:	f884 7043 	strb.w	r7, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800d61a:	6527      	str	r7, [r4, #80]	; 0x50
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d61c:	3e04      	subs	r6, #4
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d61e:	f7fe fe3b 	bl	800c298 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d622:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d626:	f104 0018 	add.w	r0, r4, #24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d62a:	4456      	add	r6, sl
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d62c:	f7fe fe34 	bl	800c298 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800d630:	6567      	str	r7, [r4, #84]	; 0x54
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d632:	464a      	mov	r2, r9
 800d634:	4641      	mov	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d636:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d638:	f026 0007 	bic.w	r0, r6, #7
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d63c:	f884 7058 	strb.w	r7, [r4, #88]	; 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d640:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d642:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d644:	f7fe fe94 	bl	800c370 <pxPortInitialiseStack>
	if( ( void * ) pxCreatedTask != NULL )
 800d648:	9b09      	ldr	r3, [sp, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d64a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800d64c:	b103      	cbz	r3, 800d650 <xTaskCreate+0x130>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d64e:	601c      	str	r4, [r3, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800d650:	4620      	mov	r0, r4
 800d652:	f7ff fddb 	bl	800d20c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d656:	2001      	movs	r0, #1
	}
 800d658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d65c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800d660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					vPortFree( pxStack );
 800d664:	4638      	mov	r0, r7
 800d666:	f7fe fdb5 	bl	800c1d4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d66a:	f04f 30ff 	mov.w	r0, #4294967295
 800d66e:	e7f3      	b.n	800d658 <xTaskCreate+0x138>

0800d670 <vTaskStartScheduler>:
{
 800d670:	b570      	push	{r4, r5, r6, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d672:	2500      	movs	r5, #0
{
 800d674:	b084      	sub	sp, #16
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d676:	4668      	mov	r0, sp
 800d678:	aa02      	add	r2, sp, #8
 800d67a:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d67c:	e9cd 5500 	strd	r5, r5, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d680:	f7fe fcd2 	bl	800c028 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d684:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
 800d686:	b1c8      	cbz	r0, 800d6bc <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d688:	9c00      	ldr	r4, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
 800d68a:	b174      	cbz	r4, 800d6aa <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800d68c:	235c      	movs	r3, #92	; 0x5c
 800d68e:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d690:	9b03      	ldr	r3, [sp, #12]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d692:	9e02      	ldr	r6, [sp, #8]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d694:	2b5c      	cmp	r3, #92	; 0x5c
 800d696:	d01a      	beq.n	800d6ce <vTaskStartScheduler+0x5e>
 800d698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d69c:	f383 8811 	msr	BASEPRI, r3
 800d6a0:	f3bf 8f6f 	isb	sy
 800d6a4:	f3bf 8f4f 	dsb	sy
 800d6a8:	e7fe      	b.n	800d6a8 <vTaskStartScheduler+0x38>
 800d6aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ae:	f383 8811 	msr	BASEPRI, r3
 800d6b2:	f3bf 8f6f 	isb	sy
 800d6b6:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
 800d6ba:	e7fe      	b.n	800d6ba <vTaskStartScheduler+0x4a>
 800d6bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c0:	f383 8811 	msr	BASEPRI, r3
 800d6c4:	f3bf 8f6f 	isb	sy
 800d6c8:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
 800d6cc:	e7fe      	b.n	800d6cc <vTaskStartScheduler+0x5c>
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6ce:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d6d0:	409e      	lsls	r6, r3
 800d6d2:	21a5      	movs	r1, #165	; 0xa5
 800d6d4:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6d6:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6da:	6320      	str	r0, [r4, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d6dc:	f000 ff84 	bl	800e5e8 <memset>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6e0:	4a25      	ldr	r2, [pc, #148]	; (800d778 <vTaskStartScheduler+0x108>)
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d6e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6e4:	6362      	str	r2, [r4, #52]	; 0x34
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d6e6:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800d6e8:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d6ec:	3e04      	subs	r6, #4
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d6ee:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d6f2:	f884 5043 	strb.w	r5, [r4, #67]	; 0x43
	pxNewTCB->uxPriority = uxPriority;
 800d6f6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800d6f8:	441e      	add	r6, r3
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d6fa:	f7fe fdcd 	bl	800c298 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d6fe:	f104 0018 	add.w	r0, r4, #24
 800d702:	f7fe fdc9 	bl	800c298 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d706:	2338      	movs	r3, #56	; 0x38
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800d708:	f026 0607 	bic.w	r6, r6, #7
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d70c:	462a      	mov	r2, r5
 800d70e:	491b      	ldr	r1, [pc, #108]	; (800d77c <vTaskStartScheduler+0x10c>)
		pxNewTCB->ulNotifiedValue = 0;
 800d710:	6565      	str	r5, [r4, #84]	; 0x54
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d712:	61a3      	str	r3, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d714:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d716:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d718:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d71a:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d71e:	f7fe fe27 	bl	800c370 <pxPortInitialiseStack>
 800d722:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
 800d724:	4620      	mov	r0, r4
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d726:	6023      	str	r3, [r4, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
 800d728:	f7ff fd70 	bl	800d20c <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
 800d72c:	f000 feac 	bl	800e488 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800d730:	2801      	cmp	r0, #1
			xReturn = xTimerCreateTimerTask();
 800d732:	4603      	mov	r3, r0
	if( xReturn == pdPASS )
 800d734:	d003      	beq.n	800d73e <vTaskStartScheduler+0xce>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d736:	3301      	adds	r3, #1
 800d738:	d014      	beq.n	800d764 <vTaskStartScheduler+0xf4>
}
 800d73a:	b004      	add	sp, #16
 800d73c:	bd70      	pop	{r4, r5, r6, pc}
 800d73e:	f04f 0250 	mov.w	r2, #80	; 0x50
 800d742:	f382 8811 	msr	BASEPRI, r2
 800d746:	f3bf 8f6f 	isb	sy
 800d74a:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800d74e:	f04f 34ff 	mov.w	r4, #4294967295
		xSchedulerRunning = pdTRUE;
 800d752:	490b      	ldr	r1, [pc, #44]	; (800d780 <vTaskStartScheduler+0x110>)
		xTickCount = ( TickType_t ) 0U;
 800d754:	4a0b      	ldr	r2, [pc, #44]	; (800d784 <vTaskStartScheduler+0x114>)
		xNextTaskUnblockTime = portMAX_DELAY;
 800d756:	480c      	ldr	r0, [pc, #48]	; (800d788 <vTaskStartScheduler+0x118>)
 800d758:	6004      	str	r4, [r0, #0]
		xSchedulerRunning = pdTRUE;
 800d75a:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) 0U;
 800d75c:	6015      	str	r5, [r2, #0]
		if( xPortStartScheduler() != pdFALSE )
 800d75e:	f7fe fe9f 	bl	800c4a0 <xPortStartScheduler>
 800d762:	e7ea      	b.n	800d73a <vTaskStartScheduler+0xca>
 800d764:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d768:	f383 8811 	msr	BASEPRI, r3
 800d76c:	f3bf 8f6f 	isb	sy
 800d770:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d774:	e7fe      	b.n	800d774 <vTaskStartScheduler+0x104>
 800d776:	bf00      	nop
 800d778:	454c4449 	.word	0x454c4449
 800d77c:	0800d31d 	.word	0x0800d31d
 800d780:	2000313c 	.word	0x2000313c
 800d784:	20003168 	.word	0x20003168
 800d788:	20003120 	.word	0x20003120

0800d78c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d78c:	4a02      	ldr	r2, [pc, #8]	; (800d798 <vTaskSuspendAll+0xc>)
 800d78e:	6813      	ldr	r3, [r2, #0]
 800d790:	3301      	adds	r3, #1
 800d792:	6013      	str	r3, [r2, #0]
}
 800d794:	4770      	bx	lr
 800d796:	bf00      	nop
 800d798:	200030ec 	.word	0x200030ec

0800d79c <xTaskGetTickCount>:
		xTicks = xTickCount;
 800d79c:	4b01      	ldr	r3, [pc, #4]	; (800d7a4 <xTaskGetTickCount+0x8>)
 800d79e:	6818      	ldr	r0, [r3, #0]
}
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	20003168 	.word	0x20003168

0800d7a8 <xTaskIncrementTick>:
{
 800d7a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ac:	4b4a      	ldr	r3, [pc, #296]	; (800d8d8 <xTaskIncrementTick+0x130>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d145      	bne.n	800d840 <xTaskIncrementTick+0x98>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d7b4:	4b49      	ldr	r3, [pc, #292]	; (800d8dc <xTaskIncrementTick+0x134>)
 800d7b6:	681e      	ldr	r6, [r3, #0]
 800d7b8:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 800d7ba:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d7bc:	2e00      	cmp	r6, #0
 800d7be:	d04c      	beq.n	800d85a <xTaskIncrementTick+0xb2>
 800d7c0:	4d47      	ldr	r5, [pc, #284]	; (800d8e0 <xTaskIncrementTick+0x138>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d7c2:	682b      	ldr	r3, [r5, #0]
 800d7c4:	42b3      	cmp	r3, r6
 800d7c6:	d85d      	bhi.n	800d884 <xTaskIncrementTick+0xdc>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d7c8:	f8df a124 	ldr.w	sl, [pc, #292]	; 800d8f0 <xTaskIncrementTick+0x148>
 800d7cc:	f8da 3000 	ldr.w	r3, [sl]
 800d7d0:	681c      	ldr	r4, [r3, #0]
 800d7d2:	2c00      	cmp	r4, #0
 800d7d4:	d070      	beq.n	800d8b8 <xTaskIncrementTick+0x110>
BaseType_t xSwitchRequired = pdFALSE;
 800d7d6:	2400      	movs	r4, #0
 800d7d8:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800d8fc <xTaskIncrementTick+0x154>
 800d7dc:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800d900 <xTaskIncrementTick+0x158>
 800d7e0:	e023      	b.n	800d82a <xTaskIncrementTick+0x82>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7e2:	4658      	mov	r0, fp
 800d7e4:	f7fe fd82 	bl	800c2ec <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7ea:	f107 0018 	add.w	r0, r7, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d7ee:	b10b      	cbz	r3, 800d7f4 <xTaskIncrementTick+0x4c>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7f0:	f7fe fd7c 	bl	800c2ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d7f4:	4a3b      	ldr	r2, [pc, #236]	; (800d8e4 <xTaskIncrementTick+0x13c>)
 800d7f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f8:	6812      	ldr	r2, [r2, #0]
 800d7fa:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800d7fe:	4293      	cmp	r3, r2
 800d800:	bf88      	it	hi
 800d802:	4a38      	ldrhi	r2, [pc, #224]	; (800d8e4 <xTaskIncrementTick+0x13c>)
 800d804:	4659      	mov	r1, fp
 800d806:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800d80a:	bf88      	it	hi
 800d80c:	6013      	strhi	r3, [r2, #0]
 800d80e:	f7fe fd47 	bl	800c2a0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d812:	f8d9 2000 	ldr.w	r2, [r9]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d816:	f8da 3000 	ldr.w	r3, [sl]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d81a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d81c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d81e:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
 800d820:	4291      	cmp	r1, r2
 800d822:	bf28      	it	cs
 800d824:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d826:	2b00      	cmp	r3, #0
 800d828:	d04a      	beq.n	800d8c0 <xTaskIncrementTick+0x118>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d82a:	f8da 3000 	ldr.w	r3, [sl]
 800d82e:	68db      	ldr	r3, [r3, #12]
 800d830:	68df      	ldr	r7, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d832:	687b      	ldr	r3, [r7, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d834:	f107 0b04 	add.w	fp, r7, #4
					if( xConstTickCount < xItemValue )
 800d838:	429e      	cmp	r6, r3
 800d83a:	d2d2      	bcs.n	800d7e2 <xTaskIncrementTick+0x3a>
						xNextTaskUnblockTime = xItemValue;
 800d83c:	602b      	str	r3, [r5, #0]
						break;
 800d83e:	e026      	b.n	800d88e <xTaskIncrementTick+0xe6>
BaseType_t xSwitchRequired = pdFALSE;
 800d840:	2400      	movs	r4, #0
		++uxPendedTicks;
 800d842:	4a29      	ldr	r2, [pc, #164]	; (800d8e8 <xTaskIncrementTick+0x140>)
 800d844:	6813      	ldr	r3, [r2, #0]
 800d846:	3301      	adds	r3, #1
 800d848:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 800d84a:	4b28      	ldr	r3, [pc, #160]	; (800d8ec <xTaskIncrementTick+0x144>)
 800d84c:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 800d84e:	2b00      	cmp	r3, #0
}
 800d850:	bf0c      	ite	eq
 800d852:	4620      	moveq	r0, r4
 800d854:	2001      	movne	r0, #1
 800d856:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 800d85a:	4b25      	ldr	r3, [pc, #148]	; (800d8f0 <xTaskIncrementTick+0x148>)
 800d85c:	681a      	ldr	r2, [r3, #0]
 800d85e:	6812      	ldr	r2, [r2, #0]
 800d860:	bb0a      	cbnz	r2, 800d8a6 <xTaskIncrementTick+0xfe>
 800d862:	4a24      	ldr	r2, [pc, #144]	; (800d8f4 <xTaskIncrementTick+0x14c>)
 800d864:	6818      	ldr	r0, [r3, #0]
 800d866:	6814      	ldr	r4, [r2, #0]
 800d868:	4923      	ldr	r1, [pc, #140]	; (800d8f8 <xTaskIncrementTick+0x150>)
 800d86a:	601c      	str	r4, [r3, #0]
 800d86c:	6010      	str	r0, [r2, #0]
 800d86e:	680a      	ldr	r2, [r1, #0]
 800d870:	3201      	adds	r2, #1
 800d872:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d874:	681a      	ldr	r2, [r3, #0]
 800d876:	6812      	ldr	r2, [r2, #0]
 800d878:	bb32      	cbnz	r2, 800d8c8 <xTaskIncrementTick+0x120>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d87a:	f04f 33ff 	mov.w	r3, #4294967295
 800d87e:	4d18      	ldr	r5, [pc, #96]	; (800d8e0 <xTaskIncrementTick+0x138>)
 800d880:	602b      	str	r3, [r5, #0]
 800d882:	e79e      	b.n	800d7c2 <xTaskIncrementTick+0x1a>
BaseType_t xSwitchRequired = pdFALSE;
 800d884:	2400      	movs	r4, #0
 800d886:	f8df 8074 	ldr.w	r8, [pc, #116]	; 800d8fc <xTaskIncrementTick+0x154>
 800d88a:	f8df 9074 	ldr.w	r9, [pc, #116]	; 800d900 <xTaskIncrementTick+0x158>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d88e:	f8d9 3000 	ldr.w	r3, [r9]
 800d892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d894:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800d898:	009b      	lsls	r3, r3, #2
 800d89a:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 800d89e:	2b02      	cmp	r3, #2
 800d8a0:	bf28      	it	cs
 800d8a2:	2401      	movcs	r4, #1
 800d8a4:	e7d1      	b.n	800d84a <xTaskIncrementTick+0xa2>
 800d8a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8aa:	f383 8811 	msr	BASEPRI, r3
 800d8ae:	f3bf 8f6f 	isb	sy
 800d8b2:	f3bf 8f4f 	dsb	sy
			taskSWITCH_DELAYED_LISTS();
 800d8b6:	e7fe      	b.n	800d8b6 <xTaskIncrementTick+0x10e>
 800d8b8:	f8df 8040 	ldr.w	r8, [pc, #64]	; 800d8fc <xTaskIncrementTick+0x154>
 800d8bc:	f8df 9040 	ldr.w	r9, [pc, #64]	; 800d900 <xTaskIncrementTick+0x158>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d8c4:	602b      	str	r3, [r5, #0]
					break;
 800d8c6:	e7e2      	b.n	800d88e <xTaskIncrementTick+0xe6>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d8c8:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d8ca:	4d05      	ldr	r5, [pc, #20]	; (800d8e0 <xTaskIncrementTick+0x138>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d8cc:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d8ce:	68db      	ldr	r3, [r3, #12]
 800d8d0:	685b      	ldr	r3, [r3, #4]
 800d8d2:	602b      	str	r3, [r5, #0]
	}
}
 800d8d4:	e775      	b.n	800d7c2 <xTaskIncrementTick+0x1a>
 800d8d6:	bf00      	nop
 800d8d8:	200030ec 	.word	0x200030ec
 800d8dc:	20003168 	.word	0x20003168
 800d8e0:	20003120 	.word	0x20003120
 800d8e4:	200030f4 	.word	0x200030f4
 800d8e8:	200030e8 	.word	0x200030e8
 800d8ec:	2000316c 	.word	0x2000316c
 800d8f0:	20002c78 	.word	0x20002c78
 800d8f4:	20002c7c 	.word	0x20002c7c
 800d8f8:	20003124 	.word	0x20003124
 800d8fc:	20002c80 	.word	0x20002c80
 800d900:	20002c74 	.word	0x20002c74

0800d904 <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 800d904:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	taskENTER_CRITICAL();
 800d908:	f7fe fd5c 	bl	800c3c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d90c:	4b3a      	ldr	r3, [pc, #232]	; (800d9f8 <xTaskResumeAll.part.0+0xf4>)
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	3a01      	subs	r2, #1
 800d912:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d158      	bne.n	800d9cc <xTaskResumeAll.part.0+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d91a:	4b38      	ldr	r3, [pc, #224]	; (800d9fc <xTaskResumeAll.part.0+0xf8>)
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d054      	beq.n	800d9cc <xTaskResumeAll.part.0+0xc8>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d922:	4d37      	ldr	r5, [pc, #220]	; (800da00 <xTaskResumeAll.part.0+0xfc>)
 800d924:	682b      	ldr	r3, [r5, #0]
 800d926:	2b00      	cmp	r3, #0
 800d928:	d063      	beq.n	800d9f2 <xTaskResumeAll.part.0+0xee>
						xYieldPending = pdTRUE;
 800d92a:	f04f 0a01 	mov.w	sl, #1
 800d92e:	4e35      	ldr	r6, [pc, #212]	; (800da04 <xTaskResumeAll.part.0+0x100>)
 800d930:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 800da1c <xTaskResumeAll.part.0+0x118>
 800d934:	4f34      	ldr	r7, [pc, #208]	; (800da08 <xTaskResumeAll.part.0+0x104>)
 800d936:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800da20 <xTaskResumeAll.part.0+0x11c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800d93a:	68eb      	ldr	r3, [r5, #12]
 800d93c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d93e:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d942:	f104 0018 	add.w	r0, r4, #24
 800d946:	f7fe fcd1 	bl	800c2ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d94a:	4658      	mov	r0, fp
 800d94c:	f7fe fcce 	bl	800c2ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d950:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d952:	6832      	ldr	r2, [r6, #0]
 800d954:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 800d958:	4293      	cmp	r3, r2
 800d95a:	4659      	mov	r1, fp
 800d95c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 800d960:	bf88      	it	hi
 800d962:	6033      	strhi	r3, [r6, #0]
 800d964:	f7fe fc9c 	bl	800c2a0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800d96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96e:	429a      	cmp	r2, r3
 800d970:	d332      	bcc.n	800d9d8 <xTaskResumeAll.part.0+0xd4>
						xYieldPending = pdTRUE;
 800d972:	f8c9 a000 	str.w	sl, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d976:	682b      	ldr	r3, [r5, #0]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d1de      	bne.n	800d93a <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d97c:	4b23      	ldr	r3, [pc, #140]	; (800da0c <xTaskResumeAll.part.0+0x108>)
 800d97e:	681a      	ldr	r2, [r3, #0]
 800d980:	6812      	ldr	r2, [r2, #0]
 800d982:	2a00      	cmp	r2, #0
 800d984:	d030      	beq.n	800d9e8 <xTaskResumeAll.part.0+0xe4>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d986:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d988:	4b21      	ldr	r3, [pc, #132]	; (800da10 <xTaskResumeAll.part.0+0x10c>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d98a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d98c:	68d2      	ldr	r2, [r2, #12]
 800d98e:	6852      	ldr	r2, [r2, #4]
 800d990:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d992:	4e20      	ldr	r6, [pc, #128]	; (800da14 <xTaskResumeAll.part.0+0x110>)
 800d994:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d996:	b144      	cbz	r4, 800d9aa <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
 800d998:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 800d99a:	f7ff ff05 	bl	800d7a8 <xTaskIncrementTick>
 800d99e:	b108      	cbz	r0, 800d9a4 <xTaskResumeAll.part.0+0xa0>
								xYieldPending = pdTRUE;
 800d9a0:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d9a4:	3c01      	subs	r4, #1
 800d9a6:	d1f8      	bne.n	800d99a <xTaskResumeAll.part.0+0x96>
						uxPendedTicks = 0;
 800d9a8:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 800d9aa:	f8d9 3000 	ldr.w	r3, [r9]
 800d9ae:	b16b      	cbz	r3, 800d9cc <xTaskResumeAll.part.0+0xc8>
					taskYIELD_IF_USING_PREEMPTION();
 800d9b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9b4:	4b18      	ldr	r3, [pc, #96]	; (800da18 <xTaskResumeAll.part.0+0x114>)
 800d9b6:	601a      	str	r2, [r3, #0]
 800d9b8:	f3bf 8f4f 	dsb	sy
 800d9bc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d9c0:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 800d9c2:	f7fe fd21 	bl	800c408 <vPortExitCritical>
}
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
BaseType_t xAlreadyYielded = pdFALSE;
 800d9cc:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d9ce:	f7fe fd1b 	bl	800c408 <vPortExitCritical>
}
 800d9d2:	4620      	mov	r0, r4
 800d9d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d9d8:	682b      	ldr	r3, [r5, #0]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d1ad      	bne.n	800d93a <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9de:	4b0b      	ldr	r3, [pc, #44]	; (800da0c <xTaskResumeAll.part.0+0x108>)
 800d9e0:	681a      	ldr	r2, [r3, #0]
 800d9e2:	6812      	ldr	r2, [r2, #0]
 800d9e4:	2a00      	cmp	r2, #0
 800d9e6:	d1ce      	bne.n	800d986 <xTaskResumeAll.part.0+0x82>
		xNextTaskUnblockTime = portMAX_DELAY;
 800d9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ec:	4b08      	ldr	r3, [pc, #32]	; (800da10 <xTaskResumeAll.part.0+0x10c>)
 800d9ee:	601a      	str	r2, [r3, #0]
 800d9f0:	e7cf      	b.n	800d992 <xTaskResumeAll.part.0+0x8e>
 800d9f2:	f8df 902c 	ldr.w	r9, [pc, #44]	; 800da20 <xTaskResumeAll.part.0+0x11c>
 800d9f6:	e7cc      	b.n	800d992 <xTaskResumeAll.part.0+0x8e>
 800d9f8:	200030ec 	.word	0x200030ec
 800d9fc:	200030e0 	.word	0x200030e0
 800da00:	20003128 	.word	0x20003128
 800da04:	200030f4 	.word	0x200030f4
 800da08:	20002c74 	.word	0x20002c74
 800da0c:	20002c78 	.word	0x20002c78
 800da10:	20003120 	.word	0x20003120
 800da14:	200030e8 	.word	0x200030e8
 800da18:	e000ed04 	.word	0xe000ed04
 800da1c:	20002c80 	.word	0x20002c80
 800da20:	2000316c 	.word	0x2000316c

0800da24 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 800da24:	4b06      	ldr	r3, [pc, #24]	; (800da40 <xTaskResumeAll+0x1c>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	b943      	cbnz	r3, 800da3c <xTaskResumeAll+0x18>
 800da2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da2e:	f383 8811 	msr	BASEPRI, r3
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	f3bf 8f4f 	dsb	sy
 800da3a:	e7fe      	b.n	800da3a <xTaskResumeAll+0x16>
 800da3c:	f7ff bf62 	b.w	800d904 <xTaskResumeAll.part.0>
 800da40:	200030ec 	.word	0x200030ec

0800da44 <vTaskDelay>:
	{
 800da44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800da46:	b940      	cbnz	r0, 800da5a <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800da48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da4c:	4b21      	ldr	r3, [pc, #132]	; (800dad4 <vTaskDelay+0x90>)
 800da4e:	601a      	str	r2, [r3, #0]
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	f3bf 8f6f 	isb	sy
	}
 800da58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800da5a:	4d1f      	ldr	r5, [pc, #124]	; (800dad8 <vTaskDelay+0x94>)
 800da5c:	682b      	ldr	r3, [r5, #0]
 800da5e:	b143      	cbz	r3, 800da72 <vTaskDelay+0x2e>
 800da60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da64:	f383 8811 	msr	BASEPRI, r3
 800da68:	f3bf 8f6f 	isb	sy
 800da6c:	f3bf 8f4f 	dsb	sy
 800da70:	e7fe      	b.n	800da70 <vTaskDelay+0x2c>
	++uxSchedulerSuspended;
 800da72:	4604      	mov	r4, r0
 800da74:	682b      	ldr	r3, [r5, #0]


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800da76:	4a19      	ldr	r2, [pc, #100]	; (800dadc <vTaskDelay+0x98>)
	++uxSchedulerSuspended;
 800da78:	3301      	adds	r3, #1
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da7a:	4e19      	ldr	r6, [pc, #100]	; (800dae0 <vTaskDelay+0x9c>)
	++uxSchedulerSuspended;
 800da7c:	602b      	str	r3, [r5, #0]
const TickType_t xConstTickCount = xTickCount;
 800da7e:	6817      	ldr	r7, [r2, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da80:	6830      	ldr	r0, [r6, #0]
 800da82:	3004      	adds	r0, #4
 800da84:	f7fe fc32 	bl	800c2ec <uxListRemove>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800da88:	6833      	ldr	r3, [r6, #0]
 800da8a:	19e4      	adds	r4, r4, r7
 800da8c:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 800da8e:	d315      	bcc.n	800dabc <vTaskDelay+0x78>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800da90:	4b14      	ldr	r3, [pc, #80]	; (800dae4 <vTaskDelay+0xa0>)
 800da92:	6818      	ldr	r0, [r3, #0]
 800da94:	6831      	ldr	r1, [r6, #0]
 800da96:	3104      	adds	r1, #4
 800da98:	f7fe fc10 	bl	800c2bc <vListInsert>
	configASSERT( uxSchedulerSuspended );
 800da9c:	682b      	ldr	r3, [r5, #0]
 800da9e:	b943      	cbnz	r3, 800dab2 <vTaskDelay+0x6e>
 800daa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa4:	f383 8811 	msr	BASEPRI, r3
 800daa8:	f3bf 8f6f 	isb	sy
 800daac:	f3bf 8f4f 	dsb	sy
 800dab0:	e7fe      	b.n	800dab0 <vTaskDelay+0x6c>
 800dab2:	f7ff ff27 	bl	800d904 <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 800dab6:	2800      	cmp	r0, #0
 800dab8:	d0c6      	beq.n	800da48 <vTaskDelay+0x4>
	}
 800daba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dabc:	4b0a      	ldr	r3, [pc, #40]	; (800dae8 <vTaskDelay+0xa4>)
 800dabe:	6818      	ldr	r0, [r3, #0]
 800dac0:	6831      	ldr	r1, [r6, #0]
 800dac2:	3104      	adds	r1, #4
 800dac4:	f7fe fbfa 	bl	800c2bc <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 800dac8:	4b08      	ldr	r3, [pc, #32]	; (800daec <vTaskDelay+0xa8>)
 800daca:	681a      	ldr	r2, [r3, #0]
 800dacc:	4294      	cmp	r4, r2
				{
					xNextTaskUnblockTime = xTimeToWake;
 800dace:	bf38      	it	cc
 800dad0:	601c      	strcc	r4, [r3, #0]
 800dad2:	e7e3      	b.n	800da9c <vTaskDelay+0x58>
 800dad4:	e000ed04 	.word	0xe000ed04
 800dad8:	200030ec 	.word	0x200030ec
 800dadc:	20003168 	.word	0x20003168
 800dae0:	20002c74 	.word	0x20002c74
 800dae4:	20002c7c 	.word	0x20002c7c
 800dae8:	20002c78 	.word	0x20002c78
 800daec:	20003120 	.word	0x20003120

0800daf0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800daf0:	4b1b      	ldr	r3, [pc, #108]	; (800db60 <vTaskSwitchContext+0x70>)
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	b11b      	cbz	r3, 800dafe <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 800daf6:	2201      	movs	r2, #1
 800daf8:	4b1a      	ldr	r3, [pc, #104]	; (800db64 <vTaskSwitchContext+0x74>)
 800dafa:	601a      	str	r2, [r3, #0]
 800dafc:	4770      	bx	lr
		xYieldPending = pdFALSE;
 800dafe:	4a19      	ldr	r2, [pc, #100]	; (800db64 <vTaskSwitchContext+0x74>)
{
 800db00:	b430      	push	{r4, r5}
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800db02:	4c19      	ldr	r4, [pc, #100]	; (800db68 <vTaskSwitchContext+0x78>)
		xYieldPending = pdFALSE;
 800db04:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800db06:	6823      	ldr	r3, [r4, #0]
 800db08:	4a18      	ldr	r2, [pc, #96]	; (800db6c <vTaskSwitchContext+0x7c>)
 800db0a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800db0e:	0089      	lsls	r1, r1, #2
 800db10:	5850      	ldr	r0, [r2, r1]
 800db12:	0099      	lsls	r1, r3, #2
 800db14:	b940      	cbnz	r0, 800db28 <vTaskSwitchContext+0x38>
 800db16:	b1d3      	cbz	r3, 800db4e <vTaskSwitchContext+0x5e>
 800db18:	3b01      	subs	r3, #1
 800db1a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 800db1e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 800db22:	0099      	lsls	r1, r3, #2
 800db24:	2800      	cmp	r0, #0
 800db26:	d0f6      	beq.n	800db16 <vTaskSwitchContext+0x26>
 800db28:	4419      	add	r1, r3
 800db2a:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 800db2e:	4602      	mov	r2, r0
 800db30:	6845      	ldr	r5, [r0, #4]
 800db32:	3208      	adds	r2, #8
 800db34:	6869      	ldr	r1, [r5, #4]
 800db36:	4291      	cmp	r1, r2
 800db38:	6041      	str	r1, [r0, #4]
 800db3a:	bf08      	it	eq
 800db3c:	6849      	ldreq	r1, [r1, #4]
 800db3e:	4a0c      	ldr	r2, [pc, #48]	; (800db70 <vTaskSwitchContext+0x80>)
 800db40:	bf08      	it	eq
 800db42:	6041      	streq	r1, [r0, #4]
 800db44:	68c9      	ldr	r1, [r1, #12]
 800db46:	6011      	str	r1, [r2, #0]
 800db48:	6023      	str	r3, [r4, #0]
}
 800db4a:	bc30      	pop	{r4, r5}
 800db4c:	4770      	bx	lr
 800db4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800db5e:	e7fe      	b.n	800db5e <vTaskSwitchContext+0x6e>
 800db60:	200030ec 	.word	0x200030ec
 800db64:	2000316c 	.word	0x2000316c
 800db68:	200030f4 	.word	0x200030f4
 800db6c:	20002c80 	.word	0x20002c80
 800db70:	20002c74 	.word	0x20002c74

0800db74 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 800db74:	b1d0      	cbz	r0, 800dbac <vTaskPlaceOnEventList+0x38>
{
 800db76:	b570      	push	{r4, r5, r6, lr}
 800db78:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db7a:	4d1a      	ldr	r5, [pc, #104]	; (800dbe4 <vTaskPlaceOnEventList+0x70>)
 800db7c:	6829      	ldr	r1, [r5, #0]
 800db7e:	3118      	adds	r1, #24
 800db80:	f7fe fb9c 	bl	800c2bc <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800db84:	4b18      	ldr	r3, [pc, #96]	; (800dbe8 <vTaskPlaceOnEventList+0x74>)
 800db86:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db88:	6828      	ldr	r0, [r5, #0]
 800db8a:	3004      	adds	r0, #4
 800db8c:	f7fe fbae 	bl	800c2ec <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db90:	1c63      	adds	r3, r4, #1
 800db92:	d014      	beq.n	800dbbe <vTaskPlaceOnEventList+0x4a>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db94:	682b      	ldr	r3, [r5, #0]
 800db96:	19a4      	adds	r4, r4, r6
 800db98:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db9a:	d317      	bcc.n	800dbcc <vTaskPlaceOnEventList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db9c:	4b13      	ldr	r3, [pc, #76]	; (800dbec <vTaskPlaceOnEventList+0x78>)
 800db9e:	6818      	ldr	r0, [r3, #0]
 800dba0:	6829      	ldr	r1, [r5, #0]
}
 800dba2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dba6:	3104      	adds	r1, #4
 800dba8:	f7fe bb88 	b.w	800c2bc <vListInsert>
 800dbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb0:	f383 8811 	msr	BASEPRI, r3
 800dbb4:	f3bf 8f6f 	isb	sy
 800dbb8:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
 800dbbc:	e7fe      	b.n	800dbbc <vTaskPlaceOnEventList+0x48>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbbe:	6829      	ldr	r1, [r5, #0]
 800dbc0:	480b      	ldr	r0, [pc, #44]	; (800dbf0 <vTaskPlaceOnEventList+0x7c>)
 800dbc2:	3104      	adds	r1, #4
}
 800dbc4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbc8:	f7fe bb6a 	b.w	800c2a0 <vListInsertEnd>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dbcc:	4b09      	ldr	r3, [pc, #36]	; (800dbf4 <vTaskPlaceOnEventList+0x80>)
 800dbce:	6818      	ldr	r0, [r3, #0]
 800dbd0:	6829      	ldr	r1, [r5, #0]
 800dbd2:	3104      	adds	r1, #4
 800dbd4:	f7fe fb72 	bl	800c2bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dbd8:	4b07      	ldr	r3, [pc, #28]	; (800dbf8 <vTaskPlaceOnEventList+0x84>)
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800dbde:	bf38      	it	cc
 800dbe0:	601c      	strcc	r4, [r3, #0]
}
 800dbe2:	bd70      	pop	{r4, r5, r6, pc}
 800dbe4:	20002c74 	.word	0x20002c74
 800dbe8:	20003168 	.word	0x20003168
 800dbec:	20002c7c 	.word	0x20002c7c
 800dbf0:	20003140 	.word	0x20003140
 800dbf4:	20002c78 	.word	0x20002c78
 800dbf8:	20003120 	.word	0x20003120

0800dbfc <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
 800dbfc:	b330      	cbz	r0, 800dc4c <vTaskPlaceOnEventListRestricted+0x50>
	{
 800dbfe:	b570      	push	{r4, r5, r6, lr}
 800dc00:	4616      	mov	r6, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dc02:	4d1d      	ldr	r5, [pc, #116]	; (800dc78 <vTaskPlaceOnEventListRestricted+0x7c>)
 800dc04:	460c      	mov	r4, r1
 800dc06:	6829      	ldr	r1, [r5, #0]
 800dc08:	3118      	adds	r1, #24
 800dc0a:	f7fe fb49 	bl	800c2a0 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
 800dc0e:	4b1b      	ldr	r3, [pc, #108]	; (800dc7c <vTaskPlaceOnEventListRestricted+0x80>)
		if( xWaitIndefinitely != pdFALSE )
 800dc10:	b986      	cbnz	r6, 800dc34 <vTaskPlaceOnEventListRestricted+0x38>
const TickType_t xConstTickCount = xTickCount;
 800dc12:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc14:	6828      	ldr	r0, [r5, #0]
 800dc16:	3004      	adds	r0, #4
 800dc18:	f7fe fb68 	bl	800c2ec <uxListRemove>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dc1c:	682b      	ldr	r3, [r5, #0]
 800dc1e:	19a4      	adds	r4, r4, r6
 800dc20:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dc22:	d31c      	bcc.n	800dc5e <vTaskPlaceOnEventListRestricted+0x62>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc24:	4b16      	ldr	r3, [pc, #88]	; (800dc80 <vTaskPlaceOnEventListRestricted+0x84>)
 800dc26:	6818      	ldr	r0, [r3, #0]
 800dc28:	6829      	ldr	r1, [r5, #0]
	}
 800dc2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc2e:	3104      	adds	r1, #4
 800dc30:	f7fe bb44 	b.w	800c2bc <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 800dc34:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc36:	6828      	ldr	r0, [r5, #0]
 800dc38:	3004      	adds	r0, #4
 800dc3a:	f7fe fb57 	bl	800c2ec <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc3e:	6829      	ldr	r1, [r5, #0]
 800dc40:	4810      	ldr	r0, [pc, #64]	; (800dc84 <vTaskPlaceOnEventListRestricted+0x88>)
 800dc42:	3104      	adds	r1, #4
	}
 800dc44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc48:	f7fe bb2a 	b.w	800c2a0 <vListInsertEnd>
 800dc4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc50:	f383 8811 	msr	BASEPRI, r3
 800dc54:	f3bf 8f6f 	isb	sy
 800dc58:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
 800dc5c:	e7fe      	b.n	800dc5c <vTaskPlaceOnEventListRestricted+0x60>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dc5e:	4b0a      	ldr	r3, [pc, #40]	; (800dc88 <vTaskPlaceOnEventListRestricted+0x8c>)
 800dc60:	6818      	ldr	r0, [r3, #0]
 800dc62:	6829      	ldr	r1, [r5, #0]
 800dc64:	3104      	adds	r1, #4
 800dc66:	f7fe fb29 	bl	800c2bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800dc6a:	4b08      	ldr	r3, [pc, #32]	; (800dc8c <vTaskPlaceOnEventListRestricted+0x90>)
 800dc6c:	681a      	ldr	r2, [r3, #0]
 800dc6e:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800dc70:	bf38      	it	cc
 800dc72:	601c      	strcc	r4, [r3, #0]
	}
 800dc74:	bd70      	pop	{r4, r5, r6, pc}
 800dc76:	bf00      	nop
 800dc78:	20002c74 	.word	0x20002c74
 800dc7c:	20003168 	.word	0x20003168
 800dc80:	20002c7c 	.word	0x20002c7c
 800dc84:	20003140 	.word	0x20003140
 800dc88:	20002c78 	.word	0x20002c78
 800dc8c:	20003120 	.word	0x20003120

0800dc90 <xTaskRemoveFromEventList>:
{
 800dc90:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800dc92:	68c3      	ldr	r3, [r0, #12]
 800dc94:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800dc96:	b35c      	cbz	r4, 800dcf0 <xTaskRemoveFromEventList+0x60>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc98:	f104 0518 	add.w	r5, r4, #24
 800dc9c:	4628      	mov	r0, r5
 800dc9e:	f7fe fb25 	bl	800c2ec <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dca2:	4b18      	ldr	r3, [pc, #96]	; (800dd04 <xTaskRemoveFromEventList+0x74>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	b173      	cbz	r3, 800dcc6 <xTaskRemoveFromEventList+0x36>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dca8:	4629      	mov	r1, r5
 800dcaa:	4817      	ldr	r0, [pc, #92]	; (800dd08 <xTaskRemoveFromEventList+0x78>)
 800dcac:	f7fe faf8 	bl	800c2a0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dcb0:	4b16      	ldr	r3, [pc, #88]	; (800dd0c <xTaskRemoveFromEventList+0x7c>)
 800dcb2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcb8:	429a      	cmp	r2, r3
 800dcba:	d917      	bls.n	800dcec <xTaskRemoveFromEventList+0x5c>
		xYieldPending = pdTRUE;
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	4a14      	ldr	r2, [pc, #80]	; (800dd10 <xTaskRemoveFromEventList+0x80>)
		xReturn = pdTRUE;
 800dcc0:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 800dcc2:	6013      	str	r3, [r2, #0]
}
 800dcc4:	bd38      	pop	{r3, r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dcc6:	1d25      	adds	r5, r4, #4
 800dcc8:	4628      	mov	r0, r5
 800dcca:	f7fe fb0f 	bl	800c2ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dcce:	4a11      	ldr	r2, [pc, #68]	; (800dd14 <xTaskRemoveFromEventList+0x84>)
 800dcd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dcd2:	6811      	ldr	r1, [r2, #0]
 800dcd4:	4810      	ldr	r0, [pc, #64]	; (800dd18 <xTaskRemoveFromEventList+0x88>)
 800dcd6:	428b      	cmp	r3, r1
 800dcd8:	bf88      	it	hi
 800dcda:	6013      	strhi	r3, [r2, #0]
 800dcdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800dce0:	4629      	mov	r1, r5
 800dce2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800dce6:	f7fe fadb 	bl	800c2a0 <vListInsertEnd>
 800dcea:	e7e1      	b.n	800dcb0 <xTaskRemoveFromEventList+0x20>
		xReturn = pdFALSE;
 800dcec:	2000      	movs	r0, #0
}
 800dcee:	bd38      	pop	{r3, r4, r5, pc}
 800dcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf4:	f383 8811 	msr	BASEPRI, r3
 800dcf8:	f3bf 8f6f 	isb	sy
 800dcfc:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
 800dd00:	e7fe      	b.n	800dd00 <xTaskRemoveFromEventList+0x70>
 800dd02:	bf00      	nop
 800dd04:	200030ec 	.word	0x200030ec
 800dd08:	20003128 	.word	0x20003128
 800dd0c:	20002c74 	.word	0x20002c74
 800dd10:	2000316c 	.word	0x2000316c
 800dd14:	200030f4 	.word	0x200030f4
 800dd18:	20002c80 	.word	0x20002c80

0800dd1c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd1c:	4a03      	ldr	r2, [pc, #12]	; (800dd2c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd1e:	4b04      	ldr	r3, [pc, #16]	; (800dd30 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd20:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	e9c0 2300 	strd	r2, r3, [r0]
}
 800dd28:	4770      	bx	lr
 800dd2a:	bf00      	nop
 800dd2c:	20003124 	.word	0x20003124
 800dd30:	20003168 	.word	0x20003168

0800dd34 <xTaskCheckForTimeOut>:
{
 800dd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 800dd36:	b308      	cbz	r0, 800dd7c <xTaskCheckForTimeOut+0x48>
	configASSERT( pxTicksToWait );
 800dd38:	460d      	mov	r5, r1
 800dd3a:	b1b1      	cbz	r1, 800dd6a <xTaskCheckForTimeOut+0x36>
 800dd3c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800dd3e:	f7fe fb41 	bl	800c3c4 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 800dd42:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 800dd44:	f8df c078 	ldr.w	ip, [pc, #120]	; 800ddc0 <xTaskCheckForTimeOut+0x8c>
			if( *pxTicksToWait == portMAX_DELAY )
 800dd48:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 800dd4a:	f8dc 1000 	ldr.w	r1, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 800dd4e:	d02b      	beq.n	800dda8 <xTaskCheckForTimeOut+0x74>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd50:	e9d4 0200 	ldrd	r0, r2, [r4]
 800dd54:	4e19      	ldr	r6, [pc, #100]	; (800ddbc <xTaskCheckForTimeOut+0x88>)
 800dd56:	6837      	ldr	r7, [r6, #0]
 800dd58:	42b8      	cmp	r0, r7
 800dd5a:	d018      	beq.n	800dd8e <xTaskCheckForTimeOut+0x5a>
 800dd5c:	428a      	cmp	r2, r1
 800dd5e:	d816      	bhi.n	800dd8e <xTaskCheckForTimeOut+0x5a>
			xReturn = pdTRUE;
 800dd60:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
 800dd62:	f7fe fb51 	bl	800c408 <vPortExitCritical>
}
 800dd66:	4630      	mov	r0, r6
 800dd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd6e:	f383 8811 	msr	BASEPRI, r3
 800dd72:	f3bf 8f6f 	isb	sy
 800dd76:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
 800dd7a:	e7fe      	b.n	800dd7a <xTaskCheckForTimeOut+0x46>
 800dd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd80:	f383 8811 	msr	BASEPRI, r3
 800dd84:	f3bf 8f6f 	isb	sy
 800dd88:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
 800dd8c:	e7fe      	b.n	800dd8c <xTaskCheckForTimeOut+0x58>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd8e:	1a8f      	subs	r7, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dd90:	42bb      	cmp	r3, r7
 800dd92:	d90e      	bls.n	800ddb2 <xTaskCheckForTimeOut+0x7e>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dd94:	6837      	ldr	r7, [r6, #0]
			*pxTicksToWait -= xElapsedTime;
 800dd96:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dd98:	f8dc 1000 	ldr.w	r1, [ip]
			*pxTicksToWait -= xElapsedTime;
 800dd9c:	4413      	add	r3, r2
 800dd9e:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 800dda0:	2600      	movs	r6, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dda2:	e9c4 7100 	strd	r7, r1, [r4]
			xReturn = pdFALSE;
 800dda6:	e7dc      	b.n	800dd62 <xTaskCheckForTimeOut+0x2e>
				xReturn = pdFALSE;
 800dda8:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 800ddaa:	f7fe fb2d 	bl	800c408 <vPortExitCritical>
}
 800ddae:	4630      	mov	r0, r6
 800ddb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 800ddb2:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 800ddb4:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 800ddb6:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 800ddb8:	e7d3      	b.n	800dd62 <xTaskCheckForTimeOut+0x2e>
 800ddba:	bf00      	nop
 800ddbc:	20003124 	.word	0x20003124
 800ddc0:	20003168 	.word	0x20003168

0800ddc4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800ddc4:	2201      	movs	r2, #1
 800ddc6:	4b01      	ldr	r3, [pc, #4]	; (800ddcc <vTaskMissedYield+0x8>)
 800ddc8:	601a      	str	r2, [r3, #0]
}
 800ddca:	4770      	bx	lr
 800ddcc:	2000316c 	.word	0x2000316c

0800ddd0 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800ddd0:	4b01      	ldr	r3, [pc, #4]	; (800ddd8 <xTaskGetCurrentTaskHandle+0x8>)
 800ddd2:	6818      	ldr	r0, [r3, #0]
	}
 800ddd4:	4770      	bx	lr
 800ddd6:	bf00      	nop
 800ddd8:	20002c74 	.word	0x20002c74

0800dddc <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800dddc:	4b05      	ldr	r3, [pc, #20]	; (800ddf4 <xTaskGetSchedulerState+0x18>)
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	b133      	cbz	r3, 800ddf0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dde2:	4b05      	ldr	r3, [pc, #20]	; (800ddf8 <xTaskGetSchedulerState+0x1c>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 800dde8:	bf0c      	ite	eq
 800ddea:	2002      	moveq	r0, #2
 800ddec:	2000      	movne	r0, #0
 800ddee:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ddf0:	2001      	movs	r0, #1
	}
 800ddf2:	4770      	bx	lr
 800ddf4:	2000313c 	.word	0x2000313c
 800ddf8:	200030ec 	.word	0x200030ec

0800ddfc <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 800ddfc:	b1c0      	cbz	r0, 800de30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB == pxCurrentTCB );
 800ddfe:	4a1e      	ldr	r2, [pc, #120]	; (800de78 <xTaskPriorityDisinherit+0x7c>)
	{
 800de00:	b538      	push	{r3, r4, r5, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 800de02:	6814      	ldr	r4, [r2, #0]
 800de04:	4284      	cmp	r4, r0
 800de06:	d008      	beq.n	800de1a <xTaskPriorityDisinherit+0x1e>
 800de08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0c:	f383 8811 	msr	BASEPRI, r3
 800de10:	f3bf 8f6f 	isb	sy
 800de14:	f3bf 8f4f 	dsb	sy
 800de18:	e7fe      	b.n	800de18 <xTaskPriorityDisinherit+0x1c>
			configASSERT( pxTCB->uxMutexesHeld );
 800de1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800de1c:	b153      	cbz	r3, 800de34 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800de1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800de20:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 800de22:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800de24:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800de26:	6523      	str	r3, [r4, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800de28:	d000      	beq.n	800de2c <xTaskPriorityDisinherit+0x30>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800de2a:	b163      	cbz	r3, 800de46 <xTaskPriorityDisinherit+0x4a>
	BaseType_t xReturn = pdFALSE;
 800de2c:	2000      	movs	r0, #0
	}
 800de2e:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
 800de30:	2000      	movs	r0, #0
	}
 800de32:	4770      	bx	lr
 800de34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de38:	f383 8811 	msr	BASEPRI, r3
 800de3c:	f3bf 8f6f 	isb	sy
 800de40:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
 800de44:	e7fe      	b.n	800de44 <xTaskPriorityDisinherit+0x48>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de46:	1d25      	adds	r5, r4, #4
 800de48:	4628      	mov	r0, r5
 800de4a:	f7fe fa4f 	bl	800c2ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800de4e:	4a0b      	ldr	r2, [pc, #44]	; (800de7c <xTaskPriorityDisinherit+0x80>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800de50:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
 800de52:	6811      	ldr	r1, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de54:	f1c3 0038 	rsb	r0, r3, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
 800de58:	428b      	cmp	r3, r1
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de5a:	61a0      	str	r0, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800de5c:	4808      	ldr	r0, [pc, #32]	; (800de80 <xTaskPriorityDisinherit+0x84>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800de5e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800de60:	bf88      	it	hi
 800de62:	6013      	strhi	r3, [r2, #0]
 800de64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800de68:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800de6c:	4629      	mov	r1, r5
 800de6e:	f7fe fa17 	bl	800c2a0 <vListInsertEnd>
					xReturn = pdTRUE;
 800de72:	2001      	movs	r0, #1
	}
 800de74:	bd38      	pop	{r3, r4, r5, pc}
 800de76:	bf00      	nop
 800de78:	20002c74 	.word	0x20002c74
 800de7c:	200030f4 	.word	0x200030f4
 800de80:	20002c80 	.word	0x20002c80

0800de84 <xTaskNotifyWait>:
	{
 800de84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800de88:	4c30      	ldr	r4, [pc, #192]	; (800df4c <xTaskNotifyWait+0xc8>)
	{
 800de8a:	461e      	mov	r6, r3
 800de8c:	4607      	mov	r7, r0
 800de8e:	4688      	mov	r8, r1
 800de90:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 800de92:	f7fe fa97 	bl	800c3c4 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800de96:	6823      	ldr	r3, [r4, #0]
 800de98:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d009      	beq.n	800deb4 <xTaskNotifyWait+0x30>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800dea0:	2201      	movs	r2, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800dea2:	6823      	ldr	r3, [r4, #0]
 800dea4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800dea6:	ea20 0707 	bic.w	r7, r0, r7
 800deaa:	655f      	str	r7, [r3, #84]	; 0x54
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800deac:	6823      	ldr	r3, [r4, #0]
 800deae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				if( xTicksToWait > ( TickType_t ) 0 )
 800deb2:	b9b6      	cbnz	r6, 800dee2 <xTaskNotifyWait+0x5e>
		taskEXIT_CRITICAL();
 800deb4:	f7fe faa8 	bl	800c408 <vPortExitCritical>
		taskENTER_CRITICAL();
 800deb8:	f7fe fa84 	bl	800c3c4 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 800debc:	b115      	cbz	r5, 800dec4 <xTaskNotifyWait+0x40>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800debe:	6823      	ldr	r3, [r4, #0]
 800dec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dec2:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800dec4:	6823      	ldr	r3, [r4, #0]
 800dec6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800deca:	2b02      	cmp	r3, #2
 800decc:	d024      	beq.n	800df18 <xTaskNotifyWait+0x94>
				xReturn = pdFALSE;
 800dece:	2500      	movs	r5, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ded0:	2200      	movs	r2, #0
 800ded2:	6823      	ldr	r3, [r4, #0]
 800ded4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		taskEXIT_CRITICAL();
 800ded8:	f7fe fa96 	bl	800c408 <vPortExitCritical>
	}
 800dedc:	4628      	mov	r0, r5
 800dede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
const TickType_t xConstTickCount = xTickCount;
 800dee2:	4b1b      	ldr	r3, [pc, #108]	; (800df50 <xTaskNotifyWait+0xcc>)
 800dee4:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dee6:	6820      	ldr	r0, [r4, #0]
 800dee8:	3004      	adds	r0, #4
 800deea:	f7fe f9ff 	bl	800c2ec <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800deee:	1c73      	adds	r3, r6, #1
 800def0:	d019      	beq.n	800df26 <xTaskNotifyWait+0xa2>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800def2:	6823      	ldr	r3, [r4, #0]
 800def4:	19f6      	adds	r6, r6, r7
 800def6:	605e      	str	r6, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800def8:	d31b      	bcc.n	800df32 <xTaskNotifyWait+0xae>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800defa:	4b16      	ldr	r3, [pc, #88]	; (800df54 <xTaskNotifyWait+0xd0>)
 800defc:	6818      	ldr	r0, [r3, #0]
 800defe:	6821      	ldr	r1, [r4, #0]
 800df00:	3104      	adds	r1, #4
 800df02:	f7fe f9db 	bl	800c2bc <vListInsert>
					portYIELD_WITHIN_API();
 800df06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df0a:	4b13      	ldr	r3, [pc, #76]	; (800df58 <xTaskNotifyWait+0xd4>)
 800df0c:	601a      	str	r2, [r3, #0]
 800df0e:	f3bf 8f4f 	dsb	sy
 800df12:	f3bf 8f6f 	isb	sy
 800df16:	e7cd      	b.n	800deb4 <xTaskNotifyWait+0x30>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800df18:	6823      	ldr	r3, [r4, #0]
				xReturn = pdTRUE;
 800df1a:	2501      	movs	r5, #1
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800df1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800df1e:	ea21 0108 	bic.w	r1, r1, r8
 800df22:	6559      	str	r1, [r3, #84]	; 0x54
				xReturn = pdTRUE;
 800df24:	e7d4      	b.n	800ded0 <xTaskNotifyWait+0x4c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df26:	6821      	ldr	r1, [r4, #0]
 800df28:	480c      	ldr	r0, [pc, #48]	; (800df5c <xTaskNotifyWait+0xd8>)
 800df2a:	3104      	adds	r1, #4
 800df2c:	f7fe f9b8 	bl	800c2a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800df30:	e7e9      	b.n	800df06 <xTaskNotifyWait+0x82>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df32:	4b0b      	ldr	r3, [pc, #44]	; (800df60 <xTaskNotifyWait+0xdc>)
 800df34:	6818      	ldr	r0, [r3, #0]
 800df36:	6821      	ldr	r1, [r4, #0]
 800df38:	3104      	adds	r1, #4
 800df3a:	f7fe f9bf 	bl	800c2bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800df3e:	4b09      	ldr	r3, [pc, #36]	; (800df64 <xTaskNotifyWait+0xe0>)
 800df40:	681a      	ldr	r2, [r3, #0]
 800df42:	4296      	cmp	r6, r2
					xNextTaskUnblockTime = xTimeToWake;
 800df44:	bf38      	it	cc
 800df46:	601e      	strcc	r6, [r3, #0]
 800df48:	e7dd      	b.n	800df06 <xTaskNotifyWait+0x82>
 800df4a:	bf00      	nop
 800df4c:	20002c74 	.word	0x20002c74
 800df50:	20003168 	.word	0x20003168
 800df54:	20002c7c 	.word	0x20002c7c
 800df58:	e000ed04 	.word	0xe000ed04
 800df5c:	20003140 	.word	0x20003140
 800df60:	20002c78 	.word	0x20002c78
 800df64:	20003120 	.word	0x20003120

0800df68 <xTaskGenericNotify>:
	{
 800df68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToNotify );
 800df6a:	b1a8      	cbz	r0, 800df98 <xTaskGenericNotify+0x30>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800df6c:	461f      	mov	r7, r3
 800df6e:	460e      	mov	r6, r1
 800df70:	4615      	mov	r5, r2
 800df72:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 800df74:	f7fe fa26 	bl	800c3c4 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 800df78:	b10f      	cbz	r7, 800df7e <xTaskGenericNotify+0x16>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800df7a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800df7c:	603b      	str	r3, [r7, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800df7e:	2102      	movs	r1, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800df80:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800df84:	1e6b      	subs	r3, r5, #1
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800df86:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800df8a:	b2d2      	uxtb	r2, r2
			switch( eAction )
 800df8c:	2b03      	cmp	r3, #3
 800df8e:	d80f      	bhi.n	800dfb0 <xTaskGenericNotify+0x48>
 800df90:	e8df f003 	tbb	[pc, r3]
 800df94:	0b0d4145 	.word	0x0b0d4145
 800df98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9c:	f383 8811 	msr	BASEPRI, r3
 800dfa0:	f3bf 8f6f 	isb	sy
 800dfa4:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800dfa8:	e7fe      	b.n	800dfa8 <xTaskGenericNotify+0x40>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800dfaa:	2a02      	cmp	r2, #2
 800dfac:	d03b      	beq.n	800e026 <xTaskGenericNotify+0xbe>
						pxTCB->ulNotifiedValue = ulValue;
 800dfae:	6566      	str	r6, [r4, #84]	; 0x54
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800dfb0:	2a01      	cmp	r2, #1
 800dfb2:	d004      	beq.n	800dfbe <xTaskGenericNotify+0x56>
					taskYIELD_IF_USING_PREEMPTION();
 800dfb4:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 800dfb6:	f7fe fa27 	bl	800c408 <vPortExitCritical>
	}
 800dfba:	4620      	mov	r0, r4
 800dfbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dfbe:	1d25      	adds	r5, r4, #4
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	f7fe f993 	bl	800c2ec <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800dfc6:	4a19      	ldr	r2, [pc, #100]	; (800e02c <xTaskGenericNotify+0xc4>)
 800dfc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dfca:	6811      	ldr	r1, [r2, #0]
 800dfcc:	4818      	ldr	r0, [pc, #96]	; (800e030 <xTaskGenericNotify+0xc8>)
 800dfce:	428b      	cmp	r3, r1
 800dfd0:	bf88      	it	hi
 800dfd2:	6013      	strhi	r3, [r2, #0]
 800dfd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800dfd8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800dfdc:	4629      	mov	r1, r5
 800dfde:	f7fe f95f 	bl	800c2a0 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800dfe2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dfe4:	b143      	cbz	r3, 800dff8 <xTaskGenericNotify+0x90>
 800dfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfea:	f383 8811 	msr	BASEPRI, r3
 800dfee:	f3bf 8f6f 	isb	sy
 800dff2:	f3bf 8f4f 	dsb	sy
 800dff6:	e7fe      	b.n	800dff6 <xTaskGenericNotify+0x8e>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dff8:	4b0e      	ldr	r3, [pc, #56]	; (800e034 <xTaskGenericNotify+0xcc>)
 800dffa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e000:	429a      	cmp	r2, r3
 800e002:	d9d7      	bls.n	800dfb4 <xTaskGenericNotify+0x4c>
					taskYIELD_IF_USING_PREEMPTION();
 800e004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e008:	4b0b      	ldr	r3, [pc, #44]	; (800e038 <xTaskGenericNotify+0xd0>)
 800e00a:	601a      	str	r2, [r3, #0]
 800e00c:	f3bf 8f4f 	dsb	sy
 800e010:	f3bf 8f6f 	isb	sy
 800e014:	e7ce      	b.n	800dfb4 <xTaskGenericNotify+0x4c>
					( pxTCB->ulNotifiedValue )++;
 800e016:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e018:	3301      	adds	r3, #1
 800e01a:	6563      	str	r3, [r4, #84]	; 0x54
					break;
 800e01c:	e7c8      	b.n	800dfb0 <xTaskGenericNotify+0x48>
					pxTCB->ulNotifiedValue |= ulValue;
 800e01e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e020:	431e      	orrs	r6, r3
 800e022:	6566      	str	r6, [r4, #84]	; 0x54
					break;
 800e024:	e7c4      	b.n	800dfb0 <xTaskGenericNotify+0x48>
						xReturn = pdFAIL;
 800e026:	2400      	movs	r4, #0
 800e028:	e7c5      	b.n	800dfb6 <xTaskGenericNotify+0x4e>
 800e02a:	bf00      	nop
 800e02c:	200030f4 	.word	0x200030f4
 800e030:	20002c80 	.word	0x20002c80
 800e034:	20002c74 	.word	0x20002c74
 800e038:	e000ed04 	.word	0xe000ed04

0800e03c <xTaskGenericNotifyFromISR>:
	{
 800e03c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e040:	9f08      	ldr	r7, [sp, #32]
		configASSERT( xTaskToNotify );
 800e042:	b310      	cbz	r0, 800e08a <xTaskGenericNotifyFromISR+0x4e>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e044:	4688      	mov	r8, r1
 800e046:	4615      	mov	r5, r2
 800e048:	4699      	mov	r9, r3
 800e04a:	4604      	mov	r4, r0
 800e04c:	f7fe fa9a 	bl	800c584 <vPortValidateInterruptPriority>
	__asm volatile
 800e050:	f3ef 8611 	mrs	r6, BASEPRI
 800e054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e058:	f383 8811 	msr	BASEPRI, r3
 800e05c:	f3bf 8f6f 	isb	sy
 800e060:	f3bf 8f4f 	dsb	sy
			if( pulPreviousNotificationValue != NULL )
 800e064:	f1b9 0f00 	cmp.w	r9, #0
 800e068:	d002      	beq.n	800e070 <xTaskGenericNotifyFromISR+0x34>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e06a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e06c:	f8c9 3000 	str.w	r3, [r9]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e070:	2102      	movs	r1, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e072:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800e076:	1e6b      	subs	r3, r5, #1
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e078:	f884 1058 	strb.w	r1, [r4, #88]	; 0x58
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e07c:	b2d2      	uxtb	r2, r2
			switch( eAction )
 800e07e:	2b03      	cmp	r3, #3
 800e080:	d810      	bhi.n	800e0a4 <xTaskGenericNotifyFromISR+0x68>
 800e082:	e8df f003 	tbb	[pc, r3]
 800e086:	4044      	.short	0x4044
 800e088:	0b0d      	.short	0x0b0d
	__asm volatile
 800e08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e08e:	f383 8811 	msr	BASEPRI, r3
 800e092:	f3bf 8f6f 	isb	sy
 800e096:	f3bf 8f4f 	dsb	sy
		configASSERT( xTaskToNotify );
 800e09a:	e7fe      	b.n	800e09a <xTaskGenericNotifyFromISR+0x5e>
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e09c:	2a02      	cmp	r2, #2
 800e09e:	d03b      	beq.n	800e118 <xTaskGenericNotifyFromISR+0xdc>
						pxTCB->ulNotifiedValue = ulValue;
 800e0a0:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e0a4:	2a01      	cmp	r2, #1
 800e0a6:	d004      	beq.n	800e0b2 <xTaskGenericNotifyFromISR+0x76>
 800e0a8:	2001      	movs	r0, #1
	__asm volatile
 800e0aa:	f386 8811 	msr	BASEPRI, r6
	}
 800e0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e0b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e0b4:	b143      	cbz	r3, 800e0c8 <xTaskGenericNotifyFromISR+0x8c>
	__asm volatile
 800e0b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0ba:	f383 8811 	msr	BASEPRI, r3
 800e0be:	f3bf 8f6f 	isb	sy
 800e0c2:	f3bf 8f4f 	dsb	sy
 800e0c6:	e7fe      	b.n	800e0c6 <xTaskGenericNotifyFromISR+0x8a>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0c8:	4b1a      	ldr	r3, [pc, #104]	; (800e134 <xTaskGenericNotifyFromISR+0xf8>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	bb33      	cbnz	r3, 800e11c <xTaskGenericNotifyFromISR+0xe0>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e0ce:	1d25      	adds	r5, r4, #4
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	f7fe f90b 	bl	800c2ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e0d6:	4a18      	ldr	r2, [pc, #96]	; (800e138 <xTaskGenericNotifyFromISR+0xfc>)
 800e0d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e0da:	6811      	ldr	r1, [r2, #0]
 800e0dc:	4817      	ldr	r0, [pc, #92]	; (800e13c <xTaskGenericNotifyFromISR+0x100>)
 800e0de:	428b      	cmp	r3, r1
 800e0e0:	bf88      	it	hi
 800e0e2:	6013      	strhi	r3, [r2, #0]
 800e0e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e0e8:	4629      	mov	r1, r5
 800e0ea:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800e0ee:	f7fe f8d7 	bl	800c2a0 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e0f2:	4b13      	ldr	r3, [pc, #76]	; (800e140 <xTaskGenericNotifyFromISR+0x104>)
 800e0f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d9d4      	bls.n	800e0a8 <xTaskGenericNotifyFromISR+0x6c>
					if( pxHigherPriorityTaskWoken != NULL )
 800e0fe:	b19f      	cbz	r7, 800e128 <xTaskGenericNotifyFromISR+0xec>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800e100:	2001      	movs	r0, #1
 800e102:	6038      	str	r0, [r7, #0]
 800e104:	e7d1      	b.n	800e0aa <xTaskGenericNotifyFromISR+0x6e>
					( pxTCB->ulNotifiedValue )++;
 800e106:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e108:	3301      	adds	r3, #1
 800e10a:	6563      	str	r3, [r4, #84]	; 0x54
					break;
 800e10c:	e7ca      	b.n	800e0a4 <xTaskGenericNotifyFromISR+0x68>
					pxTCB->ulNotifiedValue |= ulValue;
 800e10e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800e110:	ea43 0308 	orr.w	r3, r3, r8
 800e114:	6563      	str	r3, [r4, #84]	; 0x54
					break;
 800e116:	e7c5      	b.n	800e0a4 <xTaskGenericNotifyFromISR+0x68>
						xReturn = pdFAIL;
 800e118:	2000      	movs	r0, #0
 800e11a:	e7c6      	b.n	800e0aa <xTaskGenericNotifyFromISR+0x6e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800e11c:	4809      	ldr	r0, [pc, #36]	; (800e144 <xTaskGenericNotifyFromISR+0x108>)
 800e11e:	f104 0118 	add.w	r1, r4, #24
 800e122:	f7fe f8bd 	bl	800c2a0 <vListInsertEnd>
 800e126:	e7e4      	b.n	800e0f2 <xTaskGenericNotifyFromISR+0xb6>
						xYieldPending = pdTRUE;
 800e128:	2301      	movs	r3, #1
 800e12a:	4a07      	ldr	r2, [pc, #28]	; (800e148 <xTaskGenericNotifyFromISR+0x10c>)
 800e12c:	4618      	mov	r0, r3
 800e12e:	6013      	str	r3, [r2, #0]
 800e130:	e7bb      	b.n	800e0aa <xTaskGenericNotifyFromISR+0x6e>
 800e132:	bf00      	nop
 800e134:	200030ec 	.word	0x200030ec
 800e138:	200030f4 	.word	0x200030f4
 800e13c:	20002c80 	.word	0x20002c80
 800e140:	20002c74 	.word	0x20002c74
 800e144:	20003128 	.word	0x20003128
 800e148:	2000316c 	.word	0x2000316c

0800e14c <xTaskNotifyStateClear>:
	{
 800e14c:	b538      	push	{r3, r4, r5, lr}
		pxTCB = prvGetTCBFromHandle( xTask );
 800e14e:	b178      	cbz	r0, 800e170 <xTaskNotifyStateClear+0x24>
 800e150:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
 800e152:	f7fe f937 	bl	800c3c4 <vPortEnterCritical>
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800e156:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 800e15a:	2b02      	cmp	r3, #2
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e15c:	bf05      	ittet	eq
 800e15e:	2300      	moveq	r3, #0
				xReturn = pdPASS;
 800e160:	2501      	moveq	r5, #1
				xReturn = pdFAIL;
 800e162:	2500      	movne	r5, #0
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e164:	f884 3058 	strbeq.w	r3, [r4, #88]	; 0x58
		taskEXIT_CRITICAL();
 800e168:	f7fe f94e 	bl	800c408 <vPortExitCritical>
	}
 800e16c:	4628      	mov	r0, r5
 800e16e:	bd38      	pop	{r3, r4, r5, pc}
		pxTCB = prvGetTCBFromHandle( xTask );
 800e170:	4b01      	ldr	r3, [pc, #4]	; (800e178 <xTaskNotifyStateClear+0x2c>)
 800e172:	681c      	ldr	r4, [r3, #0]
 800e174:	e7ed      	b.n	800e152 <xTaskNotifyStateClear+0x6>
 800e176:	bf00      	nop
 800e178:	20002c74 	.word	0x20002c74

0800e17c <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e17c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		xMessage.xMessageID = xCommandID;
 800e180:	f04f 0800 	mov.w	r8, #0
 800e184:	4e20      	ldr	r6, [pc, #128]	; (800e208 <prvSwitchTimerLists+0x8c>)
	if( xTimerQueue != NULL )
 800e186:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800e210 <prvSwitchTimerLists+0x94>
{
 800e18a:	b085      	sub	sp, #20

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e18c:	e00c      	b.n	800e1a8 <prvSwitchTimerLists+0x2c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e18e:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e190:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e192:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e194:	1d25      	adds	r5, r4, #4
 800e196:	4628      	mov	r0, r5
 800e198:	f7fe f8a8 	bl	800c2ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e19c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e19e:	4620      	mov	r0, r4
 800e1a0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e1a2:	69e3      	ldr	r3, [r4, #28]
 800e1a4:	2b01      	cmp	r3, #1
 800e1a6:	d00a      	beq.n	800e1be <prvSwitchTimerLists+0x42>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e1a8:	6833      	ldr	r3, [r6, #0]
 800e1aa:	681a      	ldr	r2, [r3, #0]
 800e1ac:	2a00      	cmp	r2, #0
 800e1ae:	d1ee      	bne.n	800e18e <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
 800e1b0:	4a16      	ldr	r2, [pc, #88]	; (800e20c <prvSwitchTimerLists+0x90>)
 800e1b2:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e1b4:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 800e1b6:	6031      	str	r1, [r6, #0]
}
 800e1b8:	b005      	add	sp, #20
 800e1ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e1be:	69a3      	ldr	r3, [r4, #24]
 800e1c0:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
 800e1c2:	429f      	cmp	r7, r3
 800e1c4:	d206      	bcs.n	800e1d4 <prvSwitchTimerLists+0x58>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1c6:	4629      	mov	r1, r5
 800e1c8:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e1ca:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e1cc:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1ce:	f7fe f875 	bl	800c2bc <vListInsert>
 800e1d2:	e7e9      	b.n	800e1a8 <prvSwitchTimerLists+0x2c>
	if( xTimerQueue != NULL )
 800e1d4:	f8d9 3000 	ldr.w	r3, [r9]
 800e1d8:	b16b      	cbz	r3, 800e1f6 <prvSwitchTimerLists+0x7a>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e1da:	e9cd 8700 	strd	r8, r7, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e1de:	9402      	str	r4, [sp, #8]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e1e0:	f7ff fdfc 	bl	800dddc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	4669      	mov	r1, sp
 800e1e8:	461a      	mov	r2, r3
 800e1ea:	f8d9 0000 	ldr.w	r0, [r9]
 800e1ee:	f7fe faab 	bl	800c748 <xQueueGenericSend>
				configASSERT( xResult );
 800e1f2:	2800      	cmp	r0, #0
 800e1f4:	d1d8      	bne.n	800e1a8 <prvSwitchTimerLists+0x2c>
 800e1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1fa:	f383 8811 	msr	BASEPRI, r3
 800e1fe:	f3bf 8f6f 	isb	sy
 800e202:	f3bf 8f4f 	dsb	sy
 800e206:	e7fe      	b.n	800e206 <prvSwitchTimerLists+0x8a>
 800e208:	20003170 	.word	0x20003170
 800e20c:	20003174 	.word	0x20003174
 800e210:	20003294 	.word	0x20003294

0800e214 <prvTimerTask>:
{
 800e214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e218:	f04f 0800 	mov.w	r8, #0
 800e21c:	4e95      	ldr	r6, [pc, #596]	; (800e474 <prvTimerTask+0x260>)
 800e21e:	4d96      	ldr	r5, [pc, #600]	; (800e478 <prvTimerTask+0x264>)
 800e220:	4c96      	ldr	r4, [pc, #600]	; (800e47c <prvTimerTask+0x268>)
 800e222:	b08b      	sub	sp, #44	; 0x2c
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e224:	6833      	ldr	r3, [r6, #0]
 800e226:	f8d3 a000 	ldr.w	sl, [r3]
	if( *pxListWasEmpty == pdFALSE )
 800e22a:	f1ba 0f00 	cmp.w	sl, #0
 800e22e:	f000 80a7 	beq.w	800e380 <prvTimerTask+0x16c>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e232:	68db      	ldr	r3, [r3, #12]
 800e234:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 800e238:	f7ff faa8 	bl	800d78c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800e23c:	f7ff faae 	bl	800d79c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e240:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 800e242:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 800e244:	4290      	cmp	r0, r2
 800e246:	f0c0 80ac 	bcc.w	800e3a2 <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e24a:	4582      	cmp	sl, r0
	xLastTime = xTimeNow;
 800e24c:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e24e:	f240 80bb 	bls.w	800e3c8 <prvTimerTask+0x1b4>
 800e252:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e254:	6820      	ldr	r0, [r4, #0]
 800e256:	ebaa 0109 	sub.w	r1, sl, r9
 800e25a:	f7fe fdab 	bl	800cdb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e25e:	f7ff fbe1 	bl	800da24 <xTaskResumeAll>
 800e262:	b938      	cbnz	r0, 800e274 <prvTimerTask+0x60>
					portYIELD_WITHIN_API();
 800e264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e268:	4b85      	ldr	r3, [pc, #532]	; (800e480 <prvTimerTask+0x26c>)
 800e26a:	601a      	str	r2, [r3, #0]
 800e26c:	f3bf 8f4f 	dsb	sy
 800e270:	f3bf 8f6f 	isb	sy
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e274:	2200      	movs	r2, #0
 800e276:	6820      	ldr	r0, [r4, #0]
 800e278:	a902      	add	r1, sp, #8
 800e27a:	f7fe fbeb 	bl	800ca54 <xQueueReceive>
 800e27e:	2800      	cmp	r0, #0
 800e280:	d0d0      	beq.n	800e224 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e282:	9b02      	ldr	r3, [sp, #8]
 800e284:	2b00      	cmp	r3, #0
 800e286:	db72      	blt.n	800e36e <prvTimerTask+0x15a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e288:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	b113      	cbz	r3, 800e294 <prvTimerTask+0x80>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e28e:	1d38      	adds	r0, r7, #4
 800e290:	f7fe f82c 	bl	800c2ec <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 800e294:	f7ff fa82 	bl	800d79c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e298:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 800e29a:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 800e29c:	4298      	cmp	r0, r3
 800e29e:	f0c0 8087 	bcc.w	800e3b0 <prvTimerTask+0x19c>
	xLastTime = xTimeNow;
 800e2a2:	9b02      	ldr	r3, [sp, #8]
 800e2a4:	f8c5 9000 	str.w	r9, [r5]
			switch( xMessage.xMessageID )
 800e2a8:	2b09      	cmp	r3, #9
 800e2aa:	d8e3      	bhi.n	800e274 <prvTimerTask+0x60>
 800e2ac:	a201      	add	r2, pc, #4	; (adr r2, 800e2b4 <prvTimerTask+0xa0>)
 800e2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2b2:	bf00      	nop
 800e2b4:	0800e2dd 	.word	0x0800e2dd
 800e2b8:	0800e2dd 	.word	0x0800e2dd
 800e2bc:	0800e2dd 	.word	0x0800e2dd
 800e2c0:	0800e275 	.word	0x0800e275
 800e2c4:	0800e33d 	.word	0x0800e33d
 800e2c8:	0800e35f 	.word	0x0800e35f
 800e2cc:	0800e2dd 	.word	0x0800e2dd
 800e2d0:	0800e2dd 	.word	0x0800e2dd
 800e2d4:	0800e275 	.word	0x0800e275
 800e2d8:	0800e33d 	.word	0x0800e33d
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e2dc:	9b03      	ldr	r3, [sp, #12]
 800e2de:	69ba      	ldr	r2, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e2e0:	613f      	str	r7, [r7, #16]
 800e2e2:	1899      	adds	r1, r3, r2
 800e2e4:	bf2c      	ite	cs
 800e2e6:	2001      	movcs	r0, #1
 800e2e8:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 800e2ea:	4549      	cmp	r1, r9
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e2ec:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 800e2ee:	d862      	bhi.n	800e3b6 <prvTimerTask+0x1a2>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2f0:	eba9 0303 	sub.w	r3, r9, r3
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d87d      	bhi.n	800e3f4 <prvTimerTask+0x1e0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fa:	4638      	mov	r0, r7
 800e2fc:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e2fe:	69fb      	ldr	r3, [r7, #28]
 800e300:	2b01      	cmp	r3, #1
 800e302:	d1b7      	bne.n	800e274 <prvTimerTask+0x60>
	if( xTimerQueue != NULL )
 800e304:	6823      	ldr	r3, [r4, #0]
 800e306:	b183      	cbz	r3, 800e32a <prvTimerTask+0x116>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e308:	69bb      	ldr	r3, [r7, #24]
 800e30a:	9a03      	ldr	r2, [sp, #12]
		xMessage.xMessageID = xCommandID;
 800e30c:	f8cd 8018 	str.w	r8, [sp, #24]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e310:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e312:	e9cd 3707 	strd	r3, r7, [sp, #28]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e316:	f7ff fd61 	bl	800dddc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e31a:	2300      	movs	r3, #0
 800e31c:	6820      	ldr	r0, [r4, #0]
 800e31e:	461a      	mov	r2, r3
 800e320:	a906      	add	r1, sp, #24
 800e322:	f7fe fa11 	bl	800c748 <xQueueGenericSend>
							configASSERT( xResult );
 800e326:	2800      	cmp	r0, #0
 800e328:	d1a4      	bne.n	800e274 <prvTimerTask+0x60>
 800e32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e32e:	f383 8811 	msr	BASEPRI, r3
 800e332:	f3bf 8f6f 	isb	sy
 800e336:	f3bf 8f4f 	dsb	sy
 800e33a:	e7fe      	b.n	800e33a <prvTimerTask+0x126>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e33c:	9b03      	ldr	r3, [sp, #12]
 800e33e:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e340:	2b00      	cmp	r3, #0
 800e342:	f000 8088 	beq.w	800e456 <prvTimerTask+0x242>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e346:	444b      	add	r3, r9
	if( xNextExpiryTime <= xTimeNow )
 800e348:	454b      	cmp	r3, r9
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e34a:	607b      	str	r3, [r7, #4]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e34c:	bf96      	itet	ls
 800e34e:	4b4d      	ldrls	r3, [pc, #308]	; (800e484 <prvTimerTask+0x270>)
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e350:	6830      	ldrhi	r0, [r6, #0]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e352:	6818      	ldrls	r0, [r3, #0]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e354:	613f      	str	r7, [r7, #16]
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e356:	1d39      	adds	r1, r7, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e358:	f7fd ffb0 	bl	800c2bc <vListInsert>
 800e35c:	e78a      	b.n	800e274 <prvTimerTask+0x60>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800e35e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e362:	2b00      	cmp	r3, #0
 800e364:	d186      	bne.n	800e274 <prvTimerTask+0x60>
							vPortFree( pxTimer );
 800e366:	4638      	mov	r0, r7
 800e368:	f7fd ff34 	bl	800c1d4 <vPortFree>
 800e36c:	e782      	b.n	800e274 <prvTimerTask+0x60>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e36e:	9b03      	ldr	r3, [sp, #12]
 800e370:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e374:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e376:	9b02      	ldr	r3, [sp, #8]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	f6ff af7b 	blt.w	800e274 <prvTimerTask+0x60>
 800e37e:	e783      	b.n	800e288 <prvTimerTask+0x74>
	vTaskSuspendAll();
 800e380:	f7ff fa04 	bl	800d78c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 800e384:	f7ff fa0a 	bl	800d79c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800e388:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 800e38a:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 800e38c:	4282      	cmp	r2, r0
 800e38e:	d808      	bhi.n	800e3a2 <prvTimerTask+0x18e>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e390:	4b3c      	ldr	r3, [pc, #240]	; (800e484 <prvTimerTask+0x270>)
	xLastTime = xTimeNow;
 800e392:	f8c5 9000 	str.w	r9, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e396:	681a      	ldr	r2, [r3, #0]
 800e398:	6812      	ldr	r2, [r2, #0]
 800e39a:	fab2 f282 	clz	r2, r2
 800e39e:	0952      	lsrs	r2, r2, #5
 800e3a0:	e758      	b.n	800e254 <prvTimerTask+0x40>
		prvSwitchTimerLists();
 800e3a2:	f7ff feeb 	bl	800e17c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 800e3a6:	f8c5 9000 	str.w	r9, [r5]
			( void ) xTaskResumeAll();
 800e3aa:	f7ff fb3b 	bl	800da24 <xTaskResumeAll>
 800e3ae:	e761      	b.n	800e274 <prvTimerTask+0x60>
		prvSwitchTimerLists();
 800e3b0:	f7ff fee4 	bl	800e17c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e3b4:	e775      	b.n	800e2a2 <prvTimerTask+0x8e>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e3b6:	454b      	cmp	r3, r9
 800e3b8:	d901      	bls.n	800e3be <prvTimerTask+0x1aa>
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	d09c      	beq.n	800e2f8 <prvTimerTask+0xe4>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e3be:	6830      	ldr	r0, [r6, #0]
 800e3c0:	1d39      	adds	r1, r7, #4
 800e3c2:	f7fd ff7b 	bl	800c2bc <vListInsert>
	return xProcessTimerNow;
 800e3c6:	e755      	b.n	800e274 <prvTimerTask+0x60>
				( void ) xTaskResumeAll();
 800e3c8:	f7ff fb2c 	bl	800da24 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e3cc:	6832      	ldr	r2, [r6, #0]
 800e3ce:	68d2      	ldr	r2, [r2, #12]
 800e3d0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3d4:	f10b 0104 	add.w	r1, fp, #4
 800e3d8:	4608      	mov	r0, r1
 800e3da:	9101      	str	r1, [sp, #4]
 800e3dc:	f7fd ff86 	bl	800c2ec <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800e3e0:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e3e4:	9901      	ldr	r1, [sp, #4]
 800e3e6:	2801      	cmp	r0, #1
 800e3e8:	d00a      	beq.n	800e400 <prvTimerTask+0x1ec>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3ea:	4658      	mov	r0, fp
 800e3ec:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
 800e3f0:	4798      	blx	r3
}
 800e3f2:	e73f      	b.n	800e274 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e3f4:	4b23      	ldr	r3, [pc, #140]	; (800e484 <prvTimerTask+0x270>)
 800e3f6:	1d39      	adds	r1, r7, #4
 800e3f8:	6818      	ldr	r0, [r3, #0]
 800e3fa:	f7fd ff5f 	bl	800c2bc <vListInsert>
	return xProcessTimerNow;
 800e3fe:	e739      	b.n	800e274 <prvTimerTask+0x60>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e400:	f8db 0018 	ldr.w	r0, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e404:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e408:	eb0a 0300 	add.w	r3, sl, r0
	if( xNextExpiryTime <= xTimeNow )
 800e40c:	454b      	cmp	r3, r9
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e40e:	f8cb 3004 	str.w	r3, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 800e412:	d903      	bls.n	800e41c <prvTimerTask+0x208>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e414:	6830      	ldr	r0, [r6, #0]
 800e416:	f7fd ff51 	bl	800c2bc <vListInsert>
	return xProcessTimerNow;
 800e41a:	e7e6      	b.n	800e3ea <prvTimerTask+0x1d6>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e41c:	eba9 030a 	sub.w	r3, r9, sl
 800e420:	4298      	cmp	r0, r3
 800e422:	d821      	bhi.n	800e468 <prvTimerTask+0x254>
	if( xTimerQueue != NULL )
 800e424:	6823      	ldr	r3, [r4, #0]
 800e426:	b16b      	cbz	r3, 800e444 <prvTimerTask+0x230>
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e428:	e9cd 8a06 	strd	r8, sl, [sp, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800e42c:	f8cd b020 	str.w	fp, [sp, #32]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e430:	f7ff fcd4 	bl	800dddc <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e434:	2300      	movs	r3, #0
 800e436:	6820      	ldr	r0, [r4, #0]
 800e438:	461a      	mov	r2, r3
 800e43a:	a906      	add	r1, sp, #24
 800e43c:	f7fe f984 	bl	800c748 <xQueueGenericSend>
			configASSERT( xResult );
 800e440:	2800      	cmp	r0, #0
 800e442:	d1d2      	bne.n	800e3ea <prvTimerTask+0x1d6>
 800e444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e448:	f383 8811 	msr	BASEPRI, r3
 800e44c:	f3bf 8f6f 	isb	sy
 800e450:	f3bf 8f4f 	dsb	sy
 800e454:	e7fe      	b.n	800e454 <prvTimerTask+0x240>
 800e456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45a:	f383 8811 	msr	BASEPRI, r3
 800e45e:	f3bf 8f6f 	isb	sy
 800e462:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e466:	e7fe      	b.n	800e466 <prvTimerTask+0x252>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e468:	4b06      	ldr	r3, [pc, #24]	; (800e484 <prvTimerTask+0x270>)
 800e46a:	6818      	ldr	r0, [r3, #0]
 800e46c:	f7fd ff26 	bl	800c2bc <vListInsert>
	return xProcessTimerNow;
 800e470:	e7bb      	b.n	800e3ea <prvTimerTask+0x1d6>
 800e472:	bf00      	nop
 800e474:	20003170 	.word	0x20003170
 800e478:	20003240 	.word	0x20003240
 800e47c:	20003294 	.word	0x20003294
 800e480:	e000ed04 	.word	0xe000ed04
 800e484:	20003174 	.word	0x20003174

0800e488 <xTimerCreateTimerTask>:
{
 800e488:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800e48a:	4c23      	ldr	r4, [pc, #140]	; (800e518 <xTimerCreateTimerTask+0x90>)
{
 800e48c:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
 800e48e:	f7fd ff99 	bl	800c3c4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800e492:	6827      	ldr	r7, [r4, #0]
 800e494:	b337      	cbz	r7, 800e4e4 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e496:	f7fd ffb7 	bl	800c408 <vPortExitCritical>
	if( xTimerQueue != NULL )
 800e49a:	6823      	ldr	r3, [r4, #0]
 800e49c:	b1cb      	cbz	r3, 800e4d2 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e49e:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e4a0:	aa07      	add	r2, sp, #28
 800e4a2:	a906      	add	r1, sp, #24
 800e4a4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e4a6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e4aa:	f7fd fdcb 	bl	800c044 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e4ae:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 800e4b2:	2002      	movs	r0, #2
 800e4b4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800e4b8:	9000      	str	r0, [sp, #0]
 800e4ba:	9a07      	ldr	r2, [sp, #28]
 800e4bc:	4623      	mov	r3, r4
 800e4be:	4917      	ldr	r1, [pc, #92]	; (800e51c <xTimerCreateTimerTask+0x94>)
 800e4c0:	4817      	ldr	r0, [pc, #92]	; (800e520 <xTimerCreateTimerTask+0x98>)
 800e4c2:	f7fe ff79 	bl	800d3b8 <xTaskCreateStatic>
 800e4c6:	4a17      	ldr	r2, [pc, #92]	; (800e524 <xTimerCreateTimerTask+0x9c>)
 800e4c8:	6010      	str	r0, [r2, #0]
			if( xTimerTaskHandle != NULL )
 800e4ca:	b110      	cbz	r0, 800e4d2 <xTimerCreateTimerTask+0x4a>
}
 800e4cc:	2001      	movs	r0, #1
 800e4ce:	b009      	add	sp, #36	; 0x24
 800e4d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d6:	f383 8811 	msr	BASEPRI, r3
 800e4da:	f3bf 8f6f 	isb	sy
 800e4de:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800e4e2:	e7fe      	b.n	800e4e2 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
 800e4e4:	4e10      	ldr	r6, [pc, #64]	; (800e528 <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
 800e4e6:	4d11      	ldr	r5, [pc, #68]	; (800e52c <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	f7fd fec9 	bl	800c280 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e4ee:	4628      	mov	r0, r5
 800e4f0:	f7fd fec6 	bl	800c280 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e4f4:	4a0e      	ldr	r2, [pc, #56]	; (800e530 <xTimerCreateTimerTask+0xa8>)
			pxOverflowTimerList = &xActiveTimerList2;
 800e4f6:	480f      	ldr	r0, [pc, #60]	; (800e534 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e4f8:	9700      	str	r7, [sp, #0]
 800e4fa:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800e4fc:	6016      	str	r6, [r2, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e4fe:	6005      	str	r5, [r0, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e500:	4b0d      	ldr	r3, [pc, #52]	; (800e538 <xTimerCreateTimerTask+0xb0>)
 800e502:	200a      	movs	r0, #10
 800e504:	4a0d      	ldr	r2, [pc, #52]	; (800e53c <xTimerCreateTimerTask+0xb4>)
 800e506:	f7fe f8ad 	bl	800c664 <xQueueGenericCreateStatic>
 800e50a:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 800e50c:	2800      	cmp	r0, #0
 800e50e:	d0c2      	beq.n	800e496 <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e510:	490b      	ldr	r1, [pc, #44]	; (800e540 <xTimerCreateTimerTask+0xb8>)
 800e512:	f7fe fc25 	bl	800cd60 <vQueueAddToRegistry>
 800e516:	e7be      	b.n	800e496 <xTimerCreateTimerTask+0xe>
 800e518:	20003294 	.word	0x20003294
 800e51c:	08010ed4 	.word	0x08010ed4
 800e520:	0800e215 	.word	0x0800e215
 800e524:	20003298 	.word	0x20003298
 800e528:	20003218 	.word	0x20003218
 800e52c:	2000322c 	.word	0x2000322c
 800e530:	20003170 	.word	0x20003170
 800e534:	20003174 	.word	0x20003174
 800e538:	20003244 	.word	0x20003244
 800e53c:	20003178 	.word	0x20003178
 800e540:	08010ecc 	.word	0x08010ecc

0800e544 <__errno>:
 800e544:	4b01      	ldr	r3, [pc, #4]	; (800e54c <__errno+0x8>)
 800e546:	6818      	ldr	r0, [r3, #0]
 800e548:	4770      	bx	lr
 800e54a:	bf00      	nop
 800e54c:	2000049c 	.word	0x2000049c

0800e550 <__libc_init_array>:
 800e550:	b570      	push	{r4, r5, r6, lr}
 800e552:	2600      	movs	r6, #0
 800e554:	4d0c      	ldr	r5, [pc, #48]	; (800e588 <__libc_init_array+0x38>)
 800e556:	4c0d      	ldr	r4, [pc, #52]	; (800e58c <__libc_init_array+0x3c>)
 800e558:	1b64      	subs	r4, r4, r5
 800e55a:	10a4      	asrs	r4, r4, #2
 800e55c:	42a6      	cmp	r6, r4
 800e55e:	d109      	bne.n	800e574 <__libc_init_array+0x24>
 800e560:	f002 f974 	bl	801084c <_init>
 800e564:	2600      	movs	r6, #0
 800e566:	4d0a      	ldr	r5, [pc, #40]	; (800e590 <__libc_init_array+0x40>)
 800e568:	4c0a      	ldr	r4, [pc, #40]	; (800e594 <__libc_init_array+0x44>)
 800e56a:	1b64      	subs	r4, r4, r5
 800e56c:	10a4      	asrs	r4, r4, #2
 800e56e:	42a6      	cmp	r6, r4
 800e570:	d105      	bne.n	800e57e <__libc_init_array+0x2e>
 800e572:	bd70      	pop	{r4, r5, r6, pc}
 800e574:	f855 3b04 	ldr.w	r3, [r5], #4
 800e578:	4798      	blx	r3
 800e57a:	3601      	adds	r6, #1
 800e57c:	e7ee      	b.n	800e55c <__libc_init_array+0xc>
 800e57e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e582:	4798      	blx	r3
 800e584:	3601      	adds	r6, #1
 800e586:	e7f2      	b.n	800e56e <__libc_init_array+0x1e>
 800e588:	08011438 	.word	0x08011438
 800e58c:	08011438 	.word	0x08011438
 800e590:	08011438 	.word	0x08011438
 800e594:	0801143c 	.word	0x0801143c

0800e598 <memcpy>:
 800e598:	440a      	add	r2, r1
 800e59a:	4291      	cmp	r1, r2
 800e59c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5a0:	d100      	bne.n	800e5a4 <memcpy+0xc>
 800e5a2:	4770      	bx	lr
 800e5a4:	b510      	push	{r4, lr}
 800e5a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5aa:	4291      	cmp	r1, r2
 800e5ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5b0:	d1f9      	bne.n	800e5a6 <memcpy+0xe>
 800e5b2:	bd10      	pop	{r4, pc}

0800e5b4 <memmove>:
 800e5b4:	4288      	cmp	r0, r1
 800e5b6:	b510      	push	{r4, lr}
 800e5b8:	eb01 0402 	add.w	r4, r1, r2
 800e5bc:	d902      	bls.n	800e5c4 <memmove+0x10>
 800e5be:	4284      	cmp	r4, r0
 800e5c0:	4623      	mov	r3, r4
 800e5c2:	d807      	bhi.n	800e5d4 <memmove+0x20>
 800e5c4:	1e43      	subs	r3, r0, #1
 800e5c6:	42a1      	cmp	r1, r4
 800e5c8:	d008      	beq.n	800e5dc <memmove+0x28>
 800e5ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e5d2:	e7f8      	b.n	800e5c6 <memmove+0x12>
 800e5d4:	4601      	mov	r1, r0
 800e5d6:	4402      	add	r2, r0
 800e5d8:	428a      	cmp	r2, r1
 800e5da:	d100      	bne.n	800e5de <memmove+0x2a>
 800e5dc:	bd10      	pop	{r4, pc}
 800e5de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5e6:	e7f7      	b.n	800e5d8 <memmove+0x24>

0800e5e8 <memset>:
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	4402      	add	r2, r0
 800e5ec:	4293      	cmp	r3, r2
 800e5ee:	d100      	bne.n	800e5f2 <memset+0xa>
 800e5f0:	4770      	bx	lr
 800e5f2:	f803 1b01 	strb.w	r1, [r3], #1
 800e5f6:	e7f9      	b.n	800e5ec <memset+0x4>

0800e5f8 <frexpf>:
 800e5f8:	b538      	push	{r3, r4, r5, lr}
 800e5fa:	460c      	mov	r4, r1
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e602:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e606:	4605      	mov	r5, r0
 800e608:	4603      	mov	r3, r0
 800e60a:	6021      	str	r1, [r4, #0]
 800e60c:	da16      	bge.n	800e63c <frexpf+0x44>
 800e60e:	b1aa      	cbz	r2, 800e63c <frexpf+0x44>
 800e610:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800e614:	d109      	bne.n	800e62a <frexpf+0x32>
 800e616:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800e61a:	f7f2 fb9f 	bl	8000d5c <__aeabi_fmul>
 800e61e:	f06f 0118 	mvn.w	r1, #24
 800e622:	4603      	mov	r3, r0
 800e624:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800e628:	6021      	str	r1, [r4, #0]
 800e62a:	6821      	ldr	r1, [r4, #0]
 800e62c:	15d2      	asrs	r2, r2, #23
 800e62e:	3a7e      	subs	r2, #126	; 0x7e
 800e630:	440a      	add	r2, r1
 800e632:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e636:	6022      	str	r2, [r4, #0]
 800e638:	f043 557c 	orr.w	r5, r3, #1056964608	; 0x3f000000
 800e63c:	4628      	mov	r0, r5
 800e63e:	bd38      	pop	{r3, r4, r5, pc}

0800e640 <ldexpf>:
 800e640:	b538      	push	{r3, r4, r5, lr}
 800e642:	4604      	mov	r4, r0
 800e644:	460d      	mov	r5, r1
 800e646:	f000 fc9d 	bl	800ef84 <finitef>
 800e64a:	b1a8      	cbz	r0, 800e678 <ldexpf+0x38>
 800e64c:	2100      	movs	r1, #0
 800e64e:	4620      	mov	r0, r4
 800e650:	f7f2 fd18 	bl	8001084 <__aeabi_fcmpeq>
 800e654:	b980      	cbnz	r0, 800e678 <ldexpf+0x38>
 800e656:	4620      	mov	r0, r4
 800e658:	4629      	mov	r1, r5
 800e65a:	f000 f80f 	bl	800e67c <scalbnf>
 800e65e:	4604      	mov	r4, r0
 800e660:	f000 fc90 	bl	800ef84 <finitef>
 800e664:	b120      	cbz	r0, 800e670 <ldexpf+0x30>
 800e666:	2100      	movs	r1, #0
 800e668:	4620      	mov	r0, r4
 800e66a:	f7f2 fd0b 	bl	8001084 <__aeabi_fcmpeq>
 800e66e:	b118      	cbz	r0, 800e678 <ldexpf+0x38>
 800e670:	f7ff ff68 	bl	800e544 <__errno>
 800e674:	2322      	movs	r3, #34	; 0x22
 800e676:	6003      	str	r3, [r0, #0]
 800e678:	4620      	mov	r0, r4
 800e67a:	bd38      	pop	{r3, r4, r5, pc}

0800e67c <scalbnf>:
 800e67c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800e680:	b538      	push	{r3, r4, r5, lr}
 800e682:	4603      	mov	r3, r0
 800e684:	460d      	mov	r5, r1
 800e686:	4604      	mov	r4, r0
 800e688:	d02a      	beq.n	800e6e0 <scalbnf+0x64>
 800e68a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e68e:	d304      	bcc.n	800e69a <scalbnf+0x1e>
 800e690:	4601      	mov	r1, r0
 800e692:	f7f2 fa5b 	bl	8000b4c <__addsf3>
 800e696:	4603      	mov	r3, r0
 800e698:	e022      	b.n	800e6e0 <scalbnf+0x64>
 800e69a:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800e69e:	d117      	bne.n	800e6d0 <scalbnf+0x54>
 800e6a0:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800e6a4:	f7f2 fb5a 	bl	8000d5c <__aeabi_fmul>
 800e6a8:	4a17      	ldr	r2, [pc, #92]	; (800e708 <scalbnf+0x8c>)
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	4295      	cmp	r5, r2
 800e6ae:	db0b      	blt.n	800e6c8 <scalbnf+0x4c>
 800e6b0:	4604      	mov	r4, r0
 800e6b2:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800e6b6:	3a19      	subs	r2, #25
 800e6b8:	442a      	add	r2, r5
 800e6ba:	2afe      	cmp	r2, #254	; 0xfe
 800e6bc:	dd0a      	ble.n	800e6d4 <scalbnf+0x58>
 800e6be:	4913      	ldr	r1, [pc, #76]	; (800e70c <scalbnf+0x90>)
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f361 001e 	bfi	r0, r1, #0, #31
 800e6c6:	e000      	b.n	800e6ca <scalbnf+0x4e>
 800e6c8:	4911      	ldr	r1, [pc, #68]	; (800e710 <scalbnf+0x94>)
 800e6ca:	f7f2 fb47 	bl	8000d5c <__aeabi_fmul>
 800e6ce:	e7e2      	b.n	800e696 <scalbnf+0x1a>
 800e6d0:	0dd2      	lsrs	r2, r2, #23
 800e6d2:	e7f1      	b.n	800e6b8 <scalbnf+0x3c>
 800e6d4:	2a00      	cmp	r2, #0
 800e6d6:	dd05      	ble.n	800e6e4 <scalbnf+0x68>
 800e6d8:	f024 40ff 	bic.w	r0, r4, #2139095040	; 0x7f800000
 800e6dc:	ea40 53c2 	orr.w	r3, r0, r2, lsl #23
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	bd38      	pop	{r3, r4, r5, pc}
 800e6e4:	f112 0f16 	cmn.w	r2, #22
 800e6e8:	da05      	bge.n	800e6f6 <scalbnf+0x7a>
 800e6ea:	f24c 3250 	movw	r2, #50000	; 0xc350
 800e6ee:	4295      	cmp	r5, r2
 800e6f0:	dce5      	bgt.n	800e6be <scalbnf+0x42>
 800e6f2:	4907      	ldr	r1, [pc, #28]	; (800e710 <scalbnf+0x94>)
 800e6f4:	e7e4      	b.n	800e6c0 <scalbnf+0x44>
 800e6f6:	3219      	adds	r2, #25
 800e6f8:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 800e6fc:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800e700:	ea44 50c2 	orr.w	r0, r4, r2, lsl #23
 800e704:	e7e1      	b.n	800e6ca <scalbnf+0x4e>
 800e706:	bf00      	nop
 800e708:	ffff3cb0 	.word	0xffff3cb0
 800e70c:	7149f2ca 	.word	0x7149f2ca
 800e710:	0da24260 	.word	0x0da24260

0800e714 <strtok>:
 800e714:	4b16      	ldr	r3, [pc, #88]	; (800e770 <strtok+0x5c>)
 800e716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e71a:	681f      	ldr	r7, [r3, #0]
 800e71c:	4605      	mov	r5, r0
 800e71e:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800e720:	460e      	mov	r6, r1
 800e722:	b9ec      	cbnz	r4, 800e760 <strtok+0x4c>
 800e724:	2050      	movs	r0, #80	; 0x50
 800e726:	f000 f881 	bl	800e82c <malloc>
 800e72a:	4602      	mov	r2, r0
 800e72c:	65b8      	str	r0, [r7, #88]	; 0x58
 800e72e:	b920      	cbnz	r0, 800e73a <strtok+0x26>
 800e730:	2157      	movs	r1, #87	; 0x57
 800e732:	4b10      	ldr	r3, [pc, #64]	; (800e774 <strtok+0x60>)
 800e734:	4810      	ldr	r0, [pc, #64]	; (800e778 <strtok+0x64>)
 800e736:	f000 f849 	bl	800e7cc <__assert_func>
 800e73a:	e9c0 4400 	strd	r4, r4, [r0]
 800e73e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800e742:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800e746:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800e74a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800e74e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800e752:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800e756:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800e75a:	6184      	str	r4, [r0, #24]
 800e75c:	7704      	strb	r4, [r0, #28]
 800e75e:	6244      	str	r4, [r0, #36]	; 0x24
 800e760:	4631      	mov	r1, r6
 800e762:	4628      	mov	r0, r5
 800e764:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e766:	2301      	movs	r3, #1
 800e768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e76c:	f000 b806 	b.w	800e77c <__strtok_r>
 800e770:	2000049c 	.word	0x2000049c
 800e774:	08010ee0 	.word	0x08010ee0
 800e778:	08010ef7 	.word	0x08010ef7

0800e77c <__strtok_r>:
 800e77c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e77e:	b908      	cbnz	r0, 800e784 <__strtok_r+0x8>
 800e780:	6810      	ldr	r0, [r2, #0]
 800e782:	b188      	cbz	r0, 800e7a8 <__strtok_r+0x2c>
 800e784:	4604      	mov	r4, r0
 800e786:	460f      	mov	r7, r1
 800e788:	4620      	mov	r0, r4
 800e78a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800e78e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800e792:	b91e      	cbnz	r6, 800e79c <__strtok_r+0x20>
 800e794:	b965      	cbnz	r5, 800e7b0 <__strtok_r+0x34>
 800e796:	4628      	mov	r0, r5
 800e798:	6015      	str	r5, [r2, #0]
 800e79a:	e005      	b.n	800e7a8 <__strtok_r+0x2c>
 800e79c:	42b5      	cmp	r5, r6
 800e79e:	d1f6      	bne.n	800e78e <__strtok_r+0x12>
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d1f0      	bne.n	800e786 <__strtok_r+0xa>
 800e7a4:	6014      	str	r4, [r2, #0]
 800e7a6:	7003      	strb	r3, [r0, #0]
 800e7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7aa:	461c      	mov	r4, r3
 800e7ac:	e00c      	b.n	800e7c8 <__strtok_r+0x4c>
 800e7ae:	b915      	cbnz	r5, 800e7b6 <__strtok_r+0x3a>
 800e7b0:	460e      	mov	r6, r1
 800e7b2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e7b6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800e7ba:	42ab      	cmp	r3, r5
 800e7bc:	d1f7      	bne.n	800e7ae <__strtok_r+0x32>
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d0f3      	beq.n	800e7aa <__strtok_r+0x2e>
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800e7c8:	6014      	str	r4, [r2, #0]
 800e7ca:	e7ed      	b.n	800e7a8 <__strtok_r+0x2c>

0800e7cc <__assert_func>:
 800e7cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e7ce:	4614      	mov	r4, r2
 800e7d0:	461a      	mov	r2, r3
 800e7d2:	4b09      	ldr	r3, [pc, #36]	; (800e7f8 <__assert_func+0x2c>)
 800e7d4:	4605      	mov	r5, r0
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	68d8      	ldr	r0, [r3, #12]
 800e7da:	b14c      	cbz	r4, 800e7f0 <__assert_func+0x24>
 800e7dc:	4b07      	ldr	r3, [pc, #28]	; (800e7fc <__assert_func+0x30>)
 800e7de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e7e2:	9100      	str	r1, [sp, #0]
 800e7e4:	462b      	mov	r3, r5
 800e7e6:	4906      	ldr	r1, [pc, #24]	; (800e800 <__assert_func+0x34>)
 800e7e8:	f000 f80e 	bl	800e808 <fiprintf>
 800e7ec:	f000 fc92 	bl	800f114 <abort>
 800e7f0:	4b04      	ldr	r3, [pc, #16]	; (800e804 <__assert_func+0x38>)
 800e7f2:	461c      	mov	r4, r3
 800e7f4:	e7f3      	b.n	800e7de <__assert_func+0x12>
 800e7f6:	bf00      	nop
 800e7f8:	2000049c 	.word	0x2000049c
 800e7fc:	08010f58 	.word	0x08010f58
 800e800:	08010f65 	.word	0x08010f65
 800e804:	08010f93 	.word	0x08010f93

0800e808 <fiprintf>:
 800e808:	b40e      	push	{r1, r2, r3}
 800e80a:	b503      	push	{r0, r1, lr}
 800e80c:	4601      	mov	r1, r0
 800e80e:	ab03      	add	r3, sp, #12
 800e810:	4805      	ldr	r0, [pc, #20]	; (800e828 <fiprintf+0x20>)
 800e812:	f853 2b04 	ldr.w	r2, [r3], #4
 800e816:	6800      	ldr	r0, [r0, #0]
 800e818:	9301      	str	r3, [sp, #4]
 800e81a:	f000 f8dd 	bl	800e9d8 <_vfiprintf_r>
 800e81e:	b002      	add	sp, #8
 800e820:	f85d eb04 	ldr.w	lr, [sp], #4
 800e824:	b003      	add	sp, #12
 800e826:	4770      	bx	lr
 800e828:	2000049c 	.word	0x2000049c

0800e82c <malloc>:
 800e82c:	4b02      	ldr	r3, [pc, #8]	; (800e838 <malloc+0xc>)
 800e82e:	4601      	mov	r1, r0
 800e830:	6818      	ldr	r0, [r3, #0]
 800e832:	f000 b84f 	b.w	800e8d4 <_malloc_r>
 800e836:	bf00      	nop
 800e838:	2000049c 	.word	0x2000049c

0800e83c <_free_r>:
 800e83c:	b538      	push	{r3, r4, r5, lr}
 800e83e:	4605      	mov	r5, r0
 800e840:	2900      	cmp	r1, #0
 800e842:	d043      	beq.n	800e8cc <_free_r+0x90>
 800e844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e848:	1f0c      	subs	r4, r1, #4
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	bfb8      	it	lt
 800e84e:	18e4      	addlt	r4, r4, r3
 800e850:	f000 fe94 	bl	800f57c <__malloc_lock>
 800e854:	4a1e      	ldr	r2, [pc, #120]	; (800e8d0 <_free_r+0x94>)
 800e856:	6813      	ldr	r3, [r2, #0]
 800e858:	4610      	mov	r0, r2
 800e85a:	b933      	cbnz	r3, 800e86a <_free_r+0x2e>
 800e85c:	6063      	str	r3, [r4, #4]
 800e85e:	6014      	str	r4, [r2, #0]
 800e860:	4628      	mov	r0, r5
 800e862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e866:	f000 be8f 	b.w	800f588 <__malloc_unlock>
 800e86a:	42a3      	cmp	r3, r4
 800e86c:	d90a      	bls.n	800e884 <_free_r+0x48>
 800e86e:	6821      	ldr	r1, [r4, #0]
 800e870:	1862      	adds	r2, r4, r1
 800e872:	4293      	cmp	r3, r2
 800e874:	bf01      	itttt	eq
 800e876:	681a      	ldreq	r2, [r3, #0]
 800e878:	685b      	ldreq	r3, [r3, #4]
 800e87a:	1852      	addeq	r2, r2, r1
 800e87c:	6022      	streq	r2, [r4, #0]
 800e87e:	6063      	str	r3, [r4, #4]
 800e880:	6004      	str	r4, [r0, #0]
 800e882:	e7ed      	b.n	800e860 <_free_r+0x24>
 800e884:	461a      	mov	r2, r3
 800e886:	685b      	ldr	r3, [r3, #4]
 800e888:	b10b      	cbz	r3, 800e88e <_free_r+0x52>
 800e88a:	42a3      	cmp	r3, r4
 800e88c:	d9fa      	bls.n	800e884 <_free_r+0x48>
 800e88e:	6811      	ldr	r1, [r2, #0]
 800e890:	1850      	adds	r0, r2, r1
 800e892:	42a0      	cmp	r0, r4
 800e894:	d10b      	bne.n	800e8ae <_free_r+0x72>
 800e896:	6820      	ldr	r0, [r4, #0]
 800e898:	4401      	add	r1, r0
 800e89a:	1850      	adds	r0, r2, r1
 800e89c:	4283      	cmp	r3, r0
 800e89e:	6011      	str	r1, [r2, #0]
 800e8a0:	d1de      	bne.n	800e860 <_free_r+0x24>
 800e8a2:	6818      	ldr	r0, [r3, #0]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	4401      	add	r1, r0
 800e8a8:	6011      	str	r1, [r2, #0]
 800e8aa:	6053      	str	r3, [r2, #4]
 800e8ac:	e7d8      	b.n	800e860 <_free_r+0x24>
 800e8ae:	d902      	bls.n	800e8b6 <_free_r+0x7a>
 800e8b0:	230c      	movs	r3, #12
 800e8b2:	602b      	str	r3, [r5, #0]
 800e8b4:	e7d4      	b.n	800e860 <_free_r+0x24>
 800e8b6:	6820      	ldr	r0, [r4, #0]
 800e8b8:	1821      	adds	r1, r4, r0
 800e8ba:	428b      	cmp	r3, r1
 800e8bc:	bf01      	itttt	eq
 800e8be:	6819      	ldreq	r1, [r3, #0]
 800e8c0:	685b      	ldreq	r3, [r3, #4]
 800e8c2:	1809      	addeq	r1, r1, r0
 800e8c4:	6021      	streq	r1, [r4, #0]
 800e8c6:	6063      	str	r3, [r4, #4]
 800e8c8:	6054      	str	r4, [r2, #4]
 800e8ca:	e7c9      	b.n	800e860 <_free_r+0x24>
 800e8cc:	bd38      	pop	{r3, r4, r5, pc}
 800e8ce:	bf00      	nop
 800e8d0:	2000329c 	.word	0x2000329c

0800e8d4 <_malloc_r>:
 800e8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8d6:	1ccd      	adds	r5, r1, #3
 800e8d8:	f025 0503 	bic.w	r5, r5, #3
 800e8dc:	3508      	adds	r5, #8
 800e8de:	2d0c      	cmp	r5, #12
 800e8e0:	bf38      	it	cc
 800e8e2:	250c      	movcc	r5, #12
 800e8e4:	2d00      	cmp	r5, #0
 800e8e6:	4606      	mov	r6, r0
 800e8e8:	db01      	blt.n	800e8ee <_malloc_r+0x1a>
 800e8ea:	42a9      	cmp	r1, r5
 800e8ec:	d903      	bls.n	800e8f6 <_malloc_r+0x22>
 800e8ee:	230c      	movs	r3, #12
 800e8f0:	6033      	str	r3, [r6, #0]
 800e8f2:	2000      	movs	r0, #0
 800e8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8f6:	f000 fe41 	bl	800f57c <__malloc_lock>
 800e8fa:	4921      	ldr	r1, [pc, #132]	; (800e980 <_malloc_r+0xac>)
 800e8fc:	680a      	ldr	r2, [r1, #0]
 800e8fe:	4614      	mov	r4, r2
 800e900:	b99c      	cbnz	r4, 800e92a <_malloc_r+0x56>
 800e902:	4f20      	ldr	r7, [pc, #128]	; (800e984 <_malloc_r+0xb0>)
 800e904:	683b      	ldr	r3, [r7, #0]
 800e906:	b923      	cbnz	r3, 800e912 <_malloc_r+0x3e>
 800e908:	4621      	mov	r1, r4
 800e90a:	4630      	mov	r0, r6
 800e90c:	f000 fb2a 	bl	800ef64 <_sbrk_r>
 800e910:	6038      	str	r0, [r7, #0]
 800e912:	4629      	mov	r1, r5
 800e914:	4630      	mov	r0, r6
 800e916:	f000 fb25 	bl	800ef64 <_sbrk_r>
 800e91a:	1c43      	adds	r3, r0, #1
 800e91c:	d123      	bne.n	800e966 <_malloc_r+0x92>
 800e91e:	230c      	movs	r3, #12
 800e920:	4630      	mov	r0, r6
 800e922:	6033      	str	r3, [r6, #0]
 800e924:	f000 fe30 	bl	800f588 <__malloc_unlock>
 800e928:	e7e3      	b.n	800e8f2 <_malloc_r+0x1e>
 800e92a:	6823      	ldr	r3, [r4, #0]
 800e92c:	1b5b      	subs	r3, r3, r5
 800e92e:	d417      	bmi.n	800e960 <_malloc_r+0x8c>
 800e930:	2b0b      	cmp	r3, #11
 800e932:	d903      	bls.n	800e93c <_malloc_r+0x68>
 800e934:	6023      	str	r3, [r4, #0]
 800e936:	441c      	add	r4, r3
 800e938:	6025      	str	r5, [r4, #0]
 800e93a:	e004      	b.n	800e946 <_malloc_r+0x72>
 800e93c:	6863      	ldr	r3, [r4, #4]
 800e93e:	42a2      	cmp	r2, r4
 800e940:	bf0c      	ite	eq
 800e942:	600b      	streq	r3, [r1, #0]
 800e944:	6053      	strne	r3, [r2, #4]
 800e946:	4630      	mov	r0, r6
 800e948:	f000 fe1e 	bl	800f588 <__malloc_unlock>
 800e94c:	f104 000b 	add.w	r0, r4, #11
 800e950:	1d23      	adds	r3, r4, #4
 800e952:	f020 0007 	bic.w	r0, r0, #7
 800e956:	1ac2      	subs	r2, r0, r3
 800e958:	d0cc      	beq.n	800e8f4 <_malloc_r+0x20>
 800e95a:	1a1b      	subs	r3, r3, r0
 800e95c:	50a3      	str	r3, [r4, r2]
 800e95e:	e7c9      	b.n	800e8f4 <_malloc_r+0x20>
 800e960:	4622      	mov	r2, r4
 800e962:	6864      	ldr	r4, [r4, #4]
 800e964:	e7cc      	b.n	800e900 <_malloc_r+0x2c>
 800e966:	1cc4      	adds	r4, r0, #3
 800e968:	f024 0403 	bic.w	r4, r4, #3
 800e96c:	42a0      	cmp	r0, r4
 800e96e:	d0e3      	beq.n	800e938 <_malloc_r+0x64>
 800e970:	1a21      	subs	r1, r4, r0
 800e972:	4630      	mov	r0, r6
 800e974:	f000 faf6 	bl	800ef64 <_sbrk_r>
 800e978:	3001      	adds	r0, #1
 800e97a:	d1dd      	bne.n	800e938 <_malloc_r+0x64>
 800e97c:	e7cf      	b.n	800e91e <_malloc_r+0x4a>
 800e97e:	bf00      	nop
 800e980:	2000329c 	.word	0x2000329c
 800e984:	200032a0 	.word	0x200032a0

0800e988 <__sfputc_r>:
 800e988:	6893      	ldr	r3, [r2, #8]
 800e98a:	b410      	push	{r4}
 800e98c:	3b01      	subs	r3, #1
 800e98e:	2b00      	cmp	r3, #0
 800e990:	6093      	str	r3, [r2, #8]
 800e992:	da07      	bge.n	800e9a4 <__sfputc_r+0x1c>
 800e994:	6994      	ldr	r4, [r2, #24]
 800e996:	42a3      	cmp	r3, r4
 800e998:	db01      	blt.n	800e99e <__sfputc_r+0x16>
 800e99a:	290a      	cmp	r1, #10
 800e99c:	d102      	bne.n	800e9a4 <__sfputc_r+0x1c>
 800e99e:	bc10      	pop	{r4}
 800e9a0:	f000 baf8 	b.w	800ef94 <__swbuf_r>
 800e9a4:	6813      	ldr	r3, [r2, #0]
 800e9a6:	1c58      	adds	r0, r3, #1
 800e9a8:	6010      	str	r0, [r2, #0]
 800e9aa:	7019      	strb	r1, [r3, #0]
 800e9ac:	4608      	mov	r0, r1
 800e9ae:	bc10      	pop	{r4}
 800e9b0:	4770      	bx	lr

0800e9b2 <__sfputs_r>:
 800e9b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9b4:	4606      	mov	r6, r0
 800e9b6:	460f      	mov	r7, r1
 800e9b8:	4614      	mov	r4, r2
 800e9ba:	18d5      	adds	r5, r2, r3
 800e9bc:	42ac      	cmp	r4, r5
 800e9be:	d101      	bne.n	800e9c4 <__sfputs_r+0x12>
 800e9c0:	2000      	movs	r0, #0
 800e9c2:	e007      	b.n	800e9d4 <__sfputs_r+0x22>
 800e9c4:	463a      	mov	r2, r7
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9cc:	f7ff ffdc 	bl	800e988 <__sfputc_r>
 800e9d0:	1c43      	adds	r3, r0, #1
 800e9d2:	d1f3      	bne.n	800e9bc <__sfputs_r+0xa>
 800e9d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e9d8 <_vfiprintf_r>:
 800e9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9dc:	460d      	mov	r5, r1
 800e9de:	4614      	mov	r4, r2
 800e9e0:	4698      	mov	r8, r3
 800e9e2:	4606      	mov	r6, r0
 800e9e4:	b09d      	sub	sp, #116	; 0x74
 800e9e6:	b118      	cbz	r0, 800e9f0 <_vfiprintf_r+0x18>
 800e9e8:	6983      	ldr	r3, [r0, #24]
 800e9ea:	b90b      	cbnz	r3, 800e9f0 <_vfiprintf_r+0x18>
 800e9ec:	f000 fcb4 	bl	800f358 <__sinit>
 800e9f0:	4b89      	ldr	r3, [pc, #548]	; (800ec18 <_vfiprintf_r+0x240>)
 800e9f2:	429d      	cmp	r5, r3
 800e9f4:	d11b      	bne.n	800ea2e <_vfiprintf_r+0x56>
 800e9f6:	6875      	ldr	r5, [r6, #4]
 800e9f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e9fa:	07d9      	lsls	r1, r3, #31
 800e9fc:	d405      	bmi.n	800ea0a <_vfiprintf_r+0x32>
 800e9fe:	89ab      	ldrh	r3, [r5, #12]
 800ea00:	059a      	lsls	r2, r3, #22
 800ea02:	d402      	bmi.n	800ea0a <_vfiprintf_r+0x32>
 800ea04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea06:	f000 fd45 	bl	800f494 <__retarget_lock_acquire_recursive>
 800ea0a:	89ab      	ldrh	r3, [r5, #12]
 800ea0c:	071b      	lsls	r3, r3, #28
 800ea0e:	d501      	bpl.n	800ea14 <_vfiprintf_r+0x3c>
 800ea10:	692b      	ldr	r3, [r5, #16]
 800ea12:	b9eb      	cbnz	r3, 800ea50 <_vfiprintf_r+0x78>
 800ea14:	4629      	mov	r1, r5
 800ea16:	4630      	mov	r0, r6
 800ea18:	f000 fb0e 	bl	800f038 <__swsetup_r>
 800ea1c:	b1c0      	cbz	r0, 800ea50 <_vfiprintf_r+0x78>
 800ea1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea20:	07dc      	lsls	r4, r3, #31
 800ea22:	d50e      	bpl.n	800ea42 <_vfiprintf_r+0x6a>
 800ea24:	f04f 30ff 	mov.w	r0, #4294967295
 800ea28:	b01d      	add	sp, #116	; 0x74
 800ea2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea2e:	4b7b      	ldr	r3, [pc, #492]	; (800ec1c <_vfiprintf_r+0x244>)
 800ea30:	429d      	cmp	r5, r3
 800ea32:	d101      	bne.n	800ea38 <_vfiprintf_r+0x60>
 800ea34:	68b5      	ldr	r5, [r6, #8]
 800ea36:	e7df      	b.n	800e9f8 <_vfiprintf_r+0x20>
 800ea38:	4b79      	ldr	r3, [pc, #484]	; (800ec20 <_vfiprintf_r+0x248>)
 800ea3a:	429d      	cmp	r5, r3
 800ea3c:	bf08      	it	eq
 800ea3e:	68f5      	ldreq	r5, [r6, #12]
 800ea40:	e7da      	b.n	800e9f8 <_vfiprintf_r+0x20>
 800ea42:	89ab      	ldrh	r3, [r5, #12]
 800ea44:	0598      	lsls	r0, r3, #22
 800ea46:	d4ed      	bmi.n	800ea24 <_vfiprintf_r+0x4c>
 800ea48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea4a:	f000 fd24 	bl	800f496 <__retarget_lock_release_recursive>
 800ea4e:	e7e9      	b.n	800ea24 <_vfiprintf_r+0x4c>
 800ea50:	2300      	movs	r3, #0
 800ea52:	9309      	str	r3, [sp, #36]	; 0x24
 800ea54:	2320      	movs	r3, #32
 800ea56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ea5a:	2330      	movs	r3, #48	; 0x30
 800ea5c:	f04f 0901 	mov.w	r9, #1
 800ea60:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea64:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800ec24 <_vfiprintf_r+0x24c>
 800ea68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ea6c:	4623      	mov	r3, r4
 800ea6e:	469a      	mov	sl, r3
 800ea70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea74:	b10a      	cbz	r2, 800ea7a <_vfiprintf_r+0xa2>
 800ea76:	2a25      	cmp	r2, #37	; 0x25
 800ea78:	d1f9      	bne.n	800ea6e <_vfiprintf_r+0x96>
 800ea7a:	ebba 0b04 	subs.w	fp, sl, r4
 800ea7e:	d00b      	beq.n	800ea98 <_vfiprintf_r+0xc0>
 800ea80:	465b      	mov	r3, fp
 800ea82:	4622      	mov	r2, r4
 800ea84:	4629      	mov	r1, r5
 800ea86:	4630      	mov	r0, r6
 800ea88:	f7ff ff93 	bl	800e9b2 <__sfputs_r>
 800ea8c:	3001      	adds	r0, #1
 800ea8e:	f000 80aa 	beq.w	800ebe6 <_vfiprintf_r+0x20e>
 800ea92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea94:	445a      	add	r2, fp
 800ea96:	9209      	str	r2, [sp, #36]	; 0x24
 800ea98:	f89a 3000 	ldrb.w	r3, [sl]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	f000 80a2 	beq.w	800ebe6 <_vfiprintf_r+0x20e>
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	f04f 32ff 	mov.w	r2, #4294967295
 800eaa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eaac:	f10a 0a01 	add.w	sl, sl, #1
 800eab0:	9304      	str	r3, [sp, #16]
 800eab2:	9307      	str	r3, [sp, #28]
 800eab4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eab8:	931a      	str	r3, [sp, #104]	; 0x68
 800eaba:	4654      	mov	r4, sl
 800eabc:	2205      	movs	r2, #5
 800eabe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eac2:	4858      	ldr	r0, [pc, #352]	; (800ec24 <_vfiprintf_r+0x24c>)
 800eac4:	f000 fd4c 	bl	800f560 <memchr>
 800eac8:	9a04      	ldr	r2, [sp, #16]
 800eaca:	b9d8      	cbnz	r0, 800eb04 <_vfiprintf_r+0x12c>
 800eacc:	06d1      	lsls	r1, r2, #27
 800eace:	bf44      	itt	mi
 800ead0:	2320      	movmi	r3, #32
 800ead2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ead6:	0713      	lsls	r3, r2, #28
 800ead8:	bf44      	itt	mi
 800eada:	232b      	movmi	r3, #43	; 0x2b
 800eadc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eae0:	f89a 3000 	ldrb.w	r3, [sl]
 800eae4:	2b2a      	cmp	r3, #42	; 0x2a
 800eae6:	d015      	beq.n	800eb14 <_vfiprintf_r+0x13c>
 800eae8:	4654      	mov	r4, sl
 800eaea:	2000      	movs	r0, #0
 800eaec:	f04f 0c0a 	mov.w	ip, #10
 800eaf0:	9a07      	ldr	r2, [sp, #28]
 800eaf2:	4621      	mov	r1, r4
 800eaf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eaf8:	3b30      	subs	r3, #48	; 0x30
 800eafa:	2b09      	cmp	r3, #9
 800eafc:	d94e      	bls.n	800eb9c <_vfiprintf_r+0x1c4>
 800eafe:	b1b0      	cbz	r0, 800eb2e <_vfiprintf_r+0x156>
 800eb00:	9207      	str	r2, [sp, #28]
 800eb02:	e014      	b.n	800eb2e <_vfiprintf_r+0x156>
 800eb04:	eba0 0308 	sub.w	r3, r0, r8
 800eb08:	fa09 f303 	lsl.w	r3, r9, r3
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	46a2      	mov	sl, r4
 800eb10:	9304      	str	r3, [sp, #16]
 800eb12:	e7d2      	b.n	800eaba <_vfiprintf_r+0xe2>
 800eb14:	9b03      	ldr	r3, [sp, #12]
 800eb16:	1d19      	adds	r1, r3, #4
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	9103      	str	r1, [sp, #12]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	bfbb      	ittet	lt
 800eb20:	425b      	neglt	r3, r3
 800eb22:	f042 0202 	orrlt.w	r2, r2, #2
 800eb26:	9307      	strge	r3, [sp, #28]
 800eb28:	9307      	strlt	r3, [sp, #28]
 800eb2a:	bfb8      	it	lt
 800eb2c:	9204      	strlt	r2, [sp, #16]
 800eb2e:	7823      	ldrb	r3, [r4, #0]
 800eb30:	2b2e      	cmp	r3, #46	; 0x2e
 800eb32:	d10c      	bne.n	800eb4e <_vfiprintf_r+0x176>
 800eb34:	7863      	ldrb	r3, [r4, #1]
 800eb36:	2b2a      	cmp	r3, #42	; 0x2a
 800eb38:	d135      	bne.n	800eba6 <_vfiprintf_r+0x1ce>
 800eb3a:	9b03      	ldr	r3, [sp, #12]
 800eb3c:	3402      	adds	r4, #2
 800eb3e:	1d1a      	adds	r2, r3, #4
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	9203      	str	r2, [sp, #12]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	bfb8      	it	lt
 800eb48:	f04f 33ff 	movlt.w	r3, #4294967295
 800eb4c:	9305      	str	r3, [sp, #20]
 800eb4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ec34 <_vfiprintf_r+0x25c>
 800eb52:	2203      	movs	r2, #3
 800eb54:	4650      	mov	r0, sl
 800eb56:	7821      	ldrb	r1, [r4, #0]
 800eb58:	f000 fd02 	bl	800f560 <memchr>
 800eb5c:	b140      	cbz	r0, 800eb70 <_vfiprintf_r+0x198>
 800eb5e:	2340      	movs	r3, #64	; 0x40
 800eb60:	eba0 000a 	sub.w	r0, r0, sl
 800eb64:	fa03 f000 	lsl.w	r0, r3, r0
 800eb68:	9b04      	ldr	r3, [sp, #16]
 800eb6a:	3401      	adds	r4, #1
 800eb6c:	4303      	orrs	r3, r0
 800eb6e:	9304      	str	r3, [sp, #16]
 800eb70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb74:	2206      	movs	r2, #6
 800eb76:	482c      	ldr	r0, [pc, #176]	; (800ec28 <_vfiprintf_r+0x250>)
 800eb78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eb7c:	f000 fcf0 	bl	800f560 <memchr>
 800eb80:	2800      	cmp	r0, #0
 800eb82:	d03f      	beq.n	800ec04 <_vfiprintf_r+0x22c>
 800eb84:	4b29      	ldr	r3, [pc, #164]	; (800ec2c <_vfiprintf_r+0x254>)
 800eb86:	bb1b      	cbnz	r3, 800ebd0 <_vfiprintf_r+0x1f8>
 800eb88:	9b03      	ldr	r3, [sp, #12]
 800eb8a:	3307      	adds	r3, #7
 800eb8c:	f023 0307 	bic.w	r3, r3, #7
 800eb90:	3308      	adds	r3, #8
 800eb92:	9303      	str	r3, [sp, #12]
 800eb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb96:	443b      	add	r3, r7
 800eb98:	9309      	str	r3, [sp, #36]	; 0x24
 800eb9a:	e767      	b.n	800ea6c <_vfiprintf_r+0x94>
 800eb9c:	460c      	mov	r4, r1
 800eb9e:	2001      	movs	r0, #1
 800eba0:	fb0c 3202 	mla	r2, ip, r2, r3
 800eba4:	e7a5      	b.n	800eaf2 <_vfiprintf_r+0x11a>
 800eba6:	2300      	movs	r3, #0
 800eba8:	f04f 0c0a 	mov.w	ip, #10
 800ebac:	4619      	mov	r1, r3
 800ebae:	3401      	adds	r4, #1
 800ebb0:	9305      	str	r3, [sp, #20]
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ebb8:	3a30      	subs	r2, #48	; 0x30
 800ebba:	2a09      	cmp	r2, #9
 800ebbc:	d903      	bls.n	800ebc6 <_vfiprintf_r+0x1ee>
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d0c5      	beq.n	800eb4e <_vfiprintf_r+0x176>
 800ebc2:	9105      	str	r1, [sp, #20]
 800ebc4:	e7c3      	b.n	800eb4e <_vfiprintf_r+0x176>
 800ebc6:	4604      	mov	r4, r0
 800ebc8:	2301      	movs	r3, #1
 800ebca:	fb0c 2101 	mla	r1, ip, r1, r2
 800ebce:	e7f0      	b.n	800ebb2 <_vfiprintf_r+0x1da>
 800ebd0:	ab03      	add	r3, sp, #12
 800ebd2:	9300      	str	r3, [sp, #0]
 800ebd4:	462a      	mov	r2, r5
 800ebd6:	4630      	mov	r0, r6
 800ebd8:	4b15      	ldr	r3, [pc, #84]	; (800ec30 <_vfiprintf_r+0x258>)
 800ebda:	a904      	add	r1, sp, #16
 800ebdc:	f3af 8000 	nop.w
 800ebe0:	4607      	mov	r7, r0
 800ebe2:	1c78      	adds	r0, r7, #1
 800ebe4:	d1d6      	bne.n	800eb94 <_vfiprintf_r+0x1bc>
 800ebe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebe8:	07d9      	lsls	r1, r3, #31
 800ebea:	d405      	bmi.n	800ebf8 <_vfiprintf_r+0x220>
 800ebec:	89ab      	ldrh	r3, [r5, #12]
 800ebee:	059a      	lsls	r2, r3, #22
 800ebf0:	d402      	bmi.n	800ebf8 <_vfiprintf_r+0x220>
 800ebf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebf4:	f000 fc4f 	bl	800f496 <__retarget_lock_release_recursive>
 800ebf8:	89ab      	ldrh	r3, [r5, #12]
 800ebfa:	065b      	lsls	r3, r3, #25
 800ebfc:	f53f af12 	bmi.w	800ea24 <_vfiprintf_r+0x4c>
 800ec00:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec02:	e711      	b.n	800ea28 <_vfiprintf_r+0x50>
 800ec04:	ab03      	add	r3, sp, #12
 800ec06:	9300      	str	r3, [sp, #0]
 800ec08:	462a      	mov	r2, r5
 800ec0a:	4630      	mov	r0, r6
 800ec0c:	4b08      	ldr	r3, [pc, #32]	; (800ec30 <_vfiprintf_r+0x258>)
 800ec0e:	a904      	add	r1, sp, #16
 800ec10:	f000 f882 	bl	800ed18 <_printf_i>
 800ec14:	e7e4      	b.n	800ebe0 <_vfiprintf_r+0x208>
 800ec16:	bf00      	nop
 800ec18:	08010fe8 	.word	0x08010fe8
 800ec1c:	08011008 	.word	0x08011008
 800ec20:	08010fc8 	.word	0x08010fc8
 800ec24:	08010f94 	.word	0x08010f94
 800ec28:	08010f9e 	.word	0x08010f9e
 800ec2c:	00000000 	.word	0x00000000
 800ec30:	0800e9b3 	.word	0x0800e9b3
 800ec34:	08010f9a 	.word	0x08010f9a

0800ec38 <_printf_common>:
 800ec38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec3c:	4616      	mov	r6, r2
 800ec3e:	4699      	mov	r9, r3
 800ec40:	688a      	ldr	r2, [r1, #8]
 800ec42:	690b      	ldr	r3, [r1, #16]
 800ec44:	4607      	mov	r7, r0
 800ec46:	4293      	cmp	r3, r2
 800ec48:	bfb8      	it	lt
 800ec4a:	4613      	movlt	r3, r2
 800ec4c:	6033      	str	r3, [r6, #0]
 800ec4e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec52:	460c      	mov	r4, r1
 800ec54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec58:	b10a      	cbz	r2, 800ec5e <_printf_common+0x26>
 800ec5a:	3301      	adds	r3, #1
 800ec5c:	6033      	str	r3, [r6, #0]
 800ec5e:	6823      	ldr	r3, [r4, #0]
 800ec60:	0699      	lsls	r1, r3, #26
 800ec62:	bf42      	ittt	mi
 800ec64:	6833      	ldrmi	r3, [r6, #0]
 800ec66:	3302      	addmi	r3, #2
 800ec68:	6033      	strmi	r3, [r6, #0]
 800ec6a:	6825      	ldr	r5, [r4, #0]
 800ec6c:	f015 0506 	ands.w	r5, r5, #6
 800ec70:	d106      	bne.n	800ec80 <_printf_common+0x48>
 800ec72:	f104 0a19 	add.w	sl, r4, #25
 800ec76:	68e3      	ldr	r3, [r4, #12]
 800ec78:	6832      	ldr	r2, [r6, #0]
 800ec7a:	1a9b      	subs	r3, r3, r2
 800ec7c:	42ab      	cmp	r3, r5
 800ec7e:	dc28      	bgt.n	800ecd2 <_printf_common+0x9a>
 800ec80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec84:	1e13      	subs	r3, r2, #0
 800ec86:	6822      	ldr	r2, [r4, #0]
 800ec88:	bf18      	it	ne
 800ec8a:	2301      	movne	r3, #1
 800ec8c:	0692      	lsls	r2, r2, #26
 800ec8e:	d42d      	bmi.n	800ecec <_printf_common+0xb4>
 800ec90:	4649      	mov	r1, r9
 800ec92:	4638      	mov	r0, r7
 800ec94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec98:	47c0      	blx	r8
 800ec9a:	3001      	adds	r0, #1
 800ec9c:	d020      	beq.n	800ece0 <_printf_common+0xa8>
 800ec9e:	6823      	ldr	r3, [r4, #0]
 800eca0:	68e5      	ldr	r5, [r4, #12]
 800eca2:	f003 0306 	and.w	r3, r3, #6
 800eca6:	2b04      	cmp	r3, #4
 800eca8:	bf18      	it	ne
 800ecaa:	2500      	movne	r5, #0
 800ecac:	6832      	ldr	r2, [r6, #0]
 800ecae:	f04f 0600 	mov.w	r6, #0
 800ecb2:	68a3      	ldr	r3, [r4, #8]
 800ecb4:	bf08      	it	eq
 800ecb6:	1aad      	subeq	r5, r5, r2
 800ecb8:	6922      	ldr	r2, [r4, #16]
 800ecba:	bf08      	it	eq
 800ecbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ecc0:	4293      	cmp	r3, r2
 800ecc2:	bfc4      	itt	gt
 800ecc4:	1a9b      	subgt	r3, r3, r2
 800ecc6:	18ed      	addgt	r5, r5, r3
 800ecc8:	341a      	adds	r4, #26
 800ecca:	42b5      	cmp	r5, r6
 800eccc:	d11a      	bne.n	800ed04 <_printf_common+0xcc>
 800ecce:	2000      	movs	r0, #0
 800ecd0:	e008      	b.n	800ece4 <_printf_common+0xac>
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	4652      	mov	r2, sl
 800ecd6:	4649      	mov	r1, r9
 800ecd8:	4638      	mov	r0, r7
 800ecda:	47c0      	blx	r8
 800ecdc:	3001      	adds	r0, #1
 800ecde:	d103      	bne.n	800ece8 <_printf_common+0xb0>
 800ece0:	f04f 30ff 	mov.w	r0, #4294967295
 800ece4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ece8:	3501      	adds	r5, #1
 800ecea:	e7c4      	b.n	800ec76 <_printf_common+0x3e>
 800ecec:	2030      	movs	r0, #48	; 0x30
 800ecee:	18e1      	adds	r1, r4, r3
 800ecf0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ecf4:	1c5a      	adds	r2, r3, #1
 800ecf6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ecfa:	4422      	add	r2, r4
 800ecfc:	3302      	adds	r3, #2
 800ecfe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed02:	e7c5      	b.n	800ec90 <_printf_common+0x58>
 800ed04:	2301      	movs	r3, #1
 800ed06:	4622      	mov	r2, r4
 800ed08:	4649      	mov	r1, r9
 800ed0a:	4638      	mov	r0, r7
 800ed0c:	47c0      	blx	r8
 800ed0e:	3001      	adds	r0, #1
 800ed10:	d0e6      	beq.n	800ece0 <_printf_common+0xa8>
 800ed12:	3601      	adds	r6, #1
 800ed14:	e7d9      	b.n	800ecca <_printf_common+0x92>
	...

0800ed18 <_printf_i>:
 800ed18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed1c:	460c      	mov	r4, r1
 800ed1e:	7e27      	ldrb	r7, [r4, #24]
 800ed20:	4691      	mov	r9, r2
 800ed22:	2f78      	cmp	r7, #120	; 0x78
 800ed24:	4680      	mov	r8, r0
 800ed26:	469a      	mov	sl, r3
 800ed28:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ed2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed2e:	d807      	bhi.n	800ed40 <_printf_i+0x28>
 800ed30:	2f62      	cmp	r7, #98	; 0x62
 800ed32:	d80a      	bhi.n	800ed4a <_printf_i+0x32>
 800ed34:	2f00      	cmp	r7, #0
 800ed36:	f000 80d9 	beq.w	800eeec <_printf_i+0x1d4>
 800ed3a:	2f58      	cmp	r7, #88	; 0x58
 800ed3c:	f000 80a4 	beq.w	800ee88 <_printf_i+0x170>
 800ed40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ed44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed48:	e03a      	b.n	800edc0 <_printf_i+0xa8>
 800ed4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed4e:	2b15      	cmp	r3, #21
 800ed50:	d8f6      	bhi.n	800ed40 <_printf_i+0x28>
 800ed52:	a001      	add	r0, pc, #4	; (adr r0, 800ed58 <_printf_i+0x40>)
 800ed54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ed58:	0800edb1 	.word	0x0800edb1
 800ed5c:	0800edc5 	.word	0x0800edc5
 800ed60:	0800ed41 	.word	0x0800ed41
 800ed64:	0800ed41 	.word	0x0800ed41
 800ed68:	0800ed41 	.word	0x0800ed41
 800ed6c:	0800ed41 	.word	0x0800ed41
 800ed70:	0800edc5 	.word	0x0800edc5
 800ed74:	0800ed41 	.word	0x0800ed41
 800ed78:	0800ed41 	.word	0x0800ed41
 800ed7c:	0800ed41 	.word	0x0800ed41
 800ed80:	0800ed41 	.word	0x0800ed41
 800ed84:	0800eed3 	.word	0x0800eed3
 800ed88:	0800edf5 	.word	0x0800edf5
 800ed8c:	0800eeb5 	.word	0x0800eeb5
 800ed90:	0800ed41 	.word	0x0800ed41
 800ed94:	0800ed41 	.word	0x0800ed41
 800ed98:	0800eef5 	.word	0x0800eef5
 800ed9c:	0800ed41 	.word	0x0800ed41
 800eda0:	0800edf5 	.word	0x0800edf5
 800eda4:	0800ed41 	.word	0x0800ed41
 800eda8:	0800ed41 	.word	0x0800ed41
 800edac:	0800eebd 	.word	0x0800eebd
 800edb0:	680b      	ldr	r3, [r1, #0]
 800edb2:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800edb6:	1d1a      	adds	r2, r3, #4
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	600a      	str	r2, [r1, #0]
 800edbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800edc0:	2301      	movs	r3, #1
 800edc2:	e0a4      	b.n	800ef0e <_printf_i+0x1f6>
 800edc4:	6825      	ldr	r5, [r4, #0]
 800edc6:	6808      	ldr	r0, [r1, #0]
 800edc8:	062e      	lsls	r6, r5, #24
 800edca:	f100 0304 	add.w	r3, r0, #4
 800edce:	d50a      	bpl.n	800ede6 <_printf_i+0xce>
 800edd0:	6805      	ldr	r5, [r0, #0]
 800edd2:	600b      	str	r3, [r1, #0]
 800edd4:	2d00      	cmp	r5, #0
 800edd6:	da03      	bge.n	800ede0 <_printf_i+0xc8>
 800edd8:	232d      	movs	r3, #45	; 0x2d
 800edda:	426d      	negs	r5, r5
 800eddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ede0:	230a      	movs	r3, #10
 800ede2:	485e      	ldr	r0, [pc, #376]	; (800ef5c <_printf_i+0x244>)
 800ede4:	e019      	b.n	800ee1a <_printf_i+0x102>
 800ede6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800edea:	6805      	ldr	r5, [r0, #0]
 800edec:	600b      	str	r3, [r1, #0]
 800edee:	bf18      	it	ne
 800edf0:	b22d      	sxthne	r5, r5
 800edf2:	e7ef      	b.n	800edd4 <_printf_i+0xbc>
 800edf4:	680b      	ldr	r3, [r1, #0]
 800edf6:	6825      	ldr	r5, [r4, #0]
 800edf8:	1d18      	adds	r0, r3, #4
 800edfa:	6008      	str	r0, [r1, #0]
 800edfc:	0628      	lsls	r0, r5, #24
 800edfe:	d501      	bpl.n	800ee04 <_printf_i+0xec>
 800ee00:	681d      	ldr	r5, [r3, #0]
 800ee02:	e002      	b.n	800ee0a <_printf_i+0xf2>
 800ee04:	0669      	lsls	r1, r5, #25
 800ee06:	d5fb      	bpl.n	800ee00 <_printf_i+0xe8>
 800ee08:	881d      	ldrh	r5, [r3, #0]
 800ee0a:	2f6f      	cmp	r7, #111	; 0x6f
 800ee0c:	bf0c      	ite	eq
 800ee0e:	2308      	moveq	r3, #8
 800ee10:	230a      	movne	r3, #10
 800ee12:	4852      	ldr	r0, [pc, #328]	; (800ef5c <_printf_i+0x244>)
 800ee14:	2100      	movs	r1, #0
 800ee16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee1a:	6866      	ldr	r6, [r4, #4]
 800ee1c:	2e00      	cmp	r6, #0
 800ee1e:	bfa8      	it	ge
 800ee20:	6821      	ldrge	r1, [r4, #0]
 800ee22:	60a6      	str	r6, [r4, #8]
 800ee24:	bfa4      	itt	ge
 800ee26:	f021 0104 	bicge.w	r1, r1, #4
 800ee2a:	6021      	strge	r1, [r4, #0]
 800ee2c:	b90d      	cbnz	r5, 800ee32 <_printf_i+0x11a>
 800ee2e:	2e00      	cmp	r6, #0
 800ee30:	d04d      	beq.n	800eece <_printf_i+0x1b6>
 800ee32:	4616      	mov	r6, r2
 800ee34:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee38:	fb03 5711 	mls	r7, r3, r1, r5
 800ee3c:	5dc7      	ldrb	r7, [r0, r7]
 800ee3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee42:	462f      	mov	r7, r5
 800ee44:	42bb      	cmp	r3, r7
 800ee46:	460d      	mov	r5, r1
 800ee48:	d9f4      	bls.n	800ee34 <_printf_i+0x11c>
 800ee4a:	2b08      	cmp	r3, #8
 800ee4c:	d10b      	bne.n	800ee66 <_printf_i+0x14e>
 800ee4e:	6823      	ldr	r3, [r4, #0]
 800ee50:	07df      	lsls	r7, r3, #31
 800ee52:	d508      	bpl.n	800ee66 <_printf_i+0x14e>
 800ee54:	6923      	ldr	r3, [r4, #16]
 800ee56:	6861      	ldr	r1, [r4, #4]
 800ee58:	4299      	cmp	r1, r3
 800ee5a:	bfde      	ittt	le
 800ee5c:	2330      	movle	r3, #48	; 0x30
 800ee5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee62:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee66:	1b92      	subs	r2, r2, r6
 800ee68:	6122      	str	r2, [r4, #16]
 800ee6a:	464b      	mov	r3, r9
 800ee6c:	4621      	mov	r1, r4
 800ee6e:	4640      	mov	r0, r8
 800ee70:	f8cd a000 	str.w	sl, [sp]
 800ee74:	aa03      	add	r2, sp, #12
 800ee76:	f7ff fedf 	bl	800ec38 <_printf_common>
 800ee7a:	3001      	adds	r0, #1
 800ee7c:	d14c      	bne.n	800ef18 <_printf_i+0x200>
 800ee7e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee82:	b004      	add	sp, #16
 800ee84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee88:	4834      	ldr	r0, [pc, #208]	; (800ef5c <_printf_i+0x244>)
 800ee8a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ee8e:	680e      	ldr	r6, [r1, #0]
 800ee90:	6823      	ldr	r3, [r4, #0]
 800ee92:	f856 5b04 	ldr.w	r5, [r6], #4
 800ee96:	061f      	lsls	r7, r3, #24
 800ee98:	600e      	str	r6, [r1, #0]
 800ee9a:	d514      	bpl.n	800eec6 <_printf_i+0x1ae>
 800ee9c:	07d9      	lsls	r1, r3, #31
 800ee9e:	bf44      	itt	mi
 800eea0:	f043 0320 	orrmi.w	r3, r3, #32
 800eea4:	6023      	strmi	r3, [r4, #0]
 800eea6:	b91d      	cbnz	r5, 800eeb0 <_printf_i+0x198>
 800eea8:	6823      	ldr	r3, [r4, #0]
 800eeaa:	f023 0320 	bic.w	r3, r3, #32
 800eeae:	6023      	str	r3, [r4, #0]
 800eeb0:	2310      	movs	r3, #16
 800eeb2:	e7af      	b.n	800ee14 <_printf_i+0xfc>
 800eeb4:	6823      	ldr	r3, [r4, #0]
 800eeb6:	f043 0320 	orr.w	r3, r3, #32
 800eeba:	6023      	str	r3, [r4, #0]
 800eebc:	2378      	movs	r3, #120	; 0x78
 800eebe:	4828      	ldr	r0, [pc, #160]	; (800ef60 <_printf_i+0x248>)
 800eec0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eec4:	e7e3      	b.n	800ee8e <_printf_i+0x176>
 800eec6:	065e      	lsls	r6, r3, #25
 800eec8:	bf48      	it	mi
 800eeca:	b2ad      	uxthmi	r5, r5
 800eecc:	e7e6      	b.n	800ee9c <_printf_i+0x184>
 800eece:	4616      	mov	r6, r2
 800eed0:	e7bb      	b.n	800ee4a <_printf_i+0x132>
 800eed2:	680b      	ldr	r3, [r1, #0]
 800eed4:	6826      	ldr	r6, [r4, #0]
 800eed6:	1d1d      	adds	r5, r3, #4
 800eed8:	6960      	ldr	r0, [r4, #20]
 800eeda:	600d      	str	r5, [r1, #0]
 800eedc:	0635      	lsls	r5, r6, #24
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	d501      	bpl.n	800eee6 <_printf_i+0x1ce>
 800eee2:	6018      	str	r0, [r3, #0]
 800eee4:	e002      	b.n	800eeec <_printf_i+0x1d4>
 800eee6:	0671      	lsls	r1, r6, #25
 800eee8:	d5fb      	bpl.n	800eee2 <_printf_i+0x1ca>
 800eeea:	8018      	strh	r0, [r3, #0]
 800eeec:	2300      	movs	r3, #0
 800eeee:	4616      	mov	r6, r2
 800eef0:	6123      	str	r3, [r4, #16]
 800eef2:	e7ba      	b.n	800ee6a <_printf_i+0x152>
 800eef4:	680b      	ldr	r3, [r1, #0]
 800eef6:	1d1a      	adds	r2, r3, #4
 800eef8:	600a      	str	r2, [r1, #0]
 800eefa:	681e      	ldr	r6, [r3, #0]
 800eefc:	2100      	movs	r1, #0
 800eefe:	4630      	mov	r0, r6
 800ef00:	6862      	ldr	r2, [r4, #4]
 800ef02:	f000 fb2d 	bl	800f560 <memchr>
 800ef06:	b108      	cbz	r0, 800ef0c <_printf_i+0x1f4>
 800ef08:	1b80      	subs	r0, r0, r6
 800ef0a:	6060      	str	r0, [r4, #4]
 800ef0c:	6863      	ldr	r3, [r4, #4]
 800ef0e:	6123      	str	r3, [r4, #16]
 800ef10:	2300      	movs	r3, #0
 800ef12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef16:	e7a8      	b.n	800ee6a <_printf_i+0x152>
 800ef18:	4632      	mov	r2, r6
 800ef1a:	4649      	mov	r1, r9
 800ef1c:	4640      	mov	r0, r8
 800ef1e:	6923      	ldr	r3, [r4, #16]
 800ef20:	47d0      	blx	sl
 800ef22:	3001      	adds	r0, #1
 800ef24:	d0ab      	beq.n	800ee7e <_printf_i+0x166>
 800ef26:	6823      	ldr	r3, [r4, #0]
 800ef28:	079b      	lsls	r3, r3, #30
 800ef2a:	d413      	bmi.n	800ef54 <_printf_i+0x23c>
 800ef2c:	68e0      	ldr	r0, [r4, #12]
 800ef2e:	9b03      	ldr	r3, [sp, #12]
 800ef30:	4298      	cmp	r0, r3
 800ef32:	bfb8      	it	lt
 800ef34:	4618      	movlt	r0, r3
 800ef36:	e7a4      	b.n	800ee82 <_printf_i+0x16a>
 800ef38:	2301      	movs	r3, #1
 800ef3a:	4632      	mov	r2, r6
 800ef3c:	4649      	mov	r1, r9
 800ef3e:	4640      	mov	r0, r8
 800ef40:	47d0      	blx	sl
 800ef42:	3001      	adds	r0, #1
 800ef44:	d09b      	beq.n	800ee7e <_printf_i+0x166>
 800ef46:	3501      	adds	r5, #1
 800ef48:	68e3      	ldr	r3, [r4, #12]
 800ef4a:	9903      	ldr	r1, [sp, #12]
 800ef4c:	1a5b      	subs	r3, r3, r1
 800ef4e:	42ab      	cmp	r3, r5
 800ef50:	dcf2      	bgt.n	800ef38 <_printf_i+0x220>
 800ef52:	e7eb      	b.n	800ef2c <_printf_i+0x214>
 800ef54:	2500      	movs	r5, #0
 800ef56:	f104 0619 	add.w	r6, r4, #25
 800ef5a:	e7f5      	b.n	800ef48 <_printf_i+0x230>
 800ef5c:	08010fa5 	.word	0x08010fa5
 800ef60:	08010fb6 	.word	0x08010fb6

0800ef64 <_sbrk_r>:
 800ef64:	b538      	push	{r3, r4, r5, lr}
 800ef66:	2300      	movs	r3, #0
 800ef68:	4d05      	ldr	r5, [pc, #20]	; (800ef80 <_sbrk_r+0x1c>)
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	4608      	mov	r0, r1
 800ef6e:	602b      	str	r3, [r5, #0]
 800ef70:	f7fa fcf6 	bl	8009960 <_sbrk>
 800ef74:	1c43      	adds	r3, r0, #1
 800ef76:	d102      	bne.n	800ef7e <_sbrk_r+0x1a>
 800ef78:	682b      	ldr	r3, [r5, #0]
 800ef7a:	b103      	cbz	r3, 800ef7e <_sbrk_r+0x1a>
 800ef7c:	6023      	str	r3, [r4, #0]
 800ef7e:	bd38      	pop	{r3, r4, r5, pc}
 800ef80:	2000451c 	.word	0x2000451c

0800ef84 <finitef>:
 800ef84:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800ef88:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800ef8c:	bfac      	ite	ge
 800ef8e:	2000      	movge	r0, #0
 800ef90:	2001      	movlt	r0, #1
 800ef92:	4770      	bx	lr

0800ef94 <__swbuf_r>:
 800ef94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef96:	460e      	mov	r6, r1
 800ef98:	4614      	mov	r4, r2
 800ef9a:	4605      	mov	r5, r0
 800ef9c:	b118      	cbz	r0, 800efa6 <__swbuf_r+0x12>
 800ef9e:	6983      	ldr	r3, [r0, #24]
 800efa0:	b90b      	cbnz	r3, 800efa6 <__swbuf_r+0x12>
 800efa2:	f000 f9d9 	bl	800f358 <__sinit>
 800efa6:	4b21      	ldr	r3, [pc, #132]	; (800f02c <__swbuf_r+0x98>)
 800efa8:	429c      	cmp	r4, r3
 800efaa:	d12b      	bne.n	800f004 <__swbuf_r+0x70>
 800efac:	686c      	ldr	r4, [r5, #4]
 800efae:	69a3      	ldr	r3, [r4, #24]
 800efb0:	60a3      	str	r3, [r4, #8]
 800efb2:	89a3      	ldrh	r3, [r4, #12]
 800efb4:	071a      	lsls	r2, r3, #28
 800efb6:	d52f      	bpl.n	800f018 <__swbuf_r+0x84>
 800efb8:	6923      	ldr	r3, [r4, #16]
 800efba:	b36b      	cbz	r3, 800f018 <__swbuf_r+0x84>
 800efbc:	6923      	ldr	r3, [r4, #16]
 800efbe:	6820      	ldr	r0, [r4, #0]
 800efc0:	b2f6      	uxtb	r6, r6
 800efc2:	1ac0      	subs	r0, r0, r3
 800efc4:	6963      	ldr	r3, [r4, #20]
 800efc6:	4637      	mov	r7, r6
 800efc8:	4283      	cmp	r3, r0
 800efca:	dc04      	bgt.n	800efd6 <__swbuf_r+0x42>
 800efcc:	4621      	mov	r1, r4
 800efce:	4628      	mov	r0, r5
 800efd0:	f000 f92e 	bl	800f230 <_fflush_r>
 800efd4:	bb30      	cbnz	r0, 800f024 <__swbuf_r+0x90>
 800efd6:	68a3      	ldr	r3, [r4, #8]
 800efd8:	3001      	adds	r0, #1
 800efda:	3b01      	subs	r3, #1
 800efdc:	60a3      	str	r3, [r4, #8]
 800efde:	6823      	ldr	r3, [r4, #0]
 800efe0:	1c5a      	adds	r2, r3, #1
 800efe2:	6022      	str	r2, [r4, #0]
 800efe4:	701e      	strb	r6, [r3, #0]
 800efe6:	6963      	ldr	r3, [r4, #20]
 800efe8:	4283      	cmp	r3, r0
 800efea:	d004      	beq.n	800eff6 <__swbuf_r+0x62>
 800efec:	89a3      	ldrh	r3, [r4, #12]
 800efee:	07db      	lsls	r3, r3, #31
 800eff0:	d506      	bpl.n	800f000 <__swbuf_r+0x6c>
 800eff2:	2e0a      	cmp	r6, #10
 800eff4:	d104      	bne.n	800f000 <__swbuf_r+0x6c>
 800eff6:	4621      	mov	r1, r4
 800eff8:	4628      	mov	r0, r5
 800effa:	f000 f919 	bl	800f230 <_fflush_r>
 800effe:	b988      	cbnz	r0, 800f024 <__swbuf_r+0x90>
 800f000:	4638      	mov	r0, r7
 800f002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f004:	4b0a      	ldr	r3, [pc, #40]	; (800f030 <__swbuf_r+0x9c>)
 800f006:	429c      	cmp	r4, r3
 800f008:	d101      	bne.n	800f00e <__swbuf_r+0x7a>
 800f00a:	68ac      	ldr	r4, [r5, #8]
 800f00c:	e7cf      	b.n	800efae <__swbuf_r+0x1a>
 800f00e:	4b09      	ldr	r3, [pc, #36]	; (800f034 <__swbuf_r+0xa0>)
 800f010:	429c      	cmp	r4, r3
 800f012:	bf08      	it	eq
 800f014:	68ec      	ldreq	r4, [r5, #12]
 800f016:	e7ca      	b.n	800efae <__swbuf_r+0x1a>
 800f018:	4621      	mov	r1, r4
 800f01a:	4628      	mov	r0, r5
 800f01c:	f000 f80c 	bl	800f038 <__swsetup_r>
 800f020:	2800      	cmp	r0, #0
 800f022:	d0cb      	beq.n	800efbc <__swbuf_r+0x28>
 800f024:	f04f 37ff 	mov.w	r7, #4294967295
 800f028:	e7ea      	b.n	800f000 <__swbuf_r+0x6c>
 800f02a:	bf00      	nop
 800f02c:	08010fe8 	.word	0x08010fe8
 800f030:	08011008 	.word	0x08011008
 800f034:	08010fc8 	.word	0x08010fc8

0800f038 <__swsetup_r>:
 800f038:	4b32      	ldr	r3, [pc, #200]	; (800f104 <__swsetup_r+0xcc>)
 800f03a:	b570      	push	{r4, r5, r6, lr}
 800f03c:	681d      	ldr	r5, [r3, #0]
 800f03e:	4606      	mov	r6, r0
 800f040:	460c      	mov	r4, r1
 800f042:	b125      	cbz	r5, 800f04e <__swsetup_r+0x16>
 800f044:	69ab      	ldr	r3, [r5, #24]
 800f046:	b913      	cbnz	r3, 800f04e <__swsetup_r+0x16>
 800f048:	4628      	mov	r0, r5
 800f04a:	f000 f985 	bl	800f358 <__sinit>
 800f04e:	4b2e      	ldr	r3, [pc, #184]	; (800f108 <__swsetup_r+0xd0>)
 800f050:	429c      	cmp	r4, r3
 800f052:	d10f      	bne.n	800f074 <__swsetup_r+0x3c>
 800f054:	686c      	ldr	r4, [r5, #4]
 800f056:	89a3      	ldrh	r3, [r4, #12]
 800f058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f05c:	0719      	lsls	r1, r3, #28
 800f05e:	d42c      	bmi.n	800f0ba <__swsetup_r+0x82>
 800f060:	06dd      	lsls	r5, r3, #27
 800f062:	d411      	bmi.n	800f088 <__swsetup_r+0x50>
 800f064:	2309      	movs	r3, #9
 800f066:	6033      	str	r3, [r6, #0]
 800f068:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f06c:	f04f 30ff 	mov.w	r0, #4294967295
 800f070:	81a3      	strh	r3, [r4, #12]
 800f072:	e03e      	b.n	800f0f2 <__swsetup_r+0xba>
 800f074:	4b25      	ldr	r3, [pc, #148]	; (800f10c <__swsetup_r+0xd4>)
 800f076:	429c      	cmp	r4, r3
 800f078:	d101      	bne.n	800f07e <__swsetup_r+0x46>
 800f07a:	68ac      	ldr	r4, [r5, #8]
 800f07c:	e7eb      	b.n	800f056 <__swsetup_r+0x1e>
 800f07e:	4b24      	ldr	r3, [pc, #144]	; (800f110 <__swsetup_r+0xd8>)
 800f080:	429c      	cmp	r4, r3
 800f082:	bf08      	it	eq
 800f084:	68ec      	ldreq	r4, [r5, #12]
 800f086:	e7e6      	b.n	800f056 <__swsetup_r+0x1e>
 800f088:	0758      	lsls	r0, r3, #29
 800f08a:	d512      	bpl.n	800f0b2 <__swsetup_r+0x7a>
 800f08c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f08e:	b141      	cbz	r1, 800f0a2 <__swsetup_r+0x6a>
 800f090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f094:	4299      	cmp	r1, r3
 800f096:	d002      	beq.n	800f09e <__swsetup_r+0x66>
 800f098:	4630      	mov	r0, r6
 800f09a:	f7ff fbcf 	bl	800e83c <_free_r>
 800f09e:	2300      	movs	r3, #0
 800f0a0:	6363      	str	r3, [r4, #52]	; 0x34
 800f0a2:	89a3      	ldrh	r3, [r4, #12]
 800f0a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f0a8:	81a3      	strh	r3, [r4, #12]
 800f0aa:	2300      	movs	r3, #0
 800f0ac:	6063      	str	r3, [r4, #4]
 800f0ae:	6923      	ldr	r3, [r4, #16]
 800f0b0:	6023      	str	r3, [r4, #0]
 800f0b2:	89a3      	ldrh	r3, [r4, #12]
 800f0b4:	f043 0308 	orr.w	r3, r3, #8
 800f0b8:	81a3      	strh	r3, [r4, #12]
 800f0ba:	6923      	ldr	r3, [r4, #16]
 800f0bc:	b94b      	cbnz	r3, 800f0d2 <__swsetup_r+0x9a>
 800f0be:	89a3      	ldrh	r3, [r4, #12]
 800f0c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0c8:	d003      	beq.n	800f0d2 <__swsetup_r+0x9a>
 800f0ca:	4621      	mov	r1, r4
 800f0cc:	4630      	mov	r0, r6
 800f0ce:	f000 fa07 	bl	800f4e0 <__smakebuf_r>
 800f0d2:	89a0      	ldrh	r0, [r4, #12]
 800f0d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f0d8:	f010 0301 	ands.w	r3, r0, #1
 800f0dc:	d00a      	beq.n	800f0f4 <__swsetup_r+0xbc>
 800f0de:	2300      	movs	r3, #0
 800f0e0:	60a3      	str	r3, [r4, #8]
 800f0e2:	6963      	ldr	r3, [r4, #20]
 800f0e4:	425b      	negs	r3, r3
 800f0e6:	61a3      	str	r3, [r4, #24]
 800f0e8:	6923      	ldr	r3, [r4, #16]
 800f0ea:	b943      	cbnz	r3, 800f0fe <__swsetup_r+0xc6>
 800f0ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f0f0:	d1ba      	bne.n	800f068 <__swsetup_r+0x30>
 800f0f2:	bd70      	pop	{r4, r5, r6, pc}
 800f0f4:	0781      	lsls	r1, r0, #30
 800f0f6:	bf58      	it	pl
 800f0f8:	6963      	ldrpl	r3, [r4, #20]
 800f0fa:	60a3      	str	r3, [r4, #8]
 800f0fc:	e7f4      	b.n	800f0e8 <__swsetup_r+0xb0>
 800f0fe:	2000      	movs	r0, #0
 800f100:	e7f7      	b.n	800f0f2 <__swsetup_r+0xba>
 800f102:	bf00      	nop
 800f104:	2000049c 	.word	0x2000049c
 800f108:	08010fe8 	.word	0x08010fe8
 800f10c:	08011008 	.word	0x08011008
 800f110:	08010fc8 	.word	0x08010fc8

0800f114 <abort>:
 800f114:	2006      	movs	r0, #6
 800f116:	b508      	push	{r3, lr}
 800f118:	f000 fa64 	bl	800f5e4 <raise>
 800f11c:	2001      	movs	r0, #1
 800f11e:	f001 fb93 	bl	8010848 <_exit>
	...

0800f124 <__sflush_r>:
 800f124:	898a      	ldrh	r2, [r1, #12]
 800f126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f12a:	4605      	mov	r5, r0
 800f12c:	0710      	lsls	r0, r2, #28
 800f12e:	460c      	mov	r4, r1
 800f130:	d458      	bmi.n	800f1e4 <__sflush_r+0xc0>
 800f132:	684b      	ldr	r3, [r1, #4]
 800f134:	2b00      	cmp	r3, #0
 800f136:	dc05      	bgt.n	800f144 <__sflush_r+0x20>
 800f138:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	dc02      	bgt.n	800f144 <__sflush_r+0x20>
 800f13e:	2000      	movs	r0, #0
 800f140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f144:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f146:	2e00      	cmp	r6, #0
 800f148:	d0f9      	beq.n	800f13e <__sflush_r+0x1a>
 800f14a:	2300      	movs	r3, #0
 800f14c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f150:	682f      	ldr	r7, [r5, #0]
 800f152:	602b      	str	r3, [r5, #0]
 800f154:	d032      	beq.n	800f1bc <__sflush_r+0x98>
 800f156:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f158:	89a3      	ldrh	r3, [r4, #12]
 800f15a:	075a      	lsls	r2, r3, #29
 800f15c:	d505      	bpl.n	800f16a <__sflush_r+0x46>
 800f15e:	6863      	ldr	r3, [r4, #4]
 800f160:	1ac0      	subs	r0, r0, r3
 800f162:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f164:	b10b      	cbz	r3, 800f16a <__sflush_r+0x46>
 800f166:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f168:	1ac0      	subs	r0, r0, r3
 800f16a:	2300      	movs	r3, #0
 800f16c:	4602      	mov	r2, r0
 800f16e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f170:	4628      	mov	r0, r5
 800f172:	6a21      	ldr	r1, [r4, #32]
 800f174:	47b0      	blx	r6
 800f176:	1c43      	adds	r3, r0, #1
 800f178:	89a3      	ldrh	r3, [r4, #12]
 800f17a:	d106      	bne.n	800f18a <__sflush_r+0x66>
 800f17c:	6829      	ldr	r1, [r5, #0]
 800f17e:	291d      	cmp	r1, #29
 800f180:	d82c      	bhi.n	800f1dc <__sflush_r+0xb8>
 800f182:	4a2a      	ldr	r2, [pc, #168]	; (800f22c <__sflush_r+0x108>)
 800f184:	40ca      	lsrs	r2, r1
 800f186:	07d6      	lsls	r6, r2, #31
 800f188:	d528      	bpl.n	800f1dc <__sflush_r+0xb8>
 800f18a:	2200      	movs	r2, #0
 800f18c:	6062      	str	r2, [r4, #4]
 800f18e:	6922      	ldr	r2, [r4, #16]
 800f190:	04d9      	lsls	r1, r3, #19
 800f192:	6022      	str	r2, [r4, #0]
 800f194:	d504      	bpl.n	800f1a0 <__sflush_r+0x7c>
 800f196:	1c42      	adds	r2, r0, #1
 800f198:	d101      	bne.n	800f19e <__sflush_r+0x7a>
 800f19a:	682b      	ldr	r3, [r5, #0]
 800f19c:	b903      	cbnz	r3, 800f1a0 <__sflush_r+0x7c>
 800f19e:	6560      	str	r0, [r4, #84]	; 0x54
 800f1a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1a2:	602f      	str	r7, [r5, #0]
 800f1a4:	2900      	cmp	r1, #0
 800f1a6:	d0ca      	beq.n	800f13e <__sflush_r+0x1a>
 800f1a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1ac:	4299      	cmp	r1, r3
 800f1ae:	d002      	beq.n	800f1b6 <__sflush_r+0x92>
 800f1b0:	4628      	mov	r0, r5
 800f1b2:	f7ff fb43 	bl	800e83c <_free_r>
 800f1b6:	2000      	movs	r0, #0
 800f1b8:	6360      	str	r0, [r4, #52]	; 0x34
 800f1ba:	e7c1      	b.n	800f140 <__sflush_r+0x1c>
 800f1bc:	6a21      	ldr	r1, [r4, #32]
 800f1be:	2301      	movs	r3, #1
 800f1c0:	4628      	mov	r0, r5
 800f1c2:	47b0      	blx	r6
 800f1c4:	1c41      	adds	r1, r0, #1
 800f1c6:	d1c7      	bne.n	800f158 <__sflush_r+0x34>
 800f1c8:	682b      	ldr	r3, [r5, #0]
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d0c4      	beq.n	800f158 <__sflush_r+0x34>
 800f1ce:	2b1d      	cmp	r3, #29
 800f1d0:	d001      	beq.n	800f1d6 <__sflush_r+0xb2>
 800f1d2:	2b16      	cmp	r3, #22
 800f1d4:	d101      	bne.n	800f1da <__sflush_r+0xb6>
 800f1d6:	602f      	str	r7, [r5, #0]
 800f1d8:	e7b1      	b.n	800f13e <__sflush_r+0x1a>
 800f1da:	89a3      	ldrh	r3, [r4, #12]
 800f1dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1e0:	81a3      	strh	r3, [r4, #12]
 800f1e2:	e7ad      	b.n	800f140 <__sflush_r+0x1c>
 800f1e4:	690f      	ldr	r7, [r1, #16]
 800f1e6:	2f00      	cmp	r7, #0
 800f1e8:	d0a9      	beq.n	800f13e <__sflush_r+0x1a>
 800f1ea:	0793      	lsls	r3, r2, #30
 800f1ec:	bf18      	it	ne
 800f1ee:	2300      	movne	r3, #0
 800f1f0:	680e      	ldr	r6, [r1, #0]
 800f1f2:	bf08      	it	eq
 800f1f4:	694b      	ldreq	r3, [r1, #20]
 800f1f6:	eba6 0807 	sub.w	r8, r6, r7
 800f1fa:	600f      	str	r7, [r1, #0]
 800f1fc:	608b      	str	r3, [r1, #8]
 800f1fe:	f1b8 0f00 	cmp.w	r8, #0
 800f202:	dd9c      	ble.n	800f13e <__sflush_r+0x1a>
 800f204:	4643      	mov	r3, r8
 800f206:	463a      	mov	r2, r7
 800f208:	4628      	mov	r0, r5
 800f20a:	6a21      	ldr	r1, [r4, #32]
 800f20c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f20e:	47b0      	blx	r6
 800f210:	2800      	cmp	r0, #0
 800f212:	dc06      	bgt.n	800f222 <__sflush_r+0xfe>
 800f214:	89a3      	ldrh	r3, [r4, #12]
 800f216:	f04f 30ff 	mov.w	r0, #4294967295
 800f21a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f21e:	81a3      	strh	r3, [r4, #12]
 800f220:	e78e      	b.n	800f140 <__sflush_r+0x1c>
 800f222:	4407      	add	r7, r0
 800f224:	eba8 0800 	sub.w	r8, r8, r0
 800f228:	e7e9      	b.n	800f1fe <__sflush_r+0xda>
 800f22a:	bf00      	nop
 800f22c:	20400001 	.word	0x20400001

0800f230 <_fflush_r>:
 800f230:	b538      	push	{r3, r4, r5, lr}
 800f232:	690b      	ldr	r3, [r1, #16]
 800f234:	4605      	mov	r5, r0
 800f236:	460c      	mov	r4, r1
 800f238:	b913      	cbnz	r3, 800f240 <_fflush_r+0x10>
 800f23a:	2500      	movs	r5, #0
 800f23c:	4628      	mov	r0, r5
 800f23e:	bd38      	pop	{r3, r4, r5, pc}
 800f240:	b118      	cbz	r0, 800f24a <_fflush_r+0x1a>
 800f242:	6983      	ldr	r3, [r0, #24]
 800f244:	b90b      	cbnz	r3, 800f24a <_fflush_r+0x1a>
 800f246:	f000 f887 	bl	800f358 <__sinit>
 800f24a:	4b14      	ldr	r3, [pc, #80]	; (800f29c <_fflush_r+0x6c>)
 800f24c:	429c      	cmp	r4, r3
 800f24e:	d11b      	bne.n	800f288 <_fflush_r+0x58>
 800f250:	686c      	ldr	r4, [r5, #4]
 800f252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d0ef      	beq.n	800f23a <_fflush_r+0xa>
 800f25a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f25c:	07d0      	lsls	r0, r2, #31
 800f25e:	d404      	bmi.n	800f26a <_fflush_r+0x3a>
 800f260:	0599      	lsls	r1, r3, #22
 800f262:	d402      	bmi.n	800f26a <_fflush_r+0x3a>
 800f264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f266:	f000 f915 	bl	800f494 <__retarget_lock_acquire_recursive>
 800f26a:	4628      	mov	r0, r5
 800f26c:	4621      	mov	r1, r4
 800f26e:	f7ff ff59 	bl	800f124 <__sflush_r>
 800f272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f274:	4605      	mov	r5, r0
 800f276:	07da      	lsls	r2, r3, #31
 800f278:	d4e0      	bmi.n	800f23c <_fflush_r+0xc>
 800f27a:	89a3      	ldrh	r3, [r4, #12]
 800f27c:	059b      	lsls	r3, r3, #22
 800f27e:	d4dd      	bmi.n	800f23c <_fflush_r+0xc>
 800f280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f282:	f000 f908 	bl	800f496 <__retarget_lock_release_recursive>
 800f286:	e7d9      	b.n	800f23c <_fflush_r+0xc>
 800f288:	4b05      	ldr	r3, [pc, #20]	; (800f2a0 <_fflush_r+0x70>)
 800f28a:	429c      	cmp	r4, r3
 800f28c:	d101      	bne.n	800f292 <_fflush_r+0x62>
 800f28e:	68ac      	ldr	r4, [r5, #8]
 800f290:	e7df      	b.n	800f252 <_fflush_r+0x22>
 800f292:	4b04      	ldr	r3, [pc, #16]	; (800f2a4 <_fflush_r+0x74>)
 800f294:	429c      	cmp	r4, r3
 800f296:	bf08      	it	eq
 800f298:	68ec      	ldreq	r4, [r5, #12]
 800f29a:	e7da      	b.n	800f252 <_fflush_r+0x22>
 800f29c:	08010fe8 	.word	0x08010fe8
 800f2a0:	08011008 	.word	0x08011008
 800f2a4:	08010fc8 	.word	0x08010fc8

0800f2a8 <std>:
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	b510      	push	{r4, lr}
 800f2ac:	4604      	mov	r4, r0
 800f2ae:	e9c0 3300 	strd	r3, r3, [r0]
 800f2b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f2b6:	6083      	str	r3, [r0, #8]
 800f2b8:	8181      	strh	r1, [r0, #12]
 800f2ba:	6643      	str	r3, [r0, #100]	; 0x64
 800f2bc:	81c2      	strh	r2, [r0, #14]
 800f2be:	6183      	str	r3, [r0, #24]
 800f2c0:	4619      	mov	r1, r3
 800f2c2:	2208      	movs	r2, #8
 800f2c4:	305c      	adds	r0, #92	; 0x5c
 800f2c6:	f7ff f98f 	bl	800e5e8 <memset>
 800f2ca:	4b05      	ldr	r3, [pc, #20]	; (800f2e0 <std+0x38>)
 800f2cc:	6224      	str	r4, [r4, #32]
 800f2ce:	6263      	str	r3, [r4, #36]	; 0x24
 800f2d0:	4b04      	ldr	r3, [pc, #16]	; (800f2e4 <std+0x3c>)
 800f2d2:	62a3      	str	r3, [r4, #40]	; 0x28
 800f2d4:	4b04      	ldr	r3, [pc, #16]	; (800f2e8 <std+0x40>)
 800f2d6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f2d8:	4b04      	ldr	r3, [pc, #16]	; (800f2ec <std+0x44>)
 800f2da:	6323      	str	r3, [r4, #48]	; 0x30
 800f2dc:	bd10      	pop	{r4, pc}
 800f2de:	bf00      	nop
 800f2e0:	0800f61d 	.word	0x0800f61d
 800f2e4:	0800f63f 	.word	0x0800f63f
 800f2e8:	0800f677 	.word	0x0800f677
 800f2ec:	0800f69b 	.word	0x0800f69b

0800f2f0 <_cleanup_r>:
 800f2f0:	4901      	ldr	r1, [pc, #4]	; (800f2f8 <_cleanup_r+0x8>)
 800f2f2:	f000 b8af 	b.w	800f454 <_fwalk_reent>
 800f2f6:	bf00      	nop
 800f2f8:	0800f231 	.word	0x0800f231

0800f2fc <__sfmoreglue>:
 800f2fc:	b570      	push	{r4, r5, r6, lr}
 800f2fe:	2568      	movs	r5, #104	; 0x68
 800f300:	1e4a      	subs	r2, r1, #1
 800f302:	4355      	muls	r5, r2
 800f304:	460e      	mov	r6, r1
 800f306:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f30a:	f7ff fae3 	bl	800e8d4 <_malloc_r>
 800f30e:	4604      	mov	r4, r0
 800f310:	b140      	cbz	r0, 800f324 <__sfmoreglue+0x28>
 800f312:	2100      	movs	r1, #0
 800f314:	e9c0 1600 	strd	r1, r6, [r0]
 800f318:	300c      	adds	r0, #12
 800f31a:	60a0      	str	r0, [r4, #8]
 800f31c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f320:	f7ff f962 	bl	800e5e8 <memset>
 800f324:	4620      	mov	r0, r4
 800f326:	bd70      	pop	{r4, r5, r6, pc}

0800f328 <__sfp_lock_acquire>:
 800f328:	4801      	ldr	r0, [pc, #4]	; (800f330 <__sfp_lock_acquire+0x8>)
 800f32a:	f000 b8b3 	b.w	800f494 <__retarget_lock_acquire_recursive>
 800f32e:	bf00      	nop
 800f330:	20004518 	.word	0x20004518

0800f334 <__sfp_lock_release>:
 800f334:	4801      	ldr	r0, [pc, #4]	; (800f33c <__sfp_lock_release+0x8>)
 800f336:	f000 b8ae 	b.w	800f496 <__retarget_lock_release_recursive>
 800f33a:	bf00      	nop
 800f33c:	20004518 	.word	0x20004518

0800f340 <__sinit_lock_acquire>:
 800f340:	4801      	ldr	r0, [pc, #4]	; (800f348 <__sinit_lock_acquire+0x8>)
 800f342:	f000 b8a7 	b.w	800f494 <__retarget_lock_acquire_recursive>
 800f346:	bf00      	nop
 800f348:	20004513 	.word	0x20004513

0800f34c <__sinit_lock_release>:
 800f34c:	4801      	ldr	r0, [pc, #4]	; (800f354 <__sinit_lock_release+0x8>)
 800f34e:	f000 b8a2 	b.w	800f496 <__retarget_lock_release_recursive>
 800f352:	bf00      	nop
 800f354:	20004513 	.word	0x20004513

0800f358 <__sinit>:
 800f358:	b510      	push	{r4, lr}
 800f35a:	4604      	mov	r4, r0
 800f35c:	f7ff fff0 	bl	800f340 <__sinit_lock_acquire>
 800f360:	69a3      	ldr	r3, [r4, #24]
 800f362:	b11b      	cbz	r3, 800f36c <__sinit+0x14>
 800f364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f368:	f7ff bff0 	b.w	800f34c <__sinit_lock_release>
 800f36c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f370:	6523      	str	r3, [r4, #80]	; 0x50
 800f372:	4b13      	ldr	r3, [pc, #76]	; (800f3c0 <__sinit+0x68>)
 800f374:	4a13      	ldr	r2, [pc, #76]	; (800f3c4 <__sinit+0x6c>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	62a2      	str	r2, [r4, #40]	; 0x28
 800f37a:	42a3      	cmp	r3, r4
 800f37c:	bf08      	it	eq
 800f37e:	2301      	moveq	r3, #1
 800f380:	4620      	mov	r0, r4
 800f382:	bf08      	it	eq
 800f384:	61a3      	streq	r3, [r4, #24]
 800f386:	f000 f81f 	bl	800f3c8 <__sfp>
 800f38a:	6060      	str	r0, [r4, #4]
 800f38c:	4620      	mov	r0, r4
 800f38e:	f000 f81b 	bl	800f3c8 <__sfp>
 800f392:	60a0      	str	r0, [r4, #8]
 800f394:	4620      	mov	r0, r4
 800f396:	f000 f817 	bl	800f3c8 <__sfp>
 800f39a:	2200      	movs	r2, #0
 800f39c:	2104      	movs	r1, #4
 800f39e:	60e0      	str	r0, [r4, #12]
 800f3a0:	6860      	ldr	r0, [r4, #4]
 800f3a2:	f7ff ff81 	bl	800f2a8 <std>
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	2109      	movs	r1, #9
 800f3aa:	68a0      	ldr	r0, [r4, #8]
 800f3ac:	f7ff ff7c 	bl	800f2a8 <std>
 800f3b0:	2202      	movs	r2, #2
 800f3b2:	2112      	movs	r1, #18
 800f3b4:	68e0      	ldr	r0, [r4, #12]
 800f3b6:	f7ff ff77 	bl	800f2a8 <std>
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	61a3      	str	r3, [r4, #24]
 800f3be:	e7d1      	b.n	800f364 <__sinit+0xc>
 800f3c0:	08010edc 	.word	0x08010edc
 800f3c4:	0800f2f1 	.word	0x0800f2f1

0800f3c8 <__sfp>:
 800f3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3ca:	4607      	mov	r7, r0
 800f3cc:	f7ff ffac 	bl	800f328 <__sfp_lock_acquire>
 800f3d0:	4b1e      	ldr	r3, [pc, #120]	; (800f44c <__sfp+0x84>)
 800f3d2:	681e      	ldr	r6, [r3, #0]
 800f3d4:	69b3      	ldr	r3, [r6, #24]
 800f3d6:	b913      	cbnz	r3, 800f3de <__sfp+0x16>
 800f3d8:	4630      	mov	r0, r6
 800f3da:	f7ff ffbd 	bl	800f358 <__sinit>
 800f3de:	3648      	adds	r6, #72	; 0x48
 800f3e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f3e4:	3b01      	subs	r3, #1
 800f3e6:	d503      	bpl.n	800f3f0 <__sfp+0x28>
 800f3e8:	6833      	ldr	r3, [r6, #0]
 800f3ea:	b30b      	cbz	r3, 800f430 <__sfp+0x68>
 800f3ec:	6836      	ldr	r6, [r6, #0]
 800f3ee:	e7f7      	b.n	800f3e0 <__sfp+0x18>
 800f3f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f3f4:	b9d5      	cbnz	r5, 800f42c <__sfp+0x64>
 800f3f6:	4b16      	ldr	r3, [pc, #88]	; (800f450 <__sfp+0x88>)
 800f3f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f3fc:	60e3      	str	r3, [r4, #12]
 800f3fe:	6665      	str	r5, [r4, #100]	; 0x64
 800f400:	f000 f847 	bl	800f492 <__retarget_lock_init_recursive>
 800f404:	f7ff ff96 	bl	800f334 <__sfp_lock_release>
 800f408:	2208      	movs	r2, #8
 800f40a:	4629      	mov	r1, r5
 800f40c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f410:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f414:	6025      	str	r5, [r4, #0]
 800f416:	61a5      	str	r5, [r4, #24]
 800f418:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f41c:	f7ff f8e4 	bl	800e5e8 <memset>
 800f420:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f424:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f428:	4620      	mov	r0, r4
 800f42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f42c:	3468      	adds	r4, #104	; 0x68
 800f42e:	e7d9      	b.n	800f3e4 <__sfp+0x1c>
 800f430:	2104      	movs	r1, #4
 800f432:	4638      	mov	r0, r7
 800f434:	f7ff ff62 	bl	800f2fc <__sfmoreglue>
 800f438:	4604      	mov	r4, r0
 800f43a:	6030      	str	r0, [r6, #0]
 800f43c:	2800      	cmp	r0, #0
 800f43e:	d1d5      	bne.n	800f3ec <__sfp+0x24>
 800f440:	f7ff ff78 	bl	800f334 <__sfp_lock_release>
 800f444:	230c      	movs	r3, #12
 800f446:	603b      	str	r3, [r7, #0]
 800f448:	e7ee      	b.n	800f428 <__sfp+0x60>
 800f44a:	bf00      	nop
 800f44c:	08010edc 	.word	0x08010edc
 800f450:	ffff0001 	.word	0xffff0001

0800f454 <_fwalk_reent>:
 800f454:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f458:	4606      	mov	r6, r0
 800f45a:	4688      	mov	r8, r1
 800f45c:	2700      	movs	r7, #0
 800f45e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f462:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f466:	f1b9 0901 	subs.w	r9, r9, #1
 800f46a:	d505      	bpl.n	800f478 <_fwalk_reent+0x24>
 800f46c:	6824      	ldr	r4, [r4, #0]
 800f46e:	2c00      	cmp	r4, #0
 800f470:	d1f7      	bne.n	800f462 <_fwalk_reent+0xe>
 800f472:	4638      	mov	r0, r7
 800f474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f478:	89ab      	ldrh	r3, [r5, #12]
 800f47a:	2b01      	cmp	r3, #1
 800f47c:	d907      	bls.n	800f48e <_fwalk_reent+0x3a>
 800f47e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f482:	3301      	adds	r3, #1
 800f484:	d003      	beq.n	800f48e <_fwalk_reent+0x3a>
 800f486:	4629      	mov	r1, r5
 800f488:	4630      	mov	r0, r6
 800f48a:	47c0      	blx	r8
 800f48c:	4307      	orrs	r7, r0
 800f48e:	3568      	adds	r5, #104	; 0x68
 800f490:	e7e9      	b.n	800f466 <_fwalk_reent+0x12>

0800f492 <__retarget_lock_init_recursive>:
 800f492:	4770      	bx	lr

0800f494 <__retarget_lock_acquire_recursive>:
 800f494:	4770      	bx	lr

0800f496 <__retarget_lock_release_recursive>:
 800f496:	4770      	bx	lr

0800f498 <__swhatbuf_r>:
 800f498:	b570      	push	{r4, r5, r6, lr}
 800f49a:	460e      	mov	r6, r1
 800f49c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4a0:	4614      	mov	r4, r2
 800f4a2:	2900      	cmp	r1, #0
 800f4a4:	461d      	mov	r5, r3
 800f4a6:	b096      	sub	sp, #88	; 0x58
 800f4a8:	da07      	bge.n	800f4ba <__swhatbuf_r+0x22>
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	602b      	str	r3, [r5, #0]
 800f4ae:	89b3      	ldrh	r3, [r6, #12]
 800f4b0:	061a      	lsls	r2, r3, #24
 800f4b2:	d410      	bmi.n	800f4d6 <__swhatbuf_r+0x3e>
 800f4b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4b8:	e00e      	b.n	800f4d8 <__swhatbuf_r+0x40>
 800f4ba:	466a      	mov	r2, sp
 800f4bc:	f000 f914 	bl	800f6e8 <_fstat_r>
 800f4c0:	2800      	cmp	r0, #0
 800f4c2:	dbf2      	blt.n	800f4aa <__swhatbuf_r+0x12>
 800f4c4:	9a01      	ldr	r2, [sp, #4]
 800f4c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f4ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f4ce:	425a      	negs	r2, r3
 800f4d0:	415a      	adcs	r2, r3
 800f4d2:	602a      	str	r2, [r5, #0]
 800f4d4:	e7ee      	b.n	800f4b4 <__swhatbuf_r+0x1c>
 800f4d6:	2340      	movs	r3, #64	; 0x40
 800f4d8:	2000      	movs	r0, #0
 800f4da:	6023      	str	r3, [r4, #0]
 800f4dc:	b016      	add	sp, #88	; 0x58
 800f4de:	bd70      	pop	{r4, r5, r6, pc}

0800f4e0 <__smakebuf_r>:
 800f4e0:	898b      	ldrh	r3, [r1, #12]
 800f4e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f4e4:	079d      	lsls	r5, r3, #30
 800f4e6:	4606      	mov	r6, r0
 800f4e8:	460c      	mov	r4, r1
 800f4ea:	d507      	bpl.n	800f4fc <__smakebuf_r+0x1c>
 800f4ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f4f0:	6023      	str	r3, [r4, #0]
 800f4f2:	6123      	str	r3, [r4, #16]
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	6163      	str	r3, [r4, #20]
 800f4f8:	b002      	add	sp, #8
 800f4fa:	bd70      	pop	{r4, r5, r6, pc}
 800f4fc:	466a      	mov	r2, sp
 800f4fe:	ab01      	add	r3, sp, #4
 800f500:	f7ff ffca 	bl	800f498 <__swhatbuf_r>
 800f504:	9900      	ldr	r1, [sp, #0]
 800f506:	4605      	mov	r5, r0
 800f508:	4630      	mov	r0, r6
 800f50a:	f7ff f9e3 	bl	800e8d4 <_malloc_r>
 800f50e:	b948      	cbnz	r0, 800f524 <__smakebuf_r+0x44>
 800f510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f514:	059a      	lsls	r2, r3, #22
 800f516:	d4ef      	bmi.n	800f4f8 <__smakebuf_r+0x18>
 800f518:	f023 0303 	bic.w	r3, r3, #3
 800f51c:	f043 0302 	orr.w	r3, r3, #2
 800f520:	81a3      	strh	r3, [r4, #12]
 800f522:	e7e3      	b.n	800f4ec <__smakebuf_r+0xc>
 800f524:	4b0d      	ldr	r3, [pc, #52]	; (800f55c <__smakebuf_r+0x7c>)
 800f526:	62b3      	str	r3, [r6, #40]	; 0x28
 800f528:	89a3      	ldrh	r3, [r4, #12]
 800f52a:	6020      	str	r0, [r4, #0]
 800f52c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f530:	81a3      	strh	r3, [r4, #12]
 800f532:	9b00      	ldr	r3, [sp, #0]
 800f534:	6120      	str	r0, [r4, #16]
 800f536:	6163      	str	r3, [r4, #20]
 800f538:	9b01      	ldr	r3, [sp, #4]
 800f53a:	b15b      	cbz	r3, 800f554 <__smakebuf_r+0x74>
 800f53c:	4630      	mov	r0, r6
 800f53e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f542:	f000 f8e3 	bl	800f70c <_isatty_r>
 800f546:	b128      	cbz	r0, 800f554 <__smakebuf_r+0x74>
 800f548:	89a3      	ldrh	r3, [r4, #12]
 800f54a:	f023 0303 	bic.w	r3, r3, #3
 800f54e:	f043 0301 	orr.w	r3, r3, #1
 800f552:	81a3      	strh	r3, [r4, #12]
 800f554:	89a0      	ldrh	r0, [r4, #12]
 800f556:	4305      	orrs	r5, r0
 800f558:	81a5      	strh	r5, [r4, #12]
 800f55a:	e7cd      	b.n	800f4f8 <__smakebuf_r+0x18>
 800f55c:	0800f2f1 	.word	0x0800f2f1

0800f560 <memchr>:
 800f560:	4603      	mov	r3, r0
 800f562:	b510      	push	{r4, lr}
 800f564:	b2c9      	uxtb	r1, r1
 800f566:	4402      	add	r2, r0
 800f568:	4293      	cmp	r3, r2
 800f56a:	4618      	mov	r0, r3
 800f56c:	d101      	bne.n	800f572 <memchr+0x12>
 800f56e:	2000      	movs	r0, #0
 800f570:	e003      	b.n	800f57a <memchr+0x1a>
 800f572:	7804      	ldrb	r4, [r0, #0]
 800f574:	3301      	adds	r3, #1
 800f576:	428c      	cmp	r4, r1
 800f578:	d1f6      	bne.n	800f568 <memchr+0x8>
 800f57a:	bd10      	pop	{r4, pc}

0800f57c <__malloc_lock>:
 800f57c:	4801      	ldr	r0, [pc, #4]	; (800f584 <__malloc_lock+0x8>)
 800f57e:	f7ff bf89 	b.w	800f494 <__retarget_lock_acquire_recursive>
 800f582:	bf00      	nop
 800f584:	20004514 	.word	0x20004514

0800f588 <__malloc_unlock>:
 800f588:	4801      	ldr	r0, [pc, #4]	; (800f590 <__malloc_unlock+0x8>)
 800f58a:	f7ff bf84 	b.w	800f496 <__retarget_lock_release_recursive>
 800f58e:	bf00      	nop
 800f590:	20004514 	.word	0x20004514

0800f594 <_raise_r>:
 800f594:	291f      	cmp	r1, #31
 800f596:	b538      	push	{r3, r4, r5, lr}
 800f598:	4604      	mov	r4, r0
 800f59a:	460d      	mov	r5, r1
 800f59c:	d904      	bls.n	800f5a8 <_raise_r+0x14>
 800f59e:	2316      	movs	r3, #22
 800f5a0:	6003      	str	r3, [r0, #0]
 800f5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800f5a6:	bd38      	pop	{r3, r4, r5, pc}
 800f5a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f5aa:	b112      	cbz	r2, 800f5b2 <_raise_r+0x1e>
 800f5ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f5b0:	b94b      	cbnz	r3, 800f5c6 <_raise_r+0x32>
 800f5b2:	4620      	mov	r0, r4
 800f5b4:	f000 f830 	bl	800f618 <_getpid_r>
 800f5b8:	462a      	mov	r2, r5
 800f5ba:	4601      	mov	r1, r0
 800f5bc:	4620      	mov	r0, r4
 800f5be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5c2:	f000 b817 	b.w	800f5f4 <_kill_r>
 800f5c6:	2b01      	cmp	r3, #1
 800f5c8:	d00a      	beq.n	800f5e0 <_raise_r+0x4c>
 800f5ca:	1c59      	adds	r1, r3, #1
 800f5cc:	d103      	bne.n	800f5d6 <_raise_r+0x42>
 800f5ce:	2316      	movs	r3, #22
 800f5d0:	6003      	str	r3, [r0, #0]
 800f5d2:	2001      	movs	r0, #1
 800f5d4:	e7e7      	b.n	800f5a6 <_raise_r+0x12>
 800f5d6:	2400      	movs	r4, #0
 800f5d8:	4628      	mov	r0, r5
 800f5da:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f5de:	4798      	blx	r3
 800f5e0:	2000      	movs	r0, #0
 800f5e2:	e7e0      	b.n	800f5a6 <_raise_r+0x12>

0800f5e4 <raise>:
 800f5e4:	4b02      	ldr	r3, [pc, #8]	; (800f5f0 <raise+0xc>)
 800f5e6:	4601      	mov	r1, r0
 800f5e8:	6818      	ldr	r0, [r3, #0]
 800f5ea:	f7ff bfd3 	b.w	800f594 <_raise_r>
 800f5ee:	bf00      	nop
 800f5f0:	2000049c 	.word	0x2000049c

0800f5f4 <_kill_r>:
 800f5f4:	b538      	push	{r3, r4, r5, lr}
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	4d06      	ldr	r5, [pc, #24]	; (800f614 <_kill_r+0x20>)
 800f5fa:	4604      	mov	r4, r0
 800f5fc:	4608      	mov	r0, r1
 800f5fe:	4611      	mov	r1, r2
 800f600:	602b      	str	r3, [r5, #0]
 800f602:	f7fa f979 	bl	80098f8 <_kill>
 800f606:	1c43      	adds	r3, r0, #1
 800f608:	d102      	bne.n	800f610 <_kill_r+0x1c>
 800f60a:	682b      	ldr	r3, [r5, #0]
 800f60c:	b103      	cbz	r3, 800f610 <_kill_r+0x1c>
 800f60e:	6023      	str	r3, [r4, #0]
 800f610:	bd38      	pop	{r3, r4, r5, pc}
 800f612:	bf00      	nop
 800f614:	2000451c 	.word	0x2000451c

0800f618 <_getpid_r>:
 800f618:	f7fa b96c 	b.w	80098f4 <_getpid>

0800f61c <__sread>:
 800f61c:	b510      	push	{r4, lr}
 800f61e:	460c      	mov	r4, r1
 800f620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f624:	f000 f894 	bl	800f750 <_read_r>
 800f628:	2800      	cmp	r0, #0
 800f62a:	bfab      	itete	ge
 800f62c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f62e:	89a3      	ldrhlt	r3, [r4, #12]
 800f630:	181b      	addge	r3, r3, r0
 800f632:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f636:	bfac      	ite	ge
 800f638:	6563      	strge	r3, [r4, #84]	; 0x54
 800f63a:	81a3      	strhlt	r3, [r4, #12]
 800f63c:	bd10      	pop	{r4, pc}

0800f63e <__swrite>:
 800f63e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f642:	461f      	mov	r7, r3
 800f644:	898b      	ldrh	r3, [r1, #12]
 800f646:	4605      	mov	r5, r0
 800f648:	05db      	lsls	r3, r3, #23
 800f64a:	460c      	mov	r4, r1
 800f64c:	4616      	mov	r6, r2
 800f64e:	d505      	bpl.n	800f65c <__swrite+0x1e>
 800f650:	2302      	movs	r3, #2
 800f652:	2200      	movs	r2, #0
 800f654:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f658:	f000 f868 	bl	800f72c <_lseek_r>
 800f65c:	89a3      	ldrh	r3, [r4, #12]
 800f65e:	4632      	mov	r2, r6
 800f660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f664:	81a3      	strh	r3, [r4, #12]
 800f666:	4628      	mov	r0, r5
 800f668:	463b      	mov	r3, r7
 800f66a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f66e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f672:	f000 b817 	b.w	800f6a4 <_write_r>

0800f676 <__sseek>:
 800f676:	b510      	push	{r4, lr}
 800f678:	460c      	mov	r4, r1
 800f67a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f67e:	f000 f855 	bl	800f72c <_lseek_r>
 800f682:	1c43      	adds	r3, r0, #1
 800f684:	89a3      	ldrh	r3, [r4, #12]
 800f686:	bf15      	itete	ne
 800f688:	6560      	strne	r0, [r4, #84]	; 0x54
 800f68a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f68e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f692:	81a3      	strheq	r3, [r4, #12]
 800f694:	bf18      	it	ne
 800f696:	81a3      	strhne	r3, [r4, #12]
 800f698:	bd10      	pop	{r4, pc}

0800f69a <__sclose>:
 800f69a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f69e:	f000 b813 	b.w	800f6c8 <_close_r>
	...

0800f6a4 <_write_r>:
 800f6a4:	b538      	push	{r3, r4, r5, lr}
 800f6a6:	4604      	mov	r4, r0
 800f6a8:	4608      	mov	r0, r1
 800f6aa:	4611      	mov	r1, r2
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	4d05      	ldr	r5, [pc, #20]	; (800f6c4 <_write_r+0x20>)
 800f6b0:	602a      	str	r2, [r5, #0]
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	f7fa f938 	bl	8009928 <_write>
 800f6b8:	1c43      	adds	r3, r0, #1
 800f6ba:	d102      	bne.n	800f6c2 <_write_r+0x1e>
 800f6bc:	682b      	ldr	r3, [r5, #0]
 800f6be:	b103      	cbz	r3, 800f6c2 <_write_r+0x1e>
 800f6c0:	6023      	str	r3, [r4, #0]
 800f6c2:	bd38      	pop	{r3, r4, r5, pc}
 800f6c4:	2000451c 	.word	0x2000451c

0800f6c8 <_close_r>:
 800f6c8:	b538      	push	{r3, r4, r5, lr}
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	4d05      	ldr	r5, [pc, #20]	; (800f6e4 <_close_r+0x1c>)
 800f6ce:	4604      	mov	r4, r0
 800f6d0:	4608      	mov	r0, r1
 800f6d2:	602b      	str	r3, [r5, #0]
 800f6d4:	f7fa f936 	bl	8009944 <_close>
 800f6d8:	1c43      	adds	r3, r0, #1
 800f6da:	d102      	bne.n	800f6e2 <_close_r+0x1a>
 800f6dc:	682b      	ldr	r3, [r5, #0]
 800f6de:	b103      	cbz	r3, 800f6e2 <_close_r+0x1a>
 800f6e0:	6023      	str	r3, [r4, #0]
 800f6e2:	bd38      	pop	{r3, r4, r5, pc}
 800f6e4:	2000451c 	.word	0x2000451c

0800f6e8 <_fstat_r>:
 800f6e8:	b538      	push	{r3, r4, r5, lr}
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	4d06      	ldr	r5, [pc, #24]	; (800f708 <_fstat_r+0x20>)
 800f6ee:	4604      	mov	r4, r0
 800f6f0:	4608      	mov	r0, r1
 800f6f2:	4611      	mov	r1, r2
 800f6f4:	602b      	str	r3, [r5, #0]
 800f6f6:	f7fa f929 	bl	800994c <_fstat>
 800f6fa:	1c43      	adds	r3, r0, #1
 800f6fc:	d102      	bne.n	800f704 <_fstat_r+0x1c>
 800f6fe:	682b      	ldr	r3, [r5, #0]
 800f700:	b103      	cbz	r3, 800f704 <_fstat_r+0x1c>
 800f702:	6023      	str	r3, [r4, #0]
 800f704:	bd38      	pop	{r3, r4, r5, pc}
 800f706:	bf00      	nop
 800f708:	2000451c 	.word	0x2000451c

0800f70c <_isatty_r>:
 800f70c:	b538      	push	{r3, r4, r5, lr}
 800f70e:	2300      	movs	r3, #0
 800f710:	4d05      	ldr	r5, [pc, #20]	; (800f728 <_isatty_r+0x1c>)
 800f712:	4604      	mov	r4, r0
 800f714:	4608      	mov	r0, r1
 800f716:	602b      	str	r3, [r5, #0]
 800f718:	f7fa f91e 	bl	8009958 <_isatty>
 800f71c:	1c43      	adds	r3, r0, #1
 800f71e:	d102      	bne.n	800f726 <_isatty_r+0x1a>
 800f720:	682b      	ldr	r3, [r5, #0]
 800f722:	b103      	cbz	r3, 800f726 <_isatty_r+0x1a>
 800f724:	6023      	str	r3, [r4, #0]
 800f726:	bd38      	pop	{r3, r4, r5, pc}
 800f728:	2000451c 	.word	0x2000451c

0800f72c <_lseek_r>:
 800f72c:	b538      	push	{r3, r4, r5, lr}
 800f72e:	4604      	mov	r4, r0
 800f730:	4608      	mov	r0, r1
 800f732:	4611      	mov	r1, r2
 800f734:	2200      	movs	r2, #0
 800f736:	4d05      	ldr	r5, [pc, #20]	; (800f74c <_lseek_r+0x20>)
 800f738:	602a      	str	r2, [r5, #0]
 800f73a:	461a      	mov	r2, r3
 800f73c:	f7fa f90e 	bl	800995c <_lseek>
 800f740:	1c43      	adds	r3, r0, #1
 800f742:	d102      	bne.n	800f74a <_lseek_r+0x1e>
 800f744:	682b      	ldr	r3, [r5, #0]
 800f746:	b103      	cbz	r3, 800f74a <_lseek_r+0x1e>
 800f748:	6023      	str	r3, [r4, #0]
 800f74a:	bd38      	pop	{r3, r4, r5, pc}
 800f74c:	2000451c 	.word	0x2000451c

0800f750 <_read_r>:
 800f750:	b538      	push	{r3, r4, r5, lr}
 800f752:	4604      	mov	r4, r0
 800f754:	4608      	mov	r0, r1
 800f756:	4611      	mov	r1, r2
 800f758:	2200      	movs	r2, #0
 800f75a:	4d05      	ldr	r5, [pc, #20]	; (800f770 <_read_r+0x20>)
 800f75c:	602a      	str	r2, [r5, #0]
 800f75e:	461a      	mov	r2, r3
 800f760:	f7fa f8d4 	bl	800990c <_read>
 800f764:	1c43      	adds	r3, r0, #1
 800f766:	d102      	bne.n	800f76e <_read_r+0x1e>
 800f768:	682b      	ldr	r3, [r5, #0]
 800f76a:	b103      	cbz	r3, 800f76e <_read_r+0x1e>
 800f76c:	6023      	str	r3, [r4, #0]
 800f76e:	bd38      	pop	{r3, r4, r5, pc}
 800f770:	2000451c 	.word	0x2000451c

0800f774 <cosf>:
 800f774:	b507      	push	{r0, r1, r2, lr}
 800f776:	4a18      	ldr	r2, [pc, #96]	; (800f7d8 <cosf+0x64>)
 800f778:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f77c:	4293      	cmp	r3, r2
 800f77e:	4601      	mov	r1, r0
 800f780:	dc03      	bgt.n	800f78a <cosf+0x16>
 800f782:	2100      	movs	r1, #0
 800f784:	f000 fb62 	bl	800fe4c <__kernel_cosf>
 800f788:	e004      	b.n	800f794 <cosf+0x20>
 800f78a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f78e:	db04      	blt.n	800f79a <cosf+0x26>
 800f790:	f7f1 f9da 	bl	8000b48 <__aeabi_fsub>
 800f794:	b003      	add	sp, #12
 800f796:	f85d fb04 	ldr.w	pc, [sp], #4
 800f79a:	4669      	mov	r1, sp
 800f79c:	f000 f9a6 	bl	800faec <__ieee754_rem_pio2f>
 800f7a0:	f000 0203 	and.w	r2, r0, #3
 800f7a4:	2a01      	cmp	r2, #1
 800f7a6:	d005      	beq.n	800f7b4 <cosf+0x40>
 800f7a8:	2a02      	cmp	r2, #2
 800f7aa:	d00a      	beq.n	800f7c2 <cosf+0x4e>
 800f7ac:	b972      	cbnz	r2, 800f7cc <cosf+0x58>
 800f7ae:	9901      	ldr	r1, [sp, #4]
 800f7b0:	9800      	ldr	r0, [sp, #0]
 800f7b2:	e7e7      	b.n	800f784 <cosf+0x10>
 800f7b4:	9901      	ldr	r1, [sp, #4]
 800f7b6:	9800      	ldr	r0, [sp, #0]
 800f7b8:	f000 fe7e 	bl	80104b8 <__kernel_sinf>
 800f7bc:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f7c0:	e7e8      	b.n	800f794 <cosf+0x20>
 800f7c2:	9901      	ldr	r1, [sp, #4]
 800f7c4:	9800      	ldr	r0, [sp, #0]
 800f7c6:	f000 fb41 	bl	800fe4c <__kernel_cosf>
 800f7ca:	e7f7      	b.n	800f7bc <cosf+0x48>
 800f7cc:	2201      	movs	r2, #1
 800f7ce:	9901      	ldr	r1, [sp, #4]
 800f7d0:	9800      	ldr	r0, [sp, #0]
 800f7d2:	f000 fe71 	bl	80104b8 <__kernel_sinf>
 800f7d6:	e7dd      	b.n	800f794 <cosf+0x20>
 800f7d8:	3f490fd8 	.word	0x3f490fd8

0800f7dc <sinf>:
 800f7dc:	b507      	push	{r0, r1, r2, lr}
 800f7de:	4a19      	ldr	r2, [pc, #100]	; (800f844 <sinf+0x68>)
 800f7e0:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800f7e4:	4293      	cmp	r3, r2
 800f7e6:	4601      	mov	r1, r0
 800f7e8:	dc04      	bgt.n	800f7f4 <sinf+0x18>
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	2100      	movs	r1, #0
 800f7ee:	f000 fe63 	bl	80104b8 <__kernel_sinf>
 800f7f2:	e004      	b.n	800f7fe <sinf+0x22>
 800f7f4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f7f8:	db04      	blt.n	800f804 <sinf+0x28>
 800f7fa:	f7f1 f9a5 	bl	8000b48 <__aeabi_fsub>
 800f7fe:	b003      	add	sp, #12
 800f800:	f85d fb04 	ldr.w	pc, [sp], #4
 800f804:	4669      	mov	r1, sp
 800f806:	f000 f971 	bl	800faec <__ieee754_rem_pio2f>
 800f80a:	f000 0003 	and.w	r0, r0, #3
 800f80e:	2801      	cmp	r0, #1
 800f810:	d006      	beq.n	800f820 <sinf+0x44>
 800f812:	2802      	cmp	r0, #2
 800f814:	d009      	beq.n	800f82a <sinf+0x4e>
 800f816:	b980      	cbnz	r0, 800f83a <sinf+0x5e>
 800f818:	2201      	movs	r2, #1
 800f81a:	9901      	ldr	r1, [sp, #4]
 800f81c:	9800      	ldr	r0, [sp, #0]
 800f81e:	e7e6      	b.n	800f7ee <sinf+0x12>
 800f820:	9901      	ldr	r1, [sp, #4]
 800f822:	9800      	ldr	r0, [sp, #0]
 800f824:	f000 fb12 	bl	800fe4c <__kernel_cosf>
 800f828:	e7e9      	b.n	800f7fe <sinf+0x22>
 800f82a:	2201      	movs	r2, #1
 800f82c:	9901      	ldr	r1, [sp, #4]
 800f82e:	9800      	ldr	r0, [sp, #0]
 800f830:	f000 fe42 	bl	80104b8 <__kernel_sinf>
 800f834:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800f838:	e7e1      	b.n	800f7fe <sinf+0x22>
 800f83a:	9901      	ldr	r1, [sp, #4]
 800f83c:	9800      	ldr	r0, [sp, #0]
 800f83e:	f000 fb05 	bl	800fe4c <__kernel_cosf>
 800f842:	e7f7      	b.n	800f834 <sinf+0x58>
 800f844:	3f490fd8 	.word	0x3f490fd8

0800f848 <atan2f>:
 800f848:	f000 b84a 	b.w	800f8e0 <__ieee754_atan2f>

0800f84c <fmodf>:
 800f84c:	b570      	push	{r4, r5, r6, lr}
 800f84e:	4606      	mov	r6, r0
 800f850:	460d      	mov	r5, r1
 800f852:	f000 f8cb 	bl	800f9ec <__ieee754_fmodf>
 800f856:	4b10      	ldr	r3, [pc, #64]	; (800f898 <fmodf+0x4c>)
 800f858:	4604      	mov	r4, r0
 800f85a:	f993 3000 	ldrsb.w	r3, [r3]
 800f85e:	3301      	adds	r3, #1
 800f860:	d017      	beq.n	800f892 <fmodf+0x46>
 800f862:	4629      	mov	r1, r5
 800f864:	4628      	mov	r0, r5
 800f866:	f7f1 fc3f 	bl	80010e8 <__aeabi_fcmpun>
 800f86a:	b990      	cbnz	r0, 800f892 <fmodf+0x46>
 800f86c:	4631      	mov	r1, r6
 800f86e:	4630      	mov	r0, r6
 800f870:	f7f1 fc3a 	bl	80010e8 <__aeabi_fcmpun>
 800f874:	b968      	cbnz	r0, 800f892 <fmodf+0x46>
 800f876:	2100      	movs	r1, #0
 800f878:	4628      	mov	r0, r5
 800f87a:	f7f1 fc03 	bl	8001084 <__aeabi_fcmpeq>
 800f87e:	b140      	cbz	r0, 800f892 <fmodf+0x46>
 800f880:	f7fe fe60 	bl	800e544 <__errno>
 800f884:	2321      	movs	r3, #33	; 0x21
 800f886:	2100      	movs	r1, #0
 800f888:	6003      	str	r3, [r0, #0]
 800f88a:	4608      	mov	r0, r1
 800f88c:	f7f1 fb1a 	bl	8000ec4 <__aeabi_fdiv>
 800f890:	4604      	mov	r4, r0
 800f892:	4620      	mov	r0, r4
 800f894:	bd70      	pop	{r4, r5, r6, pc}
 800f896:	bf00      	nop
 800f898:	20000500 	.word	0x20000500

0800f89c <sqrtf>:
 800f89c:	b538      	push	{r3, r4, r5, lr}
 800f89e:	4605      	mov	r5, r0
 800f8a0:	f000 fa82 	bl	800fda8 <__ieee754_sqrtf>
 800f8a4:	4b0d      	ldr	r3, [pc, #52]	; (800f8dc <sqrtf+0x40>)
 800f8a6:	4604      	mov	r4, r0
 800f8a8:	f993 3000 	ldrsb.w	r3, [r3]
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	d012      	beq.n	800f8d6 <sqrtf+0x3a>
 800f8b0:	4629      	mov	r1, r5
 800f8b2:	4628      	mov	r0, r5
 800f8b4:	f7f1 fc18 	bl	80010e8 <__aeabi_fcmpun>
 800f8b8:	b968      	cbnz	r0, 800f8d6 <sqrtf+0x3a>
 800f8ba:	2100      	movs	r1, #0
 800f8bc:	4628      	mov	r0, r5
 800f8be:	f7f1 fbeb 	bl	8001098 <__aeabi_fcmplt>
 800f8c2:	b140      	cbz	r0, 800f8d6 <sqrtf+0x3a>
 800f8c4:	f7fe fe3e 	bl	800e544 <__errno>
 800f8c8:	2321      	movs	r3, #33	; 0x21
 800f8ca:	2100      	movs	r1, #0
 800f8cc:	6003      	str	r3, [r0, #0]
 800f8ce:	4608      	mov	r0, r1
 800f8d0:	f7f1 faf8 	bl	8000ec4 <__aeabi_fdiv>
 800f8d4:	4604      	mov	r4, r0
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	bd38      	pop	{r3, r4, r5, pc}
 800f8da:	bf00      	nop
 800f8dc:	20000500 	.word	0x20000500

0800f8e0 <__ieee754_atan2f>:
 800f8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f8e6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	dc05      	bgt.n	800f8fa <__ieee754_atan2f+0x1a>
 800f8ee:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800f8f2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f8f6:	4607      	mov	r7, r0
 800f8f8:	dd04      	ble.n	800f904 <__ieee754_atan2f+0x24>
 800f8fa:	4618      	mov	r0, r3
 800f8fc:	f7f1 f926 	bl	8000b4c <__addsf3>
 800f900:	4603      	mov	r3, r0
 800f902:	e011      	b.n	800f928 <__ieee754_atan2f+0x48>
 800f904:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800f908:	d103      	bne.n	800f912 <__ieee754_atan2f+0x32>
 800f90a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f90e:	f000 be49 	b.w	80105a4 <atanf>
 800f912:	178c      	asrs	r4, r1, #30
 800f914:	f004 0402 	and.w	r4, r4, #2
 800f918:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f91c:	b932      	cbnz	r2, 800f92c <__ieee754_atan2f+0x4c>
 800f91e:	2c02      	cmp	r4, #2
 800f920:	d04c      	beq.n	800f9bc <__ieee754_atan2f+0xdc>
 800f922:	2c03      	cmp	r4, #3
 800f924:	d100      	bne.n	800f928 <__ieee754_atan2f+0x48>
 800f926:	4b29      	ldr	r3, [pc, #164]	; (800f9cc <__ieee754_atan2f+0xec>)
 800f928:	4618      	mov	r0, r3
 800f92a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f92c:	b91e      	cbnz	r6, 800f936 <__ieee754_atan2f+0x56>
 800f92e:	2f00      	cmp	r7, #0
 800f930:	da4a      	bge.n	800f9c8 <__ieee754_atan2f+0xe8>
 800f932:	4b27      	ldr	r3, [pc, #156]	; (800f9d0 <__ieee754_atan2f+0xf0>)
 800f934:	e7f8      	b.n	800f928 <__ieee754_atan2f+0x48>
 800f936:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f93a:	d10e      	bne.n	800f95a <__ieee754_atan2f+0x7a>
 800f93c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f940:	f104 34ff 	add.w	r4, r4, #4294967295
 800f944:	d105      	bne.n	800f952 <__ieee754_atan2f+0x72>
 800f946:	2c02      	cmp	r4, #2
 800f948:	d83a      	bhi.n	800f9c0 <__ieee754_atan2f+0xe0>
 800f94a:	4b22      	ldr	r3, [pc, #136]	; (800f9d4 <__ieee754_atan2f+0xf4>)
 800f94c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800f950:	e7ea      	b.n	800f928 <__ieee754_atan2f+0x48>
 800f952:	2c02      	cmp	r4, #2
 800f954:	d836      	bhi.n	800f9c4 <__ieee754_atan2f+0xe4>
 800f956:	4b20      	ldr	r3, [pc, #128]	; (800f9d8 <__ieee754_atan2f+0xf8>)
 800f958:	e7f8      	b.n	800f94c <__ieee754_atan2f+0x6c>
 800f95a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f95e:	d0e6      	beq.n	800f92e <__ieee754_atan2f+0x4e>
 800f960:	1b92      	subs	r2, r2, r6
 800f962:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 800f966:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800f96a:	da17      	bge.n	800f99c <__ieee754_atan2f+0xbc>
 800f96c:	2900      	cmp	r1, #0
 800f96e:	da01      	bge.n	800f974 <__ieee754_atan2f+0x94>
 800f970:	303c      	adds	r0, #60	; 0x3c
 800f972:	db15      	blt.n	800f9a0 <__ieee754_atan2f+0xc0>
 800f974:	4618      	mov	r0, r3
 800f976:	f7f1 faa5 	bl	8000ec4 <__aeabi_fdiv>
 800f97a:	f000 ff1f 	bl	80107bc <fabsf>
 800f97e:	f000 fe11 	bl	80105a4 <atanf>
 800f982:	4603      	mov	r3, r0
 800f984:	2c01      	cmp	r4, #1
 800f986:	d00d      	beq.n	800f9a4 <__ieee754_atan2f+0xc4>
 800f988:	2c02      	cmp	r4, #2
 800f98a:	d00e      	beq.n	800f9aa <__ieee754_atan2f+0xca>
 800f98c:	2c00      	cmp	r4, #0
 800f98e:	d0cb      	beq.n	800f928 <__ieee754_atan2f+0x48>
 800f990:	4912      	ldr	r1, [pc, #72]	; (800f9dc <__ieee754_atan2f+0xfc>)
 800f992:	4618      	mov	r0, r3
 800f994:	f7f1 f8da 	bl	8000b4c <__addsf3>
 800f998:	4911      	ldr	r1, [pc, #68]	; (800f9e0 <__ieee754_atan2f+0x100>)
 800f99a:	e00c      	b.n	800f9b6 <__ieee754_atan2f+0xd6>
 800f99c:	4b11      	ldr	r3, [pc, #68]	; (800f9e4 <__ieee754_atan2f+0x104>)
 800f99e:	e7f1      	b.n	800f984 <__ieee754_atan2f+0xa4>
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	e7ef      	b.n	800f984 <__ieee754_atan2f+0xa4>
 800f9a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f9a8:	e7be      	b.n	800f928 <__ieee754_atan2f+0x48>
 800f9aa:	490c      	ldr	r1, [pc, #48]	; (800f9dc <__ieee754_atan2f+0xfc>)
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	f7f1 f8cd 	bl	8000b4c <__addsf3>
 800f9b2:	4601      	mov	r1, r0
 800f9b4:	480a      	ldr	r0, [pc, #40]	; (800f9e0 <__ieee754_atan2f+0x100>)
 800f9b6:	f7f1 f8c7 	bl	8000b48 <__aeabi_fsub>
 800f9ba:	e7a1      	b.n	800f900 <__ieee754_atan2f+0x20>
 800f9bc:	4b08      	ldr	r3, [pc, #32]	; (800f9e0 <__ieee754_atan2f+0x100>)
 800f9be:	e7b3      	b.n	800f928 <__ieee754_atan2f+0x48>
 800f9c0:	4b09      	ldr	r3, [pc, #36]	; (800f9e8 <__ieee754_atan2f+0x108>)
 800f9c2:	e7b1      	b.n	800f928 <__ieee754_atan2f+0x48>
 800f9c4:	2300      	movs	r3, #0
 800f9c6:	e7af      	b.n	800f928 <__ieee754_atan2f+0x48>
 800f9c8:	4b06      	ldr	r3, [pc, #24]	; (800f9e4 <__ieee754_atan2f+0x104>)
 800f9ca:	e7ad      	b.n	800f928 <__ieee754_atan2f+0x48>
 800f9cc:	c0490fdb 	.word	0xc0490fdb
 800f9d0:	bfc90fdb 	.word	0xbfc90fdb
 800f9d4:	08011028 	.word	0x08011028
 800f9d8:	08011034 	.word	0x08011034
 800f9dc:	33bbbd2e 	.word	0x33bbbd2e
 800f9e0:	40490fdb 	.word	0x40490fdb
 800f9e4:	3fc90fdb 	.word	0x3fc90fdb
 800f9e8:	3f490fdb 	.word	0x3f490fdb

0800f9ec <__ieee754_fmodf>:
 800f9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9ee:	f031 4500 	bics.w	r5, r1, #2147483648	; 0x80000000
 800f9f2:	460e      	mov	r6, r1
 800f9f4:	d008      	beq.n	800fa08 <__ieee754_fmodf+0x1c>
 800f9f6:	f020 4c00 	bic.w	ip, r0, #2147483648	; 0x80000000
 800f9fa:	f1bc 4fff 	cmp.w	ip, #2139095040	; 0x7f800000
 800f9fe:	4607      	mov	r7, r0
 800fa00:	da02      	bge.n	800fa08 <__ieee754_fmodf+0x1c>
 800fa02:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800fa06:	dd05      	ble.n	800fa14 <__ieee754_fmodf+0x28>
 800fa08:	f7f1 f9a8 	bl	8000d5c <__aeabi_fmul>
 800fa0c:	4601      	mov	r1, r0
 800fa0e:	f7f1 fa59 	bl	8000ec4 <__aeabi_fdiv>
 800fa12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa14:	45ac      	cmp	ip, r5
 800fa16:	dbfc      	blt.n	800fa12 <__ieee754_fmodf+0x26>
 800fa18:	f000 4400 	and.w	r4, r0, #2147483648	; 0x80000000
 800fa1c:	d104      	bne.n	800fa28 <__ieee754_fmodf+0x3c>
 800fa1e:	4a32      	ldr	r2, [pc, #200]	; (800fae8 <__ieee754_fmodf+0xfc>)
 800fa20:	0fe0      	lsrs	r0, r4, #31
 800fa22:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800fa26:	e7f4      	b.n	800fa12 <__ieee754_fmodf+0x26>
 800fa28:	f010 4fff 	tst.w	r0, #2139095040	; 0x7f800000
 800fa2c:	d146      	bne.n	800fabc <__ieee754_fmodf+0xd0>
 800fa2e:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800fa32:	ea4f 230c 	mov.w	r3, ip, lsl #8
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	dc3d      	bgt.n	800fab6 <__ieee754_fmodf+0xca>
 800fa3a:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800fa3e:	d144      	bne.n	800faca <__ieee754_fmodf+0xde>
 800fa40:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800fa44:	022b      	lsls	r3, r5, #8
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	da3c      	bge.n	800fac4 <__ieee754_fmodf+0xd8>
 800fa4a:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800fa4e:	bfb5      	itete	lt
 800fa50:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800fa54:	f3c7 0316 	ubfxge	r3, r7, #0, #23
 800fa58:	1a5b      	sublt	r3, r3, r1
 800fa5a:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800fa5e:	bfb8      	it	lt
 800fa60:	fa0c f303 	lsllt.w	r3, ip, r3
 800fa64:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800fa68:	bfb5      	itete	lt
 800fa6a:	f06f 007d 	mvnlt.w	r0, #125	; 0x7d
 800fa6e:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800fa72:	1a80      	sublt	r0, r0, r2
 800fa74:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800fa78:	bfb8      	it	lt
 800fa7a:	4085      	lsllt	r5, r0
 800fa7c:	1a89      	subs	r1, r1, r2
 800fa7e:	1b58      	subs	r0, r3, r5
 800fa80:	bb31      	cbnz	r1, 800fad0 <__ieee754_fmodf+0xe4>
 800fa82:	ea13 0320 	ands.w	r3, r3, r0, asr #32
 800fa86:	bf38      	it	cc
 800fa88:	4603      	movcc	r3, r0
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d0c7      	beq.n	800fa1e <__ieee754_fmodf+0x32>
 800fa8e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800fa92:	db25      	blt.n	800fae0 <__ieee754_fmodf+0xf4>
 800fa94:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800fa98:	bfb5      	itete	lt
 800fa9a:	f06f 007d 	mvnlt.w	r0, #125	; 0x7d
 800fa9e:	f5a3 0000 	subge.w	r0, r3, #8388608	; 0x800000
 800faa2:	1a80      	sublt	r0, r0, r2
 800faa4:	327f      	addge	r2, #127	; 0x7f
 800faa6:	bfab      	itete	ge
 800faa8:	4320      	orrge	r0, r4
 800faaa:	fa43 f000 	asrlt.w	r0, r3, r0
 800faae:	ea40 50c2 	orrge.w	r0, r0, r2, lsl #23
 800fab2:	4320      	orrlt	r0, r4
 800fab4:	e7ad      	b.n	800fa12 <__ieee754_fmodf+0x26>
 800fab6:	3901      	subs	r1, #1
 800fab8:	005b      	lsls	r3, r3, #1
 800faba:	e7bc      	b.n	800fa36 <__ieee754_fmodf+0x4a>
 800fabc:	ea4f 51ec 	mov.w	r1, ip, asr #23
 800fac0:	397f      	subs	r1, #127	; 0x7f
 800fac2:	e7ba      	b.n	800fa3a <__ieee754_fmodf+0x4e>
 800fac4:	3a01      	subs	r2, #1
 800fac6:	005b      	lsls	r3, r3, #1
 800fac8:	e7bd      	b.n	800fa46 <__ieee754_fmodf+0x5a>
 800faca:	15ea      	asrs	r2, r5, #23
 800facc:	3a7f      	subs	r2, #127	; 0x7f
 800face:	e7bc      	b.n	800fa4a <__ieee754_fmodf+0x5e>
 800fad0:	2800      	cmp	r0, #0
 800fad2:	da02      	bge.n	800fada <__ieee754_fmodf+0xee>
 800fad4:	005b      	lsls	r3, r3, #1
 800fad6:	3901      	subs	r1, #1
 800fad8:	e7d1      	b.n	800fa7e <__ieee754_fmodf+0x92>
 800fada:	d0a0      	beq.n	800fa1e <__ieee754_fmodf+0x32>
 800fadc:	0043      	lsls	r3, r0, #1
 800fade:	e7fa      	b.n	800fad6 <__ieee754_fmodf+0xea>
 800fae0:	005b      	lsls	r3, r3, #1
 800fae2:	3a01      	subs	r2, #1
 800fae4:	e7d3      	b.n	800fa8e <__ieee754_fmodf+0xa2>
 800fae6:	bf00      	nop
 800fae8:	08011040 	.word	0x08011040

0800faec <__ieee754_rem_pio2f>:
 800faec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf0:	4aa0      	ldr	r2, [pc, #640]	; (800fd74 <__ieee754_rem_pio2f+0x288>)
 800faf2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800faf6:	4296      	cmp	r6, r2
 800faf8:	460c      	mov	r4, r1
 800fafa:	4682      	mov	sl, r0
 800fafc:	b087      	sub	sp, #28
 800fafe:	dc04      	bgt.n	800fb0a <__ieee754_rem_pio2f+0x1e>
 800fb00:	2300      	movs	r3, #0
 800fb02:	6008      	str	r0, [r1, #0]
 800fb04:	604b      	str	r3, [r1, #4]
 800fb06:	2500      	movs	r5, #0
 800fb08:	e01a      	b.n	800fb40 <__ieee754_rem_pio2f+0x54>
 800fb0a:	4a9b      	ldr	r2, [pc, #620]	; (800fd78 <__ieee754_rem_pio2f+0x28c>)
 800fb0c:	4296      	cmp	r6, r2
 800fb0e:	dc4b      	bgt.n	800fba8 <__ieee754_rem_pio2f+0xbc>
 800fb10:	2800      	cmp	r0, #0
 800fb12:	499a      	ldr	r1, [pc, #616]	; (800fd7c <__ieee754_rem_pio2f+0x290>)
 800fb14:	4f9a      	ldr	r7, [pc, #616]	; (800fd80 <__ieee754_rem_pio2f+0x294>)
 800fb16:	f026 060f 	bic.w	r6, r6, #15
 800fb1a:	dd23      	ble.n	800fb64 <__ieee754_rem_pio2f+0x78>
 800fb1c:	f7f1 f814 	bl	8000b48 <__aeabi_fsub>
 800fb20:	42be      	cmp	r6, r7
 800fb22:	4605      	mov	r5, r0
 800fb24:	d010      	beq.n	800fb48 <__ieee754_rem_pio2f+0x5c>
 800fb26:	4997      	ldr	r1, [pc, #604]	; (800fd84 <__ieee754_rem_pio2f+0x298>)
 800fb28:	f7f1 f80e 	bl	8000b48 <__aeabi_fsub>
 800fb2c:	4601      	mov	r1, r0
 800fb2e:	6020      	str	r0, [r4, #0]
 800fb30:	4628      	mov	r0, r5
 800fb32:	f7f1 f809 	bl	8000b48 <__aeabi_fsub>
 800fb36:	4993      	ldr	r1, [pc, #588]	; (800fd84 <__ieee754_rem_pio2f+0x298>)
 800fb38:	f7f1 f806 	bl	8000b48 <__aeabi_fsub>
 800fb3c:	2501      	movs	r5, #1
 800fb3e:	6060      	str	r0, [r4, #4]
 800fb40:	4628      	mov	r0, r5
 800fb42:	b007      	add	sp, #28
 800fb44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb48:	498f      	ldr	r1, [pc, #572]	; (800fd88 <__ieee754_rem_pio2f+0x29c>)
 800fb4a:	f7f0 fffd 	bl	8000b48 <__aeabi_fsub>
 800fb4e:	498f      	ldr	r1, [pc, #572]	; (800fd8c <__ieee754_rem_pio2f+0x2a0>)
 800fb50:	4605      	mov	r5, r0
 800fb52:	f7f0 fff9 	bl	8000b48 <__aeabi_fsub>
 800fb56:	4601      	mov	r1, r0
 800fb58:	6020      	str	r0, [r4, #0]
 800fb5a:	4628      	mov	r0, r5
 800fb5c:	f7f0 fff4 	bl	8000b48 <__aeabi_fsub>
 800fb60:	498a      	ldr	r1, [pc, #552]	; (800fd8c <__ieee754_rem_pio2f+0x2a0>)
 800fb62:	e7e9      	b.n	800fb38 <__ieee754_rem_pio2f+0x4c>
 800fb64:	f7f0 fff2 	bl	8000b4c <__addsf3>
 800fb68:	42be      	cmp	r6, r7
 800fb6a:	4605      	mov	r5, r0
 800fb6c:	d00e      	beq.n	800fb8c <__ieee754_rem_pio2f+0xa0>
 800fb6e:	4985      	ldr	r1, [pc, #532]	; (800fd84 <__ieee754_rem_pio2f+0x298>)
 800fb70:	f7f0 ffec 	bl	8000b4c <__addsf3>
 800fb74:	4601      	mov	r1, r0
 800fb76:	6020      	str	r0, [r4, #0]
 800fb78:	4628      	mov	r0, r5
 800fb7a:	f7f0 ffe5 	bl	8000b48 <__aeabi_fsub>
 800fb7e:	4981      	ldr	r1, [pc, #516]	; (800fd84 <__ieee754_rem_pio2f+0x298>)
 800fb80:	f7f0 ffe4 	bl	8000b4c <__addsf3>
 800fb84:	f04f 35ff 	mov.w	r5, #4294967295
 800fb88:	6060      	str	r0, [r4, #4]
 800fb8a:	e7d9      	b.n	800fb40 <__ieee754_rem_pio2f+0x54>
 800fb8c:	497e      	ldr	r1, [pc, #504]	; (800fd88 <__ieee754_rem_pio2f+0x29c>)
 800fb8e:	f7f0 ffdd 	bl	8000b4c <__addsf3>
 800fb92:	497e      	ldr	r1, [pc, #504]	; (800fd8c <__ieee754_rem_pio2f+0x2a0>)
 800fb94:	4605      	mov	r5, r0
 800fb96:	f7f0 ffd9 	bl	8000b4c <__addsf3>
 800fb9a:	4601      	mov	r1, r0
 800fb9c:	6020      	str	r0, [r4, #0]
 800fb9e:	4628      	mov	r0, r5
 800fba0:	f7f0 ffd2 	bl	8000b48 <__aeabi_fsub>
 800fba4:	4979      	ldr	r1, [pc, #484]	; (800fd8c <__ieee754_rem_pio2f+0x2a0>)
 800fba6:	e7eb      	b.n	800fb80 <__ieee754_rem_pio2f+0x94>
 800fba8:	4a79      	ldr	r2, [pc, #484]	; (800fd90 <__ieee754_rem_pio2f+0x2a4>)
 800fbaa:	4296      	cmp	r6, r2
 800fbac:	f300 8091 	bgt.w	800fcd2 <__ieee754_rem_pio2f+0x1e6>
 800fbb0:	f000 fe04 	bl	80107bc <fabsf>
 800fbb4:	4977      	ldr	r1, [pc, #476]	; (800fd94 <__ieee754_rem_pio2f+0x2a8>)
 800fbb6:	4607      	mov	r7, r0
 800fbb8:	f7f1 f8d0 	bl	8000d5c <__aeabi_fmul>
 800fbbc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800fbc0:	f7f0 ffc4 	bl	8000b4c <__addsf3>
 800fbc4:	f7f1 faa6 	bl	8001114 <__aeabi_f2iz>
 800fbc8:	4605      	mov	r5, r0
 800fbca:	f7f1 f873 	bl	8000cb4 <__aeabi_i2f>
 800fbce:	496b      	ldr	r1, [pc, #428]	; (800fd7c <__ieee754_rem_pio2f+0x290>)
 800fbd0:	4681      	mov	r9, r0
 800fbd2:	f7f1 f8c3 	bl	8000d5c <__aeabi_fmul>
 800fbd6:	4601      	mov	r1, r0
 800fbd8:	4638      	mov	r0, r7
 800fbda:	f7f0 ffb5 	bl	8000b48 <__aeabi_fsub>
 800fbde:	4969      	ldr	r1, [pc, #420]	; (800fd84 <__ieee754_rem_pio2f+0x298>)
 800fbe0:	4680      	mov	r8, r0
 800fbe2:	4648      	mov	r0, r9
 800fbe4:	f7f1 f8ba 	bl	8000d5c <__aeabi_fmul>
 800fbe8:	2d1f      	cmp	r5, #31
 800fbea:	4607      	mov	r7, r0
 800fbec:	dc0c      	bgt.n	800fc08 <__ieee754_rem_pio2f+0x11c>
 800fbee:	4a6a      	ldr	r2, [pc, #424]	; (800fd98 <__ieee754_rem_pio2f+0x2ac>)
 800fbf0:	1e69      	subs	r1, r5, #1
 800fbf2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800fbf6:	f026 03ff 	bic.w	r3, r6, #255	; 0xff
 800fbfa:	4293      	cmp	r3, r2
 800fbfc:	d004      	beq.n	800fc08 <__ieee754_rem_pio2f+0x11c>
 800fbfe:	4639      	mov	r1, r7
 800fc00:	4640      	mov	r0, r8
 800fc02:	f7f0 ffa1 	bl	8000b48 <__aeabi_fsub>
 800fc06:	e00b      	b.n	800fc20 <__ieee754_rem_pio2f+0x134>
 800fc08:	4639      	mov	r1, r7
 800fc0a:	4640      	mov	r0, r8
 800fc0c:	f7f0 ff9c 	bl	8000b48 <__aeabi_fsub>
 800fc10:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fc14:	ea4f 5be6 	mov.w	fp, r6, asr #23
 800fc18:	ebc3 56d6 	rsb	r6, r3, r6, lsr #23
 800fc1c:	2e08      	cmp	r6, #8
 800fc1e:	dc01      	bgt.n	800fc24 <__ieee754_rem_pio2f+0x138>
 800fc20:	6020      	str	r0, [r4, #0]
 800fc22:	e026      	b.n	800fc72 <__ieee754_rem_pio2f+0x186>
 800fc24:	4958      	ldr	r1, [pc, #352]	; (800fd88 <__ieee754_rem_pio2f+0x29c>)
 800fc26:	4648      	mov	r0, r9
 800fc28:	f7f1 f898 	bl	8000d5c <__aeabi_fmul>
 800fc2c:	4607      	mov	r7, r0
 800fc2e:	4601      	mov	r1, r0
 800fc30:	4640      	mov	r0, r8
 800fc32:	f7f0 ff89 	bl	8000b48 <__aeabi_fsub>
 800fc36:	4601      	mov	r1, r0
 800fc38:	4606      	mov	r6, r0
 800fc3a:	4640      	mov	r0, r8
 800fc3c:	f7f0 ff84 	bl	8000b48 <__aeabi_fsub>
 800fc40:	4639      	mov	r1, r7
 800fc42:	f7f0 ff81 	bl	8000b48 <__aeabi_fsub>
 800fc46:	4607      	mov	r7, r0
 800fc48:	4950      	ldr	r1, [pc, #320]	; (800fd8c <__ieee754_rem_pio2f+0x2a0>)
 800fc4a:	4648      	mov	r0, r9
 800fc4c:	f7f1 f886 	bl	8000d5c <__aeabi_fmul>
 800fc50:	4639      	mov	r1, r7
 800fc52:	f7f0 ff79 	bl	8000b48 <__aeabi_fsub>
 800fc56:	4601      	mov	r1, r0
 800fc58:	4607      	mov	r7, r0
 800fc5a:	4630      	mov	r0, r6
 800fc5c:	f7f0 ff74 	bl	8000b48 <__aeabi_fsub>
 800fc60:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fc64:	ebab 0b03 	sub.w	fp, fp, r3
 800fc68:	f1bb 0f19 	cmp.w	fp, #25
 800fc6c:	dc16      	bgt.n	800fc9c <__ieee754_rem_pio2f+0x1b0>
 800fc6e:	46b0      	mov	r8, r6
 800fc70:	6020      	str	r0, [r4, #0]
 800fc72:	6826      	ldr	r6, [r4, #0]
 800fc74:	4640      	mov	r0, r8
 800fc76:	4631      	mov	r1, r6
 800fc78:	f7f0 ff66 	bl	8000b48 <__aeabi_fsub>
 800fc7c:	4639      	mov	r1, r7
 800fc7e:	f7f0 ff63 	bl	8000b48 <__aeabi_fsub>
 800fc82:	f1ba 0f00 	cmp.w	sl, #0
 800fc86:	6060      	str	r0, [r4, #4]
 800fc88:	f6bf af5a 	bge.w	800fb40 <__ieee754_rem_pio2f+0x54>
 800fc8c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800fc90:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800fc94:	6026      	str	r6, [r4, #0]
 800fc96:	6060      	str	r0, [r4, #4]
 800fc98:	426d      	negs	r5, r5
 800fc9a:	e751      	b.n	800fb40 <__ieee754_rem_pio2f+0x54>
 800fc9c:	493f      	ldr	r1, [pc, #252]	; (800fd9c <__ieee754_rem_pio2f+0x2b0>)
 800fc9e:	4648      	mov	r0, r9
 800fca0:	f7f1 f85c 	bl	8000d5c <__aeabi_fmul>
 800fca4:	4607      	mov	r7, r0
 800fca6:	4601      	mov	r1, r0
 800fca8:	4630      	mov	r0, r6
 800fcaa:	f7f0 ff4d 	bl	8000b48 <__aeabi_fsub>
 800fcae:	4601      	mov	r1, r0
 800fcb0:	4680      	mov	r8, r0
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	f7f0 ff48 	bl	8000b48 <__aeabi_fsub>
 800fcb8:	4639      	mov	r1, r7
 800fcba:	f7f0 ff45 	bl	8000b48 <__aeabi_fsub>
 800fcbe:	4606      	mov	r6, r0
 800fcc0:	4937      	ldr	r1, [pc, #220]	; (800fda0 <__ieee754_rem_pio2f+0x2b4>)
 800fcc2:	4648      	mov	r0, r9
 800fcc4:	f7f1 f84a 	bl	8000d5c <__aeabi_fmul>
 800fcc8:	4631      	mov	r1, r6
 800fcca:	f7f0 ff3d 	bl	8000b48 <__aeabi_fsub>
 800fcce:	4607      	mov	r7, r0
 800fcd0:	e795      	b.n	800fbfe <__ieee754_rem_pio2f+0x112>
 800fcd2:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800fcd6:	db05      	blt.n	800fce4 <__ieee754_rem_pio2f+0x1f8>
 800fcd8:	4601      	mov	r1, r0
 800fcda:	f7f0 ff35 	bl	8000b48 <__aeabi_fsub>
 800fcde:	6060      	str	r0, [r4, #4]
 800fce0:	6020      	str	r0, [r4, #0]
 800fce2:	e710      	b.n	800fb06 <__ieee754_rem_pio2f+0x1a>
 800fce4:	15f7      	asrs	r7, r6, #23
 800fce6:	3f86      	subs	r7, #134	; 0x86
 800fce8:	eba6 56c7 	sub.w	r6, r6, r7, lsl #23
 800fcec:	4630      	mov	r0, r6
 800fcee:	f7f1 fa11 	bl	8001114 <__aeabi_f2iz>
 800fcf2:	f7f0 ffdf 	bl	8000cb4 <__aeabi_i2f>
 800fcf6:	4601      	mov	r1, r0
 800fcf8:	9003      	str	r0, [sp, #12]
 800fcfa:	4630      	mov	r0, r6
 800fcfc:	f7f0 ff24 	bl	8000b48 <__aeabi_fsub>
 800fd00:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800fd04:	f7f1 f82a 	bl	8000d5c <__aeabi_fmul>
 800fd08:	4606      	mov	r6, r0
 800fd0a:	f7f1 fa03 	bl	8001114 <__aeabi_f2iz>
 800fd0e:	f7f0 ffd1 	bl	8000cb4 <__aeabi_i2f>
 800fd12:	4601      	mov	r1, r0
 800fd14:	9004      	str	r0, [sp, #16]
 800fd16:	4605      	mov	r5, r0
 800fd18:	4630      	mov	r0, r6
 800fd1a:	f7f0 ff15 	bl	8000b48 <__aeabi_fsub>
 800fd1e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800fd22:	f7f1 f81b 	bl	8000d5c <__aeabi_fmul>
 800fd26:	2100      	movs	r1, #0
 800fd28:	9005      	str	r0, [sp, #20]
 800fd2a:	f7f1 f9ab 	bl	8001084 <__aeabi_fcmpeq>
 800fd2e:	b1f0      	cbz	r0, 800fd6e <__ieee754_rem_pio2f+0x282>
 800fd30:	2100      	movs	r1, #0
 800fd32:	4628      	mov	r0, r5
 800fd34:	f7f1 f9a6 	bl	8001084 <__aeabi_fcmpeq>
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	bf14      	ite	ne
 800fd3c:	2301      	movne	r3, #1
 800fd3e:	2302      	moveq	r3, #2
 800fd40:	4a18      	ldr	r2, [pc, #96]	; (800fda4 <__ieee754_rem_pio2f+0x2b8>)
 800fd42:	4621      	mov	r1, r4
 800fd44:	9201      	str	r2, [sp, #4]
 800fd46:	2202      	movs	r2, #2
 800fd48:	a803      	add	r0, sp, #12
 800fd4a:	9200      	str	r2, [sp, #0]
 800fd4c:	463a      	mov	r2, r7
 800fd4e:	f000 f8fd 	bl	800ff4c <__kernel_rem_pio2f>
 800fd52:	f1ba 0f00 	cmp.w	sl, #0
 800fd56:	4605      	mov	r5, r0
 800fd58:	f6bf aef2 	bge.w	800fb40 <__ieee754_rem_pio2f+0x54>
 800fd5c:	6823      	ldr	r3, [r4, #0]
 800fd5e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fd62:	6023      	str	r3, [r4, #0]
 800fd64:	6863      	ldr	r3, [r4, #4]
 800fd66:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fd6a:	6063      	str	r3, [r4, #4]
 800fd6c:	e794      	b.n	800fc98 <__ieee754_rem_pio2f+0x1ac>
 800fd6e:	2303      	movs	r3, #3
 800fd70:	e7e6      	b.n	800fd40 <__ieee754_rem_pio2f+0x254>
 800fd72:	bf00      	nop
 800fd74:	3f490fd8 	.word	0x3f490fd8
 800fd78:	4016cbe3 	.word	0x4016cbe3
 800fd7c:	3fc90f80 	.word	0x3fc90f80
 800fd80:	3fc90fd0 	.word	0x3fc90fd0
 800fd84:	37354443 	.word	0x37354443
 800fd88:	37354400 	.word	0x37354400
 800fd8c:	2e85a308 	.word	0x2e85a308
 800fd90:	43490f80 	.word	0x43490f80
 800fd94:	3f22f984 	.word	0x3f22f984
 800fd98:	08011048 	.word	0x08011048
 800fd9c:	2e85a300 	.word	0x2e85a300
 800fda0:	248d3132 	.word	0x248d3132
 800fda4:	080110c8 	.word	0x080110c8

0800fda8 <__ieee754_sqrtf>:
 800fda8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800fdac:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fdb0:	b570      	push	{r4, r5, r6, lr}
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	4604      	mov	r4, r0
 800fdb6:	d309      	bcc.n	800fdcc <__ieee754_sqrtf+0x24>
 800fdb8:	4601      	mov	r1, r0
 800fdba:	f7f0 ffcf 	bl	8000d5c <__aeabi_fmul>
 800fdbe:	4601      	mov	r1, r0
 800fdc0:	4620      	mov	r0, r4
 800fdc2:	f7f0 fec3 	bl	8000b4c <__addsf3>
 800fdc6:	4604      	mov	r4, r0
 800fdc8:	4620      	mov	r0, r4
 800fdca:	bd70      	pop	{r4, r5, r6, pc}
 800fdcc:	2a00      	cmp	r2, #0
 800fdce:	d0fb      	beq.n	800fdc8 <__ieee754_sqrtf+0x20>
 800fdd0:	2800      	cmp	r0, #0
 800fdd2:	da06      	bge.n	800fde2 <__ieee754_sqrtf+0x3a>
 800fdd4:	4601      	mov	r1, r0
 800fdd6:	f7f0 feb7 	bl	8000b48 <__aeabi_fsub>
 800fdda:	4601      	mov	r1, r0
 800fddc:	f7f1 f872 	bl	8000ec4 <__aeabi_fdiv>
 800fde0:	e7f1      	b.n	800fdc6 <__ieee754_sqrtf+0x1e>
 800fde2:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 800fde6:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800fdea:	d029      	beq.n	800fe40 <__ieee754_sqrtf+0x98>
 800fdec:	f3c3 0216 	ubfx	r2, r3, #0, #23
 800fdf0:	07cb      	lsls	r3, r1, #31
 800fdf2:	f04f 0300 	mov.w	r3, #0
 800fdf6:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 800fdfa:	f04f 0419 	mov.w	r4, #25
 800fdfe:	461e      	mov	r6, r3
 800fe00:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 800fe04:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800fe08:	bf58      	it	pl
 800fe0a:	0052      	lslpl	r2, r2, #1
 800fe0c:	1040      	asrs	r0, r0, #1
 800fe0e:	0052      	lsls	r2, r2, #1
 800fe10:	1875      	adds	r5, r6, r1
 800fe12:	4295      	cmp	r5, r2
 800fe14:	bfde      	ittt	le
 800fe16:	186e      	addle	r6, r5, r1
 800fe18:	1b52      	suble	r2, r2, r5
 800fe1a:	185b      	addle	r3, r3, r1
 800fe1c:	3c01      	subs	r4, #1
 800fe1e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fe22:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fe26:	d1f3      	bne.n	800fe10 <__ieee754_sqrtf+0x68>
 800fe28:	b112      	cbz	r2, 800fe30 <__ieee754_sqrtf+0x88>
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	f023 0301 	bic.w	r3, r3, #1
 800fe30:	105c      	asrs	r4, r3, #1
 800fe32:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800fe36:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 800fe3a:	e7c5      	b.n	800fdc8 <__ieee754_sqrtf+0x20>
 800fe3c:	005b      	lsls	r3, r3, #1
 800fe3e:	3201      	adds	r2, #1
 800fe40:	0218      	lsls	r0, r3, #8
 800fe42:	d5fb      	bpl.n	800fe3c <__ieee754_sqrtf+0x94>
 800fe44:	3a01      	subs	r2, #1
 800fe46:	1a89      	subs	r1, r1, r2
 800fe48:	e7d0      	b.n	800fdec <__ieee754_sqrtf+0x44>
	...

0800fe4c <__kernel_cosf>:
 800fe4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe50:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800fe54:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800fe58:	4606      	mov	r6, r0
 800fe5a:	4688      	mov	r8, r1
 800fe5c:	da03      	bge.n	800fe66 <__kernel_cosf+0x1a>
 800fe5e:	f7f1 f959 	bl	8001114 <__aeabi_f2iz>
 800fe62:	2800      	cmp	r0, #0
 800fe64:	d05c      	beq.n	800ff20 <__kernel_cosf+0xd4>
 800fe66:	4631      	mov	r1, r6
 800fe68:	4630      	mov	r0, r6
 800fe6a:	f7f0 ff77 	bl	8000d5c <__aeabi_fmul>
 800fe6e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800fe72:	4605      	mov	r5, r0
 800fe74:	f7f0 ff72 	bl	8000d5c <__aeabi_fmul>
 800fe78:	492b      	ldr	r1, [pc, #172]	; (800ff28 <__kernel_cosf+0xdc>)
 800fe7a:	4607      	mov	r7, r0
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	f7f0 ff6d 	bl	8000d5c <__aeabi_fmul>
 800fe82:	492a      	ldr	r1, [pc, #168]	; (800ff2c <__kernel_cosf+0xe0>)
 800fe84:	f7f0 fe62 	bl	8000b4c <__addsf3>
 800fe88:	4629      	mov	r1, r5
 800fe8a:	f7f0 ff67 	bl	8000d5c <__aeabi_fmul>
 800fe8e:	4928      	ldr	r1, [pc, #160]	; (800ff30 <__kernel_cosf+0xe4>)
 800fe90:	f7f0 fe5a 	bl	8000b48 <__aeabi_fsub>
 800fe94:	4629      	mov	r1, r5
 800fe96:	f7f0 ff61 	bl	8000d5c <__aeabi_fmul>
 800fe9a:	4926      	ldr	r1, [pc, #152]	; (800ff34 <__kernel_cosf+0xe8>)
 800fe9c:	f7f0 fe56 	bl	8000b4c <__addsf3>
 800fea0:	4629      	mov	r1, r5
 800fea2:	f7f0 ff5b 	bl	8000d5c <__aeabi_fmul>
 800fea6:	4924      	ldr	r1, [pc, #144]	; (800ff38 <__kernel_cosf+0xec>)
 800fea8:	f7f0 fe4e 	bl	8000b48 <__aeabi_fsub>
 800feac:	4629      	mov	r1, r5
 800feae:	f7f0 ff55 	bl	8000d5c <__aeabi_fmul>
 800feb2:	4922      	ldr	r1, [pc, #136]	; (800ff3c <__kernel_cosf+0xf0>)
 800feb4:	f7f0 fe4a 	bl	8000b4c <__addsf3>
 800feb8:	4629      	mov	r1, r5
 800feba:	f7f0 ff4f 	bl	8000d5c <__aeabi_fmul>
 800febe:	4629      	mov	r1, r5
 800fec0:	f7f0 ff4c 	bl	8000d5c <__aeabi_fmul>
 800fec4:	4641      	mov	r1, r8
 800fec6:	4605      	mov	r5, r0
 800fec8:	4630      	mov	r0, r6
 800feca:	f7f0 ff47 	bl	8000d5c <__aeabi_fmul>
 800fece:	4601      	mov	r1, r0
 800fed0:	4628      	mov	r0, r5
 800fed2:	f7f0 fe39 	bl	8000b48 <__aeabi_fsub>
 800fed6:	4b1a      	ldr	r3, [pc, #104]	; (800ff40 <__kernel_cosf+0xf4>)
 800fed8:	4605      	mov	r5, r0
 800feda:	429c      	cmp	r4, r3
 800fedc:	dc0a      	bgt.n	800fef4 <__kernel_cosf+0xa8>
 800fede:	4601      	mov	r1, r0
 800fee0:	4638      	mov	r0, r7
 800fee2:	f7f0 fe31 	bl	8000b48 <__aeabi_fsub>
 800fee6:	4601      	mov	r1, r0
 800fee8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800feec:	f7f0 fe2c 	bl	8000b48 <__aeabi_fsub>
 800fef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fef4:	4b13      	ldr	r3, [pc, #76]	; (800ff44 <__kernel_cosf+0xf8>)
 800fef6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800fefa:	429c      	cmp	r4, r3
 800fefc:	bfcc      	ite	gt
 800fefe:	4c12      	ldrgt	r4, [pc, #72]	; (800ff48 <__kernel_cosf+0xfc>)
 800ff00:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800ff04:	4621      	mov	r1, r4
 800ff06:	f7f0 fe1f 	bl	8000b48 <__aeabi_fsub>
 800ff0a:	4621      	mov	r1, r4
 800ff0c:	4606      	mov	r6, r0
 800ff0e:	4638      	mov	r0, r7
 800ff10:	f7f0 fe1a 	bl	8000b48 <__aeabi_fsub>
 800ff14:	4629      	mov	r1, r5
 800ff16:	f7f0 fe17 	bl	8000b48 <__aeabi_fsub>
 800ff1a:	4601      	mov	r1, r0
 800ff1c:	4630      	mov	r0, r6
 800ff1e:	e7e5      	b.n	800feec <__kernel_cosf+0xa0>
 800ff20:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ff24:	e7e4      	b.n	800fef0 <__kernel_cosf+0xa4>
 800ff26:	bf00      	nop
 800ff28:	ad47d74e 	.word	0xad47d74e
 800ff2c:	310f74f6 	.word	0x310f74f6
 800ff30:	3493f27c 	.word	0x3493f27c
 800ff34:	37d00d01 	.word	0x37d00d01
 800ff38:	3ab60b61 	.word	0x3ab60b61
 800ff3c:	3d2aaaab 	.word	0x3d2aaaab
 800ff40:	3e999999 	.word	0x3e999999
 800ff44:	3f480000 	.word	0x3f480000
 800ff48:	3e900000 	.word	0x3e900000

0800ff4c <__kernel_rem_pio2f>:
 800ff4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff50:	b0db      	sub	sp, #364	; 0x16c
 800ff52:	9202      	str	r2, [sp, #8]
 800ff54:	9304      	str	r3, [sp, #16]
 800ff56:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800ff58:	4bc5      	ldr	r3, [pc, #788]	; (8010270 <__kernel_rem_pio2f+0x324>)
 800ff5a:	9005      	str	r0, [sp, #20]
 800ff5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff60:	9100      	str	r1, [sp, #0]
 800ff62:	9301      	str	r3, [sp, #4]
 800ff64:	9b04      	ldr	r3, [sp, #16]
 800ff66:	3b01      	subs	r3, #1
 800ff68:	9303      	str	r3, [sp, #12]
 800ff6a:	9b02      	ldr	r3, [sp, #8]
 800ff6c:	1d1a      	adds	r2, r3, #4
 800ff6e:	f2c0 809b 	blt.w	80100a8 <__kernel_rem_pio2f+0x15c>
 800ff72:	1edc      	subs	r4, r3, #3
 800ff74:	bf48      	it	mi
 800ff76:	1d1c      	addmi	r4, r3, #4
 800ff78:	10e4      	asrs	r4, r4, #3
 800ff7a:	2500      	movs	r5, #0
 800ff7c:	f04f 0a00 	mov.w	sl, #0
 800ff80:	1c67      	adds	r7, r4, #1
 800ff82:	00fb      	lsls	r3, r7, #3
 800ff84:	9306      	str	r3, [sp, #24]
 800ff86:	9b02      	ldr	r3, [sp, #8]
 800ff88:	9a03      	ldr	r2, [sp, #12]
 800ff8a:	eba3 07c7 	sub.w	r7, r3, r7, lsl #3
 800ff8e:	9b01      	ldr	r3, [sp, #4]
 800ff90:	1aa6      	subs	r6, r4, r2
 800ff92:	eb03 0802 	add.w	r8, r3, r2
 800ff96:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800ff98:	f10d 0b78 	add.w	fp, sp, #120	; 0x78
 800ff9c:	eb03 0986 	add.w	r9, r3, r6, lsl #2
 800ffa0:	4545      	cmp	r5, r8
 800ffa2:	f340 8083 	ble.w	80100ac <__kernel_rem_pio2f+0x160>
 800ffa6:	f04f 0800 	mov.w	r8, #0
 800ffaa:	f04f 0b00 	mov.w	fp, #0
 800ffae:	9b04      	ldr	r3, [sp, #16]
 800ffb0:	aa1e      	add	r2, sp, #120	; 0x78
 800ffb2:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800ffb6:	ab46      	add	r3, sp, #280	; 0x118
 800ffb8:	9a01      	ldr	r2, [sp, #4]
 800ffba:	4590      	cmp	r8, r2
 800ffbc:	f340 809c 	ble.w	80100f8 <__kernel_rem_pio2f+0x1ac>
 800ffc0:	4613      	mov	r3, r2
 800ffc2:	aa0a      	add	r2, sp, #40	; 0x28
 800ffc4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ffc8:	9308      	str	r3, [sp, #32]
 800ffca:	9b65      	ldr	r3, [sp, #404]	; 0x194
 800ffcc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ffd0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ffd4:	9307      	str	r3, [sp, #28]
 800ffd6:	ad0a      	add	r5, sp, #40	; 0x28
 800ffd8:	462e      	mov	r6, r5
 800ffda:	46c3      	mov	fp, r8
 800ffdc:	f04f 4987 	mov.w	r9, #1132462080	; 0x43800000
 800ffe0:	ab5a      	add	r3, sp, #360	; 0x168
 800ffe2:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800ffe6:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800ffea:	f50d 7a8c 	add.w	sl, sp, #280	; 0x118
 800ffee:	f1bb 0f00 	cmp.w	fp, #0
 800fff2:	f300 8086 	bgt.w	8010102 <__kernel_rem_pio2f+0x1b6>
 800fff6:	4639      	mov	r1, r7
 800fff8:	4620      	mov	r0, r4
 800fffa:	f7fe fb3f 	bl	800e67c <scalbnf>
 800fffe:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 8010002:	4604      	mov	r4, r0
 8010004:	f7f0 feaa 	bl	8000d5c <__aeabi_fmul>
 8010008:	f000 fbdc 	bl	80107c4 <floorf>
 801000c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8010010:	f7f0 fea4 	bl	8000d5c <__aeabi_fmul>
 8010014:	4601      	mov	r1, r0
 8010016:	4620      	mov	r0, r4
 8010018:	f7f0 fd96 	bl	8000b48 <__aeabi_fsub>
 801001c:	4604      	mov	r4, r0
 801001e:	f7f1 f879 	bl	8001114 <__aeabi_f2iz>
 8010022:	4606      	mov	r6, r0
 8010024:	f7f0 fe46 	bl	8000cb4 <__aeabi_i2f>
 8010028:	4601      	mov	r1, r0
 801002a:	4620      	mov	r0, r4
 801002c:	f7f0 fd8c 	bl	8000b48 <__aeabi_fsub>
 8010030:	2f00      	cmp	r7, #0
 8010032:	4681      	mov	r9, r0
 8010034:	f340 8084 	ble.w	8010140 <__kernel_rem_pio2f+0x1f4>
 8010038:	f108 32ff 	add.w	r2, r8, #4294967295
 801003c:	ab0a      	add	r3, sp, #40	; 0x28
 801003e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8010042:	f1c7 0108 	rsb	r1, r7, #8
 8010046:	fa44 f301 	asr.w	r3, r4, r1
 801004a:	441e      	add	r6, r3
 801004c:	408b      	lsls	r3, r1
 801004e:	1ae4      	subs	r4, r4, r3
 8010050:	f1c7 0007 	rsb	r0, r7, #7
 8010054:	ab0a      	add	r3, sp, #40	; 0x28
 8010056:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801005a:	4104      	asrs	r4, r0
 801005c:	2c00      	cmp	r4, #0
 801005e:	dd7e      	ble.n	801015e <__kernel_rem_pio2f+0x212>
 8010060:	2200      	movs	r2, #0
 8010062:	4692      	mov	sl, r2
 8010064:	3601      	adds	r6, #1
 8010066:	4590      	cmp	r8, r2
 8010068:	f300 80b0 	bgt.w	80101cc <__kernel_rem_pio2f+0x280>
 801006c:	2f00      	cmp	r7, #0
 801006e:	dd05      	ble.n	801007c <__kernel_rem_pio2f+0x130>
 8010070:	2f01      	cmp	r7, #1
 8010072:	f000 80bd 	beq.w	80101f0 <__kernel_rem_pio2f+0x2a4>
 8010076:	2f02      	cmp	r7, #2
 8010078:	f000 80c5 	beq.w	8010206 <__kernel_rem_pio2f+0x2ba>
 801007c:	2c02      	cmp	r4, #2
 801007e:	d16e      	bne.n	801015e <__kernel_rem_pio2f+0x212>
 8010080:	4649      	mov	r1, r9
 8010082:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010086:	f7f0 fd5f 	bl	8000b48 <__aeabi_fsub>
 801008a:	4681      	mov	r9, r0
 801008c:	f1ba 0f00 	cmp.w	sl, #0
 8010090:	d065      	beq.n	801015e <__kernel_rem_pio2f+0x212>
 8010092:	4639      	mov	r1, r7
 8010094:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010098:	f7fe faf0 	bl	800e67c <scalbnf>
 801009c:	4601      	mov	r1, r0
 801009e:	4648      	mov	r0, r9
 80100a0:	f7f0 fd52 	bl	8000b48 <__aeabi_fsub>
 80100a4:	4681      	mov	r9, r0
 80100a6:	e05a      	b.n	801015e <__kernel_rem_pio2f+0x212>
 80100a8:	2400      	movs	r4, #0
 80100aa:	e766      	b.n	800ff7a <__kernel_rem_pio2f+0x2e>
 80100ac:	42ee      	cmn	r6, r5
 80100ae:	d407      	bmi.n	80100c0 <__kernel_rem_pio2f+0x174>
 80100b0:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80100b4:	f7f0 fdfe 	bl	8000cb4 <__aeabi_i2f>
 80100b8:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 80100bc:	3501      	adds	r5, #1
 80100be:	e76f      	b.n	800ffa0 <__kernel_rem_pio2f+0x54>
 80100c0:	4650      	mov	r0, sl
 80100c2:	e7f9      	b.n	80100b8 <__kernel_rem_pio2f+0x16c>
 80100c4:	9b05      	ldr	r3, [sp, #20]
 80100c6:	f8da 1000 	ldr.w	r1, [sl]
 80100ca:	f853 0029 	ldr.w	r0, [r3, r9, lsl #2]
 80100ce:	f7f0 fe45 	bl	8000d5c <__aeabi_fmul>
 80100d2:	4601      	mov	r1, r0
 80100d4:	4630      	mov	r0, r6
 80100d6:	f7f0 fd39 	bl	8000b4c <__addsf3>
 80100da:	4606      	mov	r6, r0
 80100dc:	f109 0901 	add.w	r9, r9, #1
 80100e0:	ab46      	add	r3, sp, #280	; 0x118
 80100e2:	9a03      	ldr	r2, [sp, #12]
 80100e4:	f1aa 0a04 	sub.w	sl, sl, #4
 80100e8:	4591      	cmp	r9, r2
 80100ea:	ddeb      	ble.n	80100c4 <__kernel_rem_pio2f+0x178>
 80100ec:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 80100f0:	3504      	adds	r5, #4
 80100f2:	f108 0801 	add.w	r8, r8, #1
 80100f6:	e75f      	b.n	800ffb8 <__kernel_rem_pio2f+0x6c>
 80100f8:	46aa      	mov	sl, r5
 80100fa:	465e      	mov	r6, fp
 80100fc:	f04f 0900 	mov.w	r9, #0
 8010100:	e7ef      	b.n	80100e2 <__kernel_rem_pio2f+0x196>
 8010102:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 8010106:	4620      	mov	r0, r4
 8010108:	f7f0 fe28 	bl	8000d5c <__aeabi_fmul>
 801010c:	f7f1 f802 	bl	8001114 <__aeabi_f2iz>
 8010110:	f7f0 fdd0 	bl	8000cb4 <__aeabi_i2f>
 8010114:	4649      	mov	r1, r9
 8010116:	9009      	str	r0, [sp, #36]	; 0x24
 8010118:	f7f0 fe20 	bl	8000d5c <__aeabi_fmul>
 801011c:	4601      	mov	r1, r0
 801011e:	4620      	mov	r0, r4
 8010120:	f7f0 fd12 	bl	8000b48 <__aeabi_fsub>
 8010124:	f7f0 fff6 	bl	8001114 <__aeabi_f2iz>
 8010128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801012a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801012e:	f846 0b04 	str.w	r0, [r6], #4
 8010132:	f85a 102b 	ldr.w	r1, [sl, fp, lsl #2]
 8010136:	4618      	mov	r0, r3
 8010138:	f7f0 fd08 	bl	8000b4c <__addsf3>
 801013c:	4604      	mov	r4, r0
 801013e:	e756      	b.n	800ffee <__kernel_rem_pio2f+0xa2>
 8010140:	d106      	bne.n	8010150 <__kernel_rem_pio2f+0x204>
 8010142:	f108 33ff 	add.w	r3, r8, #4294967295
 8010146:	aa0a      	add	r2, sp, #40	; 0x28
 8010148:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801014c:	1224      	asrs	r4, r4, #8
 801014e:	e785      	b.n	801005c <__kernel_rem_pio2f+0x110>
 8010150:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8010154:	f7f0 ffb4 	bl	80010c0 <__aeabi_fcmpge>
 8010158:	4604      	mov	r4, r0
 801015a:	2800      	cmp	r0, #0
 801015c:	d134      	bne.n	80101c8 <__kernel_rem_pio2f+0x27c>
 801015e:	2100      	movs	r1, #0
 8010160:	4648      	mov	r0, r9
 8010162:	f7f0 ff8f 	bl	8001084 <__aeabi_fcmpeq>
 8010166:	2800      	cmp	r0, #0
 8010168:	f000 809a 	beq.w	80102a0 <__kernel_rem_pio2f+0x354>
 801016c:	f108 35ff 	add.w	r5, r8, #4294967295
 8010170:	462b      	mov	r3, r5
 8010172:	2200      	movs	r2, #0
 8010174:	9901      	ldr	r1, [sp, #4]
 8010176:	428b      	cmp	r3, r1
 8010178:	da4d      	bge.n	8010216 <__kernel_rem_pio2f+0x2ca>
 801017a:	2a00      	cmp	r2, #0
 801017c:	d07c      	beq.n	8010278 <__kernel_rem_pio2f+0x32c>
 801017e:	ab0a      	add	r3, sp, #40	; 0x28
 8010180:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8010184:	3f08      	subs	r7, #8
 8010186:	2b00      	cmp	r3, #0
 8010188:	f000 8088 	beq.w	801029c <__kernel_rem_pio2f+0x350>
 801018c:	4639      	mov	r1, r7
 801018e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8010192:	f7fe fa73 	bl	800e67c <scalbnf>
 8010196:	46aa      	mov	sl, r5
 8010198:	4681      	mov	r9, r0
 801019a:	f04f 586e 	mov.w	r8, #998244352	; 0x3b800000
 801019e:	af46      	add	r7, sp, #280	; 0x118
 80101a0:	f1ba 0f00 	cmp.w	sl, #0
 80101a4:	f280 80b1 	bge.w	801030a <__kernel_rem_pio2f+0x3be>
 80101a8:	46a9      	mov	r9, r5
 80101aa:	f04f 0a00 	mov.w	sl, #0
 80101ae:	2200      	movs	r2, #0
 80101b0:	f1b9 0f00 	cmp.w	r9, #0
 80101b4:	f2c0 80db 	blt.w	801036e <__kernel_rem_pio2f+0x422>
 80101b8:	a946      	add	r1, sp, #280	; 0x118
 80101ba:	4617      	mov	r7, r2
 80101bc:	f04f 0800 	mov.w	r8, #0
 80101c0:	4b2c      	ldr	r3, [pc, #176]	; (8010274 <__kernel_rem_pio2f+0x328>)
 80101c2:	eb01 0b89 	add.w	fp, r1, r9, lsl #2
 80101c6:	e0c3      	b.n	8010350 <__kernel_rem_pio2f+0x404>
 80101c8:	2402      	movs	r4, #2
 80101ca:	e749      	b.n	8010060 <__kernel_rem_pio2f+0x114>
 80101cc:	682b      	ldr	r3, [r5, #0]
 80101ce:	f1ba 0f00 	cmp.w	sl, #0
 80101d2:	d108      	bne.n	80101e6 <__kernel_rem_pio2f+0x29a>
 80101d4:	b11b      	cbz	r3, 80101de <__kernel_rem_pio2f+0x292>
 80101d6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80101da:	602b      	str	r3, [r5, #0]
 80101dc:	2301      	movs	r3, #1
 80101de:	469a      	mov	sl, r3
 80101e0:	3201      	adds	r2, #1
 80101e2:	3504      	adds	r5, #4
 80101e4:	e73f      	b.n	8010066 <__kernel_rem_pio2f+0x11a>
 80101e6:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80101ea:	602b      	str	r3, [r5, #0]
 80101ec:	4653      	mov	r3, sl
 80101ee:	e7f6      	b.n	80101de <__kernel_rem_pio2f+0x292>
 80101f0:	f108 32ff 	add.w	r2, r8, #4294967295
 80101f4:	ab0a      	add	r3, sp, #40	; 0x28
 80101f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101fe:	a90a      	add	r1, sp, #40	; 0x28
 8010200:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010204:	e73a      	b.n	801007c <__kernel_rem_pio2f+0x130>
 8010206:	f108 32ff 	add.w	r2, r8, #4294967295
 801020a:	ab0a      	add	r3, sp, #40	; 0x28
 801020c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010214:	e7f3      	b.n	80101fe <__kernel_rem_pio2f+0x2b2>
 8010216:	a90a      	add	r1, sp, #40	; 0x28
 8010218:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801021c:	3b01      	subs	r3, #1
 801021e:	430a      	orrs	r2, r1
 8010220:	e7a8      	b.n	8010174 <__kernel_rem_pio2f+0x228>
 8010222:	3301      	adds	r3, #1
 8010224:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010228:	2900      	cmp	r1, #0
 801022a:	d0fa      	beq.n	8010222 <__kernel_rem_pio2f+0x2d6>
 801022c:	9a04      	ldr	r2, [sp, #16]
 801022e:	f108 0501 	add.w	r5, r8, #1
 8010232:	eb08 0402 	add.w	r4, r8, r2
 8010236:	aa1e      	add	r2, sp, #120	; 0x78
 8010238:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 801023c:	4498      	add	r8, r3
 801023e:	f50d 798c 	add.w	r9, sp, #280	; 0x118
 8010242:	45a8      	cmp	r8, r5
 8010244:	f6ff aec7 	blt.w	800ffd6 <__kernel_rem_pio2f+0x8a>
 8010248:	9b07      	ldr	r3, [sp, #28]
 801024a:	46a3      	mov	fp, r4
 801024c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010250:	f7f0 fd30 	bl	8000cb4 <__aeabi_i2f>
 8010254:	f04f 0a00 	mov.w	sl, #0
 8010258:	2600      	movs	r6, #0
 801025a:	f84b 0b04 	str.w	r0, [fp], #4
 801025e:	9b03      	ldr	r3, [sp, #12]
 8010260:	459a      	cmp	sl, r3
 8010262:	dd0c      	ble.n	801027e <__kernel_rem_pio2f+0x332>
 8010264:	f849 6025 	str.w	r6, [r9, r5, lsl #2]
 8010268:	465c      	mov	r4, fp
 801026a:	3501      	adds	r5, #1
 801026c:	e7e9      	b.n	8010242 <__kernel_rem_pio2f+0x2f6>
 801026e:	bf00      	nop
 8010270:	0801140c 	.word	0x0801140c
 8010274:	080113e0 	.word	0x080113e0
 8010278:	2301      	movs	r3, #1
 801027a:	9a08      	ldr	r2, [sp, #32]
 801027c:	e7d2      	b.n	8010224 <__kernel_rem_pio2f+0x2d8>
 801027e:	9b05      	ldr	r3, [sp, #20]
 8010280:	f854 0904 	ldr.w	r0, [r4], #-4
 8010284:	f853 102a 	ldr.w	r1, [r3, sl, lsl #2]
 8010288:	f7f0 fd68 	bl	8000d5c <__aeabi_fmul>
 801028c:	4601      	mov	r1, r0
 801028e:	4630      	mov	r0, r6
 8010290:	f7f0 fc5c 	bl	8000b4c <__addsf3>
 8010294:	f10a 0a01 	add.w	sl, sl, #1
 8010298:	4606      	mov	r6, r0
 801029a:	e7e0      	b.n	801025e <__kernel_rem_pio2f+0x312>
 801029c:	3d01      	subs	r5, #1
 801029e:	e76e      	b.n	801017e <__kernel_rem_pio2f+0x232>
 80102a0:	9b06      	ldr	r3, [sp, #24]
 80102a2:	9a02      	ldr	r2, [sp, #8]
 80102a4:	4648      	mov	r0, r9
 80102a6:	1a99      	subs	r1, r3, r2
 80102a8:	f7fe f9e8 	bl	800e67c <scalbnf>
 80102ac:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80102b0:	4605      	mov	r5, r0
 80102b2:	f7f0 ff05 	bl	80010c0 <__aeabi_fcmpge>
 80102b6:	b300      	cbz	r0, 80102fa <__kernel_rem_pio2f+0x3ae>
 80102b8:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 80102bc:	4628      	mov	r0, r5
 80102be:	f7f0 fd4d 	bl	8000d5c <__aeabi_fmul>
 80102c2:	f7f0 ff27 	bl	8001114 <__aeabi_f2iz>
 80102c6:	f7f0 fcf5 	bl	8000cb4 <__aeabi_i2f>
 80102ca:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 80102ce:	4681      	mov	r9, r0
 80102d0:	f7f0 fd44 	bl	8000d5c <__aeabi_fmul>
 80102d4:	4601      	mov	r1, r0
 80102d6:	4628      	mov	r0, r5
 80102d8:	f7f0 fc36 	bl	8000b48 <__aeabi_fsub>
 80102dc:	f7f0 ff1a 	bl	8001114 <__aeabi_f2iz>
 80102e0:	ab0a      	add	r3, sp, #40	; 0x28
 80102e2:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 80102e6:	4648      	mov	r0, r9
 80102e8:	f7f0 ff14 	bl	8001114 <__aeabi_f2iz>
 80102ec:	f108 0501 	add.w	r5, r8, #1
 80102f0:	ab0a      	add	r3, sp, #40	; 0x28
 80102f2:	3708      	adds	r7, #8
 80102f4:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80102f8:	e748      	b.n	801018c <__kernel_rem_pio2f+0x240>
 80102fa:	4628      	mov	r0, r5
 80102fc:	f7f0 ff0a 	bl	8001114 <__aeabi_f2iz>
 8010300:	ab0a      	add	r3, sp, #40	; 0x28
 8010302:	4645      	mov	r5, r8
 8010304:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8010308:	e740      	b.n	801018c <__kernel_rem_pio2f+0x240>
 801030a:	ab0a      	add	r3, sp, #40	; 0x28
 801030c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8010310:	f7f0 fcd0 	bl	8000cb4 <__aeabi_i2f>
 8010314:	4649      	mov	r1, r9
 8010316:	f7f0 fd21 	bl	8000d5c <__aeabi_fmul>
 801031a:	4641      	mov	r1, r8
 801031c:	f847 002a 	str.w	r0, [r7, sl, lsl #2]
 8010320:	4648      	mov	r0, r9
 8010322:	f7f0 fd1b 	bl	8000d5c <__aeabi_fmul>
 8010326:	f10a 3aff 	add.w	sl, sl, #4294967295
 801032a:	4681      	mov	r9, r0
 801032c:	e738      	b.n	80101a0 <__kernel_rem_pio2f+0x254>
 801032e:	f853 0b04 	ldr.w	r0, [r3], #4
 8010332:	f85b 1b04 	ldr.w	r1, [fp], #4
 8010336:	9203      	str	r2, [sp, #12]
 8010338:	9302      	str	r3, [sp, #8]
 801033a:	f7f0 fd0f 	bl	8000d5c <__aeabi_fmul>
 801033e:	4601      	mov	r1, r0
 8010340:	4638      	mov	r0, r7
 8010342:	f7f0 fc03 	bl	8000b4c <__addsf3>
 8010346:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801034a:	4607      	mov	r7, r0
 801034c:	f108 0801 	add.w	r8, r8, #1
 8010350:	9901      	ldr	r1, [sp, #4]
 8010352:	4588      	cmp	r8, r1
 8010354:	dc01      	bgt.n	801035a <__kernel_rem_pio2f+0x40e>
 8010356:	45c2      	cmp	sl, r8
 8010358:	dae9      	bge.n	801032e <__kernel_rem_pio2f+0x3e2>
 801035a:	ab5a      	add	r3, sp, #360	; 0x168
 801035c:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8010360:	f843 7ca0 	str.w	r7, [r3, #-160]
 8010364:	f109 39ff 	add.w	r9, r9, #4294967295
 8010368:	f10a 0a01 	add.w	sl, sl, #1
 801036c:	e720      	b.n	80101b0 <__kernel_rem_pio2f+0x264>
 801036e:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010370:	2b02      	cmp	r3, #2
 8010372:	dc07      	bgt.n	8010384 <__kernel_rem_pio2f+0x438>
 8010374:	2b00      	cmp	r3, #0
 8010376:	dc4d      	bgt.n	8010414 <__kernel_rem_pio2f+0x4c8>
 8010378:	d02e      	beq.n	80103d8 <__kernel_rem_pio2f+0x48c>
 801037a:	f006 0007 	and.w	r0, r6, #7
 801037e:	b05b      	add	sp, #364	; 0x16c
 8010380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010384:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8010386:	2b03      	cmp	r3, #3
 8010388:	d1f7      	bne.n	801037a <__kernel_rem_pio2f+0x42e>
 801038a:	f10d 0bc8 	add.w	fp, sp, #200	; 0xc8
 801038e:	eb0b 0785 	add.w	r7, fp, r5, lsl #2
 8010392:	46b8      	mov	r8, r7
 8010394:	46aa      	mov	sl, r5
 8010396:	f1ba 0f00 	cmp.w	sl, #0
 801039a:	dc48      	bgt.n	801042e <__kernel_rem_pio2f+0x4e2>
 801039c:	46a9      	mov	r9, r5
 801039e:	f1b9 0f01 	cmp.w	r9, #1
 80103a2:	dc5f      	bgt.n	8010464 <__kernel_rem_pio2f+0x518>
 80103a4:	2000      	movs	r0, #0
 80103a6:	2d01      	cmp	r5, #1
 80103a8:	dc75      	bgt.n	8010496 <__kernel_rem_pio2f+0x54a>
 80103aa:	9a32      	ldr	r2, [sp, #200]	; 0xc8
 80103ac:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80103ae:	2c00      	cmp	r4, #0
 80103b0:	d177      	bne.n	80104a2 <__kernel_rem_pio2f+0x556>
 80103b2:	9900      	ldr	r1, [sp, #0]
 80103b4:	600a      	str	r2, [r1, #0]
 80103b6:	460a      	mov	r2, r1
 80103b8:	604b      	str	r3, [r1, #4]
 80103ba:	6090      	str	r0, [r2, #8]
 80103bc:	e7dd      	b.n	801037a <__kernel_rem_pio2f+0x42e>
 80103be:	f857 1025 	ldr.w	r1, [r7, r5, lsl #2]
 80103c2:	f7f0 fbc3 	bl	8000b4c <__addsf3>
 80103c6:	3d01      	subs	r5, #1
 80103c8:	2d00      	cmp	r5, #0
 80103ca:	daf8      	bge.n	80103be <__kernel_rem_pio2f+0x472>
 80103cc:	b10c      	cbz	r4, 80103d2 <__kernel_rem_pio2f+0x486>
 80103ce:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80103d2:	9b00      	ldr	r3, [sp, #0]
 80103d4:	6018      	str	r0, [r3, #0]
 80103d6:	e7d0      	b.n	801037a <__kernel_rem_pio2f+0x42e>
 80103d8:	2000      	movs	r0, #0
 80103da:	af32      	add	r7, sp, #200	; 0xc8
 80103dc:	e7f4      	b.n	80103c8 <__kernel_rem_pio2f+0x47c>
 80103de:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 80103e2:	f7f0 fbb3 	bl	8000b4c <__addsf3>
 80103e6:	3f01      	subs	r7, #1
 80103e8:	2f00      	cmp	r7, #0
 80103ea:	daf8      	bge.n	80103de <__kernel_rem_pio2f+0x492>
 80103ec:	b1bc      	cbz	r4, 801041e <__kernel_rem_pio2f+0x4d2>
 80103ee:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 80103f2:	9a00      	ldr	r2, [sp, #0]
 80103f4:	4601      	mov	r1, r0
 80103f6:	6013      	str	r3, [r2, #0]
 80103f8:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80103fa:	f7f0 fba5 	bl	8000b48 <__aeabi_fsub>
 80103fe:	2701      	movs	r7, #1
 8010400:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 8010404:	42bd      	cmp	r5, r7
 8010406:	da0c      	bge.n	8010422 <__kernel_rem_pio2f+0x4d6>
 8010408:	b10c      	cbz	r4, 801040e <__kernel_rem_pio2f+0x4c2>
 801040a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 801040e:	9b00      	ldr	r3, [sp, #0]
 8010410:	6058      	str	r0, [r3, #4]
 8010412:	e7b2      	b.n	801037a <__kernel_rem_pio2f+0x42e>
 8010414:	462f      	mov	r7, r5
 8010416:	2000      	movs	r0, #0
 8010418:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 801041c:	e7e4      	b.n	80103e8 <__kernel_rem_pio2f+0x49c>
 801041e:	4603      	mov	r3, r0
 8010420:	e7e7      	b.n	80103f2 <__kernel_rem_pio2f+0x4a6>
 8010422:	f858 1027 	ldr.w	r1, [r8, r7, lsl #2]
 8010426:	f7f0 fb91 	bl	8000b4c <__addsf3>
 801042a:	3701      	adds	r7, #1
 801042c:	e7ea      	b.n	8010404 <__kernel_rem_pio2f+0x4b8>
 801042e:	f8d8 3000 	ldr.w	r3, [r8]
 8010432:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8010436:	4619      	mov	r1, r3
 8010438:	4610      	mov	r0, r2
 801043a:	9302      	str	r3, [sp, #8]
 801043c:	9201      	str	r2, [sp, #4]
 801043e:	f7f0 fb85 	bl	8000b4c <__addsf3>
 8010442:	9a01      	ldr	r2, [sp, #4]
 8010444:	4601      	mov	r1, r0
 8010446:	4681      	mov	r9, r0
 8010448:	4610      	mov	r0, r2
 801044a:	f7f0 fb7d 	bl	8000b48 <__aeabi_fsub>
 801044e:	9b02      	ldr	r3, [sp, #8]
 8010450:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010454:	4619      	mov	r1, r3
 8010456:	f7f0 fb79 	bl	8000b4c <__addsf3>
 801045a:	f848 0904 	str.w	r0, [r8], #-4
 801045e:	f8c8 9000 	str.w	r9, [r8]
 8010462:	e798      	b.n	8010396 <__kernel_rem_pio2f+0x44a>
 8010464:	f857 3c04 	ldr.w	r3, [r7, #-4]
 8010468:	f8d7 a000 	ldr.w	sl, [r7]
 801046c:	4618      	mov	r0, r3
 801046e:	4651      	mov	r1, sl
 8010470:	9301      	str	r3, [sp, #4]
 8010472:	f7f0 fb6b 	bl	8000b4c <__addsf3>
 8010476:	9b01      	ldr	r3, [sp, #4]
 8010478:	4601      	mov	r1, r0
 801047a:	4680      	mov	r8, r0
 801047c:	4618      	mov	r0, r3
 801047e:	f7f0 fb63 	bl	8000b48 <__aeabi_fsub>
 8010482:	4651      	mov	r1, sl
 8010484:	f7f0 fb62 	bl	8000b4c <__addsf3>
 8010488:	f847 0904 	str.w	r0, [r7], #-4
 801048c:	f109 39ff 	add.w	r9, r9, #4294967295
 8010490:	f8c7 8000 	str.w	r8, [r7]
 8010494:	e783      	b.n	801039e <__kernel_rem_pio2f+0x452>
 8010496:	f85b 1025 	ldr.w	r1, [fp, r5, lsl #2]
 801049a:	f7f0 fb57 	bl	8000b4c <__addsf3>
 801049e:	3d01      	subs	r5, #1
 80104a0:	e781      	b.n	80103a6 <__kernel_rem_pio2f+0x45a>
 80104a2:	9900      	ldr	r1, [sp, #0]
 80104a4:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 80104a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80104ac:	600a      	str	r2, [r1, #0]
 80104ae:	604b      	str	r3, [r1, #4]
 80104b0:	460a      	mov	r2, r1
 80104b2:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 80104b6:	e780      	b.n	80103ba <__kernel_rem_pio2f+0x46e>

080104b8 <__kernel_sinf>:
 80104b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80104bc:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 80104c0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80104c4:	4604      	mov	r4, r0
 80104c6:	460f      	mov	r7, r1
 80104c8:	4691      	mov	r9, r2
 80104ca:	da03      	bge.n	80104d4 <__kernel_sinf+0x1c>
 80104cc:	f7f0 fe22 	bl	8001114 <__aeabi_f2iz>
 80104d0:	2800      	cmp	r0, #0
 80104d2:	d035      	beq.n	8010540 <__kernel_sinf+0x88>
 80104d4:	4621      	mov	r1, r4
 80104d6:	4620      	mov	r0, r4
 80104d8:	f7f0 fc40 	bl	8000d5c <__aeabi_fmul>
 80104dc:	4605      	mov	r5, r0
 80104de:	4601      	mov	r1, r0
 80104e0:	4620      	mov	r0, r4
 80104e2:	f7f0 fc3b 	bl	8000d5c <__aeabi_fmul>
 80104e6:	4929      	ldr	r1, [pc, #164]	; (801058c <__kernel_sinf+0xd4>)
 80104e8:	4606      	mov	r6, r0
 80104ea:	4628      	mov	r0, r5
 80104ec:	f7f0 fc36 	bl	8000d5c <__aeabi_fmul>
 80104f0:	4927      	ldr	r1, [pc, #156]	; (8010590 <__kernel_sinf+0xd8>)
 80104f2:	f7f0 fb29 	bl	8000b48 <__aeabi_fsub>
 80104f6:	4629      	mov	r1, r5
 80104f8:	f7f0 fc30 	bl	8000d5c <__aeabi_fmul>
 80104fc:	4925      	ldr	r1, [pc, #148]	; (8010594 <__kernel_sinf+0xdc>)
 80104fe:	f7f0 fb25 	bl	8000b4c <__addsf3>
 8010502:	4629      	mov	r1, r5
 8010504:	f7f0 fc2a 	bl	8000d5c <__aeabi_fmul>
 8010508:	4923      	ldr	r1, [pc, #140]	; (8010598 <__kernel_sinf+0xe0>)
 801050a:	f7f0 fb1d 	bl	8000b48 <__aeabi_fsub>
 801050e:	4629      	mov	r1, r5
 8010510:	f7f0 fc24 	bl	8000d5c <__aeabi_fmul>
 8010514:	4921      	ldr	r1, [pc, #132]	; (801059c <__kernel_sinf+0xe4>)
 8010516:	f7f0 fb19 	bl	8000b4c <__addsf3>
 801051a:	4680      	mov	r8, r0
 801051c:	f1b9 0f00 	cmp.w	r9, #0
 8010520:	d111      	bne.n	8010546 <__kernel_sinf+0x8e>
 8010522:	4601      	mov	r1, r0
 8010524:	4628      	mov	r0, r5
 8010526:	f7f0 fc19 	bl	8000d5c <__aeabi_fmul>
 801052a:	491d      	ldr	r1, [pc, #116]	; (80105a0 <__kernel_sinf+0xe8>)
 801052c:	f7f0 fb0c 	bl	8000b48 <__aeabi_fsub>
 8010530:	4631      	mov	r1, r6
 8010532:	f7f0 fc13 	bl	8000d5c <__aeabi_fmul>
 8010536:	4601      	mov	r1, r0
 8010538:	4620      	mov	r0, r4
 801053a:	f7f0 fb07 	bl	8000b4c <__addsf3>
 801053e:	4604      	mov	r4, r0
 8010540:	4620      	mov	r0, r4
 8010542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010546:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 801054a:	4638      	mov	r0, r7
 801054c:	f7f0 fc06 	bl	8000d5c <__aeabi_fmul>
 8010550:	4641      	mov	r1, r8
 8010552:	4681      	mov	r9, r0
 8010554:	4630      	mov	r0, r6
 8010556:	f7f0 fc01 	bl	8000d5c <__aeabi_fmul>
 801055a:	4601      	mov	r1, r0
 801055c:	4648      	mov	r0, r9
 801055e:	f7f0 faf3 	bl	8000b48 <__aeabi_fsub>
 8010562:	4629      	mov	r1, r5
 8010564:	f7f0 fbfa 	bl	8000d5c <__aeabi_fmul>
 8010568:	4639      	mov	r1, r7
 801056a:	f7f0 faed 	bl	8000b48 <__aeabi_fsub>
 801056e:	490c      	ldr	r1, [pc, #48]	; (80105a0 <__kernel_sinf+0xe8>)
 8010570:	4605      	mov	r5, r0
 8010572:	4630      	mov	r0, r6
 8010574:	f7f0 fbf2 	bl	8000d5c <__aeabi_fmul>
 8010578:	4601      	mov	r1, r0
 801057a:	4628      	mov	r0, r5
 801057c:	f7f0 fae6 	bl	8000b4c <__addsf3>
 8010580:	4601      	mov	r1, r0
 8010582:	4620      	mov	r0, r4
 8010584:	f7f0 fae0 	bl	8000b48 <__aeabi_fsub>
 8010588:	e7d9      	b.n	801053e <__kernel_sinf+0x86>
 801058a:	bf00      	nop
 801058c:	2f2ec9d3 	.word	0x2f2ec9d3
 8010590:	32d72f34 	.word	0x32d72f34
 8010594:	3638ef1b 	.word	0x3638ef1b
 8010598:	39500d01 	.word	0x39500d01
 801059c:	3c088889 	.word	0x3c088889
 80105a0:	3e2aaaab 	.word	0x3e2aaaab

080105a4 <atanf>:
 80105a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105a8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 80105ac:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 80105b0:	4604      	mov	r4, r0
 80105b2:	4680      	mov	r8, r0
 80105b4:	db0e      	blt.n	80105d4 <atanf+0x30>
 80105b6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80105ba:	dd04      	ble.n	80105c6 <atanf+0x22>
 80105bc:	4601      	mov	r1, r0
 80105be:	f7f0 fac5 	bl	8000b4c <__addsf3>
 80105c2:	4604      	mov	r4, r0
 80105c4:	e003      	b.n	80105ce <atanf+0x2a>
 80105c6:	2800      	cmp	r0, #0
 80105c8:	f300 80ce 	bgt.w	8010768 <atanf+0x1c4>
 80105cc:	4c67      	ldr	r4, [pc, #412]	; (801076c <atanf+0x1c8>)
 80105ce:	4620      	mov	r0, r4
 80105d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105d4:	4b66      	ldr	r3, [pc, #408]	; (8010770 <atanf+0x1cc>)
 80105d6:	429d      	cmp	r5, r3
 80105d8:	dc0e      	bgt.n	80105f8 <atanf+0x54>
 80105da:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 80105de:	da08      	bge.n	80105f2 <atanf+0x4e>
 80105e0:	4964      	ldr	r1, [pc, #400]	; (8010774 <atanf+0x1d0>)
 80105e2:	f7f0 fab3 	bl	8000b4c <__addsf3>
 80105e6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80105ea:	f7f0 fd73 	bl	80010d4 <__aeabi_fcmpgt>
 80105ee:	2800      	cmp	r0, #0
 80105f0:	d1ed      	bne.n	80105ce <atanf+0x2a>
 80105f2:	f04f 36ff 	mov.w	r6, #4294967295
 80105f6:	e01c      	b.n	8010632 <atanf+0x8e>
 80105f8:	f000 f8e0 	bl	80107bc <fabsf>
 80105fc:	4b5e      	ldr	r3, [pc, #376]	; (8010778 <atanf+0x1d4>)
 80105fe:	4604      	mov	r4, r0
 8010600:	429d      	cmp	r5, r3
 8010602:	dc7c      	bgt.n	80106fe <atanf+0x15a>
 8010604:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8010608:	429d      	cmp	r5, r3
 801060a:	dc67      	bgt.n	80106dc <atanf+0x138>
 801060c:	4601      	mov	r1, r0
 801060e:	f7f0 fa9d 	bl	8000b4c <__addsf3>
 8010612:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8010616:	f7f0 fa97 	bl	8000b48 <__aeabi_fsub>
 801061a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 801061e:	4605      	mov	r5, r0
 8010620:	4620      	mov	r0, r4
 8010622:	f7f0 fa93 	bl	8000b4c <__addsf3>
 8010626:	4601      	mov	r1, r0
 8010628:	4628      	mov	r0, r5
 801062a:	f7f0 fc4b 	bl	8000ec4 <__aeabi_fdiv>
 801062e:	2600      	movs	r6, #0
 8010630:	4604      	mov	r4, r0
 8010632:	4621      	mov	r1, r4
 8010634:	4620      	mov	r0, r4
 8010636:	f7f0 fb91 	bl	8000d5c <__aeabi_fmul>
 801063a:	4601      	mov	r1, r0
 801063c:	4607      	mov	r7, r0
 801063e:	f7f0 fb8d 	bl	8000d5c <__aeabi_fmul>
 8010642:	4605      	mov	r5, r0
 8010644:	494d      	ldr	r1, [pc, #308]	; (801077c <atanf+0x1d8>)
 8010646:	f7f0 fb89 	bl	8000d5c <__aeabi_fmul>
 801064a:	494d      	ldr	r1, [pc, #308]	; (8010780 <atanf+0x1dc>)
 801064c:	f7f0 fa7e 	bl	8000b4c <__addsf3>
 8010650:	4629      	mov	r1, r5
 8010652:	f7f0 fb83 	bl	8000d5c <__aeabi_fmul>
 8010656:	494b      	ldr	r1, [pc, #300]	; (8010784 <atanf+0x1e0>)
 8010658:	f7f0 fa78 	bl	8000b4c <__addsf3>
 801065c:	4629      	mov	r1, r5
 801065e:	f7f0 fb7d 	bl	8000d5c <__aeabi_fmul>
 8010662:	4949      	ldr	r1, [pc, #292]	; (8010788 <atanf+0x1e4>)
 8010664:	f7f0 fa72 	bl	8000b4c <__addsf3>
 8010668:	4629      	mov	r1, r5
 801066a:	f7f0 fb77 	bl	8000d5c <__aeabi_fmul>
 801066e:	4947      	ldr	r1, [pc, #284]	; (801078c <atanf+0x1e8>)
 8010670:	f7f0 fa6c 	bl	8000b4c <__addsf3>
 8010674:	4629      	mov	r1, r5
 8010676:	f7f0 fb71 	bl	8000d5c <__aeabi_fmul>
 801067a:	4945      	ldr	r1, [pc, #276]	; (8010790 <atanf+0x1ec>)
 801067c:	f7f0 fa66 	bl	8000b4c <__addsf3>
 8010680:	4639      	mov	r1, r7
 8010682:	f7f0 fb6b 	bl	8000d5c <__aeabi_fmul>
 8010686:	4943      	ldr	r1, [pc, #268]	; (8010794 <atanf+0x1f0>)
 8010688:	4607      	mov	r7, r0
 801068a:	4628      	mov	r0, r5
 801068c:	f7f0 fb66 	bl	8000d5c <__aeabi_fmul>
 8010690:	4941      	ldr	r1, [pc, #260]	; (8010798 <atanf+0x1f4>)
 8010692:	f7f0 fa59 	bl	8000b48 <__aeabi_fsub>
 8010696:	4629      	mov	r1, r5
 8010698:	f7f0 fb60 	bl	8000d5c <__aeabi_fmul>
 801069c:	493f      	ldr	r1, [pc, #252]	; (801079c <atanf+0x1f8>)
 801069e:	f7f0 fa53 	bl	8000b48 <__aeabi_fsub>
 80106a2:	4629      	mov	r1, r5
 80106a4:	f7f0 fb5a 	bl	8000d5c <__aeabi_fmul>
 80106a8:	493d      	ldr	r1, [pc, #244]	; (80107a0 <atanf+0x1fc>)
 80106aa:	f7f0 fa4d 	bl	8000b48 <__aeabi_fsub>
 80106ae:	4629      	mov	r1, r5
 80106b0:	f7f0 fb54 	bl	8000d5c <__aeabi_fmul>
 80106b4:	493b      	ldr	r1, [pc, #236]	; (80107a4 <atanf+0x200>)
 80106b6:	f7f0 fa47 	bl	8000b48 <__aeabi_fsub>
 80106ba:	4629      	mov	r1, r5
 80106bc:	f7f0 fb4e 	bl	8000d5c <__aeabi_fmul>
 80106c0:	4601      	mov	r1, r0
 80106c2:	4638      	mov	r0, r7
 80106c4:	f7f0 fa42 	bl	8000b4c <__addsf3>
 80106c8:	4621      	mov	r1, r4
 80106ca:	f7f0 fb47 	bl	8000d5c <__aeabi_fmul>
 80106ce:	1c73      	adds	r3, r6, #1
 80106d0:	4601      	mov	r1, r0
 80106d2:	d133      	bne.n	801073c <atanf+0x198>
 80106d4:	4620      	mov	r0, r4
 80106d6:	f7f0 fa37 	bl	8000b48 <__aeabi_fsub>
 80106da:	e772      	b.n	80105c2 <atanf+0x1e>
 80106dc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80106e0:	f7f0 fa32 	bl	8000b48 <__aeabi_fsub>
 80106e4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80106e8:	4605      	mov	r5, r0
 80106ea:	4620      	mov	r0, r4
 80106ec:	f7f0 fa2e 	bl	8000b4c <__addsf3>
 80106f0:	4601      	mov	r1, r0
 80106f2:	4628      	mov	r0, r5
 80106f4:	f7f0 fbe6 	bl	8000ec4 <__aeabi_fdiv>
 80106f8:	2601      	movs	r6, #1
 80106fa:	4604      	mov	r4, r0
 80106fc:	e799      	b.n	8010632 <atanf+0x8e>
 80106fe:	4b2a      	ldr	r3, [pc, #168]	; (80107a8 <atanf+0x204>)
 8010700:	429d      	cmp	r5, r3
 8010702:	dc14      	bgt.n	801072e <atanf+0x18a>
 8010704:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8010708:	f7f0 fa1e 	bl	8000b48 <__aeabi_fsub>
 801070c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8010710:	4605      	mov	r5, r0
 8010712:	4620      	mov	r0, r4
 8010714:	f7f0 fb22 	bl	8000d5c <__aeabi_fmul>
 8010718:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 801071c:	f7f0 fa16 	bl	8000b4c <__addsf3>
 8010720:	4601      	mov	r1, r0
 8010722:	4628      	mov	r0, r5
 8010724:	f7f0 fbce 	bl	8000ec4 <__aeabi_fdiv>
 8010728:	2602      	movs	r6, #2
 801072a:	4604      	mov	r4, r0
 801072c:	e781      	b.n	8010632 <atanf+0x8e>
 801072e:	4601      	mov	r1, r0
 8010730:	481e      	ldr	r0, [pc, #120]	; (80107ac <atanf+0x208>)
 8010732:	f7f0 fbc7 	bl	8000ec4 <__aeabi_fdiv>
 8010736:	2603      	movs	r6, #3
 8010738:	4604      	mov	r4, r0
 801073a:	e77a      	b.n	8010632 <atanf+0x8e>
 801073c:	4b1c      	ldr	r3, [pc, #112]	; (80107b0 <atanf+0x20c>)
 801073e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8010742:	f7f0 fa01 	bl	8000b48 <__aeabi_fsub>
 8010746:	4621      	mov	r1, r4
 8010748:	f7f0 f9fe 	bl	8000b48 <__aeabi_fsub>
 801074c:	4b19      	ldr	r3, [pc, #100]	; (80107b4 <atanf+0x210>)
 801074e:	4601      	mov	r1, r0
 8010750:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010754:	f7f0 f9f8 	bl	8000b48 <__aeabi_fsub>
 8010758:	f1b8 0f00 	cmp.w	r8, #0
 801075c:	4604      	mov	r4, r0
 801075e:	f6bf af36 	bge.w	80105ce <atanf+0x2a>
 8010762:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8010766:	e72c      	b.n	80105c2 <atanf+0x1e>
 8010768:	4c13      	ldr	r4, [pc, #76]	; (80107b8 <atanf+0x214>)
 801076a:	e730      	b.n	80105ce <atanf+0x2a>
 801076c:	bfc90fdb 	.word	0xbfc90fdb
 8010770:	3edfffff 	.word	0x3edfffff
 8010774:	7149f2ca 	.word	0x7149f2ca
 8010778:	3f97ffff 	.word	0x3f97ffff
 801077c:	3c8569d7 	.word	0x3c8569d7
 8010780:	3d4bda59 	.word	0x3d4bda59
 8010784:	3d886b35 	.word	0x3d886b35
 8010788:	3dba2e6e 	.word	0x3dba2e6e
 801078c:	3e124925 	.word	0x3e124925
 8010790:	3eaaaaab 	.word	0x3eaaaaab
 8010794:	bd15a221 	.word	0xbd15a221
 8010798:	3d6ef16b 	.word	0x3d6ef16b
 801079c:	3d9d8795 	.word	0x3d9d8795
 80107a0:	3de38e38 	.word	0x3de38e38
 80107a4:	3e4ccccd 	.word	0x3e4ccccd
 80107a8:	401bffff 	.word	0x401bffff
 80107ac:	bf800000 	.word	0xbf800000
 80107b0:	08011428 	.word	0x08011428
 80107b4:	08011418 	.word	0x08011418
 80107b8:	3fc90fdb 	.word	0x3fc90fdb

080107bc <fabsf>:
 80107bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80107c0:	4770      	bx	lr
	...

080107c4 <floorf>:
 80107c4:	b570      	push	{r4, r5, r6, lr}
 80107c6:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 80107ca:	3d7f      	subs	r5, #127	; 0x7f
 80107cc:	2d16      	cmp	r5, #22
 80107ce:	4601      	mov	r1, r0
 80107d0:	4604      	mov	r4, r0
 80107d2:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 80107d6:	dc26      	bgt.n	8010826 <floorf+0x62>
 80107d8:	2d00      	cmp	r5, #0
 80107da:	da0e      	bge.n	80107fa <floorf+0x36>
 80107dc:	4917      	ldr	r1, [pc, #92]	; (801083c <floorf+0x78>)
 80107de:	f7f0 f9b5 	bl	8000b4c <__addsf3>
 80107e2:	2100      	movs	r1, #0
 80107e4:	f7f0 fc76 	bl	80010d4 <__aeabi_fcmpgt>
 80107e8:	b128      	cbz	r0, 80107f6 <floorf+0x32>
 80107ea:	2c00      	cmp	r4, #0
 80107ec:	da23      	bge.n	8010836 <floorf+0x72>
 80107ee:	4b14      	ldr	r3, [pc, #80]	; (8010840 <floorf+0x7c>)
 80107f0:	2e00      	cmp	r6, #0
 80107f2:	bf18      	it	ne
 80107f4:	461c      	movne	r4, r3
 80107f6:	4621      	mov	r1, r4
 80107f8:	e01b      	b.n	8010832 <floorf+0x6e>
 80107fa:	4e12      	ldr	r6, [pc, #72]	; (8010844 <floorf+0x80>)
 80107fc:	412e      	asrs	r6, r5
 80107fe:	4230      	tst	r0, r6
 8010800:	d017      	beq.n	8010832 <floorf+0x6e>
 8010802:	490e      	ldr	r1, [pc, #56]	; (801083c <floorf+0x78>)
 8010804:	f7f0 f9a2 	bl	8000b4c <__addsf3>
 8010808:	2100      	movs	r1, #0
 801080a:	f7f0 fc63 	bl	80010d4 <__aeabi_fcmpgt>
 801080e:	2800      	cmp	r0, #0
 8010810:	d0f1      	beq.n	80107f6 <floorf+0x32>
 8010812:	2c00      	cmp	r4, #0
 8010814:	bfbe      	ittt	lt
 8010816:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 801081a:	fa43 f505 	asrlt.w	r5, r3, r5
 801081e:	1964      	addlt	r4, r4, r5
 8010820:	ea24 0406 	bic.w	r4, r4, r6
 8010824:	e7e7      	b.n	80107f6 <floorf+0x32>
 8010826:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 801082a:	d302      	bcc.n	8010832 <floorf+0x6e>
 801082c:	f7f0 f98e 	bl	8000b4c <__addsf3>
 8010830:	4601      	mov	r1, r0
 8010832:	4608      	mov	r0, r1
 8010834:	bd70      	pop	{r4, r5, r6, pc}
 8010836:	2400      	movs	r4, #0
 8010838:	e7dd      	b.n	80107f6 <floorf+0x32>
 801083a:	bf00      	nop
 801083c:	7149f2ca 	.word	0x7149f2ca
 8010840:	bf800000 	.word	0xbf800000
 8010844:	007fffff 	.word	0x007fffff

08010848 <_exit>:
 8010848:	e7fe      	b.n	8010848 <_exit>
	...

0801084c <_init>:
 801084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801084e:	bf00      	nop
 8010850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010852:	bc08      	pop	{r3}
 8010854:	469e      	mov	lr, r3
 8010856:	4770      	bx	lr

08010858 <_fini>:
 8010858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801085a:	bf00      	nop
 801085c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801085e:	bc08      	pop	{r3}
 8010860:	469e      	mov	lr, r3
 8010862:	4770      	bx	lr
